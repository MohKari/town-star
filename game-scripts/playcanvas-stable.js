/**
 * @license
 * PlayCanvas Engine v1.50.2 revision db39f193d
 * Copyright 2011-2021 PlayCanvas Ltd. All rights reserved.
 */
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).pc = {})
}(this, (function(t) {
    "use strict";
    Array.prototype.fill || Object.defineProperty(Array.prototype, "fill", {
        value: function(t) {
            if (null == this)
                throw new TypeError("this is null or not defined");
            for (var e = Object(this), i = e.length >>> 0, n = arguments[1], s = n >> 0, a = s < 0 ? Math.max(i + s, 0) : Math.min(s, i), r = arguments[2], o = void 0 === r ? i : r >> 0, h = o < 0 ? Math.max(i + o, 0) : Math.min(o, i); a < h; )
                e[a] = t,
                a++;
            return e
        }
    }),
    Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
        value: function(t) {
            if (null == this)
                throw TypeError('"this" is null or not defined');
            var e = Object(this)
              , i = e.length >>> 0;
            if ("function" != typeof t)
                throw TypeError("predicate must be a function");
            for (var n = arguments[1], s = 0; s < i; ) {
                var a = e[s];
                if (t.call(n, a, s, e))
                    return a;
                s++
            }
        },
        configurable: !0,
        writable: !0
    }),
    Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {
        value: function(t) {
            if (null == this)
                throw new TypeError('"this" is null or not defined');
            var e = Object(this)
              , i = e.length >>> 0;
            if ("function" != typeof t)
                throw new TypeError("predicate must be a function");
            for (var n = arguments[1], s = 0; s < i; ) {
                var a = e[s];
                if (t.call(n, a, s, e))
                    return s;
                s++
            }
            return -1
        },
        configurable: !0,
        writable: !0
    }),
    Math.log2 = Math.log2 || function(t) {
        return Math.log(t) * Math.LOG2E
    }
    ,
    Math.sign || (Math.sign = function(t) {
        return (t > 0) - (t < 0) || +t
    }
    ),
    void 0 === Number.isFinite && (Number.isFinite = function(t) {
        return "number" == typeof t && isFinite(t)
    }
    ),
    "function" != typeof Object.assign && Object.defineProperty(Object, "assign", {
        value: function(t, e) {
            if (null == t)
                throw new TypeError("Cannot convert undefined or null to object");
            for (var i = Object(t), n = 1; n < arguments.length; n++) {
                var s = arguments[n];
                if (null != s)
                    for (var a in s)
                        Object.prototype.hasOwnProperty.call(s, a) && (i[a] = s[a])
            }
            return i
        },
        writable: !0,
        configurable: !0
    }),
    function() {
        if ("undefined" != typeof navigator && "undefined" != typeof document) {
            navigator.pointer = navigator.pointer || navigator.webkitPointer || navigator.mozPointer;
            var t = function() {
                var t = document.createEvent("CustomEvent");
                t.initCustomEvent("pointerlockchange", !0, !1, null),
                document.dispatchEvent(t)
            }
              , e = function() {
                var t = document.createEvent("CustomEvent");
                t.initCustomEvent("pointerlockerror", !0, !1, null),
                document.dispatchEvent(t)
            };
            document.addEventListener("webkitpointerlockchange", t, !1),
            document.addEventListener("webkitpointerlocklost", t, !1),
            document.addEventListener("mozpointerlockchange", t, !1),
            document.addEventListener("mozpointerlocklost", t, !1),
            document.addEventListener("webkitpointerlockerror", e, !1),
            document.addEventListener("mozpointerlockerror", e, !1),
            Element.prototype.mozRequestPointerLock ? Element.prototype.requestPointerLock = function() {
                this.mozRequestPointerLock()
            }
            : Element.prototype.requestPointerLock = Element.prototype.requestPointerLock || Element.prototype.webkitRequestPointerLock || Element.prototype.mozRequestPointerLock,
            !Element.prototype.requestPointerLock && navigator.pointer && (Element.prototype.requestPointerLock = function() {
                document.pointerLockElement = this,
                navigator.pointer.lock(this, t, e)
            }
            ),
            document.exitPointerLock = document.exitPointerLock || document.webkitExitPointerLock || document.mozExitPointerLock,
            document.exitPointerLock || (document.exitPointerLock = function() {
                navigator.pointer && (document.pointerLockElement = null,
                navigator.pointer.unlock())
            }
            )
        }
    }(),
    function() {
        if ("undefined" != typeof window) {
            for (var t = 0, e = ["ms", "moz", "webkit", "o"], i = 0; i < e.length && !window.requestAnimationFrame; ++i)
                window.requestAnimationFrame = window[e[i] + "RequestAnimationFrame"],
                window.cancelAnimationFrame = window[e[i] + "CancelAnimationFrame"] || window[e[i] + "CancelRequestAnimationFrame"];
            window.requestAnimationFrame || (window.requestAnimationFrame = function(e, i) {
                var n = (new Date).getTime()
                  , s = Math.max(0, 16 - (n - t))
                  , a = window.setTimeout((function() {
                    e(n + s)
                }
                ), s);
                return t = n + s,
                a
            }
            ),
            window.cancelAnimationFrame || (window.cancelAnimationFrame = function(t) {
                clearTimeout(t)
            }
            )
        }
    }(),
    String.prototype.endsWith || (String.prototype.endsWith = function(t, e) {
        return (void 0 === e || e > this.length) && (e = this.length),
        this.substring(e - t.length, e) === t
    }
    ),
    String.prototype.includes || (String.prototype.includes = function(t, e) {
        return "number" != typeof e && (e = 0),
        !(e + t.length > this.length) && -1 !== this.indexOf(t, e)
    }
    ),
    String.prototype.startsWith || (String.prototype.startsWith = function(t, e) {
        return this.substr(!e || e < 0 ? 0 : +e, t.length) === t
    }
    ),
    Int8Array.prototype.fill || (Int8Array.prototype.fill = Array.prototype.fill),
    Uint8Array.prototype.fill || (Uint8Array.prototype.fill = Array.prototype.fill),
    Uint8ClampedArray.prototype.fill || (Uint8ClampedArray.prototype.fill = Array.prototype.fill),
    Int16Array.prototype.fill || (Int16Array.prototype.fill = Array.prototype.fill),
    Uint16Array.prototype.fill || (Uint16Array.prototype.fill = Array.prototype.fill),
    Int32Array.prototype.fill || (Int32Array.prototype.fill = Array.prototype.fill),
    Uint32Array.prototype.fill || (Uint32Array.prototype.fill = Array.prototype.fill),
    Float32Array.prototype.fill || (Float32Array.prototype.fill = Array.prototype.fill);
    var e = {};
    function i(t, i) {
        var n;
        e[t] = !0,
        void 0 !== i && (n = i,
        window.console && window.console.error && window.console.error(n))
    }
    var n = function t(e) {
        var i = e.gl;
        this.ext = e,
        this.isAlive = !0,
        this.hasBeenBound = !1,
        this.elementArrayBuffer = null,
        this.attribs = new Array(e.maxVertexAttribs);
        for (var n = 0; n < this.attribs.length; n++) {
            var s = new t.VertexAttrib(i);
            this.attribs[n] = s
        }
        this.maxAttrib = 0
    };
    (n.VertexAttrib = function(t) {
        this.enabled = !1,
        this.buffer = null,
        this.size = 4,
        this.type = t.FLOAT,
        this.normalized = !1,
        this.stride = 16,
        this.offset = 0,
        this.cached = "",
        this.recache()
    }
    ).prototype.recache = function() {
        this.cached = [this.size, this.type, this.normalized, this.stride, this.offset].join(":")
    }
    ;
    var s = function(t) {
        var i = this;
        this.gl = t,
        function(t) {
            var i = t.getError;
            t.getError = function() {
                do {
                    (n = i.apply(t)) != t.NO_ERROR && (e[n] = !0)
                } while (n != t.NO_ERROR);
                for (var n in e)
                    if (e[n])
                        return delete e[n],
                        parseInt(n);
                return t.NO_ERROR
            }
        }(t);
        var n = this.original = {
            getParameter: t.getParameter,
            enableVertexAttribArray: t.enableVertexAttribArray,
            disableVertexAttribArray: t.disableVertexAttribArray,
            bindBuffer: t.bindBuffer,
            getVertexAttrib: t.getVertexAttrib,
            vertexAttribPointer: t.vertexAttribPointer
        };
        t.getParameter = function(t) {
            return t == i.VERTEX_ARRAY_BINDING_OES ? i.currentVertexArrayObject == i.defaultVertexArrayObject ? null : i.currentVertexArrayObject : n.getParameter.apply(this, arguments)
        }
        ,
        t.enableVertexAttribArray = function(t) {
            var e = i.currentVertexArrayObject;
            e.maxAttrib = Math.max(e.maxAttrib, t);
            var s = e.attribs[t];
            return s.enabled = !0,
            n.enableVertexAttribArray.apply(this, arguments)
        }
        ,
        t.disableVertexAttribArray = function(t) {
            var e = i.currentVertexArrayObject;
            e.maxAttrib = Math.max(e.maxAttrib, t);
            var s = e.attribs[t];
            return s.enabled = !1,
            n.disableVertexAttribArray.apply(this, arguments)
        }
        ,
        t.bindBuffer = function(e, s) {
            switch (e) {
            case t.ARRAY_BUFFER:
                i.currentArrayBuffer = s;
                break;
            case t.ELEMENT_ARRAY_BUFFER:
                i.currentVertexArrayObject.elementArrayBuffer = s
            }
            return n.bindBuffer.apply(this, arguments)
        }
        ,
        t.getVertexAttrib = function(e, s) {
            var a = i.currentVertexArrayObject
              , r = a.attribs[e];
            switch (s) {
            case t.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:
                return r.buffer;
            case t.VERTEX_ATTRIB_ARRAY_ENABLED:
                return r.enabled;
            case t.VERTEX_ATTRIB_ARRAY_SIZE:
                return r.size;
            case t.VERTEX_ATTRIB_ARRAY_STRIDE:
                return r.stride;
            case t.VERTEX_ATTRIB_ARRAY_TYPE:
                return r.type;
            case t.VERTEX_ATTRIB_ARRAY_NORMALIZED:
                return r.normalized;
            default:
                return n.getVertexAttrib.apply(this, arguments)
            }
        }
        ,
        t.vertexAttribPointer = function(t, e, s, a, r, o) {
            var h = i.currentVertexArrayObject;
            h.maxAttrib = Math.max(h.maxAttrib, t);
            var l = h.attribs[t];
            return l.buffer = i.currentArrayBuffer,
            l.size = e,
            l.type = s,
            l.normalized = a,
            l.stride = r,
            l.offset = o,
            l.recache(),
            n.vertexAttribPointer.apply(this, arguments)
        }
        ,
        t.instrumentExtension && t.instrumentExtension(this, "OES_vertex_array_object"),
        t.canvas.addEventListener("webglcontextrestored", (function() {
            var t;
            t = "OESVertexArrayObject emulation library context restored",
            window.console && window.console.log && window.console.log(t),
            i.reset_()
        }
        ), !0),
        this.reset_()
    };
    s.prototype.VERTEX_ARRAY_BINDING_OES = 34229,
    s.prototype.reset_ = function() {
        if (void 0 !== this.vertexArrayObjects)
            for (var t = 0; t < this.vertexArrayObjects.length; ++t)
                this.vertexArrayObjects.isAlive = !1;
        var e = this.gl;
        this.maxVertexAttribs = e.getParameter(e.MAX_VERTEX_ATTRIBS),
        this.defaultVertexArrayObject = new n(this),
        this.currentVertexArrayObject = null,
        this.currentArrayBuffer = null,
        this.vertexArrayObjects = [this.defaultVertexArrayObject],
        this.bindVertexArrayOES(null)
    }
    ,
    s.prototype.createVertexArrayOES = function() {
        var t = new n(this);
        return this.vertexArrayObjects.push(t),
        t
    }
    ,
    s.prototype.deleteVertexArrayOES = function(t) {
        t.isAlive = !1,
        this.vertexArrayObjects.splice(this.vertexArrayObjects.indexOf(t), 1),
        this.currentVertexArrayObject == t && this.bindVertexArrayOES(null)
    }
    ,
    s.prototype.isVertexArrayOES = function(t) {
        return !!(t && t instanceof n && t.hasBeenBound && t.ext == this)
    }
    ,
    s.prototype.bindVertexArrayOES = function(t) {
        var e = this.gl;
        if (!t || t.isAlive) {
            var n = this.original
              , s = this.currentVertexArrayObject;
            this.currentVertexArrayObject = t || this.defaultVertexArrayObject,
            this.currentVertexArrayObject.hasBeenBound = !0;
            var a = this.currentVertexArrayObject;
            if (s != a) {
                s && a.elementArrayBuffer == s.elementArrayBuffer || n.bindBuffer.call(e, e.ELEMENT_ARRAY_BUFFER, a.elementArrayBuffer);
                for (var r = this.currentArrayBuffer, o = Math.max(s ? s.maxAttrib : 0, a.maxAttrib), h = 0; h <= o; h++) {
                    var l = a.attribs[h]
                      , c = s ? s.attribs[h] : null;
                    if (s && l.enabled == c.enabled || (l.enabled ? n.enableVertexAttribArray.call(e, h) : n.disableVertexAttribArray.call(e, h)),
                    l.enabled) {
                        var u = !1;
                        s && l.buffer == c.buffer || (r != l.buffer && (n.bindBuffer.call(e, e.ARRAY_BUFFER, l.buffer),
                        r = l.buffer),
                        u = !0),
                        (u || l.cached != c.cached) && n.vertexAttribPointer.call(e, h, l.size, l.type, l.normalized, l.stride, l.offset)
                    }
                }
                this.currentArrayBuffer != r && n.bindBuffer.call(e, e.ARRAY_BUFFER, this.currentArrayBuffer)
            }
        } else
            i(e.INVALID_OPERATION, "bindVertexArrayOES: attempt to bind deleted arrayObject")
    }
    ;
    var a = function() {
        for (var t = {}, e = ["Array", "Object", "Function", "Date", "RegExp", "Float32Array"], i = 0; i < e.length; i++)
            t["[object " + e[i] + "]"] = e[i].toLowerCase();
        return t
    }()
      , r = "1.50.2"
      , o = "db39f193d";
    function h(t) {
        if (null === t)
            return "null";
        var e = typeof t;
        return "undefined" === e || "number" === e || "string" === e || "boolean" === e ? e : a[Object.prototype.toString.call(t)]
    }
    function l(t, e) {
        for (var i in e) {
            var n = e[i];
            "object" === h(n) ? t[i] = l({}, n) : "array" === h(n) ? t[i] = l([], n) : t[i] = n
        }
        return t
    }
    function c(t) {
        return undefined !== t
    }
    var u = function() {
        function t() {
            this.initEventHandler()
        }
        var e = t.prototype;
        return e.initEventHandler = function() {
            this._callbacks = {},
            this._callbackActive = {}
        }
        ,
        e._addCallback = function(t, e, i, n) {
            void 0 === n && (n = !1),
            t && "string" == typeof t && e && (this._callbacks[t] || (this._callbacks[t] = []),
            this._callbackActive[t] && this._callbackActive[t] === this._callbacks[t] && (this._callbackActive[t] = this._callbackActive[t].slice()),
            this._callbacks[t].push({
                callback: e,
                scope: i || this,
                once: n
            }))
        }
        ,
        e.on = function(t, e, i) {
            return this._addCallback(t, e, i, !1),
            this
        }
        ,
        e.off = function(t, e, i) {
            if (t)
                this._callbackActive[t] && this._callbackActive[t] === this._callbacks[t] && (this._callbackActive[t] = this._callbackActive[t].slice());
            else
                for (var n in this._callbackActive)
                    this._callbacks[n] && this._callbacks[n] === this._callbackActive[n] && (this._callbackActive[n] = this._callbackActive[n].slice());
            if (t)
                if (e) {
                    var s = this._callbacks[t];
                    if (!s)
                        return this;
                    for (var a = s.length, r = 0; r < a; r++)
                        s[r].callback === e && (i && s[r].scope !== i || (s[r--] = s[--a]));
                    s.length = a
                } else
                    this._callbacks[t] && (this._callbacks[t] = []);
            else
                this._callbacks = {};
            return this
        }
        ,
        e.fire = function(t, e, i, n, s, a, r, o, h) {
            if (!t || !this._callbacks[t])
                return this;
            var l;
            this._callbackActive[t] ? (this._callbackActive[t] === this._callbacks[t] && (this._callbackActive[t] = this._callbackActive[t].slice()),
            l = this._callbacks[t].slice()) : this._callbackActive[t] = this._callbacks[t];
            for (var c = 0; (l || this._callbackActive[t]) && c < (l || this._callbackActive[t]).length; c++) {
                var u = (l || this._callbackActive[t])[c];
                if (u.callback.call(u.scope, e, i, n, s, a, r, o, h),
                u.once) {
                    var d = this._callbacks[t]
                      , f = d ? d.indexOf(u) : -1;
                    -1 !== f && (this._callbackActive[t] === d && (this._callbackActive[t] = this._callbackActive[t].slice()),
                    this._callbacks[t].splice(f, 1))
                }
            }
            return l || (this._callbackActive[t] = null),
            this
        }
        ,
        e.once = function(t, e, i) {
            return this._addCallback(t, e, i, !0),
            this
        }
        ,
        e.hasEvent = function(t) {
            return this._callbacks[t] && 0 !== this._callbacks[t].length || !1
        }
        ,
        t
    }()
      , d = {
        attach: function(t) {
            var e = d;
            return t._addCallback = e._addCallback,
            t.on = e.on,
            t.off = e.off,
            t.fire = e.fire,
            t.once = e.once,
            t.hasEvent = e.hasEvent,
            t._callbacks = {},
            t._callbackActive = {},
            t
        },
        _addCallback: u.prototype._addCallback,
        on: u.prototype.on,
        off: u.prototype.off,
        fire: u.prototype.fire,
        once: u.prototype.once,
        hasEvent: u.prototype.hasEvent
    }
      , f = {
        create: function() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(t) {
                var e = 16 * Math.random() | 0;
                return ("x" === t ? e : 3 & e | 8).toString(16)
            }
            ))
        }
    }
      , p = {
        delimiter: "/",
        join: function() {
            for (var t = arguments.length, e = arguments[0], i = 0; i < t - 1; ++i) {
                var n = arguments[i]
                  , s = arguments[i + 1];
                if (!c(n) || !c(s))
                    throw new Error("undefined argument to pc.path.join");
                s[0] !== p.delimiter ? n && s && n[n.length - 1] !== p.delimiter && s[0] !== p.delimiter ? e += p.delimiter + s : e += s : e = s
            }
            return e
        },
        normalize: function(t) {
            for (var e = t.startsWith(p.delimiter), i = t.endsWith(p.delimiter), n = t.split("/"), s = "", a = [], r = 0; r < n.length; r++)
                "" !== n[r] && "." !== n[r] && (".." === n[r] && a.length > 0 ? a = a.slice(0, a.length - 2) : (r > 0 && a.push(p.delimiter),
                a.push(n[r])));
            return s = a.join(""),
            e || s[0] !== p.delimiter || (s = s.slice(1)),
            i && s[s.length - 1] !== p.delimiter && (s += p.delimiter),
            s
        },
        split: function(t) {
            var e = t.split(p.delimiter)
              , i = e.slice(e.length - 1)[0];
            return [e.slice(0, e.length - 1).join(p.delimiter), i]
        },
        getBasename: function(t) {
            return p.split(t)[1]
        },
        getDirectory: function(t) {
            var e = t.split(p.delimiter);
            return e.slice(0, e.length - 1).join(p.delimiter)
        },
        getExtension: function(t) {
            var e = t.split("?")[0].split(".").pop();
            return e !== t ? "." + e : ""
        },
        isRelativePath: function(t) {
            return "/" !== t.charAt(0) && null === t.match(/:\/\//)
        },
        extractPath: function(t) {
            var e = ""
              , i = t.split("/")
              , n = 0;
            if (i.length > 1)
                if (p.isRelativePath(t))
                    if ("." === i[0])
                        for (n = 0; n < i.length - 1; ++n)
                            e += 0 === n ? i[n] : "/" + i[n];
                    else if (".." === i[0])
                        for (n = 0; n < i.length - 1; ++n)
                            e += 0 === n ? i[n] : "/" + i[n];
                    else
                        for (e = ".",
                        n = 0; n < i.length - 1; ++n)
                            e += "/" + i[n];
                else
                    for (n = 0; n < i.length - 1; ++n)
                        e += 0 === n ? i[n] : "/" + i[n];
            return e
        }
    }
      , m = !1
      , _ = !1
      , g = !1
      , v = !1
      , y = !1
      , x = !1
      , b = !1
      , S = !1
      , T = !1
      , w = !1;
    if ("undefined" != typeof navigator) {
        var M = navigator.userAgent;
        /(windows|mac os|linux|cros)/i.test(M) && (m = !0),
        /xbox/i.test(M) && (v = !0),
        /(windows phone|iemobile|wpdesktop)/i.test(M) ? (m = !1,
        _ = !0,
        g = !0) : /android/i.test(M) ? (m = !1,
        _ = !0,
        y = !0) : /ip([ao]d|hone)/i.test(M) && (m = !1,
        _ = !0,
        x = !0),
        "undefined" != typeof window && (b = "ontouchstart"in window || "maxTouchPoints"in navigator && navigator.maxTouchPoints > 0),
        S = "getGamepads"in navigator,
        T = "undefined" != typeof Worker;
        try {
            var A = Object.defineProperty({}, "passive", {
                get: function() {
                    return w = !0,
                    !1
                }
            });
            window.addEventListener("testpassive", null, A),
            window.removeEventListener("testpassive", null, A)
        } catch (t) {}
    }
    var C = "undefined" != typeof window ? "browser" : "node"
      , E = {
        environment: C,
        global: "browser" === C ? window : global,
        browser: "browser" === C,
        desktop: m,
        mobile: _,
        ios: x,
        android: y,
        windows: g,
        xbox: v,
        gamepads: S,
        touch: b,
        workers: T,
        passiveEvents: w
    }
      , P = "abcdefghijklmnopqrstuvwxyz"
      , R = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      , I = 55296
      , L = 127462
      , D = 127487
      , k = 65024
      , O = 65039;
    function F(t, e) {
        void 0 === e && (e = 0);
        var i = t.length;
        if (e < 0 || e >= i)
            return null;
        var n = t.charCodeAt(e);
        if (i > 1 && n >= I && n <= 56319) {
            var s = t.charCodeAt(e + 1);
            if (s >= 56320 && s <= 57343)
                return {
                    code: 1024 * (n - I) + s - 56320 + 65536,
                    long: !0
                }
        }
        return {
            code: n,
            long: !1
        }
    }
    function B(t, e, i) {
        if (!t)
            return !1;
        var n = F(t);
        if (n) {
            var s = n.code;
            return s >= e && s <= i
        }
        return !1
    }
    function N(t, e) {
        if (e === t.length - 1)
            return 1;
        if (B(t[e], I, 56319)) {
            var i = t.substring(e, e + 2)
              , n = t.substring(e + 2, e + 4);
            return B(n, 127995, 127999) || B(i, L, D) && B(n, L, D) ? 4 : B(n, k, O) ? 3 : 2
        }
        return B(t[e + 1], k, O) ? 2 : 1
    }
    var U = {
        ASCII_LOWERCASE: P,
        ASCII_UPPERCASE: R,
        ASCII_LETTERS: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        format: function(t) {
            for (var e = 1; e < arguments.length; e++)
                t = t.replace("{" + (e - 1) + "}", arguments[e]);
            return t
        },
        toBool: function(t, e) {
            if (void 0 === e && (e = !1),
            "true" === t)
                return !0;
            if (e) {
                if ("false" === t)
                    return !1;
                throw new TypeError("Not a boolean string")
            }
            return !1
        },
        getCodePoint: function(t, e) {
            var i = F(t, e);
            return i && i.code
        },
        getCodePoints: function(t) {
            if ("string" != typeof t)
                throw new TypeError("Not a string");
            for (var e, i = 0, n = []; e = F(t, i); )
                n.push(e.code),
                i += e.long ? 2 : 1;
            return n
        },
        getSymbols: function(t) {
            if ("string" != typeof t)
                throw new TypeError("Not a string");
            for (var e, i = 0, n = t.length, s = [], a = 0; i < n; )
                if (B(e = t[i + (a += N(t, i + a))], 8400, 8447) && (e = t[i + a++]),
                B(e, k, O) && (e = t[i + a++]),
                e && 8205 === e.charCodeAt(0))
                    e = t[i + a++];
                else {
                    var r = t.substring(i, i + a);
                    s.push(r),
                    i += a,
                    a = 0
                }
            return s
        },
        fromCodePoint: function() {
            for (var t, e, i, n = [], s = 0; s < arguments.length; ++s)
                e = (t = Number(arguments[s])) - 65536,
                i = t > 65535 ? [55296 + (e >> 10), e % 1024 + 56320] : [t],
                n.push(String.fromCharCode.apply(null, i));
            return n.join("")
        }
    }
      , z = function() {
        function t() {
            this._list = [],
            this._index = {}
        }
        var e = t.prototype;
        return e.push = function(t, e) {
            if (this._index[t])
                throw Error("Key already in index " + t);
            var i = this._list.push(e) - 1;
            this._index[t] = i
        }
        ,
        e.has = function(t) {
            return void 0 !== this._index[t]
        }
        ,
        e.get = function(t) {
            var e = this._index[t];
            return void 0 !== e ? this._list[e] : null
        }
        ,
        e.remove = function(t) {
            var e = this._index[t];
            if (void 0 !== e) {
                for (t in this._list.splice(e, 1),
                delete this._index[t],
                this._index) {
                    var i = this._index[t];
                    i > e && (this._index[t] = i - 1)
                }
                return !0
            }
            return !1
        }
        ,
        e.list = function() {
            return this._list
        }
        ,
        e.clear = function() {
            for (var t in this._list.length = 0,
            this._index)
                delete this._index[t]
        }
        ,
        t
    }();
    function V(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1,
            n.configurable = !0,
            "value"in n && (n.writable = !0),
            Object.defineProperty(t, n.key, n)
        }
    }
    function G(t, e, i) {
        return e && V(t.prototype, e),
        i && V(t, i),
        t
    }
    function W() {
        return (W = Object.assign || function(t) {
            for (var e = 1; e < arguments.length; e++) {
                var i = arguments[e];
                for (var n in i)
                    Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n])
            }
            return t
        }
        ).apply(this, arguments)
    }
    function H(t, e) {
        t.prototype = Object.create(e.prototype),
        t.prototype.constructor = t,
        X(t, e)
    }
    function X(t, e) {
        return (X = Object.setPrototypeOf || function(t, e) {
            return t.__proto__ = e,
            t
        }
        )(t, e)
    }
    function j(t) {
        if (void 0 === t)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t
    }
    function q(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, n = new Array(e); i < e; i++)
            n[i] = t[i];
        return n
    }
    function Y(t, e) {
        var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
        if (i)
            return (i = i.call(t)).next.bind(i);
        if (Array.isArray(t) || (i = function(t, e) {
            if (t) {
                if ("string" == typeof t)
                    return q(t, e);
                var i = Object.prototype.toString.call(t).slice(8, -1);
                return "Object" === i && t.constructor && (i = t.constructor.name),
                "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? q(t, e) : void 0
            }
        }(t)) || e && t && "number" == typeof t.length) {
            i && (t = i);
            var n = 0;
            return function() {
                return n >= t.length ? {
                    done: !0
                } : {
                    done: !1,
                    value: t[n++]
                }
            }
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
    }
    var K = function() {
        function t(t) {
            this.arraybuffer = t,
            this.dataView = new DataView(t),
            this.offset = 0,
            this.stack = []
        }
        var e = t.prototype;
        return e.reset = function(t) {
            void 0 === t && (t = 0),
            this.offset = t
        }
        ,
        e.skip = function(t) {
            this.offset += t
        }
        ,
        e.align = function(t) {
            this.offset = this.offset + t - 1 & ~(t - 1)
        }
        ,
        e._inc = function(t) {
            return this.offset += t,
            this.offset - t
        }
        ,
        e.readChar = function() {
            return String.fromCharCode(this.dataView.getUint8(this.offset++))
        }
        ,
        e.readChars = function(t) {
            for (var e = "", i = 0; i < t; ++i)
                e += this.readChar();
            return e
        }
        ,
        e.readU8 = function() {
            return this.dataView.getUint8(this.offset++)
        }
        ,
        e.readU16 = function() {
            return this.dataView.getUint16(this._inc(2), !0)
        }
        ,
        e.readU32 = function() {
            return this.dataView.getUint32(this._inc(4), !0)
        }
        ,
        e.readU64 = function() {
            return this.readU32() + Math.pow(2, 32) * this.readU32()
        }
        ,
        e.readU32be = function() {
            return this.dataView.getUint32(this._inc(4), !1)
        }
        ,
        e.readArray = function(t) {
            for (var e = 0; e < t.length; ++e)
                t[e] = this.readU8()
        }
        ,
        e.readLine = function() {
            for (var t = this.dataView, e = ""; !(this.offset >= t.byteLength); ) {
                var i = String.fromCharCode(this.readU8());
                if ("\n" === i)
                    break;
                e += i
            }
            return e
        }
        ,
        G(t, [{
            key: "remainingBytes",
            get: function() {
                return this.dataView.byteLength - this.offset
            }
        }]),
        t
    }()
      , Z = function() {
        function t(t) {
            this._sortBy = t.sortBy,
            this.items = [],
            this.length = 0,
            this.loopIndex = -1,
            this._sortHandler = this._doSort.bind(this)
        }
        var e = t.prototype;
        return e._binarySearch = function(t) {
            for (var e, i, n = 0, s = this.items.length - 1, a = t[this._sortBy]; n <= s; )
                e = Math.floor((n + s) / 2),
                (i = this.items[e][this._sortBy]) <= a ? n = e + 1 : i > a && (s = e - 1);
            return n
        }
        ,
        e._doSort = function(t, e) {
            var i = this._sortBy;
            return t[i] - e[i]
        }
        ,
        e.insert = function(t) {
            var e = this._binarySearch(t);
            this.items.splice(e, 0, t),
            this.length++,
            this.loopIndex >= e && this.loopIndex++
        }
        ,
        e.append = function(t) {
            this.items.push(t),
            this.length++
        }
        ,
        e.remove = function(t) {
            var e = this.items.indexOf(t);
            e < 0 || (this.items.splice(e, 1),
            this.length--,
            this.loopIndex >= e && this.loopIndex--)
        }
        ,
        e.sort = function() {
            var t = this.loopIndex >= 0 ? this.items[this.loopIndex] : null;
            this.items.sort(this._sortHandler),
            null !== t && (this.loopIndex = this.items.indexOf(t))
        }
        ,
        t
    }()
      , $ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._index = {},
            i._list = [],
            i._parent = e,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.add = function() {
            var t = !1
              , e = this._processArguments(arguments, !0);
            if (!e.length)
                return t;
            for (var i = 0; i < e.length; i++)
                this._index[e[i]] || (t = !0,
                this._index[e[i]] = !0,
                this._list.push(e[i]),
                this.fire("add", e[i], this._parent));
            return t && this.fire("change", this._parent),
            t
        }
        ,
        i.remove = function() {
            var t = !1;
            if (!this._list.length)
                return t;
            var e = this._processArguments(arguments, !0);
            if (!e.length)
                return t;
            for (var i = 0; i < e.length; i++)
                this._index[e[i]] && (t = !0,
                delete this._index[e[i]],
                this._list.splice(this._list.indexOf(e[i]), 1),
                this.fire("remove", e[i], this._parent));
            return t && this.fire("change", this._parent),
            t
        }
        ,
        i.clear = function() {
            if (this._list.length) {
                var t = this._list.slice(0);
                this._list = [],
                this._index = {};
                for (var e = 0; e < t.length; e++)
                    this.fire("remove", t[e], this._parent);
                this.fire("change", this._parent)
            }
        }
        ,
        i.has = function() {
            return !!this._list.length && this._has(this._processArguments(arguments))
        }
        ,
        i._has = function(t) {
            if (!this._list.length || !t.length)
                return !1;
            for (var e = 0; e < t.length; e++)
                if (1 === t[e].length) {
                    if (this._index[t[e][0]])
                        return !0
                } else {
                    for (var i = !0, n = 0; n < t[e].length; n++)
                        if (!this._index[t[e][n]]) {
                            i = !1;
                            break
                        }
                    if (i)
                        return !0
                }
            return !1
        }
        ,
        i.list = function() {
            return this._list.slice(0)
        }
        ,
        i._processArguments = function(t, e) {
            var i = []
              , n = [];
            if (!t || !t.length)
                return i;
            for (var s = 0; s < t.length; s++)
                if (t[s]instanceof Array) {
                    e || (n = []);
                    for (var a = 0; a < t[s].length; a++)
                        "string" == typeof t[s][a] && (e ? i.push(t[s][a]) : n.push(t[s][a]));
                    !e && n.length && i.push(n)
                } else
                    "string" == typeof t[s] && (e ? i.push(t[s]) : i.push([t[s]]));
            return i
        }
        ,
        G(e, [{
            key: "size",
            get: function() {
                return this._list.length
            }
        }]),
        e
    }(u)
      , Q = "undefined" != typeof window && window.performance && window.performance.now && window.performance.timing ? function() {
        return window.performance.now()
    }
    : Date.now
      , J = function() {
        function t() {
            this._isRunning = !1,
            this._a = 0,
            this._b = 0
        }
        var e = t.prototype;
        return e.start = function() {
            this._isRunning = !0,
            this._a = Q()
        }
        ,
        e.stop = function() {
            this._isRunning = !1,
            this._b = Q()
        }
        ,
        e.getMilliseconds = function() {
            return this._b - this._a
        }
        ,
        t
    }();
    var tt = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/
      , et = function() {
        function t(t) {
            var e = t.match(tt);
            this.scheme = e[2],
            this.authority = e[4],
            this.path = e[5],
            this.query = e[7],
            this.fragment = e[9]
        }
        var e = t.prototype;
        return e.toString = function() {
            var t = "";
            return this.scheme && (t += this.scheme + ":"),
            this.authority && (t += "//" + this.authority),
            t += this.path,
            this.query && (t += "?" + this.query),
            this.fragment && (t += "#" + this.fragment),
            t
        }
        ,
        e.getQuery = function() {
            var t = {};
            if (this.query)
                for (var e, i = Y(decodeURIComponent(this.query).split("&")); !(e = i()).done; ) {
                    var n = e.value.split("=");
                    t[n[0]] = n[1]
                }
            return t
        }
        ,
        e.setQuery = function(t) {
            var e = "";
            for (var i in t)
                t.hasOwnProperty(i) && ("" !== e && (e += "&"),
                e += encodeURIComponent(i) + "=" + encodeURIComponent(t[i]));
            this.query = e
        }
        ,
        t
    }()
      , it = {
        DEG_TO_RAD: Math.PI / 180,
        RAD_TO_DEG: 180 / Math.PI,
        clamp: function(t, e, i) {
            return t >= i ? i : t <= e ? e : t
        },
        intToBytes24: function(t) {
            return [t >> 16 & 255, t >> 8 & 255, 255 & t]
        },
        intToBytes32: function(t) {
            return [t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t]
        },
        bytesToInt24: function(t, e, i) {
            return t.length && (i = t[2],
            e = t[1],
            t = t[0]),
            t << 16 | e << 8 | i
        },
        bytesToInt32: function(t, e, i, n) {
            return t.length && (n = t[3],
            i = t[2],
            e = t[1],
            t = t[0]),
            (t << 24 | e << 16 | i << 8 | n) >>> 32
        },
        lerp: function(t, e, i) {
            return t + (e - t) * it.clamp(i, 0, 1)
        },
        lerpAngle: function(t, e, i) {
            return e - t > 180 && (e -= 360),
            e - t < -180 && (e += 360),
            it.lerp(t, e, it.clamp(i, 0, 1))
        },
        powerOfTwo: function(t) {
            return 0 !== t && !(t & t - 1)
        },
        nextPowerOfTwo: function(t) {
            return t--,
            t |= t >> 1,
            t |= t >> 2,
            t |= t >> 4,
            t |= t >> 8,
            t |= t >> 16,
            ++t
        },
        random: function(t, e) {
            var i = e - t;
            return Math.random() * i + t
        },
        smoothstep: function(t, e, i) {
            return i <= t ? 0 : i >= e ? 1 : (i = (i - t) / (e - t)) * i * (3 - 2 * i)
        },
        smootherstep: function(t, e, i) {
            return i <= t ? 0 : i >= e ? 1 : (i = (i - t) / (e - t)) * i * i * (i * (6 * i - 15) + 10)
        },
        roundUp: function(t, e) {
            return 0 === e ? t : Math.ceil(t / e) * e
        },
        between: function(t, e, i, n) {
            var s = Math.min(e, i)
              , a = Math.max(e, i);
            return n ? t >= s && t <= a : t > s && t < a
        }
    }
      , nt = function() {
        function t() {}
        var e = t.prototype;
        return e.get = function(t, e, i) {
            return "function" == typeof e && (i = e,
            e = {}),
            this.request("GET", t, e, i)
        }
        ,
        e.post = function(t, e, i, n) {
            return "function" == typeof i && (n = i,
            i = {}),
            i.postdata = e,
            this.request("POST", t, i, n)
        }
        ,
        e.put = function(t, e, i, n) {
            return "function" == typeof i && (n = i,
            i = {}),
            i.postdata = e,
            this.request("PUT", t, i, n)
        }
        ,
        e.del = function(t, e, i) {
            return "function" == typeof e && (i = e,
            e = {}),
            this.request("DELETE", t, e, i)
        }
        ,
        e.request = function(e, i, n, s) {
            var a, r, o, h = this, c = !1;
            if ("function" == typeof n && (s = n,
            n = {}),
            n.retry && (n = Object.assign({
                retries: 0,
                maxRetries: 5
            }, n)),
            n.callback = s,
            null == n.async && (n.async = !0),
            null == n.headers && (n.headers = {}),
            null != n.postdata)
                if (n.postdata instanceof Document)
                    o = n.postdata;
                else if (n.postdata instanceof FormData)
                    o = n.postdata;
                else if (n.postdata instanceof Object) {
                    var u = n.headers["Content-Type"];
                    switch (void 0 === u && (n.headers["Content-Type"] = t.ContentType.FORM_URLENCODED,
                    u = n.headers["Content-Type"]),
                    u) {
                    case t.ContentType.FORM_URLENCODED:
                        o = "";
                        var d = !0;
                        for (var f in n.postdata)
                            n.postdata.hasOwnProperty(f) && (d ? d = !1 : o += "&",
                            o += escape(f) + "=" + escape(n.postdata[f]));
                        break;
                    default:
                    case t.ContentType.JSON:
                        null == u && (n.headers["Content-Type"] = t.ContentType.JSON),
                        o = JSON.stringify(n.postdata)
                    }
                } else
                    o = n.postdata;
            if (!1 === n.cache) {
                var p = Q();
                (a = new et(i)).query ? a.query = a.query + "&ts=" + p : a.query = "ts=" + p,
                i = a.toString()
            }
            n.query && (r = l((a = new et(i)).getQuery(), n.query),
            a.setQuery(r),
            i = a.toString());
            var m = new XMLHttpRequest;
            for (var _ in m.open(e, i, n.async),
            m.withCredentials = void 0 !== n.withCredentials && n.withCredentials,
            m.responseType = n.responseType || this._guessResponseType(i),
            n.headers)
                n.headers.hasOwnProperty(_) && m.setRequestHeader(_, n.headers[_]);
            m.onreadystatechange = function() {
                h._onReadyStateChange(e, i, n, m)
            }
            ,
            m.onerror = function() {
                h._onError(e, i, n, m),
                c = !0
            }
            ;
            try {
                m.send(o)
            } catch (t) {
                c || n.error(m.status, m, t)
            }
            return m
        }
        ,
        e._guessResponseType = function(e) {
            var i = new et(e)
              , n = p.getExtension(i.path);
            return t.binaryExtensions.indexOf(n) >= 0 ? t.ResponseType.ARRAY_BUFFER : ".xml" === n ? t.ResponseType.DOCUMENT : t.ResponseType.TEXT
        }
        ,
        e._isBinaryContentType = function(e) {
            return [t.ContentType.MP4, t.ContentType.WAV, t.ContentType.OGG, t.ContentType.MP3, t.ContentType.BIN, t.ContentType.DDS, t.ContentType.BASIS, t.ContentType.GLB].indexOf(e) >= 0
        }
        ,
        e._onReadyStateChange = function(t, e, i, n) {
            if (4 === n.readyState)
                switch (n.status) {
                case 0:
                    n.responseURL && n.responseURL.startsWith("file:///") ? this._onSuccess(t, e, i, n) : this._onError(t, e, i, n);
                    break;
                case 200:
                case 201:
                case 206:
                case 304:
                    this._onSuccess(t, e, i, n);
                    break;
                default:
                    this._onError(t, e, i, n)
                }
        }
        ,
        e._onSuccess = function(e, i, n, s) {
            var a, r, o = s.getResponseHeader("Content-Type");
            o && (r = o.split(";")[0].trim());
            try {
                a = r === t.ContentType.JSON || i.split("?")[0].endsWith(".json") ? JSON.parse(s.responseText) : this._isBinaryContentType(r) || s.responseType === t.ResponseType.ARRAY_BUFFER || s.responseType === t.ResponseType.BLOB || s.responseType === t.ResponseType.JSON ? s.response : s.responseType === t.ResponseType.DOCUMENT || r === t.ContentType.XML ? s.responseXML : s.responseText,
                n.callback(null, a)
            } catch (t) {
                n.callback(t)
            }
        }
        ,
        e._onError = function(e, i, n, s) {
            var a = this;
            if (!n.retrying)
                if (n.retry && n.retries < n.maxRetries) {
                    n.retries++,
                    n.retrying = !0;
                    var r = it.clamp(Math.pow(2, n.retries) * t.retryDelay, 0, n.maxRetryDelay || 5e3);
                    console.log(e + ": " + i + " - Error " + s.status + ". Retrying in " + r + " ms"),
                    setTimeout((function() {
                        n.retrying = !1,
                        a.request(e, i, n, n.callback)
                    }
                    ), r)
                } else
                    n.callback(0 === s.status ? "Network error" : s.status, null)
        }
        ,
        t
    }();
    nt.ContentType = {
        FORM_URLENCODED: "application/x-www-form-urlencoded",
        GIF: "image/gif",
        JPEG: "image/jpeg",
        DDS: "image/dds",
        JSON: "application/json",
        PNG: "image/png",
        TEXT: "text/plain",
        XML: "application/xml",
        WAV: "audio/x-wav",
        OGG: "audio/ogg",
        MP3: "audio/mpeg",
        MP4: "audio/mp4",
        AAC: "audio/aac",
        BIN: "application/octet-stream",
        BASIS: "image/basis",
        GLB: "model/gltf-binary"
    },
    nt.ResponseType = {
        TEXT: "text",
        ARRAY_BUFFER: "arraybuffer",
        BLOB: "blob",
        DOCUMENT: "document",
        JSON: "json"
    },
    nt.binaryExtensions = [".model", ".wav", ".ogg", ".mp3", ".mp4", ".m4a", ".aac", ".dds", ".basis", ".glb"],
    nt.retryDelay = 100;
    var st = new nt
      , at = function() {
        function t(t, e, i, n) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            void 0 === i && (i = 0),
            void 0 === n && (n = 1);
            var s = t.length;
            3 === s || 4 === s ? (this.r = t[0],
            this.g = t[1],
            this.b = t[2],
            this.a = void 0 !== t[3] ? t[3] : 1) : (this.r = t,
            this.g = e,
            this.b = i,
            this.a = n)
        }
        var e = t.prototype;
        return e.clone = function() {
            return new t(this.r,this.g,this.b,this.a)
        }
        ,
        e.copy = function(t) {
            return this.r = t.r,
            this.g = t.g,
            this.b = t.b,
            this.a = t.a,
            this
        }
        ,
        e.equals = function(t) {
            return this.r === t.r && this.g === t.g && this.b === t.b && this.a === t.a
        }
        ,
        e.set = function(t, e, i, n) {
            return void 0 === n && (n = 1),
            this.r = t,
            this.g = e,
            this.b = i,
            this.a = n,
            this
        }
        ,
        e.lerp = function(t, e, i) {
            return this.r = t.r + i * (e.r - t.r),
            this.g = t.g + i * (e.g - t.g),
            this.b = t.b + i * (e.b - t.b),
            this.a = t.a + i * (e.a - t.a),
            this
        }
        ,
        e.fromString = function(t) {
            var e, i = parseInt(t.replace("#", "0x"), 16);
            return t.length > 7 ? e = it.intToBytes32(i) : (e = it.intToBytes24(i))[3] = 255,
            this.set(e[0] / 255, e[1] / 255, e[2] / 255, e[3] / 255),
            this
        }
        ,
        e.toString = function(t) {
            var e = "#" + ((1 << 24) + (Math.round(255 * this.r) << 16) + (Math.round(255 * this.g) << 8) + Math.round(255 * this.b)).toString(16).slice(1);
            if (!0 === t) {
                var i = Math.round(255 * this.a).toString(16);
                this.a < 16 / 255 ? e += "0" + i : e += i
            }
            return e
        }
        ,
        t
    }();
    at.BLACK = Object.freeze(new at(0,0,0,1)),
    at.BLUE = Object.freeze(new at(0,0,1,1)),
    at.CYAN = Object.freeze(new at(0,1,1,1)),
    at.GRAY = Object.freeze(new at(.5,.5,.5,1)),
    at.GREEN = Object.freeze(new at(0,1,0,1)),
    at.MAGENTA = Object.freeze(new at(1,0,1,1)),
    at.RED = Object.freeze(new at(1,0,0,1)),
    at.WHITE = Object.freeze(new at(1,1,1,1)),
    at.YELLOW = Object.freeze(new at(1,1,0,1));
    var rt = function() {
        function t(t, e) {
            void 0 === e && (e = 0),
            this._curve = t,
            this._left = -1 / 0,
            this._right = 1 / 0,
            this._recip = 0,
            this._p0 = 0,
            this._p1 = 0,
            this._m0 = 0,
            this._m1 = 0,
            this._reset(e)
        }
        var e = t.prototype;
        return e.evaluate = function(t, e) {
            var i;
            (e || t < this._left || t >= this._right) && this._reset(t);
            var n = this._curve.type;
            if (5 === n)
                i = this._p0;
            else {
                var s = 0 === this._recip ? 0 : (t - this._left) * this._recip;
                i = 0 === n ? it.lerp(this._p0, this._p1, s) : 1 === n ? it.lerp(this._p0, this._p1, s * s * (3 - 2 * s)) : this._evaluateHermite(this._p0, this._p1, this._m0, this._m1, s)
            }
            return i
        }
        ,
        e._reset = function(t) {
            var e = this._curve.keys
              , i = e.length;
            if (i)
                if (t < e[0][0])
                    this._left = -1 / 0,
                    this._right = e[0][0],
                    this._recip = 0,
                    this._p0 = this._p1 = e[0][1],
                    this._m0 = this._m1 = 0;
                else if (t >= e[i - 1][0])
                    this._left = e[i - 1][0],
                    this._right = 1 / 0,
                    this._recip = 0,
                    this._p0 = this._p1 = e[i - 1][1],
                    this._m0 = this._m1 = 0;
                else {
                    for (var n = 0; t >= e[n + 1][0]; )
                        n++;
                    this._left = e[n][0],
                    this._right = e[n + 1][0];
                    var s = 1 / (this._right - this._left);
                    this._recip = isFinite(s) ? s : 0,
                    this._p0 = e[n][1],
                    this._p1 = e[n + 1][1],
                    this._isHermite() && this._calcTangents(e, n)
                }
            else
                this._left = -1 / 0,
                this._right = 1 / 0,
                this._recip = 0,
                this._p0 = this._p1 = this._m0 = this._m1 = 0
        }
        ,
        e._isHermite = function() {
            return 2 === this._curve.type || 3 === this._curve.type || 4 === this._curve.type
        }
        ,
        e._calcTangents = function(t, e) {
            var i, n, s = t[e], a = t[e + 1];
            if (i = 0 === e ? [t[0][0] + (t[0][0] - t[1][0]), t[0][1] + (t[0][1] - t[1][1])] : t[e - 1],
            n = e === t.length - 2 ? [t[e + 1][0] + (t[e + 1][0] - t[e][0]), t[e + 1][1] + (t[e + 1][1] - t[e][1])] : t[e + 2],
            4 === this._curve.type) {
                var r = 2 * (a[0] - s[0]) / (a[0] - i[0])
                  , o = 2 * (a[0] - s[0]) / (n[0] - s[0]);
                this._m0 = this._curve.tension * (isFinite(r) ? r : 0) * (a[1] - i[1]),
                this._m1 = this._curve.tension * (isFinite(o) ? o : 0) * (n[1] - s[1])
            } else {
                var h = (a[0] - s[0]) / (s[0] - i[0])
                  , l = (a[0] - s[0]) / (n[0] - a[0])
                  , c = s[1] + (i[1] - s[1]) * (isFinite(h) ? h : 0)
                  , u = a[1] + (n[1] - a[1]) * (isFinite(l) ? l : 0)
                  , d = 2 === this._curve.type ? .5 : this._curve.tension;
                this._m0 = d * (a[1] - c),
                this._m1 = d * (u - s[1])
            }
        }
        ,
        e._evaluateHermite = function(t, e, i, n, s) {
            var a = s * s
              , r = s + s
              , o = 1 - s
              , h = o * o;
            return t * ((1 + r) * h) + i * (s * h) + e * (a * (3 - r)) + n * (a * (s - 1))
        }
        ,
        t
    }()
      , ot = function() {
        function t(t) {
            if (this.keys = [],
            this.type = 1,
            this.tension = .5,
            this._eval = new rt(this),
            t)
                for (var e = 0; e < t.length - 1; e += 2)
                    this.keys.push([t[e], t[e + 1]]);
            this.sort()
        }
        var e = t.prototype;
        return e.add = function(t, e) {
            for (var i = this.keys, n = i.length, s = 0; s < n && !(i[s][0] > t); s++)
                ;
            var a = [t, e];
            return this.keys.splice(s, 0, a),
            a
        }
        ,
        e.get = function(t) {
            return this.keys[t]
        }
        ,
        e.sort = function() {
            this.keys.sort((function(t, e) {
                return t[0] - e[0]
            }
            ))
        }
        ,
        e.value = function(t) {
            return this._eval.evaluate(t, !0)
        }
        ,
        e.closest = function(t) {
            for (var e = this.keys, i = e.length, n = 2, s = null, a = 0; a < i; a++) {
                var r = Math.abs(t - e[a][0]);
                if (!(n >= r))
                    break;
                n = r,
                s = e[a]
            }
            return s
        }
        ,
        e.clone = function() {
            var e = new t;
            return e.keys = l(e.keys, this.keys),
            e.type = this.type,
            e.tension = this.tension,
            e
        }
        ,
        e.quantize = function(t) {
            t = Math.max(t, 2);
            var e = new Float32Array(t)
              , i = 1 / (t - 1);
            e[0] = this._eval.evaluate(0, !0);
            for (var n = 1; n < t; n++)
                e[n] = this._eval.evaluate(i * n);
            return e
        }
        ,
        e.quantizeClamped = function(t, e, i) {
            for (var n = this.quantize(t), s = 0; s < n.length; ++s)
                n[s] = Math.min(i, Math.max(e, n[s]));
            return n
        }
        ,
        G(t, [{
            key: "length",
            get: function() {
                return this.keys.length
            }
        }]),
        t
    }()
      , ht = function() {
        function t() {
            if (this.curves = [],
            this._type = 1,
            arguments.length > 1)
                for (var t = 0; t < arguments.length; t++)
                    this.curves.push(new ot(arguments[t]));
            else if (0 === arguments.length)
                this.curves.push(new ot);
            else {
                var e = arguments[0];
                if ("number" == typeof e)
                    for (var i = 0; i < e; i++)
                        this.curves.push(new ot);
                else
                    for (var n = 0; n < e.length; n++)
                        this.curves.push(new ot(e[n]))
            }
        }
        var e = t.prototype;
        return e.get = function(t) {
            return this.curves[t]
        }
        ,
        e.value = function(t, e) {
            void 0 === e && (e = []);
            var i = this.curves.length;
            e.length = i;
            for (var n = 0; n < i; n++)
                e[n] = this.curves[n].value(t);
            return e
        }
        ,
        e.clone = function() {
            var e = new t;
            e.curves = [];
            for (var i = 0; i < this.curves.length; i++)
                e.curves.push(this.curves[i].clone());
            return e._type = this._type,
            e
        }
        ,
        e.quantize = function(t) {
            t = Math.max(t, 2);
            for (var e = this.curves.length, i = new Float32Array(t * e), n = 1 / (t - 1), s = 0; s < e; s++)
                for (var a = new rt(this.curves[s]), r = 0; r < t; r++)
                    i[r * e + s] = a.evaluate(n * r);
            return i
        }
        ,
        e.quantizeClamped = function(t, e, i) {
            for (var n = this.quantize(t), s = 0; s < n.length; ++s)
                n[s] = Math.min(i, Math.max(e, n[s]));
            return n
        }
        ,
        G(t, [{
            key: "length",
            get: function() {
                return this.curves.length
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                this._type = t;
                for (var e = 0; e < this.curves.length; e++)
                    this.curves[e].type = t
            }
        }]),
        t
    }()
      , lt = function() {
        function t(t, e, i) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            void 0 === i && (i = 0),
            3 === t.length ? (this.x = t[0],
            this.y = t[1],
            this.z = t[2]) : (this.x = t,
            this.y = e,
            this.z = i)
        }
        var e = t.prototype;
        return e.add = function(t) {
            return this.x += t.x,
            this.y += t.y,
            this.z += t.z,
            this
        }
        ,
        e.add2 = function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this.z = t.z + e.z,
            this
        }
        ,
        e.addScalar = function(t) {
            return this.x += t,
            this.y += t,
            this.z += t,
            this
        }
        ,
        e.clone = function() {
            return new t(this.x,this.y,this.z)
        }
        ,
        e.copy = function(t) {
            return this.x = t.x,
            this.y = t.y,
            this.z = t.z,
            this
        }
        ,
        e.cross = function(t, e) {
            var i = t.x
              , n = t.y
              , s = t.z
              , a = e.x
              , r = e.y
              , o = e.z;
            return this.x = n * o - r * s,
            this.y = s * a - o * i,
            this.z = i * r - a * n,
            this
        }
        ,
        e.distance = function(t) {
            var e = this.x - t.x
              , i = this.y - t.y
              , n = this.z - t.z;
            return Math.sqrt(e * e + i * i + n * n)
        }
        ,
        e.div = function(t) {
            return this.x /= t.x,
            this.y /= t.y,
            this.z /= t.z,
            this
        }
        ,
        e.div2 = function(t, e) {
            return this.x = t.x / e.x,
            this.y = t.y / e.y,
            this.z = t.z / e.z,
            this
        }
        ,
        e.divScalar = function(t) {
            return this.x /= t,
            this.y /= t,
            this.z /= t,
            this
        }
        ,
        e.dot = function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z
        }
        ,
        e.equals = function(t) {
            return this.x === t.x && this.y === t.y && this.z === t.z
        }
        ,
        e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        }
        ,
        e.lengthSq = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z
        }
        ,
        e.lerp = function(t, e, i) {
            return this.x = t.x + i * (e.x - t.x),
            this.y = t.y + i * (e.y - t.y),
            this.z = t.z + i * (e.z - t.z),
            this
        }
        ,
        e.mul = function(t) {
            return this.x *= t.x,
            this.y *= t.y,
            this.z *= t.z,
            this
        }
        ,
        e.mul2 = function(t, e) {
            return this.x = t.x * e.x,
            this.y = t.y * e.y,
            this.z = t.z * e.z,
            this
        }
        ,
        e.mulScalar = function(t) {
            return this.x *= t,
            this.y *= t,
            this.z *= t,
            this
        }
        ,
        e.normalize = function() {
            var t = this.x * this.x + this.y * this.y + this.z * this.z;
            if (t > 0) {
                var e = 1 / Math.sqrt(t);
                this.x *= e,
                this.y *= e,
                this.z *= e
            }
            return this
        }
        ,
        e.floor = function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this.z = Math.floor(this.z),
            this
        }
        ,
        e.ceil = function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this.z = Math.ceil(this.z),
            this
        }
        ,
        e.round = function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this.z = Math.round(this.z),
            this
        }
        ,
        e.min = function(t) {
            return t.x < this.x && (this.x = t.x),
            t.y < this.y && (this.y = t.y),
            t.z < this.z && (this.z = t.z),
            this
        }
        ,
        e.max = function(t) {
            return t.x > this.x && (this.x = t.x),
            t.y > this.y && (this.y = t.y),
            t.z > this.z && (this.z = t.z),
            this
        }
        ,
        e.project = function(t) {
            var e = (this.x * t.x + this.y * t.y + this.z * t.z) / (t.x * t.x + t.y * t.y + t.z * t.z);
            return this.x = t.x * e,
            this.y = t.y * e,
            this.z = t.z * e,
            this
        }
        ,
        e.set = function(t, e, i) {
            return this.x = t,
            this.y = e,
            this.z = i,
            this
        }
        ,
        e.sub = function(t) {
            return this.x -= t.x,
            this.y -= t.y,
            this.z -= t.z,
            this
        }
        ,
        e.sub2 = function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this.z = t.z - e.z,
            this
        }
        ,
        e.subScalar = function(t) {
            return this.x -= t,
            this.y -= t,
            this.z -= t,
            this
        }
        ,
        e.toString = function() {
            return "[" + this.x + ", " + this.y + ", " + this.z + "]"
        }
        ,
        t
    }();
    lt.ZERO = Object.freeze(new lt(0,0,0)),
    lt.ONE = Object.freeze(new lt(1,1,1)),
    lt.UP = Object.freeze(new lt(0,1,0)),
    lt.DOWN = Object.freeze(new lt(0,-1,0)),
    lt.RIGHT = Object.freeze(new lt(1,0,0)),
    lt.LEFT = Object.freeze(new lt(-1,0,0)),
    lt.FORWARD = Object.freeze(new lt(0,0,-1)),
    lt.BACK = Object.freeze(new lt(0,0,1));
    var ct = function() {
        function t() {
            var t = new Float32Array(9);
            t[0] = t[4] = t[8] = 1,
            this.data = t
        }
        var e = t.prototype;
        return e.clone = function() {
            return (new t).copy(this)
        }
        ,
        e.copy = function(t) {
            var e = t.data
              , i = this.data;
            return i[0] = e[0],
            i[1] = e[1],
            i[2] = e[2],
            i[3] = e[3],
            i[4] = e[4],
            i[5] = e[5],
            i[6] = e[6],
            i[7] = e[7],
            i[8] = e[8],
            this
        }
        ,
        e.set = function(t) {
            var e = this.data;
            return e[0] = t[0],
            e[1] = t[1],
            e[2] = t[2],
            e[3] = t[3],
            e[4] = t[4],
            e[5] = t[5],
            e[6] = t[6],
            e[7] = t[7],
            e[8] = t[8],
            this
        }
        ,
        e.equals = function(t) {
            var e = this.data
              , i = t.data;
            return e[0] === i[0] && e[1] === i[1] && e[2] === i[2] && e[3] === i[3] && e[4] === i[4] && e[5] === i[5] && e[6] === i[6] && e[7] === i[7] && e[8] === i[8]
        }
        ,
        e.isIdentity = function() {
            var t = this.data;
            return 1 === t[0] && 0 === t[1] && 0 === t[2] && 0 === t[3] && 1 === t[4] && 0 === t[5] && 0 === t[6] && 0 === t[7] && 1 === t[8]
        }
        ,
        e.setIdentity = function() {
            var t = this.data;
            return t[0] = 1,
            t[1] = 0,
            t[2] = 0,
            t[3] = 0,
            t[4] = 1,
            t[5] = 0,
            t[6] = 0,
            t[7] = 0,
            t[8] = 1,
            this
        }
        ,
        e.toString = function() {
            for (var t = "[", e = 0; e < 9; e++)
                t += this.data[e],
                t += 8 !== e ? ", " : "";
            return t += "]"
        }
        ,
        e.transpose = function() {
            var t, e = this.data;
            return t = e[1],
            e[1] = e[3],
            e[3] = t,
            t = e[2],
            e[2] = e[6],
            e[6] = t,
            t = e[5],
            e[5] = e[7],
            e[7] = t,
            this
        }
        ,
        e.setFromMat4 = function(t) {
            var e = t.data
              , i = this.data;
            return i[0] = e[0],
            i[1] = e[1],
            i[2] = e[2],
            i[3] = e[4],
            i[4] = e[5],
            i[5] = e[6],
            i[6] = e[8],
            i[7] = e[9],
            i[8] = e[10],
            this
        }
        ,
        e.transformVector = function(t, e) {
            void 0 === e && (e = new lt);
            var i = this.data
              , n = t.x
              , s = t.y
              , a = t.z;
            return e.x = n * i[0] + s * i[3] + a * i[6],
            e.y = n * i[1] + s * i[4] + a * i[7],
            e.z = n * i[2] + s * i[5] + a * i[8],
            e
        }
        ,
        t
    }();
    ct.IDENTITY = Object.freeze(new ct),
    ct.ZERO = Object.freeze((new ct).set([0, 0, 0, 0, 0, 0, 0, 0, 0]));
    var ut = function() {
        function t(t, e) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            2 === t.length ? (this.x = t[0],
            this.y = t[1]) : (this.x = t,
            this.y = e)
        }
        var e = t.prototype;
        return e.add = function(t) {
            return this.x += t.x,
            this.y += t.y,
            this
        }
        ,
        e.add2 = function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this
        }
        ,
        e.addScalar = function(t) {
            return this.x += t,
            this.y += t,
            this
        }
        ,
        e.clone = function() {
            return new t(this.x,this.y)
        }
        ,
        e.copy = function(t) {
            return this.x = t.x,
            this.y = t.y,
            this
        }
        ,
        e.cross = function(t) {
            return this.x * t.y - this.y * t.x
        }
        ,
        e.distance = function(t) {
            var e = this.x - t.x
              , i = this.y - t.y;
            return Math.sqrt(e * e + i * i)
        }
        ,
        e.div = function(t) {
            return this.x /= t.x,
            this.y /= t.y,
            this
        }
        ,
        e.div2 = function(t, e) {
            return this.x = t.x / e.x,
            this.y = t.y / e.y,
            this
        }
        ,
        e.divScalar = function(t) {
            return this.x /= t,
            this.y /= t,
            this
        }
        ,
        e.dot = function(t) {
            return this.x * t.x + this.y * t.y
        }
        ,
        e.equals = function(t) {
            return this.x === t.x && this.y === t.y
        }
        ,
        e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        }
        ,
        e.lengthSq = function() {
            return this.x * this.x + this.y * this.y
        }
        ,
        e.lerp = function(t, e, i) {
            return this.x = t.x + i * (e.x - t.x),
            this.y = t.y + i * (e.y - t.y),
            this
        }
        ,
        e.mul = function(t) {
            return this.x *= t.x,
            this.y *= t.y,
            this
        }
        ,
        e.mul2 = function(t, e) {
            return this.x = t.x * e.x,
            this.y = t.y * e.y,
            this
        }
        ,
        e.mulScalar = function(t) {
            return this.x *= t,
            this.y *= t,
            this
        }
        ,
        e.normalize = function() {
            var t = this.x * this.x + this.y * this.y;
            if (t > 0) {
                var e = 1 / Math.sqrt(t);
                this.x *= e,
                this.y *= e
            }
            return this
        }
        ,
        e.floor = function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this
        }
        ,
        e.ceil = function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this
        }
        ,
        e.round = function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this
        }
        ,
        e.min = function(t) {
            return t.x < this.x && (this.x = t.x),
            t.y < this.y && (this.y = t.y),
            this
        }
        ,
        e.max = function(t) {
            return t.x > this.x && (this.x = t.x),
            t.y > this.y && (this.y = t.y),
            this
        }
        ,
        e.set = function(t, e) {
            return this.x = t,
            this.y = e,
            this
        }
        ,
        e.sub = function(t) {
            return this.x -= t.x,
            this.y -= t.y,
            this
        }
        ,
        e.sub2 = function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this
        }
        ,
        e.subScalar = function(t) {
            return this.x -= t,
            this.y -= t,
            this
        }
        ,
        e.toString = function() {
            return "[" + this.x + ", " + this.y + "]"
        }
        ,
        t.angleRad = function(t, e) {
            return Math.atan2(t.x * e.y - t.y * e.x, t.x * e.x + t.y * e.y)
        }
        ,
        t
    }();
    ut.ZERO = Object.freeze(new ut(0,0)),
    ut.ONE = Object.freeze(new ut(1,1)),
    ut.UP = Object.freeze(new ut(0,1)),
    ut.DOWN = Object.freeze(new ut(0,-1)),
    ut.RIGHT = Object.freeze(new ut(1,0)),
    ut.LEFT = Object.freeze(new ut(-1,0));
    var dt = function() {
        function t(t, e, i, n) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            void 0 === i && (i = 0),
            void 0 === n && (n = 0),
            4 === t.length ? (this.x = t[0],
            this.y = t[1],
            this.z = t[2],
            this.w = t[3]) : (this.x = t,
            this.y = e,
            this.z = i,
            this.w = n)
        }
        var e = t.prototype;
        return e.add = function(t) {
            return this.x += t.x,
            this.y += t.y,
            this.z += t.z,
            this.w += t.w,
            this
        }
        ,
        e.add2 = function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this.z = t.z + e.z,
            this.w = t.w + e.w,
            this
        }
        ,
        e.addScalar = function(t) {
            return this.x += t,
            this.y += t,
            this.z += t,
            this.w += t,
            this
        }
        ,
        e.clone = function() {
            return new t(this.x,this.y,this.z,this.w)
        }
        ,
        e.copy = function(t) {
            return this.x = t.x,
            this.y = t.y,
            this.z = t.z,
            this.w = t.w,
            this
        }
        ,
        e.div = function(t) {
            return this.x /= t.x,
            this.y /= t.y,
            this.z /= t.z,
            this.w /= t.w,
            this
        }
        ,
        e.div2 = function(t, e) {
            return this.x = t.x / e.x,
            this.y = t.y / e.y,
            this.z = t.z / e.z,
            this.w = t.w / e.w,
            this
        }
        ,
        e.divScalar = function(t) {
            return this.x /= t,
            this.y /= t,
            this.z /= t,
            this.w /= t,
            this
        }
        ,
        e.dot = function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
        }
        ,
        e.equals = function(t) {
            return this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w
        }
        ,
        e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
        }
        ,
        e.lengthSq = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
        }
        ,
        e.lerp = function(t, e, i) {
            return this.x = t.x + i * (e.x - t.x),
            this.y = t.y + i * (e.y - t.y),
            this.z = t.z + i * (e.z - t.z),
            this.w = t.w + i * (e.w - t.w),
            this
        }
        ,
        e.mul = function(t) {
            return this.x *= t.x,
            this.y *= t.y,
            this.z *= t.z,
            this.w *= t.w,
            this
        }
        ,
        e.mul2 = function(t, e) {
            return this.x = t.x * e.x,
            this.y = t.y * e.y,
            this.z = t.z * e.z,
            this.w = t.w * e.w,
            this
        }
        ,
        e.mulScalar = function(t) {
            return this.x *= t,
            this.y *= t,
            this.z *= t,
            this.w *= t,
            this
        }
        ,
        e.normalize = function() {
            var t = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            if (t > 0) {
                var e = 1 / Math.sqrt(t);
                this.x *= e,
                this.y *= e,
                this.z *= e,
                this.w *= e
            }
            return this
        }
        ,
        e.floor = function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this.z = Math.floor(this.z),
            this.w = Math.floor(this.w),
            this
        }
        ,
        e.ceil = function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this.z = Math.ceil(this.z),
            this.w = Math.ceil(this.w),
            this
        }
        ,
        e.round = function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this.z = Math.round(this.z),
            this.w = Math.round(this.w),
            this
        }
        ,
        e.min = function(t) {
            return t.x < this.x && (this.x = t.x),
            t.y < this.y && (this.y = t.y),
            t.z < this.z && (this.z = t.z),
            t.w < this.w && (this.w = t.w),
            this
        }
        ,
        e.max = function(t) {
            return t.x > this.x && (this.x = t.x),
            t.y > this.y && (this.y = t.y),
            t.z > this.z && (this.z = t.z),
            t.w > this.w && (this.w = t.w),
            this
        }
        ,
        e.set = function(t, e, i, n) {
            return this.x = t,
            this.y = e,
            this.z = i,
            this.w = n,
            this
        }
        ,
        e.sub = function(t) {
            return this.x -= t.x,
            this.y -= t.y,
            this.z -= t.z,
            this.w -= t.w,
            this
        }
        ,
        e.sub2 = function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this.z = t.z - e.z,
            this.w = t.w - e.w,
            this
        }
        ,
        e.subScalar = function(t) {
            return this.x -= t,
            this.y -= t,
            this.z -= t,
            this.w -= t,
            this
        }
        ,
        e.toString = function() {
            return "[" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + "]"
        }
        ,
        t
    }();
    dt.ZERO = Object.freeze(new dt(0,0,0,0)),
    dt.ONE = Object.freeze(new dt(1,1,1,1));
    var ft = new ut
      , pt = new lt
      , mt = new lt
      , _t = new lt
      , gt = new lt
      , vt = function() {
        function t() {
            var t = new Float32Array(16);
            t[0] = t[5] = t[10] = t[15] = 1,
            this.data = t
        }
        t._getPerspectiveHalfSize = function(t, e, i, n, s) {
            s ? (t.x = n * Math.tan(e * Math.PI / 360),
            t.y = t.x / i) : (t.y = n * Math.tan(e * Math.PI / 360),
            t.x = t.y * i)
        }
        ;
        var e = t.prototype;
        return e.add2 = function(t, e) {
            var i = t.data
              , n = e.data
              , s = this.data;
            return s[0] = i[0] + n[0],
            s[1] = i[1] + n[1],
            s[2] = i[2] + n[2],
            s[3] = i[3] + n[3],
            s[4] = i[4] + n[4],
            s[5] = i[5] + n[5],
            s[6] = i[6] + n[6],
            s[7] = i[7] + n[7],
            s[8] = i[8] + n[8],
            s[9] = i[9] + n[9],
            s[10] = i[10] + n[10],
            s[11] = i[11] + n[11],
            s[12] = i[12] + n[12],
            s[13] = i[13] + n[13],
            s[14] = i[14] + n[14],
            s[15] = i[15] + n[15],
            this
        }
        ,
        e.add = function(t) {
            return this.add2(this, t)
        }
        ,
        e.clone = function() {
            return (new t).copy(this)
        }
        ,
        e.copy = function(t) {
            var e = t.data
              , i = this.data;
            return i[0] = e[0],
            i[1] = e[1],
            i[2] = e[2],
            i[3] = e[3],
            i[4] = e[4],
            i[5] = e[5],
            i[6] = e[6],
            i[7] = e[7],
            i[8] = e[8],
            i[9] = e[9],
            i[10] = e[10],
            i[11] = e[11],
            i[12] = e[12],
            i[13] = e[13],
            i[14] = e[14],
            i[15] = e[15],
            this
        }
        ,
        e.equals = function(t) {
            var e = this.data
              , i = t.data;
            return e[0] === i[0] && e[1] === i[1] && e[2] === i[2] && e[3] === i[3] && e[4] === i[4] && e[5] === i[5] && e[6] === i[6] && e[7] === i[7] && e[8] === i[8] && e[9] === i[9] && e[10] === i[10] && e[11] === i[11] && e[12] === i[12] && e[13] === i[13] && e[14] === i[14] && e[15] === i[15]
        }
        ,
        e.isIdentity = function() {
            var t = this.data;
            return 1 === t[0] && 0 === t[1] && 0 === t[2] && 0 === t[3] && 0 === t[4] && 1 === t[5] && 0 === t[6] && 0 === t[7] && 0 === t[8] && 0 === t[9] && 1 === t[10] && 0 === t[11] && 0 === t[12] && 0 === t[13] && 0 === t[14] && 1 === t[15]
        }
        ,
        e.mul2 = function(t, e) {
            var i, n, s, a, r = t.data, o = e.data, h = this.data, l = r[0], c = r[1], u = r[2], d = r[3], f = r[4], p = r[5], m = r[6], _ = r[7], g = r[8], v = r[9], y = r[10], x = r[11], b = r[12], S = r[13], T = r[14], w = r[15];
            return i = o[0],
            n = o[1],
            s = o[2],
            a = o[3],
            h[0] = l * i + f * n + g * s + b * a,
            h[1] = c * i + p * n + v * s + S * a,
            h[2] = u * i + m * n + y * s + T * a,
            h[3] = d * i + _ * n + x * s + w * a,
            i = o[4],
            n = o[5],
            s = o[6],
            a = o[7],
            h[4] = l * i + f * n + g * s + b * a,
            h[5] = c * i + p * n + v * s + S * a,
            h[6] = u * i + m * n + y * s + T * a,
            h[7] = d * i + _ * n + x * s + w * a,
            i = o[8],
            n = o[9],
            s = o[10],
            a = o[11],
            h[8] = l * i + f * n + g * s + b * a,
            h[9] = c * i + p * n + v * s + S * a,
            h[10] = u * i + m * n + y * s + T * a,
            h[11] = d * i + _ * n + x * s + w * a,
            i = o[12],
            n = o[13],
            s = o[14],
            a = o[15],
            h[12] = l * i + f * n + g * s + b * a,
            h[13] = c * i + p * n + v * s + S * a,
            h[14] = u * i + m * n + y * s + T * a,
            h[15] = d * i + _ * n + x * s + w * a,
            this
        }
        ,
        e.mulAffine2 = function(t, e) {
            var i, n, s, a = t.data, r = e.data, o = this.data, h = a[0], l = a[1], c = a[2], u = a[4], d = a[5], f = a[6], p = a[8], m = a[9], _ = a[10], g = a[12], v = a[13], y = a[14];
            return i = r[0],
            n = r[1],
            s = r[2],
            o[0] = h * i + u * n + p * s,
            o[1] = l * i + d * n + m * s,
            o[2] = c * i + f * n + _ * s,
            o[3] = 0,
            i = r[4],
            n = r[5],
            s = r[6],
            o[4] = h * i + u * n + p * s,
            o[5] = l * i + d * n + m * s,
            o[6] = c * i + f * n + _ * s,
            o[7] = 0,
            i = r[8],
            n = r[9],
            s = r[10],
            o[8] = h * i + u * n + p * s,
            o[9] = l * i + d * n + m * s,
            o[10] = c * i + f * n + _ * s,
            o[11] = 0,
            i = r[12],
            n = r[13],
            s = r[14],
            o[12] = h * i + u * n + p * s + g,
            o[13] = l * i + d * n + m * s + v,
            o[14] = c * i + f * n + _ * s + y,
            o[15] = 1,
            this
        }
        ,
        e.mul = function(t) {
            return this.mul2(this, t)
        }
        ,
        e.transformPoint = function(t, e) {
            void 0 === e && (e = new lt);
            var i = this.data
              , n = t.x
              , s = t.y
              , a = t.z;
            return e.x = n * i[0] + s * i[4] + a * i[8] + i[12],
            e.y = n * i[1] + s * i[5] + a * i[9] + i[13],
            e.z = n * i[2] + s * i[6] + a * i[10] + i[14],
            e
        }
        ,
        e.transformVector = function(t, e) {
            void 0 === e && (e = new lt);
            var i = this.data
              , n = t.x
              , s = t.y
              , a = t.z;
            return e.x = n * i[0] + s * i[4] + a * i[8],
            e.y = n * i[1] + s * i[5] + a * i[9],
            e.z = n * i[2] + s * i[6] + a * i[10],
            e
        }
        ,
        e.transformVec4 = function(t, e) {
            void 0 === e && (e = new dt);
            var i = this.data
              , n = t.x
              , s = t.y
              , a = t.z
              , r = t.w;
            return e.x = n * i[0] + s * i[4] + a * i[8] + r * i[12],
            e.y = n * i[1] + s * i[5] + a * i[9] + r * i[13],
            e.z = n * i[2] + s * i[6] + a * i[10] + r * i[14],
            e.w = n * i[3] + s * i[7] + a * i[11] + r * i[15],
            e
        }
        ,
        e.setLookAt = function(t, e, i) {
            _t.sub2(t, e).normalize(),
            mt.copy(i).normalize(),
            pt.cross(mt, _t).normalize(),
            mt.cross(_t, pt);
            var n = this.data;
            return n[0] = pt.x,
            n[1] = pt.y,
            n[2] = pt.z,
            n[3] = 0,
            n[4] = mt.x,
            n[5] = mt.y,
            n[6] = mt.z,
            n[7] = 0,
            n[8] = _t.x,
            n[9] = _t.y,
            n[10] = _t.z,
            n[11] = 0,
            n[12] = t.x,
            n[13] = t.y,
            n[14] = t.z,
            n[15] = 1,
            this
        }
        ,
        e.setFrustum = function(t, e, i, n, s, a) {
            var r = 2 * s
              , o = e - t
              , h = n - i
              , l = a - s
              , c = this.data;
            return c[0] = r / o,
            c[1] = 0,
            c[2] = 0,
            c[3] = 0,
            c[4] = 0,
            c[5] = r / h,
            c[6] = 0,
            c[7] = 0,
            c[8] = (e + t) / o,
            c[9] = (n + i) / h,
            c[10] = (-a - s) / l,
            c[11] = -1,
            c[12] = 0,
            c[13] = 0,
            c[14] = -r * a / l,
            c[15] = 0,
            this
        }
        ,
        e.setPerspective = function(e, i, n, s, a) {
            return t._getPerspectiveHalfSize(ft, e, i, n, a),
            this.setFrustum(-ft.x, ft.x, -ft.y, ft.y, n, s)
        }
        ,
        e.setOrtho = function(t, e, i, n, s, a) {
            var r = this.data;
            return r[0] = 2 / (e - t),
            r[1] = 0,
            r[2] = 0,
            r[3] = 0,
            r[4] = 0,
            r[5] = 2 / (n - i),
            r[6] = 0,
            r[7] = 0,
            r[8] = 0,
            r[9] = 0,
            r[10] = -2 / (a - s),
            r[11] = 0,
            r[12] = -(e + t) / (e - t),
            r[13] = -(n + i) / (n - i),
            r[14] = -(a + s) / (a - s),
            r[15] = 1,
            this
        }
        ,
        e.setFromAxisAngle = function(t, e) {
            e *= it.DEG_TO_RAD;
            var i = t.x
              , n = t.y
              , s = t.z
              , a = Math.cos(e)
              , r = Math.sin(e)
              , o = 1 - a
              , h = o * i
              , l = o * n
              , c = this.data;
            return c[0] = h * i + a,
            c[1] = h * n + r * s,
            c[2] = h * s - r * n,
            c[3] = 0,
            c[4] = h * n - r * s,
            c[5] = l * n + a,
            c[6] = l * s + r * i,
            c[7] = 0,
            c[8] = h * s + r * n,
            c[9] = l * s - i * r,
            c[10] = o * s * s + a,
            c[11] = 0,
            c[12] = 0,
            c[13] = 0,
            c[14] = 0,
            c[15] = 1,
            this
        }
        ,
        e.setTranslate = function(t, e, i) {
            var n = this.data;
            return n[0] = 1,
            n[1] = 0,
            n[2] = 0,
            n[3] = 0,
            n[4] = 0,
            n[5] = 1,
            n[6] = 0,
            n[7] = 0,
            n[8] = 0,
            n[9] = 0,
            n[10] = 1,
            n[11] = 0,
            n[12] = t,
            n[13] = e,
            n[14] = i,
            n[15] = 1,
            this
        }
        ,
        e.setScale = function(t, e, i) {
            var n = this.data;
            return n[0] = t,
            n[1] = 0,
            n[2] = 0,
            n[3] = 0,
            n[4] = 0,
            n[5] = e,
            n[6] = 0,
            n[7] = 0,
            n[8] = 0,
            n[9] = 0,
            n[10] = i,
            n[11] = 0,
            n[12] = 0,
            n[13] = 0,
            n[14] = 0,
            n[15] = 1,
            this
        }
        ,
        e.setViewport = function(t, e, i, n) {
            var s = this.data;
            return s[0] = .5 * i,
            s[1] = 0,
            s[2] = 0,
            s[3] = 0,
            s[4] = 0,
            s[5] = .5 * n,
            s[6] = 0,
            s[7] = 0,
            s[8] = 0,
            s[9] = 0,
            s[10] = .5,
            s[11] = 0,
            s[12] = t + .5 * i,
            s[13] = e + .5 * n,
            s[14] = .5,
            s[15] = 1,
            this
        }
        ,
        e.invert = function() {
            var t = this.data
              , e = t[0]
              , i = t[1]
              , n = t[2]
              , s = t[3]
              , a = t[4]
              , r = t[5]
              , o = t[6]
              , h = t[7]
              , l = t[8]
              , c = t[9]
              , u = t[10]
              , d = t[11]
              , f = t[12]
              , p = t[13]
              , m = t[14]
              , _ = t[15]
              , g = e * r - i * a
              , v = e * o - n * a
              , y = e * h - s * a
              , x = i * o - n * r
              , b = i * h - s * r
              , S = n * h - s * o
              , T = l * p - c * f
              , w = l * m - u * f
              , M = l * _ - d * f
              , A = c * m - u * p
              , C = c * _ - d * p
              , E = u * _ - d * m
              , P = g * E - v * C + y * A + x * M - b * w + S * T;
            if (0 === P)
                this.setIdentity();
            else {
                var R = 1 / P;
                t[0] = (r * E - o * C + h * A) * R,
                t[1] = (-i * E + n * C - s * A) * R,
                t[2] = (p * S - m * b + _ * x) * R,
                t[3] = (-c * S + u * b - d * x) * R,
                t[4] = (-a * E + o * M - h * w) * R,
                t[5] = (e * E - n * M + s * w) * R,
                t[6] = (-f * S + m * y - _ * v) * R,
                t[7] = (l * S - u * y + d * v) * R,
                t[8] = (a * C - r * M + h * T) * R,
                t[9] = (-e * C + i * M - s * T) * R,
                t[10] = (f * b - p * y + _ * g) * R,
                t[11] = (-l * b + c * y - d * g) * R,
                t[12] = (-a * A + r * w - o * T) * R,
                t[13] = (e * A - i * w + n * T) * R,
                t[14] = (-f * x + p * v - m * g) * R,
                t[15] = (l * x - c * v + u * g) * R
            }
            return this
        }
        ,
        e.set = function(t) {
            var e = this.data;
            return e[0] = t[0],
            e[1] = t[1],
            e[2] = t[2],
            e[3] = t[3],
            e[4] = t[4],
            e[5] = t[5],
            e[6] = t[6],
            e[7] = t[7],
            e[8] = t[8],
            e[9] = t[9],
            e[10] = t[10],
            e[11] = t[11],
            e[12] = t[12],
            e[13] = t[13],
            e[14] = t[14],
            e[15] = t[15],
            this
        }
        ,
        e.setIdentity = function() {
            var t = this.data;
            return t[0] = 1,
            t[1] = 0,
            t[2] = 0,
            t[3] = 0,
            t[4] = 0,
            t[5] = 1,
            t[6] = 0,
            t[7] = 0,
            t[8] = 0,
            t[9] = 0,
            t[10] = 1,
            t[11] = 0,
            t[12] = 0,
            t[13] = 0,
            t[14] = 0,
            t[15] = 1,
            this
        }
        ,
        e.setTRS = function(t, e, i) {
            var n = e.x
              , s = e.y
              , a = e.z
              , r = e.w
              , o = i.x
              , h = i.y
              , l = i.z
              , c = n + n
              , u = s + s
              , d = a + a
              , f = n * c
              , p = n * u
              , m = n * d
              , _ = s * u
              , g = s * d
              , v = a * d
              , y = r * c
              , x = r * u
              , b = r * d
              , S = this.data;
            return S[0] = (1 - (_ + v)) * o,
            S[1] = (p + b) * o,
            S[2] = (m - x) * o,
            S[3] = 0,
            S[4] = (p - b) * h,
            S[5] = (1 - (f + v)) * h,
            S[6] = (g + y) * h,
            S[7] = 0,
            S[8] = (m + x) * l,
            S[9] = (g - y) * l,
            S[10] = (1 - (f + _)) * l,
            S[11] = 0,
            S[12] = t.x,
            S[13] = t.y,
            S[14] = t.z,
            S[15] = 1,
            this
        }
        ,
        e.transpose = function() {
            var t, e = this.data;
            return t = e[1],
            e[1] = e[4],
            e[4] = t,
            t = e[2],
            e[2] = e[8],
            e[8] = t,
            t = e[3],
            e[3] = e[12],
            e[12] = t,
            t = e[6],
            e[6] = e[9],
            e[9] = t,
            t = e[7],
            e[7] = e[13],
            e[13] = t,
            t = e[11],
            e[11] = e[14],
            e[14] = t,
            this
        }
        ,
        e.invertTo3x3 = function(t) {
            var e = this.data
              , i = t.data
              , n = e[0]
              , s = e[1]
              , a = e[2]
              , r = e[4]
              , o = e[5]
              , h = e[6]
              , l = e[8]
              , c = e[9]
              , u = e[10]
              , d = u * o - h * c
              , f = -u * s + a * c
              , p = h * s - a * o
              , m = -u * r + h * l
              , _ = u * n - a * l
              , g = -h * n + a * r
              , v = c * r - o * l
              , y = -c * n + s * l
              , x = o * n - s * r
              , b = n * d + s * m + a * v;
            if (0 === b)
                return this;
            var S = 1 / b;
            return i[0] = S * d,
            i[1] = S * f,
            i[2] = S * p,
            i[3] = S * m,
            i[4] = S * _,
            i[5] = S * g,
            i[6] = S * v,
            i[7] = S * y,
            i[8] = S * x,
            this
        }
        ,
        e.getTranslation = function(t) {
            return void 0 === t && (t = new lt),
            t.set(this.data[12], this.data[13], this.data[14])
        }
        ,
        e.getX = function(t) {
            return void 0 === t && (t = new lt),
            t.set(this.data[0], this.data[1], this.data[2])
        }
        ,
        e.getY = function(t) {
            return void 0 === t && (t = new lt),
            t.set(this.data[4], this.data[5], this.data[6])
        }
        ,
        e.getZ = function(t) {
            return void 0 === t && (t = new lt),
            t.set(this.data[8], this.data[9], this.data[10])
        }
        ,
        e.getScale = function(t) {
            return void 0 === t && (t = new lt),
            this.getX(pt),
            this.getY(mt),
            this.getZ(_t),
            t.set(pt.length(), mt.length(), _t.length()),
            t
        }
        ,
        e.setFromEulerAngles = function(t, e, i) {
            t *= it.DEG_TO_RAD,
            e *= it.DEG_TO_RAD,
            i *= it.DEG_TO_RAD;
            var n = Math.sin(-t)
              , s = Math.cos(-t)
              , a = Math.sin(-e)
              , r = Math.cos(-e)
              , o = Math.sin(-i)
              , h = Math.cos(-i)
              , l = this.data;
            return l[0] = r * h,
            l[1] = -r * o,
            l[2] = a,
            l[3] = 0,
            l[4] = s * o + h * n * a,
            l[5] = s * h - n * a * o,
            l[6] = -r * n,
            l[7] = 0,
            l[8] = n * o - s * h * a,
            l[9] = h * n + s * a * o,
            l[10] = s * r,
            l[11] = 0,
            l[12] = 0,
            l[13] = 0,
            l[14] = 0,
            l[15] = 1,
            this
        }
        ,
        e.getEulerAngles = function(t) {
            void 0 === t && (t = new lt),
            this.getScale(gt);
            var e = gt.x
              , i = gt.y
              , n = gt.z;
            if (0 === e || 0 === i || 0 === n)
                return t.set(0, 0, 0);
            var s, a, r = this.data, o = Math.asin(-r[2] / e), h = .5 * Math.PI;
            return o < h ? o > -h ? (s = Math.atan2(r[6] / i, r[10] / n),
            a = Math.atan2(r[1] / e, r[0] / e)) : (a = 0,
            s = -Math.atan2(r[4] / i, r[5] / i)) : (a = 0,
            s = Math.atan2(r[4] / i, r[5] / i)),
            t.set(s, o, a).mulScalar(it.RAD_TO_DEG)
        }
        ,
        e.toString = function() {
            for (var t = "[", e = 0; e < 16; e += 1)
                t += this.data[e],
                t += 15 !== e ? ", " : "";
            return t += "]"
        }
        ,
        t
    }();
    vt.IDENTITY = Object.freeze(new vt),
    vt.ZERO = Object.freeze((new vt).set([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
    var yt = function() {
        function t(t, e, i, n) {
            void 0 === t && (t = 0),
            void 0 === e && (e = 0),
            void 0 === i && (i = 0),
            void 0 === n && (n = 1),
            4 === t.length ? (this.x = t[0],
            this.y = t[1],
            this.z = t[2],
            this.w = t[3]) : (this.x = t,
            this.y = e,
            this.z = i,
            this.w = n)
        }
        var e = t.prototype;
        return e.clone = function() {
            return new t(this.x,this.y,this.z,this.w)
        }
        ,
        e.conjugate = function() {
            return this.x *= -1,
            this.y *= -1,
            this.z *= -1,
            this
        }
        ,
        e.copy = function(t) {
            return this.x = t.x,
            this.y = t.y,
            this.z = t.z,
            this.w = t.w,
            this
        }
        ,
        e.equals = function(t) {
            return this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w
        }
        ,
        e.getAxisAngle = function(t) {
            var e = 2 * Math.acos(this.w)
              , i = Math.sin(e / 2);
            return 0 !== i ? (t.x = this.x / i,
            t.y = this.y / i,
            t.z = this.z / i,
            (t.x < 0 || t.y < 0 || t.z < 0) && (t.x *= -1,
            t.y *= -1,
            t.z *= -1,
            e *= -1)) : (t.x = 1,
            t.y = 0,
            t.z = 0),
            e * it.RAD_TO_DEG
        }
        ,
        e.getEulerAngles = function(t) {
            var e, i, n;
            void 0 === t && (t = new lt);
            var s = this.x
              , a = this.y
              , r = this.z
              , o = this.w
              , h = 2 * (o * a - s * r);
            return h <= -.99999 ? (e = 2 * Math.atan2(s, o),
            i = -Math.PI / 2,
            n = 0) : h >= .99999 ? (e = 2 * Math.atan2(s, o),
            i = Math.PI / 2,
            n = 0) : (e = Math.atan2(2 * (o * s + a * r), 1 - 2 * (s * s + a * a)),
            i = Math.asin(h),
            n = Math.atan2(2 * (o * r + s * a), 1 - 2 * (a * a + r * r))),
            t.set(e, i, n).mulScalar(it.RAD_TO_DEG)
        }
        ,
        e.invert = function() {
            return this.conjugate().normalize()
        }
        ,
        e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
        }
        ,
        e.lengthSq = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
        }
        ,
        e.mul = function(t) {
            var e = this.x
              , i = this.y
              , n = this.z
              , s = this.w
              , a = t.x
              , r = t.y
              , o = t.z
              , h = t.w;
            return this.x = s * a + e * h + i * o - n * r,
            this.y = s * r + i * h + n * a - e * o,
            this.z = s * o + n * h + e * r - i * a,
            this.w = s * h - e * a - i * r - n * o,
            this
        }
        ,
        e.mul2 = function(t, e) {
            var i = t.x
              , n = t.y
              , s = t.z
              , a = t.w
              , r = e.x
              , o = e.y
              , h = e.z
              , l = e.w;
            return this.x = a * r + i * l + n * h - s * o,
            this.y = a * o + n * l + s * r - i * h,
            this.z = a * h + s * l + i * o - n * r,
            this.w = a * l - i * r - n * o - s * h,
            this
        }
        ,
        e.normalize = function() {
            var t = this.length();
            return 0 === t ? (this.x = this.y = this.z = 0,
            this.w = 1) : (t = 1 / t,
            this.x *= t,
            this.y *= t,
            this.z *= t,
            this.w *= t),
            this
        }
        ,
        e.set = function(t, e, i, n) {
            return this.x = t,
            this.y = e,
            this.z = i,
            this.w = n,
            this
        }
        ,
        e.setFromAxisAngle = function(t, e) {
            e *= .5 * it.DEG_TO_RAD;
            var i = Math.sin(e)
              , n = Math.cos(e);
            return this.x = i * t.x,
            this.y = i * t.y,
            this.z = i * t.z,
            this.w = n,
            this
        }
        ,
        e.setFromEulerAngles = function(t, e, i) {
            var n = .5 * it.DEG_TO_RAD;
            t *= n,
            e *= n,
            i *= n;
            var s = Math.sin(t)
              , a = Math.cos(t)
              , r = Math.sin(e)
              , o = Math.cos(e)
              , h = Math.sin(i)
              , l = Math.cos(i);
            return this.x = s * o * l - a * r * h,
            this.y = a * r * l + s * o * h,
            this.z = a * o * h - s * r * l,
            this.w = a * o * l + s * r * h,
            this
        }
        ,
        e.setFromMat4 = function(t) {
            var e, i, n, s, a, r, o, h, l, c, u, d, f, p;
            if (e = (t = t.data)[0],
            i = t[1],
            n = t[2],
            s = t[4],
            a = t[5],
            r = t[6],
            o = t[8],
            h = t[9],
            l = t[10],
            0 === (d = e * e + i * i + n * n))
                return this;
            if (d = 1 / Math.sqrt(d),
            0 === (f = s * s + a * a + r * r))
                return this;
            if (f = 1 / Math.sqrt(f),
            0 === (p = o * o + h * h + l * l))
                return this;
            i *= d,
            n *= d,
            s *= f,
            r *= f,
            o *= p = 1 / Math.sqrt(p),
            h *= p;
            var m = (e *= d) + (a *= f) + (l *= p);
            return m >= 0 ? (c = Math.sqrt(m + 1),
            this.w = .5 * c,
            c = .5 / c,
            this.x = (r - h) * c,
            this.y = (o - n) * c,
            this.z = (i - s) * c) : e > a ? e > l ? (u = e - (a + l) + 1,
            u = Math.sqrt(u),
            this.x = .5 * u,
            u = .5 / u,
            this.w = (r - h) * u,
            this.y = (i + s) * u,
            this.z = (n + o) * u) : (u = l - (e + a) + 1,
            u = Math.sqrt(u),
            this.z = .5 * u,
            u = .5 / u,
            this.w = (i - s) * u,
            this.x = (o + n) * u,
            this.y = (h + r) * u) : a > l ? (u = a - (l + e) + 1,
            u = Math.sqrt(u),
            this.y = .5 * u,
            u = .5 / u,
            this.w = (o - n) * u,
            this.z = (r + h) * u,
            this.x = (s + i) * u) : (u = l - (e + a) + 1,
            u = Math.sqrt(u),
            this.z = .5 * u,
            u = .5 / u,
            this.w = (i - s) * u,
            this.x = (o + n) * u,
            this.y = (h + r) * u),
            this
        }
        ,
        e.slerp = function(t, e, i) {
            var n = t.x
              , s = t.y
              , a = t.z
              , r = t.w
              , o = e.x
              , h = e.y
              , l = e.z
              , c = e.w
              , u = r * c + n * o + s * h + a * l;
            if (u < 0 && (c = -c,
            o = -o,
            h = -h,
            l = -l,
            u = -u),
            Math.abs(u) >= 1)
                return this.w = r,
                this.x = n,
                this.y = s,
                this.z = a,
                this;
            var d = Math.acos(u)
              , f = Math.sqrt(1 - u * u);
            if (Math.abs(f) < .001)
                return this.w = .5 * r + .5 * c,
                this.x = .5 * n + .5 * o,
                this.y = .5 * s + .5 * h,
                this.z = .5 * a + .5 * l,
                this;
            var p = Math.sin((1 - i) * d) / f
              , m = Math.sin(i * d) / f;
            return this.w = r * p + c * m,
            this.x = n * p + o * m,
            this.y = s * p + h * m,
            this.z = a * p + l * m,
            this
        }
        ,
        e.transformVector = function(t, e) {
            void 0 === e && (e = new lt);
            var i = t.x
              , n = t.y
              , s = t.z
              , a = this.x
              , r = this.y
              , o = this.z
              , h = this.w
              , l = h * i + r * s - o * n
              , c = h * n + o * i - a * s
              , u = h * s + a * n - r * i
              , d = -a * i - r * n - o * s;
            return e.x = l * h + d * -a + c * -o - u * -r,
            e.y = c * h + d * -r + u * -a - l * -o,
            e.z = u * h + d * -o + l * -r - c * -a,
            e
        }
        ,
        e.toString = function() {
            return "[" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + "]"
        }
        ,
        t
    }();
    yt.IDENTITY = Object.freeze(new yt(0,0,0,1)),
    yt.ZERO = Object.freeze(new yt(0,0,0,0));
    var xt = new lt
      , bt = new lt
      , St = new lt
      , Tt = new lt
      , wt = new lt
      , Mt = function() {
        function t(t, e) {
            void 0 === t && (t = new lt),
            void 0 === e && (e = new lt(.5,.5,.5)),
            this.center = t,
            this.halfExtents = e,
            this._min = new lt,
            this._max = new lt
        }
        var e = t.prototype;
        return e.add = function(t) {
            var e = this.center
              , i = e.x
              , n = e.y
              , s = e.z
              , a = this.halfExtents
              , r = a.x
              , o = a.y
              , h = a.z
              , l = i - r
              , c = i + r
              , u = n - o
              , d = n + o
              , f = s - h
              , p = s + h
              , m = t.center
              , _ = m.x
              , g = m.y
              , v = m.z
              , y = t.halfExtents
              , x = y.x
              , b = y.y
              , S = y.z
              , T = _ - x
              , w = _ + x
              , M = g - b
              , A = g + b
              , C = v - S
              , E = v + S;
            T < l && (l = T),
            w > c && (c = w),
            M < u && (u = M),
            A > d && (d = A),
            C < f && (f = C),
            E > p && (p = E),
            e.x = .5 * (l + c),
            e.y = .5 * (u + d),
            e.z = .5 * (f + p),
            a.x = .5 * (c - l),
            a.y = .5 * (d - u),
            a.z = .5 * (p - f)
        }
        ,
        e.copy = function(t) {
            this.center.copy(t.center),
            this.halfExtents.copy(t.halfExtents)
        }
        ,
        e.clone = function() {
            return new t(this.center.clone(),this.halfExtents.clone())
        }
        ,
        e.intersects = function(t) {
            var e = this.getMax()
              , i = this.getMin()
              , n = t.getMax()
              , s = t.getMin();
            return i.x <= n.x && e.x >= s.x && i.y <= n.y && e.y >= s.y && i.z <= n.z && e.z >= s.z
        }
        ,
        e._intersectsRay = function(t, e) {
            var i = xt.copy(this.getMin()).sub(t.origin)
              , n = bt.copy(this.getMax()).sub(t.origin)
              , s = t.direction;
            0 === s.x ? (i.x = i.x < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE,
            n.x = n.x < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE) : (i.x /= s.x,
            n.x /= s.x),
            0 === s.y ? (i.y = i.y < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE,
            n.y = n.y < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE) : (i.y /= s.y,
            n.y /= s.y),
            0 === s.z ? (i.z = i.z < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE,
            n.z = n.z < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE) : (i.z /= s.z,
            n.z /= s.z);
            var a = St.set(Math.min(i.x, n.x), Math.min(i.y, n.y), Math.min(i.z, n.z))
              , r = Tt.set(Math.max(i.x, n.x), Math.max(i.y, n.y), Math.max(i.z, n.z))
              , o = Math.min(Math.min(r.x, r.y), r.z)
              , h = Math.max(Math.max(a.x, a.y), a.z)
              , l = o >= h && h >= 0;
            return l && e.copy(t.direction).mulScalar(h).add(t.origin),
            l
        }
        ,
        e._fastIntersectsRay = function(t) {
            var e = xt
              , i = bt
              , n = St
              , s = Tt
              , a = wt
              , r = t.direction;
            return e.sub2(t.origin, this.center),
            s.set(Math.abs(e.x), Math.abs(e.y), Math.abs(e.z)),
            n.mul2(e, r),
            !(s.x > this.halfExtents.x && n.x >= 0) && (!(s.y > this.halfExtents.y && n.y >= 0) && (!(s.z > this.halfExtents.z && n.z >= 0) && (a.set(Math.abs(r.x), Math.abs(r.y), Math.abs(r.z)),
            i.cross(r, e),
            i.set(Math.abs(i.x), Math.abs(i.y), Math.abs(i.z)),
            !(i.x > this.halfExtents.y * a.z + this.halfExtents.z * a.y) && (!(i.y > this.halfExtents.x * a.z + this.halfExtents.z * a.x) && !(i.z > this.halfExtents.x * a.y + this.halfExtents.y * a.x)))))
        }
        ,
        e.intersectsRay = function(t, e) {
            return e ? this._intersectsRay(t, e) : this._fastIntersectsRay(t)
        }
        ,
        e.setMinMax = function(t, e) {
            this.center.add2(e, t).mulScalar(.5),
            this.halfExtents.sub2(e, t).mulScalar(.5)
        }
        ,
        e.getMin = function() {
            return this._min.copy(this.center).sub(this.halfExtents)
        }
        ,
        e.getMax = function() {
            return this._max.copy(this.center).add(this.halfExtents)
        }
        ,
        e.containsPoint = function(t) {
            var e = this.getMin()
              , i = this.getMax();
            return !(t.x < e.x || t.x > i.x || t.y < e.y || t.y > i.y || t.z < e.z || t.z > i.z)
        }
        ,
        e.setFromTransformedAabb = function(t, e) {
            var i = t.center
              , n = t.halfExtents
              , s = e.data
              , a = s[0]
              , r = s[4]
              , o = s[8]
              , h = s[1]
              , l = s[5]
              , c = s[9]
              , u = s[2]
              , d = s[6]
              , f = s[10];
            this.center.set(s[12] + a * i.x + r * i.y + o * i.z, s[13] + h * i.x + l * i.y + c * i.z, s[14] + u * i.x + d * i.y + f * i.z),
            this.halfExtents.set(Math.abs(a) * n.x + Math.abs(r) * n.y + Math.abs(o) * n.z, Math.abs(h) * n.x + Math.abs(l) * n.y + Math.abs(c) * n.z, Math.abs(u) * n.x + Math.abs(d) * n.y + Math.abs(f) * n.z)
        }
        ,
        e.compute = function(t, e) {
            if ((e = void 0 === e ? t.length / 3 : e) > 0) {
                for (var i = xt.set(t[0], t[1], t[2]), n = bt.set(t[0], t[1], t[2]), s = 1; s < e; s++) {
                    var a = t[3 * s + 0]
                      , r = t[3 * s + 1]
                      , o = t[3 * s + 2];
                    a < i.x && (i.x = a),
                    r < i.y && (i.y = r),
                    o < i.z && (i.z = o),
                    a > n.x && (n.x = a),
                    r > n.y && (n.y = r),
                    o > n.z && (n.z = o)
                }
                this.setMinMax(i, n)
            }
        }
        ,
        e.intersectsBoundingSphere = function(t) {
            return this._distanceToBoundingSphereSq(t) <= t.radius * t.radius
        }
        ,
        e._distanceToBoundingSphereSq = function(t) {
            for (var e = this.getMin(), i = this.getMax(), n = 0, s = ["x", "y", "z"], a = 0; a < 3; ++a) {
                var r = 0
                  , o = t.center[s[a]]
                  , h = e[s[a]]
                  , l = i[s[a]]
                  , c = 0;
                o < h && (r += (c = h - o) * c),
                o > l && (r += (c = o - l) * c),
                n += r
            }
            return n
        }
        ,
        e._expand = function(t, e) {
            xt.add2(this.getMin(), t),
            bt.add2(this.getMax(), e),
            this.setMinMax(xt, bt)
        }
        ,
        t
    }()
      , At = new lt
      , Ct = new lt
      , Et = function() {
        function t(t, e) {
            void 0 === t && (t = new lt),
            void 0 === e && (e = .5),
            this.center = t,
            this.radius = e
        }
        var e = t.prototype;
        return e.containsPoint = function(t) {
            var e = At.sub2(t, this.center).lengthSq()
              , i = this.radius;
            return e < i * i
        }
        ,
        e.intersectsRay = function(t, e) {
            var i = At.copy(t.origin).sub(this.center)
              , n = i.dot(Ct.copy(t.direction).normalize())
              , s = i.dot(i) - this.radius * this.radius;
            if (s > 0 && n > 0)
                return null;
            var a = n * n - s;
            if (a < 0)
                return !1;
            var r = Math.abs(-n - Math.sqrt(a));
            return e && e.copy(t.direction).mulScalar(r).add(t.origin),
            !0
        }
        ,
        e.intersectsBoundingSphere = function(t) {
            At.sub2(t.center, this.center);
            var e = t.radius + this.radius;
            return At.lengthSq() <= e * e
        }
        ,
        t
    }()
      , Pt = "none"
      , Rt = "linear"
      , It = 128
      , Lt = 256
      , Dt = 1024
      , kt = 2048
      , Ot = 4096
      , Ft = 8192
      , Bt = 18
      , Nt = [new lt, new lt, new lt, new lt, new lt, new lt, new lt, new lt]
      , Ut = function() {
        function t() {
            this.planes = [];
            for (var t = 0; t < 6; t++)
                this.planes[t] = []
        }
        var e = t.prototype;
        return e.setFromMat4 = function(t) {
            var e, i = t.data, n = this.planes;
            (e = n[0])[0] = i[3] - i[0],
            e[1] = i[7] - i[4],
            e[2] = i[11] - i[8],
            e[3] = i[15] - i[12];
            var s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]);
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s,
            (e = n[1])[0] = i[3] + i[0],
            e[1] = i[7] + i[4],
            e[2] = i[11] + i[8],
            e[3] = i[15] + i[12],
            s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]),
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s,
            (e = n[2])[0] = i[3] + i[1],
            e[1] = i[7] + i[5],
            e[2] = i[11] + i[9],
            e[3] = i[15] + i[13],
            s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]),
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s,
            (e = n[3])[0] = i[3] - i[1],
            e[1] = i[7] - i[5],
            e[2] = i[11] - i[9],
            e[3] = i[15] - i[13],
            s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]),
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s,
            (e = n[4])[0] = i[3] - i[2],
            e[1] = i[7] - i[6],
            e[2] = i[11] - i[10],
            e[3] = i[15] - i[14],
            s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]),
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s,
            (e = n[5])[0] = i[3] + i[2],
            e[1] = i[7] + i[6],
            e[2] = i[11] + i[10],
            e[3] = i[15] + i[14],
            s = Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]),
            e[0] /= s,
            e[1] /= s,
            e[2] /= s,
            e[3] /= s
        }
        ,
        e.containsPoint = function(t) {
            var e, i;
            for (e = 0; e < 6; e++)
                if ((i = this.planes[e])[0] * t.x + i[1] * t.y + i[2] * t.z + i[3] <= 0)
                    return !1;
            return !0
        }
        ,
        e.containsSphere = function(t) {
            var e, i, n, s = 0, a = t.radius, r = t.center, o = r.x, h = r.y, l = r.z, c = this.planes;
            for (i = 0; i < 6; i++) {
                if ((e = (n = c[i])[0] * o + n[1] * h + n[2] * l + n[3]) <= -a)
                    return 0;
                e > a && s++
            }
            return 6 === s ? 2 : 1
        }
        ,
        t.getPoints = function(t, e, i) {
            e = e || t._nearClip,
            i = i || t._farClip;
            var n = t._fov * Math.PI / 180
              , s = 0 === t._projection ? Math.tan(n / 2) * e : t._orthoHeight
              , a = s * t._aspectRatio
              , r = Nt;
            return r[0].x = a,
            r[0].y = -s,
            r[0].z = -e,
            r[1].x = a,
            r[1].y = s,
            r[1].z = -e,
            r[2].x = -a,
            r[2].y = s,
            r[2].z = -e,
            r[3].x = -a,
            r[3].y = -s,
            r[3].z = -e,
            0 === t._projection && (a = (s = Math.tan(n / 2) * i) * t._aspectRatio),
            r[4].x = a,
            r[4].y = -s,
            r[4].z = -i,
            r[5].x = a,
            r[5].y = s,
            r[5].z = -i,
            r[6].x = -a,
            r[6].y = s,
            r[6].z = -i,
            r[7].x = -a,
            r[7].y = -s,
            r[7].z = -i,
            r
        }
        ,
        t
    }()
      , zt = function() {
        function t(t, e) {
            void 0 === t && (t = new lt),
            void 0 === e && (e = new lt(0,0,-1)),
            this.origin = t,
            this.direction = e
        }
        return t.prototype.set = function(t, e) {
            return this.origin.copy(t),
            this.direction.copy(e),
            this
        }
        ,
        t
    }()
      , Vt = new zt
      , Gt = new lt
      , Wt = new Et
      , Ht = new vt
      , Xt = function() {
        function t(t, e) {
            void 0 === t && (t = new vt),
            void 0 === e && (e = new lt(.5,.5,.5)),
            this.halfExtents = e,
            this._modelTransform = t.clone().invert(),
            this._worldTransform = t.clone(),
            this._aabb = new Mt(new lt,this.halfExtents)
        }
        var e = t.prototype;
        return e.intersectsRay = function(t, e) {
            if (this._modelTransform.transformPoint(t.origin, Vt.origin),
            this._modelTransform.transformVector(t.direction, Vt.direction),
            e) {
                var i = this._aabb._intersectsRay(Vt, e);
                return Ht.copy(this._modelTransform).invert().transformPoint(e, e),
                i
            }
            return this._aabb._fastIntersectsRay(Vt)
        }
        ,
        e.containsPoint = function(t) {
            return this._modelTransform.transformPoint(t, Gt),
            this._aabb.containsPoint(Gt)
        }
        ,
        e.intersectsBoundingSphere = function(t) {
            return this._modelTransform.transformPoint(t.center, Wt.center),
            Wt.radius = t.radius,
            !!this._aabb.intersectsBoundingSphere(Wt)
        }
        ,
        G(t, [{
            key: "worldTransform",
            get: function() {
                return this._worldTransform
            },
            set: function(t) {
                this._worldTransform.copy(t),
                this._modelTransform.copy(t).invert()
            }
        }]),
        t
    }()
      , jt = new lt
      , qt = function() {
        function t(t, e) {
            void 0 === t && (t = new lt),
            void 0 === e && (e = new lt(0,0,1)),
            this.normal = e,
            this.point = t
        }
        var e = t.prototype;
        return e.intersectsLine = function(t, e, i) {
            var n = -this.normal.dot(this.point)
              , s = this.normal.dot(t) + n
              , a = s / (s - (this.normal.dot(e) + n))
              , r = a >= 0 && a <= 1;
            return r && i && i.lerp(t, e, a),
            r
        }
        ,
        e.intersectsRay = function(t, e) {
            var i = jt.sub2(this.point, t.origin)
              , n = this.normal.dot(i) / this.normal.dot(t.direction)
              , s = n >= 0;
            return s && e && e.copy(t.direction).mulScalar(n).add(t.origin),
            s
        }
        ,
        t
    }()
      , Yt = 10
      , Kt = 11
      , Zt = 12
      , $t = 13
      , Qt = 14
      , Jt = 16
      , te = 17
      , ee = 21
      , ie = 24
      , ne = 25
      , se = "POSITION"
      , ae = "NORMAL"
      , re = "TANGENT"
      , oe = "BLENDWEIGHT"
      , he = "BLENDINDICES"
      , le = "COLOR"
      , ce = "TEXCOORD"
      , ue = "TEXCOORD0"
      , de = "TEXCOORD1"
      , fe = "TEXCOORD2"
      , pe = "TEXCOORD3"
      , me = "TEXCOORD4"
      , _e = "TEXCOORD5"
      , ge = "TEXCOORD6"
      , ve = "TEXCOORD7"
      , ye = "ATTR"
      , xe = "ATTR0"
      , be = "ATTR1"
      , Se = "ATTR2"
      , Te = "ATTR3"
      , we = "ATTR4"
      , Me = "ATTR5"
      , Ae = "ATTR6"
      , Ce = "ATTR7"
      , Ee = "ATTR8"
      , Pe = "ATTR9"
      , Re = "ATTR10"
      , Ie = "ATTR11"
      , Le = "ATTR12"
      , De = "ATTR13"
      , ke = "ATTR14"
      , Oe = "ATTR15"
      , Fe = "default"
      , Be = "rgbm"
      , Ne = "rgbe"
      , Ue = "swizzleGGGR"
      , ze = "none"
      , Ve = "cube"
      , Ge = "equirect"
      , We = "octahedral"
      , He = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array]
      , Xe = [1, 1, 2, 2, 4, 4, 4]
      , je = {
        Int8Array: 0,
        Uint8Array: 1,
        Int16Array: 2,
        Uint16Array: 3,
        Int32Array: 4,
        Uint32Array: 5,
        Float32Array: 6
    }
      , qe = [Uint8Array, Uint16Array, Uint32Array]
      , Ye = {
        POSITION: 0,
        NORMAL: 1,
        BLENDWEIGHT: 2,
        BLENDINDICES: 3,
        COLOR: 4,
        TEXCOORD0: 5,
        TEXCOORD1: 6,
        TEXCOORD2: 7,
        TEXCOORD3: 8,
        TEXCOORD4: 9,
        TEXCOORD5: 10,
        TEXCOORD6: 11,
        TEXCOORD7: 12,
        TANGENT: 13,
        ATTR0: 0,
        ATTR1: 1,
        ATTR2: 2,
        ATTR3: 3,
        ATTR4: 4,
        ATTR5: 5,
        ATTR6: 6,
        ATTR7: 7,
        ATTR8: 8,
        ATTR9: 9,
        ATTR10: 10,
        ATTR11: 11,
        ATTR12: 12,
        ATTR13: 13,
        ATTR14: 14,
        ATTR15: 15
    }
      , Ke = 0
      , Ze = function() {
        function t(t, e, i, n, s) {
            void 0 === n && (n = 0),
            this.device = t,
            this.format = e,
            this.numVertices = i,
            this.usage = n,
            this.id = Ke++,
            this._vao = null,
            this.instancing = !1,
            this.numBytes = e.verticesByteSize ? e.verticesByteSize : e.size * i,
            t._vram.vb += this.numBytes,
            s ? this.setData(s) : this.storage = new ArrayBuffer(this.numBytes),
            this.device.buffers.push(this)
        }
        var e = t.prototype;
        return e.destroy = function() {
            var t = this.device
              , e = t.buffers.indexOf(this);
            if (-1 !== e && t.buffers.splice(e, 1),
            this.bufferId) {
                var i = t.gl;
                t.boundVao = null,
                i.bindVertexArray(null),
                i.deleteBuffer(this.bufferId),
                t._vram.vb -= this.storage.byteLength,
                this.bufferId = null
            }
        }
        ,
        e.loseContext = function() {
            this.bufferId = void 0,
            this._vao = null
        }
        ,
        e.getFormat = function() {
            return this.format
        }
        ,
        e.getUsage = function() {
            return this.usage
        }
        ,
        e.getNumVertices = function() {
            return this.numVertices
        }
        ,
        e.lock = function() {
            return this.storage
        }
        ,
        e.unlock = function() {
            var t, e = this.device.gl;
            switch (this.bufferId || (this.bufferId = e.createBuffer()),
            this.usage) {
            case 0:
                t = e.STATIC_DRAW;
                break;
            case 1:
                t = e.DYNAMIC_DRAW;
                break;
            case 2:
                t = e.STREAM_DRAW;
                break;
            case 3:
                t = this.device.webgl2 ? e.DYNAMIC_COPY : e.STATIC_DRAW
            }
            e.bindBuffer(e.ARRAY_BUFFER, this.bufferId),
            e.bufferData(e.ARRAY_BUFFER, this.storage, t)
        }
        ,
        e.setData = function(t) {
            return t.byteLength !== this.numBytes ? (console.error("VertexBuffer: wrong initial data size: expected " + this.numBytes + ", got " + t.byteLength),
            !1) : (this.storage = t,
            this.unlock(),
            !0)
        }
        ,
        t
    }();
    function $e(t) {
        for (var e = 0, i = 0, n = t.length; i < n; i++)
            e = (e << 5) - e + t.charCodeAt(i),
            e |= 0;
        return e
    }
    var Qe = function() {
        function t(t, e, i) {
            this.elements = [],
            this.hasUv0 = !1,
            this.hasUv1 = !1,
            this.hasColor = !1,
            this.hasTangents = !1,
            this.verticesByteSize = 0,
            this.vertexCount = i,
            this.interleaved = void 0 === i,
            this.size = e.reduce((function(t, e) {
                return t + 4 * Math.ceil(e.components * Xe[e.type] / 4)
            }
            ), 0);
            for (var n, s = 0, a = 0, r = e.length; a < r; a++) {
                var o = e[a];
                n = o.components * Xe[o.type],
                i && (s = it.roundUp(s, n));
                var h = {
                    name: o.semantic,
                    offset: i ? s : o.hasOwnProperty("offset") ? o.offset : s,
                    stride: i ? n : o.hasOwnProperty("stride") ? o.stride : this.size,
                    dataType: o.type,
                    numComponents: o.components,
                    normalize: void 0 !== o.normalize && o.normalize,
                    size: n
                };
                this.elements.push(h),
                s += i ? n * i : 4 * Math.ceil(n / 4),
                o.semantic === ue ? this.hasUv0 = !0 : o.semantic === de ? this.hasUv1 = !0 : o.semantic === le ? this.hasColor = !0 : o.semantic === re && (this.hasTangents = !0)
            }
            i && (this.verticesByteSize = s),
            this.update()
        }
        t.init = function(e) {
            var i = [{
                semantic: Le,
                components: 4,
                type: 6
            }, {
                semantic: De,
                components: 4,
                type: 6
            }, {
                semantic: ke,
                components: 4,
                type: 6
            }, {
                semantic: Oe,
                components: 4,
                type: 6
            }];
            t._defaultInstancingFormat = new t(e,i)
        }
        ;
        var e = t.prototype;
        return e.update = function() {
            this._evaluateHash()
        }
        ,
        e._evaluateHash = function() {
            for (var t, e, i = [], n = [], s = this.elements.length, a = 0; a < s; a++) {
                var r = this.elements[a];
                t = r.name,
                t += r.dataType,
                t += r.numComponents,
                t += r.normalize,
                i.push(t),
                e = t,
                e += r.offset,
                e += r.stride,
                e += r.size,
                n.push(e)
            }
            i.sort(),
            this.batchingHash = $e(i.join()),
            this.renderingingHash = $e(n.join())
        }
        ,
        G(t, null, [{
            key: "defaultInstancingFormat",
            get: function() {
                return t._defaultInstancingFormat
            }
        }]),
        t
    }();
    Qe._defaultInstancingFormat = null;
    var Je = null
      , ti = {
        type: 5,
        base: 0,
        count: 4,
        indexed: !1
    };
    function ei(t, e, i, n, s, a) {
        if (void 0 === a && (a = !1),
        null === Je) {
            var r = new Qe(t,[{
                semantic: se,
                components: 2,
                type: 6
            }])
              , o = new Float32Array(8);
            o.set([-1, -1, 1, -1, -1, 1, 1, 1]),
            Je = new Ze(t,r,4,0,o)
        }
        var h, l, c, u, d, f, p, m, _ = t.renderTarget;
        t.setRenderTarget(e),
        t.updateBegin(),
        n ? (h = n.x,
        l = n.y,
        c = n.z,
        u = n.w) : (c = e ? e.width : t.width,
        u = e ? e.height : t.height,
        h = 0,
        l = 0),
        s ? (d = s.x,
        f = s.y,
        p = s.z,
        m = s.w) : (d = h,
        f = l,
        p = c,
        m = u);
        var g = t.vx
          , v = t.vy
          , y = t.vw
          , x = t.vh;
        t.setViewport(h, l, c, u);
        var b = t.sx
          , S = t.sy
          , T = t.sw
          , w = t.sh;
        t.setScissor(d, f, p, m);
        var M = t.getDepthTest()
          , A = t.getDepthWrite()
          , C = t.getCullMode()
          , E = t.writeRed
          , P = t.writeGreen
          , R = t.writeBlue
          , I = t.writeAlpha;
        t.setDepthTest(!1),
        t.setDepthWrite(!1),
        t.setCullMode(0),
        t.setColorWrite(!0, !0, !0, !0),
        a || t.setBlending(!1),
        t.setVertexBuffer(Je, 0),
        t.setShader(i),
        t.draw(ti),
        t.setDepthTest(M),
        t.setDepthWrite(A),
        t.setCullMode(C),
        t.setColorWrite(E, P, R, I),
        t.updateEnd(),
        t.setRenderTarget(_),
        t.updateBegin(),
        t.setViewport(g, v, y, x),
        t.setScissor(b, S, T, w)
    }
    var ii = function() {
        function t(t, e) {
            this.device = t,
            this.definition = e,
            this.init(),
            this.device.createShader(this)
        }
        var e = t.prototype;
        return e.init = function() {
            this.attributes = [],
            this.uniforms = [],
            this.samplers = [],
            this.ready = !1,
            this.failed = !1
        }
        ,
        e.destroy = function() {
            this.device.destroyShader(this)
        }
        ,
        e.loseContext = function() {
            this.init()
        }
        ,
        t
    }()
      , ni = {
        alphaTestPS: "uniform float alpha_ref;\nvoid alphaTest(float a) {\n\tif (a < alpha_ref) discard;\n}\n",
        ambientConstantPS: "void addAmbient() {\n\tdDiffuseLight += light_globalAmbient;\n}\n",
        ambientPrefilteredCubePS: "#ifndef PMREM4\n#define PMREM4\nuniform samplerCube texture_prefilteredCubeMap4;\n#endif\nvoid addAmbient() {\n\tvec3 fixedReflDir = fixSeamsStatic(cubeMapRotate(dNormalW), 1.0 - 1.0 / 4.0);\n#ifndef RIGHT_HANDED_CUBEMAP\n\tfixedReflDir.x *= -1.0;\n#endif\n\tdDiffuseLight += processEnvironment($DECODE(textureCube(texture_prefilteredCubeMap4, fixedReflDir)).rgb);\n}\n",
        ambientPrefilteredCubeLodPS: "#ifndef PMREM4\n#define PMREM4\n#extension GL_EXT_shader_texture_lod : enable\nuniform samplerCube texture_prefilteredCubeMap128;\n#endif\nvoid addAmbient() {\n\tvec3 fixedReflDir = fixSeamsStatic(cubeMapRotate(dNormalW), 1.0 - 1.0 / 4.0);\n#ifndef RIGHT_HANDED_CUBEMAP\n\tfixedReflDir.x *= -1.0;\n#endif\n\tdDiffuseLight += processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, 5.0) ).rgb);\n}\n",
        ambientSHPS: "uniform vec3 ambientSH[9];\nvoid addAmbient() {\n\tvec3 n = cubeMapRotate(dNormalW);\n\tvec3 color =\n\t\tambientSH[0] +\n\t\tambientSH[1] * n.x +\n\t\tambientSH[2] * n.y +\n\t\tambientSH[3] * n.z +\n\t\tambientSH[4] * n.x * n.z +\n\t\tambientSH[5] * n.z * n.y +\n\t\tambientSH[6] * n.y * n.x +\n\t\tambientSH[7] * (3.0 * n.z * n.z - 1.0) +\n\t\tambientSH[8] * (n.x * n.x - n.y * n.y);\n\tdDiffuseLight += processEnvironment(max(color, vec3(0.0)));\n}\n",
        aoPS: "#ifdef MAPTEXTURE\nuniform sampler2D texture_aoMap;\n#endif\nvoid applyAO() {\n\tdAo = 1.0;\n\t#ifdef MAPTEXTURE\n\tdAo *= texture2D(texture_aoMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tdAo *= saturate(vVertexColor.$VC);\n\t#endif\n\tdDiffuseLight *= dAo;\n}\n",
        aoSpecOccPS: "uniform float material_occludeSpecularIntensity;\nvoid occludeSpecular() {\n\tfloat specPow = exp2(dGlossiness * 11.0);\n\tfloat specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\n\tspecOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);\n\tdSpecularLight *= specOcc;\n\tdReflection *= specOcc;\n}\n",
        aoSpecOccConstPS: "void occludeSpecular() {\n\tfloat specPow = exp2(dGlossiness * 11.0);\n\tfloat specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\n\tdSpecularLight *= specOcc;\n\tdReflection *= specOcc;\n}\n",
        aoSpecOccConstSimplePS: "void occludeSpecular() {\n\tfloat specOcc = dAo;\n\tdSpecularLight *= specOcc;\n\tdReflection *= specOcc;\n}\n",
        aoSpecOccSimplePS: "uniform float material_occludeSpecularIntensity;\nvoid occludeSpecular() {\n\tfloat specOcc = mix(1.0, dAo, material_occludeSpecularIntensity);\n\tdSpecularLight *= specOcc;\n\tdReflection *= specOcc;\n}\n",
        bakeDirLmEndPS: "\tvec4 dirLm = texture2D(texture_dirLightMap, vUv1);\n\tif (bakeDir > 0.5) {\n\t\tif (dAtten > 0.00001) {\n\t\t\tdirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);\n\t\t\tdAtten = saturate(dAtten);\n\t\t\tgl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);\n\t\t\tgl_FragColor.a = dirLm.w + dAtten;\n\t\t\tgl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);\n\t\t} else {\n\t\t\tgl_FragColor = dirLm;\n\t\t}\n\t} else {\n\t\tgl_FragColor.rgb = dirLm.xyz;\n\t\tgl_FragColor.a = max(dirLm.w, dAtten > 0.00001? (1.0/255.0) : 0.0);\n\t}\n",
        bakeLmEndPS: "\tgl_FragColor.rgb = dDiffuseLight;\n\tgl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));\n\tgl_FragColor.rgb /= 8.0;\n\tgl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );\n\tgl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;\n\tgl_FragColor.rgb /= gl_FragColor.a;\n",
        basePS: "uniform vec3 view_position;\nuniform vec3 light_globalAmbient;\nfloat square(float x) {\n\treturn x*x;\n}\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec3 saturate(vec3 x) {\n\treturn clamp(x, vec3(0.0), vec3(1.0));\n}\n",
        baseVS: "attribute vec3 vertex_position;\nattribute vec3 vertex_normal;\nattribute vec4 vertex_tangent;\nattribute vec2 vertex_texCoord0;\nattribute vec2 vertex_texCoord1;\nattribute vec4 vertex_color;\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\nuniform mat3 matrix_normal;\nvec3 dPositionW;\nmat4 dModelMatrix;\nmat3 dNormalMatrix;\n",
        baseNineSlicedPS: "#define NINESLICED\nvarying vec2 vMask;\nvarying vec2 vTiledUv;\nuniform mediump vec4 innerOffset;\nuniform mediump vec2 outerScale;\nuniform mediump vec4 atlasRect;\nvec2 nineSlicedUv;\n",
        baseNineSlicedVS: "#define NINESLICED\nvarying vec2 vMask;\nvarying vec2 vTiledUv;\nuniform mediump vec4 innerOffset;\nuniform mediump vec2 outerScale;\nuniform mediump vec4 atlasRect;\n",
        baseNineSlicedTiledPS: "#define NINESLICED\n#define NINESLICETILED\nvarying vec2 vMask;\nvarying vec2 vTiledUv;\nuniform mediump vec4 innerOffset;\nuniform mediump vec2 outerScale;\nuniform mediump vec4 atlasRect;\nvec2 nineSlicedUv;\n",
        biasConstPS: "#define SHADOWBIAS\nfloat getShadowBias(float resolution, float maxBias) {\n\treturn maxBias;\n}\n",
        blurVSMPS: "varying vec2 vUv0;\nuniform sampler2D source;\nuniform vec2 pixelOffset;\n#ifdef GAUSS\nuniform float weight[SAMPLES];\n#endif\n#ifdef PACKED\nfloat decodeFloatRG(vec2 rg) {\n\treturn rg.y*(1.0/255.0) + rg.x;\n}\nvec2 encodeFloatRG( float v ) {\n\tvec2 enc = vec2(1.0, 255.0) * v;\n\tenc = fract(enc);\n\tenc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n\treturn enc;\n}\n#endif\nvoid main(void) {\n\tvec3 moments = vec3(0.0);\n\tvec2 uv = vUv0 - pixelOffset * (float(SAMPLES) * 0.5);\n\tfor (int i=0; i<SAMPLES; i++) {\n\t\tvec4 c = texture2D(source, uv + pixelOffset * float(i));\n\t\t#ifdef PACKED\n\t\tc.xy = vec2(decodeFloatRG(c.xy), decodeFloatRG(c.zw));\n\t\t#endif\n\t\t#ifdef GAUSS\n\t\tmoments += c.xyz * weight[i];\n\t\t#else\n\t\tmoments += c.xyz;\n\t\t#endif\n\t}\n\t#ifndef GAUSS\n\tmoments /= float(SAMPLES);\n\t#endif\n\t#ifdef PACKED\n\tgl_FragColor = vec4(encodeFloatRG(moments.x), encodeFloatRG(moments.y));\n\t#else\n\tgl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);\n\t#endif\n}\n",
        clearCoatPS: "#ifdef MAPFLOAT\nuniform float material_clearCoat;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_clearCoatMap;\n#endif\nvoid getClearCoat() {\n\tccSpecularity = 1.0;\n\t#ifdef MAPFLOAT\n\tccSpecularity *= material_clearCoat;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tccSpecularity *= texture2D(texture_clearCoatMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tccSpecularity *= saturate(vVertexColor.$VC);\n\t#endif\n}\n",
        clearCoatGlossPS: "#ifdef MAPFLOAT\nuniform float material_clearCoatGlossiness;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_clearCoatGlossMap;\n#endif\nvoid getClearCoatGlossiness() {\n\tccGlossiness = 1.0;\n\t#ifdef MAPFLOAT\n\tccGlossiness *= material_clearCoatGlossiness;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tccGlossiness *= texture2D(texture_clearCoatGlossMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tccGlossiness *= saturate(vVertexColor.$VC);\n\t#endif\n\tccGlossiness += 0.0000001;\n}\n",
        clearCoatNormalPS: "#ifdef MAPTEXTURE\nuniform sampler2D texture_clearCoatNormalMap;\nuniform float material_clearCoatBumpiness;\n#endif\nvoid getClearCoatNormal() {\n\t#ifdef MAPTEXTURE\n\tvec3 normalMap = unpackNormal(texture2D(texture_clearCoatNormalMap, $UV));\n\tnormalMap = normalize(mix(vec3(0.0, 0.0, 1.0), normalMap, material_clearCoatBumpiness));\n\tccNormalW = dTBN * normalMap;\n\t#else\n\tccNormalW = normalize(dVertexNormalW);\n\t#endif\n\tccReflDirW = normalize(-reflect(dViewDirW, ccNormalW));\n}\n",
        clusteredLightCookiesPS: "vec3 _getCookieClustered(sampler2D tex, vec2 uv, float intensity, bool isRgb, vec4 cookieChannel) {\n\tvec4 pixel = mix(vec4(1.0), texture2D(tex, uv), intensity);\n\treturn isRgb == true ? pixel.rgb : vec3(dot(pixel, cookieChannel));\n}\nvec3 getCookie2DClustered(sampler2D tex, mat4 transform, vec3 worldPosition, float intensity, bool isRgb, vec4 cookieChannel) {\n\tvec4 projPos = transform * vec4(worldPosition, 1.0);\n\treturn _getCookieClustered(tex, projPos.xy / projPos.w, intensity, isRgb, cookieChannel);\n}\nvec3 getCookieCubeClustered(sampler2D tex, vec3 dir, float intensity, bool isRgb, vec4 cookieChannel, float shadowTextureResolution, float shadowEdgePixels, vec3 omniAtlasViewport) {\n\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);\n\treturn _getCookieClustered(tex, uv, intensity, isRgb, cookieChannel);\n}\n",
        clusteredLightShadowsPS: "\n#ifdef GL2\nfloat getShadowOmniClusteredSingleSample(sampler2DShadow shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {\n\tfloat shadowTextureResolution = shadowParams.x;\n\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);\n\tfloat shadowZ = length(dir) * shadowParams.w + shadowParams.z;\n\treturn texture(shadowMap, vec3(uv, shadowZ));\n}\nfloat getShadowOmniClusteredPCF3x3(sampler2DShadow shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {\n\tfloat shadowTextureResolution = shadowParams.x;\n\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);\n\tfloat shadowZ = length(dir) * shadowParams.w + shadowParams.z;\n\tdShadowCoord = vec3(uv, shadowZ);\n\treturn getShadowPCF3x3(shadowMap, shadowParams.xyz);\n}\n#else\nfloat getShadowOmniClusteredSingleSample(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {\n\tfloat shadowTextureResolution = shadowParams.x;\n\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);\n\tfloat depth = unpackFloat(texture2D(shadowMap, uv));\n\tfloat shadowZ = length(dir) * shadowParams.w + shadowParams.z;\n\treturn depth > shadowZ ? 1.0 : 0.0;\n}\nfloat getShadowOmniClusteredPCF3x3(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 dir) {\n\tfloat shadowTextureResolution = shadowParams.x;\n\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);\n\tfloat shadowZ = length(dir) * shadowParams.w + shadowParams.z;\n\tdShadowCoord = vec3(uv, shadowZ);\n\treturn getShadowPCF3x3(shadowMap, shadowParams.xyz);\n}\n#endif\n",
        clusteredLightUtilsPS: "\nvec2 getCubemapFaceCoordinates(const vec3 dir, out float faceIndex, out vec2 tileOffset)\n{\n\tvec3 vAbs = abs(dir);\n\tfloat ma;\n\tvec2 uv;\n\tif (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {\n\t\tfaceIndex = dir.z < 0.0 ? 5.0 : 4.0;\n\t\tma = 0.5 / vAbs.z;\n\t\tuv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);\n\t\ttileOffset.x = 2.0;\n\t\ttileOffset.y = dir.z < 0.0 ? 1.0 : 0.0;\n\t} else if(vAbs.y >= vAbs.x) {\n\t\tfaceIndex = dir.y < 0.0 ? 3.0 : 2.0;\n\t\tma = 0.5 / vAbs.y;\n\t\tuv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);\n\t\ttileOffset.x = 1.0;\n\t\ttileOffset.y = dir.y < 0.0 ? 1.0 : 0.0;\n\t} else {\n\t\tfaceIndex = dir.x < 0.0 ? 1.0 : 0.0;\n\t\tma = 0.5 / vAbs.x;\n\t\tuv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);\n\t\ttileOffset.x = 0.0;\n\t\ttileOffset.y = dir.x < 0.0 ? 1.0 : 0.0;\n\t}\n\treturn uv * ma + 0.5;\n}\nvec2 getCubemapAtlasCoordinates(const vec3 omniAtlasViewport, float shadowEdgePixels, float shadowTextureResolution, const vec3 dir) {\n\tfloat faceIndex;\n\tvec2 tileOffset;\n\tvec2 uv = getCubemapFaceCoordinates(dir, faceIndex, tileOffset);\n\tfloat atlasFaceSize = omniAtlasViewport.z;\n\tfloat tileSize = shadowTextureResolution * atlasFaceSize;\n\tfloat offset = shadowEdgePixels / tileSize;\n\tuv = uv * vec2(1.0 - offset * 2.0) + vec2(offset * 1.0);\n\tuv *= atlasFaceSize;\n\tuv += tileOffset * atlasFaceSize;\n\tuv += omniAtlasViewport.xy;\n\treturn uv;\n}\n",
        clusteredLightPS: "uniform sampler2D clusterWorldTexture;\nuniform sampler2D lightsTexture8;\nuniform highp sampler2D lightsTextureFloat;\n#ifdef CLUSTER_SHADOWS\n\t#ifdef GL2\n\t\tuniform sampler2DShadow shadowAtlasTexture;\n\t#else\n\t\tuniform sampler2D shadowAtlasTexture;\n\t#endif\n#endif\n#ifdef CLUSTER_COOKIES\n\tuniform sampler2D cookieAtlasTexture;\n#endif\nuniform float clusterPixelsPerCell;\nuniform vec3 clusterCellsCountByBoundsSize;\nuniform vec4 lightsTextureInvSize;\nuniform vec3 clusterTextureSize;\nuniform vec3 clusterBoundsMin;\nuniform vec3 clusterBoundsDelta;\nuniform vec3 clusterCellsDot;\nuniform vec3 clusterCellsMax;\nuniform vec2 clusterCompressionLimit0;\nuniform vec2 shadowAtlasParams;\nfloat LTCLightValuesEvaluated = 0.0;\nstruct ClusterLightData {\n\tfloat lightV;\n\tfloat type;\n\tfloat shape;\n\tvec3 halfWidth;\n\tvec3 halfHeight;\n\tfloat falloffMode;\n\tfloat castShadows;\n\tfloat shadowBias;\n\tfloat shadowNormalBias;\n\tvec3 position;\n\tvec3 direction;\n\tfloat range;\n\tfloat innerConeAngleCos;\n\tfloat outerConeAngleCos;\n\tvec3 color;\n\tvec3 omniAtlasViewport;\n\tfloat cookie;\n\tfloat cookieRgb;\n\tfloat cookieIntensity;\n\tvec4 cookieChannelMask;\n};\nmat4 lightProjectionMatrix;\n#define isClusteredLightCastShadow(light) ( light.castShadows > 0.5 )\n#define isClusteredLightCookie(light) (light.cookie > 0.5 )\n#define isClusteredLightCookieRgb(light) (light.cookieRgb > 0.5 )\n#define isClusteredLightSpot(light) ( light.type > 0.5 )\n#define isClusteredLightFalloffLinear(light) ( light.falloffMode < 0.5 )\n#define isClusteredLightArea(light) ( light.shape > 0.1 )\n#define isClusteredLightRect(light) ( light.shape < 0.3 )\n#define isClusteredLightDisk(light) ( light.shape < 0.6 )\nvec4 decodeClusterLowRange4Vec4(vec4 d0, vec4 d1, vec4 d2, vec4 d3) {\n\treturn vec4(\n\t\tbytes2floatRange4(d0, -2.0, 2.0),\n\t\tbytes2floatRange4(d1, -2.0, 2.0),\n\t\tbytes2floatRange4(d2, -2.0, 2.0),\n\t\tbytes2floatRange4(d3, -2.0, 2.0)\n\t);\n}\nvec4 sampleLightsTexture8(const ClusterLightData clusterLightData, float index) {\n\treturn texture2D(lightsTexture8, vec2(index * lightsTextureInvSize.z, clusterLightData.lightV));\n}\nvec4 sampleLightTextureF(const ClusterLightData clusterLightData, float index) {\n\treturn texture2D(lightsTextureFloat, vec2(index * lightsTextureInvSize.x, clusterLightData.lightV));\n}\nvoid decodeClusterLightCore(inout ClusterLightData clusterLightData, float lightIndex) {\n\tclusterLightData.lightV = (lightIndex + 0.5) * lightsTextureInvSize.w;\n\tvec4 lightInfo = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_FLAGS);\n\tclusterLightData.type = lightInfo.x;\n\tclusterLightData.shape = lightInfo.y;\n\tclusterLightData.falloffMode = lightInfo.z;\n\tclusterLightData.castShadows = lightInfo.w;\n\tvec4 colorA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COLOR_A);\n\tvec4 colorB = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COLOR_B);\n\tclusterLightData.color = vec3(bytes2float2(colorA.xy), bytes2float2(colorA.zw), bytes2float2(colorB.xy)) * clusterCompressionLimit0.y;\n\tclusterLightData.cookie = colorB.z;\n\t#ifdef CLUSTER_TEXTURE_FLOAT\n\t\tvec4 lightPosRange = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_POSITION_RANGE);\n\t\tclusterLightData.position = lightPosRange.xyz;\n\t\tclusterLightData.range = lightPosRange.w;\n\t\tvec4 lightDir_Unused = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_SPOT_DIRECTION);\n\t\tclusterLightData.direction = lightDir_Unused.xyz;\n\t#else\n\t\tvec4 encPosX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_X);\n\t\tvec4 encPosY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_Y);\n\t\tvec4 encPosZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_POSITION_Z);\n\t\tclusterLightData.position = vec3(bytes2float4(encPosX), bytes2float4(encPosY), bytes2float4(encPosZ)) * clusterBoundsDelta + clusterBoundsMin;\n\t\tvec4 encRange = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_RANGE);\n\t\tclusterLightData.range = bytes2float4(encRange) * clusterCompressionLimit0.x;\n\t\tvec4 encDirX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_X);\n\t\tvec4 encDirY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_Y);\n\t\tvec4 encDirZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_DIRECTION_Z);\n\t\tclusterLightData.direction = vec3(bytes2float4(encDirX), bytes2float4(encDirY), bytes2float4(encDirZ)) * 2.0 - 1.0;\n\t#endif\n}\nvoid decodeClusterLightSpot(inout ClusterLightData clusterLightData) {\n\tvec4 coneAngle = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SPOT_ANGLES);\n\tclusterLightData.innerConeAngleCos = bytes2float2(coneAngle.xy) * 2.0 - 1.0;\n\tclusterLightData.outerConeAngleCos = bytes2float2(coneAngle.zw) * 2.0 - 1.0;\n}\nvoid decodeClusterLightOmniAtlasViewport(inout ClusterLightData clusterLightData) {\n\t#ifdef CLUSTER_TEXTURE_FLOAT\n\t\tclusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_0).xyz;\n\t#else\n\t\tvec4 viewportA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_ATLAS_VIEWPORT_A);\n\t\tvec4 viewportB = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_ATLAS_VIEWPORT_B);\n\t\tclusterLightData.omniAtlasViewport = vec3(bytes2float2(viewportA.xy), bytes2float2(viewportA.zw), bytes2float2(viewportB.xy));\n\t#endif\n}\nvoid decodeClusterLightAreaData(inout ClusterLightData clusterLightData) {\n\t#ifdef CLUSTER_TEXTURE_FLOAT\n\t\tclusterLightData.halfWidth = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_AREA_DATA_WIDTH).xyz;\n\t\tclusterLightData.halfHeight = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_AREA_DATA_HEIGHT).xyz;\n\t#else\n\t\tvec4 areaWidthX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_X);\n\t\tvec4 areaWidthY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_Y);\n\t\tvec4 areaWidthZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_WIDTH_Z);\n\t\tclusterLightData.halfWidth = vec3(mantisaExponent2Float(areaWidthX), mantisaExponent2Float(areaWidthY), mantisaExponent2Float(areaWidthZ));\n\t\tvec4 areaHeightX = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_X);\n\t\tvec4 areaHeightY = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_Y);\n\t\tvec4 areaHeightZ = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_AREA_DATA_HEIGHT_Z);\n\t\tclusterLightData.halfHeight = vec3(mantisaExponent2Float(areaHeightX), mantisaExponent2Float(areaHeightY), mantisaExponent2Float(areaHeightZ));\n\t#endif\n}\nvoid decodeClusterLightProjectionMatrixData(inout ClusterLightData clusterLightData) {\n\t#ifdef CLUSTER_TEXTURE_FLOAT\n\t\tvec4 m0 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_0);\n\t\tvec4 m1 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_1);\n\t\tvec4 m2 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_2);\n\t\tvec4 m3 = sampleLightTextureF(clusterLightData, CLUSTER_TEXTURE_F_PROJ_MAT_3);\n\t#else\n\t\tvec4 m00 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_00);\n\t\tvec4 m01 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_01);\n\t\tvec4 m02 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_02);\n\t\tvec4 m03 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_03);\n\t\tvec4 m0 = decodeClusterLowRange4Vec4(m00, m01, m02, m03);\n\t\tvec4 m10 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_10);\n\t\tvec4 m11 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_11);\n\t\tvec4 m12 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_12);\n\t\tvec4 m13 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_13);\n\t\tvec4 m1 = decodeClusterLowRange4Vec4(m10, m11, m12, m13);\n\t\tvec4 m20 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_20);\n\t\tvec4 m21 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_21);\n\t\tvec4 m22 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_22);\n\t\tvec4 m23 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_23);\n\t\tvec4 m2 = decodeClusterLowRange4Vec4(m20, m21, m22, m23);\n\t\tvec4 m30 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_30);\n\t\tvec4 m31 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_31);\n\t\tvec4 m32 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_32);\n\t\tvec4 m33 = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_PROJ_MAT_33);\n\t\tvec4 m3 = vec4(mantisaExponent2Float(m30), mantisaExponent2Float(m31), mantisaExponent2Float(m32), mantisaExponent2Float(m33));\n\t#endif\n\tlightProjectionMatrix = mat4(m0, m1, m2, m3);\n}\nvoid decodeClusterLightShadowData(inout ClusterLightData clusterLightData) {\n\tvec4 biases = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_SHADOW_BIAS);\n\tclusterLightData.shadowBias = bytes2floatRange2(biases.xy, -1.0, 20.0),\n\tclusterLightData.shadowNormalBias = bytes2float2(biases.zw);\n}\nvoid decodeClusterLightCookieData(inout ClusterLightData clusterLightData) {\n\tvec4 cookieA = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COOKIE_A);\n\tclusterLightData.cookieIntensity = cookieA.x;\n\tclusterLightData.cookieRgb = cookieA.y;\n\tclusterLightData.cookieChannelMask = sampleLightsTexture8(clusterLightData, CLUSTER_TEXTURE_8_COOKIE_B);\n}\nvoid evaluateLight(ClusterLightData light) {\n\tdAtten3 = vec3(1.0);\n\tgetLightDirPoint(light.position);\n\t#ifdef CLUSTER_AREALIGHTS\n\tif (isClusteredLightArea(light)) {\n\t\tdecodeClusterLightAreaData(light);\n\t\tif (LTCLightValuesEvaluated < 0.5) {\n\t\t\tLTCLightValuesEvaluated = 1.0;\n\t\t\tcalcLTCLightValues();\n\t\t}\n\t\tif (isClusteredLightRect(light)) {\n\t\t\tcalcRectLightValues(light.position, light.halfWidth, light.halfHeight);\n\t\t} else if (isClusteredLightDisk(light)) {\n\t\t\tcalcDiskLightValues(light.position, light.halfWidth, light.halfHeight);\n\t\t} else {\n\t\t\tcalcSphereLightValues(light.position, light.halfWidth, light.halfHeight);\n\t\t}\n\t\tdAtten = getFalloffWindow(light.range);\n\t} else\n\t#endif\n\t{\n\t\tif (isClusteredLightFalloffLinear(light))\n\t\t\tdAtten = getFalloffLinear(light.range);\n\t\telse\n\t\t\tdAtten = getFalloffInvSquared(light.range);\n\t}\n\tif (dAtten > 0.00001) {\n\t\t#ifdef CLUSTER_AREALIGHTS\n\t\tif (isClusteredLightArea(light)) {\n\t\t\tif (isClusteredLightRect(light)) {\n\t\t\t\tdAttenD = getRectLightDiffuse() * 16.0;\n\t\t\t} else if (isClusteredLightDisk(light)) {\n\t\t\t\tdAttenD = getDiskLightDiffuse() * 16.0;\n\t\t\t} else {\n\t\t\t\tdAttenD = getSphereLightDiffuse() * 16.0;\n\t\t\t}\n\t\t} else\n\t\t#endif\n\t\t{\n\t\t\tdAtten *= getLightDiffuse();\n\t\t}\n\t\tif (isClusteredLightSpot(light)) {\n\t\t\tdecodeClusterLightSpot(light);\n\t\t\tdAtten *= getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos);\n\t\t}\n\t\t#if defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)\n\t\tif (dAtten > 0.00001) {\n\t\t\tif (isClusteredLightCastShadow(light) || isClusteredLightCookie(light)) {\n\t\t\t\tif (isClusteredLightSpot(light)) {\n\t\t\t\t\tdecodeClusterLightProjectionMatrixData(light);\n\t\t\t\t} else {\n\t\t\t\t\tdecodeClusterLightOmniAtlasViewport(light);\n\t\t\t\t}\n\t\t\t\tfloat shadowTextureResolution = shadowAtlasParams.x;\n\t\t\t\tfloat shadowEdgePixels = shadowAtlasParams.y;\n\t\t\t\t#ifdef CLUSTER_COOKIES\n\t\t\t\tif (isClusteredLightCookie(light)) {\n\t\t\t\t\tdecodeClusterLightCookieData(light);\n\t\t\t\t\tif (isClusteredLightSpot(light)) {\n\t\t\t\t\t\tdAtten3 = getCookie2DClustered(cookieAtlasTexture, lightProjectionMatrix, vPositionW, light.cookieIntensity, isClusteredLightCookieRgb(light), light.cookieChannelMask);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdAtten3 = getCookieCubeClustered(cookieAtlasTexture, dLightDirW, light.cookieIntensity, isClusteredLightCookieRgb(light), light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#endif\n\t\t\t\t#ifdef CLUSTER_SHADOWS\n\t\t\t\tif (isClusteredLightCastShadow(light)) {\n\t\t\t\t\tdecodeClusterLightShadowData(light);\n\t\t\t\t\tvec4 shadowParams = vec4(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);\n\t\t\t\t\tif (isClusteredLightSpot(light)) {\n\t\t\t\t\t\tgetShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams);\n\t\t\t\t\t\tdAtten *= getShadowSpotPCF3x3(shadowAtlasTexture, shadowParams);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnormalOffsetPointShadow(shadowParams);\n\t\t\t\t\t\tdAtten *= getShadowOmniClusteredPCF3x3(shadowAtlasTexture, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dLightDirW);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#endif\n\t\t\t}\n\t\t}\n\t\t#endif\n\t\t#ifdef CLUSTER_AREALIGHTS\n\t\tif (isClusteredLightArea(light)) {\n\t\t\t{\n\t\t\t\tvec3 areaDiffuse = (dAttenD * dAtten) * light.color * dAtten3;\n\t\t\t\t#if defined(CLUSTER_SPECULAR) && defined(CLUSTER_CONSERVE_ENERGY)\n\t\t\t\t\tareaDiffuse = mix(areaDiffuse, vec3(0), dLTCSpecFres);\n\t\t\t\t#endif\n\t\t\t\tdDiffuseLight += areaDiffuse;\n\t\t\t}\n\t\t\t#ifdef CLUSTER_SPECULAR\n\t\t\t\tfloat areaLightSpecular;\n\t\t\t\tif (isClusteredLightRect(light)) {\n\t\t\t\t\tareaLightSpecular = getRectLightSpecular();\n\t\t\t\t} else if (isClusteredLightDisk(light)) {\n\t\t\t\t\tareaLightSpecular = getDiskLightSpecular();\n\t\t\t\t} else {\n\t\t\t\t\tareaLightSpecular = getSphereLightSpecular();\n\t\t\t\t}\n\t\t\t\tdSpecularLight += dLTCSpecFres * areaLightSpecular * dAtten * light.color * dAtten3;\n\t\t\t\t#ifdef CLUSTER_CLEAR_COAT\n\t\t\t\t\tfloat areaLightSpecularCC;\n\t\t\t\t\tif (isClusteredLightRect(light)) {\n\t\t\t\t\t\tareaLightSpecularCC = getRectLightSpecularCC();\n\t\t\t\t\t} else if (isClusteredLightDisk(light)) {\n\t\t\t\t\t\tareaLightSpecularCC = getDiskLightSpecularCC();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tareaLightSpecularCC = getSphereLightSpecularCC();\n\t\t\t\t\t}\n\t\t\t\t\tccSpecularLight += ccLTCSpecFres * areaLightSpecularCC * dAtten * light.color  * dAtten3;\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t} else\n\t\t#endif\n\t\t{\n\t\t\t{\n\t\t\t\tvec3 punctualDiffuse = dAtten * light.color * dAtten3;\n\t\t\t\t#if defined(CLUSTER_AREALIGHTS) && defined(CLUSTER_SPECULAR) && defined(CLUSTER_CONSERVE_ENERGY)\n\t\t\t\t\tpunctualDiffuse = mix(punctualDiffuse, vec3(0), dSpecularity);\n\t\t\t\t#endif\n\t\t\t\tdDiffuseLight += punctualDiffuse;\n\t\t\t}\n\t\t\t#ifdef CLUSTER_SPECULAR\n\t\t\t\t{\n\t\t\t\t\tvec3 punctualSpecular = getLightSpecular() * dAtten * light.color * dAtten3;\n\t\t\t\t\t#if defined(CLUSTER_AREALIGHTS)\n\t\t\t\t\t\tpunctualSpecular *= dSpecularity;\n\t\t\t\t\t#endif\n\t\t\t\t\tdSpecularLight += punctualSpecular;\n\t\t\t\t}\n\t\t\t\t#ifdef CLUSTER_CLEAR_COAT\n\t\t\t\t\tvec3 punctualCC = getLightSpecularCC() * dAtten * light.color * dAtten3;\n\t\t\t\t\t#if defined(CLUSTER_AREALIGHTS)\n\t\t\t\t\t\tpunctualCC *= ccSpecularity;\n\t\t\t\t\t#endif\n\t\t\t\t\tccSpecularLight += punctualCC;\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t}\n\t}\n}\nvoid evaluateClusterLight(float lightIndex) {\n\tClusterLightData clusterLightData;\n\tdecodeClusterLightCore(clusterLightData, lightIndex);\n\tevaluateLight(clusterLightData);\n}\nvoid addClusteredLights() {\n\tvec3 cellCoords = floor((vPositionW - clusterBoundsMin) * clusterCellsCountByBoundsSize);\n\tif (!(any(lessThan(cellCoords, vec3(0.0))) || any(greaterThanEqual(cellCoords, clusterCellsMax)))) {\n\t\tfloat cellIndex = dot(clusterCellsDot, cellCoords);\n\t\tfloat clusterV = floor(cellIndex * clusterTextureSize.y);\n\t\tfloat clusterU = cellIndex - (clusterV * clusterTextureSize.x);\n\t\tclusterV = (clusterV + 0.5) * clusterTextureSize.z;\n\t\tconst float maxLightCells = 256.0 / 4.0;\n\t\tfor (float lightCellIndex = 0.5; lightCellIndex < maxLightCells; lightCellIndex++) {\n\t\t\tvec4 lightIndices = texture2D(clusterWorldTexture, vec2(clusterTextureSize.y * (clusterU + lightCellIndex), clusterV));\n\t\t\tvec4 indices = lightIndices * 255.0;\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tfloat index = indices.x;\n\t\t\t\tif (i == 1) index = indices.y;\n\t\t\t\telse if (i == 2) index = indices.z;\n\t\t\t\telse if (i == 3) index = indices.w;\n\t\t\t\tif (index <= 0.0)\n\t\t\t\t\treturn;\n\t\t\t\tevaluateClusterLight(index);\n\t\t\t}\n\t\t\tif (lightCellIndex > clusterPixelsPerCell) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n",
        combineClearCoatPS: "vec3 combineColorCC() {\n\treturn combineColor()+(ccSpecularLight*ccSpecularity+ccReflection.rgb*ccSpecularity*ccReflection.a);\n}\n",
        combineDiffusePS: "vec3 combineColor() {\n\treturn dAlbedo * dDiffuseLight;\n}\n",
        combineDiffuseSpecularPS: "vec3 combineColor() {\n\treturn mix(dAlbedo * dDiffuseLight, dSpecularLight + dReflection.rgb * dReflection.a, dSpecularity);\n}\n",
        combineDiffuseSpecularNoConservePS: "vec3 combineColor() {\n\treturn dAlbedo * dDiffuseLight + (dSpecularLight + dReflection.rgb * dReflection.a) * dSpecularity;\n}\n",
        combineDiffuseSpecularNoReflPS: "vec3 combineColor() {\n\treturn dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity;\n}\n",
        combineDiffuseSpecularNoReflSeparateAmbientPS: "uniform vec3 material_ambient;\nvec3 combineColor() {\n\treturn (dDiffuseLight - light_globalAmbient) * dAlbedo + dSpecularLight * dSpecularity + material_ambient * light_globalAmbient;\n}\n",
        combineDiffuseSpecularOldPS: "vec3 combineColor() {\n\treturn mix(dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity, dReflection.rgb, dReflection.a);\n}\n",
        cookiePS: "\nvec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {\n\tvec4 projPos = transform * vec4(vPositionW, 1.0);\n\tprojPos.xy /= projPos.w;\n\treturn mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\n}\nvec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {\n\tvec4 projPos = transform * vec4(vPositionW, 1.0);\n\tprojPos.xy /= projPos.w;\n\tif (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\n\treturn mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\n}\nvec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\n\tvec4 projPos = transform * vec4(vPositionW, 1.0);\n\tprojPos.xy /= projPos.w;\n\tprojPos.xy += cookieOffset;\n\tvec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\n\treturn mix(vec4(1.0), texture2D(tex, uv), intensity);\n}\nvec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\n\tvec4 projPos = transform * vec4(vPositionW, 1.0);\n\tprojPos.xy /= projPos.w;\n\tprojPos.xy += cookieOffset;\n\tif (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\n\tvec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\n\treturn mix(vec4(1.0), texture2D(tex, uv), intensity);\n}\nvec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {\n\treturn mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);\n}\n",
        cubeMapProjectBoxPS: "uniform vec3 envBoxMin, envBoxMax;\nvec3 cubeMapProject(vec3 nrdir) {\n\tnrdir = cubeMapRotate(nrdir);\n\tvec3 rbmax = (envBoxMax - vPositionW) / nrdir;\n\tvec3 rbmin = (envBoxMin - vPositionW) / nrdir;\n\tvec3 rbminmax;\n\trbminmax.x = nrdir.x>0.0? rbmax.x : rbmin.x;\n\trbminmax.y = nrdir.y>0.0? rbmax.y : rbmin.y;\n\trbminmax.z = nrdir.z>0.0? rbmax.z : rbmin.z;\n\tfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\n\tvec3 posonbox = vPositionW + nrdir * fa;\n\tvec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;\n\treturn posonbox - envBoxPos;\n}\n",
        cubeMapProjectNonePS: "vec3 cubeMapProject(vec3 dir) {\n\treturn cubeMapRotate(dir);\n}\n",
        cubeMapRotatePS: "#ifdef CUBEMAP_ROTATION\nuniform mat3 cubeMapRotationMatrix;\n#endif\nvec3 cubeMapRotate(vec3 refDir) {\n#ifdef CUBEMAP_ROTATION\n\treturn refDir * cubeMapRotationMatrix;\n#else\n\treturn refDir;\n#endif\n}\n",
        detailModesPS: "vec3 detailMode_mul(vec3 c1, vec3 c2) {\n\treturn c1 * c2;\n}\nvec3 detailMode_add(vec3 c1, vec3 c2) {\n\treturn c1 + c2;\n}\nvec3 detailMode_screen(vec3 c1, vec3 c2) {\n\treturn 1.0 - (1.0 - c1)*(1.0 - c2);\n}\nvec3 detailMode_overlay(vec3 c1, vec3 c2) {\n\treturn mix(1.0 - 2.0*(1.0 - c1)*(1.0 - c2), 2.0*c1*c2, step(c1, vec3(0.5)));\n}\nvec3 detailMode_min(vec3 c1, vec3 c2) {\n\treturn min(c1, c2);\n}\nvec3 detailMode_max(vec3 c1, vec3 c2) {\n\treturn max(c1, c2);\n}\n",
        diffusePS: "#ifdef MAPCOLOR\nuniform vec3 material_diffuse;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_diffuseMap;\n#endif\nvoid getAlbedo() {\n\tdAlbedo = vec3(1.0);\n\t#ifdef MAPCOLOR\n\tdAlbedo *= material_diffuse.rgb;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tdAlbedo *= gammaCorrectInput(addAlbedoDetail(texture2D(texture_diffuseMap, $UV).$CH));\n\t#endif\n\t#ifdef MAPVERTEX\n\tdAlbedo *= gammaCorrectInput(saturate(vVertexColor.$VC));\n\t#endif\n}\n",
        diffuseDetailMapPS: "#ifdef MAPTEXTURE\nuniform sampler2D texture_diffuseDetailMap;\n#endif\nvec3 addAlbedoDetail(vec3 albedo) {\n\t#ifdef MAPTEXTURE\n\tvec3 albedoDetail = vec3(texture2D(texture_diffuseDetailMap, $UV).$CH);\n\treturn detailMode_$DETAILMODE(albedo, albedoDetail);\n\t#else\n\treturn albedo;\n\t#endif\n}\n",
        dilatePS: "#define SHADER_NAME Dilate\nvarying vec2 vUv0;\nuniform sampler2D source;\nuniform vec2 pixelOffset;\nvoid main(void) {\n\tvec4 c = texture2D(source, vUv0);\n\tc = c.a>0.0? c : texture2D(source, vUv0 - pixelOffset);\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, -pixelOffset.y));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, 0));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, 0));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, pixelOffset.y));\n\tc = c.a>0.0? c : texture2D(source, vUv0 + pixelOffset);\n\tgl_FragColor = c;\n}\n",
        bilateralDeNoisePS: "\n#define SHADER_NAME BilateralDeNoise\nfloat normpdf3(in vec3 v, in float sigma) {\n\treturn 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;\n}\nvec3 decodeRGBM(vec4 rgbm) {\n\tvec3 color = (8.0 * rgbm.a) * rgbm.rgb;\n\treturn color * color;\n}\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec4 encodeRGBM(vec3 color) {\n\tvec4 encoded;\n\tencoded.rgb = pow(color.rgb, vec3(0.5));\n\tencoded.rgb *= 1.0 / 8.0;\n\tencoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );\n\tencoded.a = ceil(encoded.a * 255.0) / 255.0;\n\tencoded.rgb /= encoded.a;\n\treturn encoded;\n}\n#define MSIZE 15\nvarying vec2 vUv0;\nuniform sampler2D source;\nuniform vec2 pixelOffset;\nuniform vec2 sigmas;\nuniform float bZnorm;\nuniform float kernel[MSIZE];\nvoid main(void) {\n\tvec4 pixelRgbm = texture2D(source, vUv0);\n\tif (pixelRgbm.a <= 0.0) {\n\t\tgl_FragColor = pixelRgbm;\n\t\treturn ;\n\t}\n\tfloat sigma = sigmas.x;\n\tfloat bSigma = sigmas.y;\n\tvec3 pixelHdr = decodeRGBM(pixelRgbm);\n\tvec3 accumulatedHdr = vec3(0.0);\n\tfloat accumulatedFactor = 0.0;\n\tconst int kSize = (MSIZE-1)/2;\n\tfor (int i = -kSize; i <= kSize; ++i) {\n\t\tfor (int j = -kSize; j <= kSize; ++j) {\n\t\t\tvec2 coord = vUv0 + vec2(float(i), float(j)) * pixelOffset;\n\t\t\tvec4 rgbm = texture2D(source, coord);\n\t\t\tif (rgbm.a > 0.0) {\n\t\t\t\tvec3 hdr = decodeRGBM(rgbm);\n\t\t\t\tfloat factor = kernel[kSize + j] * kernel[kSize + i];\n\t\t\t\tfactor *= normpdf3(hdr - pixelHdr, bSigma) * bZnorm;\n\t\t\t\taccumulatedHdr += factor * hdr;\n\t\t\t\taccumulatedFactor += factor;\n\t\t\t}\n\t\t}\n\t}\n\tgl_FragColor = encodeRGBM(accumulatedHdr / accumulatedFactor);\n}\n",
        dpAtlasQuadPS: "varying vec2 vUv0;\nuniform sampler2D source;\nuniform vec4 params;\nvoid main(void) {\n\tvec2 uv = vUv0;\n\tuv = uv * 2.0 - vec2(1.0);\n\tuv *= params.xy;\n\tuv = uv * 0.5 + 0.5;\n\tgl_FragColor = texture2D(source, uv);\n}\n",
        emissivePS: "#ifdef MAPCOLOR\nuniform vec3 material_emissive;\n#endif\n#ifdef MAPFLOAT\nuniform float material_emissiveIntensity;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_emissiveMap;\n#endif\nvec3 getEmission() {\n\tvec3 emission = vec3(1.0);\n\t#ifdef MAPFLOAT\n\temission *= material_emissiveIntensity;\n\t#endif\n\t#ifdef MAPCOLOR\n\temission *= material_emissive;\n\t#endif\n\t#ifdef MAPTEXTURE\n\temission *= $texture2DSAMPLE(texture_emissiveMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\temission *= gammaCorrectInput(saturate(vVertexColor.$VC));\n\t#endif\n\treturn emission;\n}\n",
        endPS: "\t#ifdef CLEARCOAT\n\tgl_FragColor.rgb = combineColorCC();\n\t#else\n\tgl_FragColor.rgb = combineColor();\n\t#endif\n\tgl_FragColor.rgb += getEmission();\n\tgl_FragColor.rgb = addFog(gl_FragColor.rgb);\n\t#ifndef HDR\n\tgl_FragColor.rgb = toneMap(gl_FragColor.rgb);\n\tgl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);\n\t#endif\n",
        endVS: "\n",
        envConstPS: "vec3 processEnvironment(vec3 color) {\n\treturn color;\n}\n",
        envMultiplyPS: "uniform float skyboxIntensity;\nvec3 processEnvironment(vec3 color) {\n\treturn color * skyboxIntensity;\n}\n",
        extensionPS: "\n",
        extensionVS: "\n",
        falloffInvSquaredPS: "float getFalloffWindow(float lightRadius) {\n\tfloat sqrDist = dot(dLightDirW, dLightDirW);\n\tfloat invRadius = 1.0 / lightRadius;\n\treturn square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\n}\nfloat getFalloffInvSquared(float lightRadius) {\n\tfloat sqrDist = dot(dLightDirW, dLightDirW);\n\tfloat falloff = 1.0 / (sqrDist + 1.0);\n\tfloat invRadius = 1.0 / lightRadius;\n\tfalloff *= 16.0;\n\tfalloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\n\treturn falloff;\n}\n",
        falloffLinearPS: "float getFalloffLinear(float lightRadius) {\n\tfloat d = length(dLightDirW);\n\treturn max(((lightRadius - d) / lightRadius), 0.0);\n}\n",
        fixCubemapSeamsNonePS: "vec3 fixSeams(vec3 vec, float mipmapIndex) {\n\treturn vec;\n}\nvec3 fixSeams(vec3 vec) {\n\treturn vec;\n}\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\n\treturn vec;\n}\nvec3 calcSeam(vec3 vec) {\n\treturn vec3(0);\n}\nvec3 applySeam(vec3 vec, vec3 seam, float scale) {\n\treturn vec;\n}\n",
        fixCubemapSeamsStretchPS: "vec3 fixSeams(vec3 vec, float mipmapIndex) {\n\tfloat scale = 1.0 - exp2(mipmapIndex) / 128.0;\n\tfloat M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n\tif (abs(vec.x) != M) vec.x *= scale;\n\tif (abs(vec.y) != M) vec.y *= scale;\n\tif (abs(vec.z) != M) vec.z *= scale;\n\treturn vec;\n}\nvec3 fixSeams(vec3 vec) {\n\tfloat scale = 1.0 - 1.0 / 128.0;\n\tfloat M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n\tif (abs(vec.x) != M) vec.x *= scale;\n\tif (abs(vec.y) != M) vec.y *= scale;\n\tif (abs(vec.z) != M) vec.z *= scale;\n\treturn vec;\n}\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\n\tfloat scale = invRecMipSize;\n\tfloat M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n\tif (abs(vec.x) != M) vec.x *= scale;\n\tif (abs(vec.y) != M) vec.y *= scale;\n\tif (abs(vec.z) != M) vec.z *= scale;\n\treturn vec;\n}\nvec3 calcSeam(vec3 vec) {\n\tvec3 avec = abs(vec);\n\tfloat M = max(avec.x, max(avec.y, avec.z));\n\treturn vec3(avec.x != M ? 1.0 : 0.0,\n\t\t\t\tavec.y != M ? 1.0 : 0.0,\n\t\t\t\tavec.z != M ? 1.0 : 0.0);\n}\nvec3 applySeam(vec3 vec, vec3 seam, float scale) {\n\treturn vec * (seam * -scale + vec3(1.0));\n}\n",
        floatUnpackingPS: "\nfloat bytes2float2(vec2 data) {\n\treturn dot(data, vec2(1.0, 1.0 / 255.0));\n}\nfloat bytes2float3(vec3 data) {\n\treturn dot(data, vec3(1.0, 1.0 / 255.0, 1.0 / 65025.0));\n}\nfloat bytes2float4(vec4 data) {\n\treturn dot(data, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n}\nfloat bytes2floatRange2(vec2 data, float min, float max) {\n\treturn mix(min, max, bytes2float2(data));\n}\nfloat bytes2floatRange3(vec3 data, float min, float max) {\n\treturn mix(min, max, bytes2float3(data));\n}\nfloat bytes2floatRange4(vec4 data, float min, float max) {\n\treturn mix(min, max, bytes2float4(data));\n}\nfloat mantisaExponent2Float(vec4 pack)\n{\n\tfloat value = bytes2floatRange3(pack.xyz, -1.0, 1.0);\n\tfloat exponent = floor(pack.w * 255.0 - 127.0);\n\treturn value * exp2(exponent);\n}\n",
        fogExpPS: "uniform vec3 fog_color;\nuniform float fog_density;\nfloat dBlendModeFogFactor = 1.0;\nvec3 addFog(vec3 color) {\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogFactor = exp(-depth * fog_density);\n\tfogFactor = clamp(fogFactor, 0.0, 1.0);\n\treturn mix(fog_color * dBlendModeFogFactor, color, fogFactor);\n}\n",
        fogExp2PS: "uniform vec3 fog_color;\nuniform float fog_density;\nfloat dBlendModeFogFactor = 1.0;\nvec3 addFog(vec3 color) {\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogFactor = exp(-depth * depth * fog_density * fog_density);\n\tfogFactor = clamp(fogFactor, 0.0, 1.0);\n\treturn mix(fog_color * dBlendModeFogFactor, color, fogFactor);\n}\n",
        fogLinearPS: "uniform vec3 fog_color;\nuniform float fog_start;\nuniform float fog_end;\nfloat dBlendModeFogFactor = 1.0;\nvec3 addFog(vec3 color) {\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\tfloat fogFactor = (fog_end - depth) / (fog_end - fog_start);\n\tfogFactor = clamp(fogFactor, 0.0, 1.0);\n\tfogFactor = gammaCorrectInput(fogFactor);\n\treturn mix(fog_color * dBlendModeFogFactor, color, fogFactor);\n}\n",
        fogNonePS: "float dBlendModeFogFactor = 1.0;\nvec3 addFog(vec3 color) {\n\treturn color;\n}\n",
        fresnelSchlickPS: "\nuniform float material_fresnelFactor;\nvoid getFresnel() {\n\tfloat fresnel = 1.0 - max(dot(dNormalW, dViewDirW), 0.0);\n\tfloat fresnel2 = fresnel * fresnel;\n\tfresnel *= fresnel2 * fresnel2;\n\tfresnel *= dGlossiness * dGlossiness;\n\tdSpecularity = dSpecularity + (1.0 - dSpecularity) * fresnel;\n\t#ifdef CLEARCOAT\n\tfresnel = 1.0 - max(dot(ccNormalW, dViewDirW), 0.0);\n\tfresnel2 = fresnel * fresnel;\n\tfresnel *= fresnel2 * fresnel2;\n\tfresnel *= ccGlossiness * ccGlossiness;\n\tccSpecularity = ccSpecularity + (1.0 - ccSpecularity) * fresnel;\n\t#endif\n}\n",
        fullscreenQuadPS: "varying vec2 vUv0;\nuniform sampler2D source;\nvoid main(void) {\n\tgl_FragColor = texture2D(source, vUv0);\n}\n",
        fullscreenQuadVS: "attribute vec2 vertex_position;\nvarying vec2 vUv0;\nvoid main(void)\n{\n\tgl_Position = vec4(vertex_position, 0.5, 1.0);\n\tvUv0 = vertex_position.xy*0.5+0.5;\n}\n",
        gamma1_0PS: "vec4 texture2DSRGB(sampler2D tex, vec2 uv) {\n\treturn texture2D(tex, uv);\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\n\treturn texture2D(tex, uv, bias);\n}\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\n\treturn textureCube(tex, uvw);\n}\nvec3 gammaCorrectOutput(vec3 color) {\n\treturn color;\n}\nvec3 gammaCorrectInput(vec3 color) {\n\treturn color;\n}\nfloat gammaCorrectInput(float color) {\n\treturn color;\n}\nvec4 gammaCorrectInput(vec4 color) {\n\treturn color;\n}\n",
        gamma2_2PS: "vec3 gammaCorrectInput(vec3 color) {\n\treturn pow(color, vec3(2.2));\n}\nfloat gammaCorrectInput(float color) {\n\treturn pow(color, 2.2);\n}\nvec4 gammaCorrectInput(vec4 color) {\n\treturn vec4(pow(color.rgb, vec3(2.2)), color.a);\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv) {\n\tvec4 rgba = texture2D(tex, uv);\n\trgba.rgb = gammaCorrectInput(rgba.rgb);\n\treturn rgba;\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\n\tvec4 rgba = texture2D(tex, uv, bias);\n\trgba.rgb = gammaCorrectInput(rgba.rgb);\n\treturn rgba;\n}\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\n\tvec4 rgba = textureCube(tex, uvw);\n\trgba.rgb = gammaCorrectInput(rgba.rgb);\n\treturn rgba;\n}\nvec3 gammaCorrectOutput(vec3 color) {\n\t#ifdef HDR\n\treturn color;\n\t#else\n\tcolor += vec3(0.0000001);\n\treturn pow(color, vec3(0.45));\n\t#endif\n}\n",
        genParaboloidPS: "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params;\nvoid main(void) {\n\tvec2 uv = vUv0;\n\tfloat side = uv.x < 0.5? 1.0 : -1.0;\n\tvec2 tc;\n\ttc.x = fract(uv.x * 2.0) * 2.0 - 1.0;\n\ttc.y = uv.y * 2.0 - 1.0;\n\tconst float scale = 1.1;\n\ttc *= scale;\n\tvec3 dir;\n\tdir.y = (dot(tc, tc) - 1.0) * side;\n\tdir.xz = tc * -2.0;\n\tdir.x *= -side * params.y;\n\tdir = fixSeams(dir, params.x);\n\tvec4 color = textureCube(source, dir, -100.0);\n\tgl_FragColor = color;\n}\n",
        gles3PS: "#define varying in\nout highp vec4 pc_fragColor;\n#define gl_FragColor pc_fragColor\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad\n#define GL2\n",
        gles3VS: "#define attribute in\n#define varying out\n#define texture2D texture\n#define GL2\n#define VERTEXSHADER\n",
        glossPS: "#ifdef MAPFLOAT\nuniform float material_shininess;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_glossMap;\n#endif\nvoid getGlossiness() {\n\tdGlossiness = 1.0;\n\t#ifdef MAPFLOAT\n\tdGlossiness *= material_shininess;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tdGlossiness *= texture2D(texture_glossMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tdGlossiness *= saturate(vVertexColor.$VC);\n\t#endif\n\tdGlossiness += 0.0000001;\n}\n",
        instancingVS: "attribute vec4 instance_line1;\nattribute vec4 instance_line2;\nattribute vec4 instance_line3;\nattribute vec4 instance_line4;\n",
        lightDiffuseLambertPS: "float getLightDiffuse() {\n\treturn max(dot(dNormalW, -dLightDirNormW), 0.0);\n}\n",
        lightDirPointPS: "void getLightDirPoint(vec3 lightPosW) {\n\tdLightDirW = vPositionW - lightPosW;\n\tdLightDirNormW = normalize(dLightDirW);\n\tdLightPosW = lightPosW;\n}\n",
        lightmapDirPS: "uniform sampler2D texture_lightMap;\nuniform sampler2D texture_dirLightMap;\nvoid addLightMap() {\n\tvec3 color = $texture2DSAMPLE(texture_lightMap, $UV).$CH;\n\tvec3 dir = texture2D(texture_dirLightMap, $UV).xyz;\n\tif (dot(dir, vec3(1.0)) < 0.00001) {\n\t\tdDiffuseLight += color;\n\t} else {\n\t\tdLightDirNormW = normalize(dir * 2.0 - vec3(1.0));\n\t\tfloat vlight = saturate(dot(dLightDirNormW, -dVertexNormalW));\n\t\tfloat flight = saturate(dot(dLightDirNormW, -dNormalW));\n\t\tfloat nlight = (flight / max(vlight, 0.01)) * 0.5;\n\t\tdDiffuseLight += color * nlight * 2.0;\n\t}\n\tdSpecularLight += color * getLightSpecular();\n}\n",
        lightmapSinglePS: "#ifdef MAPTEXTURE\nuniform sampler2D texture_lightMap;\n#endif\nvoid addLightMap() {\n\tvec3 lm = vec3(1.0);\n\t#ifdef MAPTEXTURE\n\tlm *= $texture2DSAMPLE(texture_lightMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tlm *= saturate(vVertexColor.$VC);\n\t#endif\n\tdDiffuseLight += lm;\n}\n",
        lightmapSingleVertPS: "void addLightMap() {\n\tdDiffuseLight += saturate(vVertexColor.$CH);\n}\n",
        lightSpecularAnisoGGXPS: "\nfloat calcLightSpecular(float tGlossiness, vec3 tNormalW) {\n\tfloat PI = 3.141592653589793;\n\tfloat roughness = max((1.0 - tGlossiness) * (1.0 - tGlossiness), 0.001);\n\tfloat anisotropy = material_anisotropy * roughness;\n\tfloat at = max((roughness + anisotropy), roughness / 4.0);\n\tfloat ab = max((roughness - anisotropy), roughness / 4.0);\n\tvec3 h = normalize(normalize(-dLightDirNormW) + normalize(dViewDirW));\n\tfloat NoH = dot(tNormalW, h);\n\tfloat ToH = dot(dTBN[0], h);\n\tfloat BoH = dot(dTBN[1], h);\n\tfloat a2 = at * ab;\n\tvec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\n\tfloat v2 = dot(v, v);\n\tfloat w2 = a2 / v2;\n\tfloat D = a2 * w2 * w2 * (1.0 / PI);\n\tfloat ToV = dot(dTBN[0], dViewDirW);\n\tfloat BoV = dot(dTBN[1], dViewDirW);\n\tfloat ToL = dot(dTBN[0], -dLightDirNormW);\n\tfloat BoL = dot(dTBN[1], -dLightDirNormW);\n\tfloat NoV = dot(tNormalW, dViewDirW);\n\tfloat NoL = dot(tNormalW, -dLightDirNormW);\n\tfloat lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\n\tfloat lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\n\tfloat G = 0.5 / (lambdaV + lambdaL);\n\treturn D * G;\n}\nfloat getLightSpecular() {\n\treturn calcLightSpecular(dGlossiness, dNormalW);\n}\nfloat getLightSpecularCC() {\n\treturn calcLightSpecular(ccGlossiness, ccNormalW);\n}\n",
        lightSpecularBlinnPS: "\nfloat calcLightSpecular(float tGlossiness, vec3 tNormalW) {\n\tvec3 h = normalize( -dLightDirNormW + dViewDirW );\n\tfloat nh = max( dot( h, tNormalW ), 0.0 );\n\tfloat specPow = exp2(tGlossiness * 11.0);\n\tspecPow = antiAliasGlossiness(specPow);\n\tspecPow = max(specPow, 0.0001);\n\treturn pow(nh, specPow) * (specPow + 2.0) / 8.0;\n}\nfloat getLightSpecular() {\n\treturn calcLightSpecular(dGlossiness, dNormalW);\n}\nfloat getLightSpecularCC() {\n\treturn calcLightSpecular(ccGlossiness, ccNormalW);\n}\n",
        lightSpecularPhongPS: "float calcLightSpecular(float tGlossiness, vec3 tReflDirW) {\n\tfloat specPow = tGlossiness;\n\tspecPow = antiAliasGlossiness(specPow);\n\treturn pow(max(dot(tReflDirW, -dLightDirNormW), 0.0), specPow + 0.0001);\n}\nfloat getLightSpecular() {\n\treturn calcLightSpecular(dGlossiness, dReflDirW);\n}\nfloat getLightSpecularCC() {\n\treturn calcLightSpecular(ccGlossiness, ccReflDirW);\n}\n",
        ltc: "\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nstruct Coords {\n\tvec3 coord0;\n\tvec3 coord1;\n\tvec3 coord2;\n\tvec3 coord3;\n};\nfloat LTC_EvaluateRect( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in Coords rectCoords) {\n\tvec3 v1 = rectCoords.coord1 - rectCoords.coord0;\n\tvec3 v2 = rectCoords.coord3 - rectCoords.coord0;\n\tvec3 lightNormal = cross( v1, v2 );\n\tfloat factor = sign(-dot( lightNormal, P - rectCoords.coord0 ));\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 =  factor * cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords.coord0 - P );\n\tcoords[ 1 ] = mat * ( rectCoords.coord1 - P );\n\tcoords[ 2 ] = mat * ( rectCoords.coord2 - P );\n\tcoords[ 3 ] = mat * ( rectCoords.coord3 - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn result;\n}\nCoords dLTCCoords;\nCoords getLTCLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){\n\tCoords coords;\n\tcoords.coord0 = lightPos + halfWidth - halfHeight;\n\tcoords.coord1 = lightPos - halfWidth - halfHeight;\n\tcoords.coord2 = lightPos - halfWidth + halfHeight;\n\tcoords.coord3 = lightPos + halfWidth + halfHeight;\n\treturn coords;\n}\nfloat dSphereRadius;\nCoords getSphereLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){\n\tdSphereRadius = max(length(halfWidth), length(halfHeight));\n\tvec3 f = reflect(normalize(lightPos - view_position), vNormalW);\n\tvec3 w = normalize(cross(f, halfHeight));\n\tvec3 h = normalize(cross(f, w));\n\treturn getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);\n}\nvec2 dLTCUV;\n#ifdef CLEARCOAT\nvec2 ccLTCUV;\n#endif\nvec2 getLTCLightUV(float tGlossiness, vec3 tNormalW)\n{\n\tfloat roughness = max((1.0 - tGlossiness) * (1.0 - tGlossiness), 0.001);\n\treturn LTC_Uv( tNormalW, dViewDirW, roughness );\n}\nvec3 dLTCSpecFres;\n#ifdef CLEARCOAT\nvec3 ccLTCSpecFres;\n#endif\nvec3 getLTCLightSpecFres(vec2 uv, vec3 tSpecularity)\n{\n\tvec4 t2 = texture2D( areaLightsLutTex2, uv );\n\t#ifdef AREA_R8_G8_B8_A8_LUTS\n\tt2 *= vec4(0.693103,1,1,1);\n\tt2 += vec4(0.306897,0,0,0);\n\t#endif\n\treturn tSpecularity * t2.x + ( vec3( 1.0 ) - tSpecularity) * t2.y;\n}\nvoid calcLTCLightValues()\n{\n\tdLTCUV = getLTCLightUV(dGlossiness, dNormalW);\n\tdLTCSpecFres = getLTCLightSpecFres(dLTCUV, dSpecularityNoFres);\n#ifdef CLEARCOAT\n\tccLTCUV = getLTCLightUV(ccGlossiness, ccNormalW);\n\tccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3(ccSpecularityNoFres));\n#endif\n}\nvoid calcRectLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n\tdLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);\n}\nvoid calcDiskLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n\tcalcRectLightValues(lightPos, halfWidth, halfHeight);\n}\nvoid calcSphereLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight)\n{\n\tdLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);\n}\nvec3 SolveCubic(vec4 Coefficient)\n{\n\tfloat pi = 3.14159;\n\tCoefficient.xyz /= Coefficient.w;\n\tCoefficient.yz /= 3.0;\n\tfloat A = Coefficient.w;\n\tfloat B = Coefficient.z;\n\tfloat C = Coefficient.y;\n\tfloat D = Coefficient.x;\n\tvec3 Delta = vec3(\n\t\t-Coefficient.z * Coefficient.z + Coefficient.y,\n\t\t-Coefficient.y * Coefficient.z + Coefficient.x,\n\t\tdot(vec2(Coefficient.z, -Coefficient.y), Coefficient.xy)\n\t);\n\tfloat Discriminant = dot(vec2(4.0 * Delta.x, -Delta.y), Delta.zy);\n\tvec3 RootsA, RootsD;\n\tvec2 xlc, xsc;\n\t{\n\t\tfloat A_a = 1.0;\n\t\tfloat C_a = Delta.x;\n\t\tfloat D_a = -2.0 * B * Delta.x + Delta.y;\n\t\tfloat Theta = atan(sqrt(Discriminant), -D_a) / 3.0;\n\t\tfloat x_1a = 2.0 * sqrt(-C_a) * cos(Theta);\n\t\tfloat x_3a = 2.0 * sqrt(-C_a) * cos(Theta + (2.0 / 3.0) * pi);\n\t\tfloat xl;\n\t\tif ((x_1a + x_3a) > 2.0 * B)\n\t\t\txl = x_1a;\n\t\telse\n\t\t\txl = x_3a;\n\t\txlc = vec2(xl - B, A);\n\t}\n\t{\n\t\tfloat A_d = D;\n\t\tfloat C_d = Delta.z;\n\t\tfloat D_d = -D * Delta.y + 2.0 * C * Delta.z;\n\t\tfloat Theta = atan(D * sqrt(Discriminant), -D_d) / 3.0;\n\t\tfloat x_1d = 2.0 * sqrt(-C_d) * cos(Theta);\n\t\tfloat x_3d = 2.0 * sqrt(-C_d) * cos(Theta + (2.0 / 3.0) * pi);\n\t\tfloat xs;\n\t\tif (x_1d + x_3d < 2.0 * C)\n\t\t\txs = x_1d;\n\t\telse\n\t\t\txs = x_3d;\n\t\txsc = vec2(-D, xs + C);\n\t}\n\tfloat E =  xlc.y * xsc.y;\n\tfloat F = -xlc.x * xsc.y - xlc.y * xsc.x;\n\tfloat G =  xlc.x * xsc.x;\n\tvec2 xmc = vec2(C * F - B * G, -B * F + C * E);\n\tvec3 Root = vec3(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);\n\tif (Root.x < Root.y && Root.x < Root.z)\n\t\tRoot.xyz = Root.yxz;\n\telse if (Root.z < Root.x && Root.z < Root.y)\n\t\tRoot.xyz = Root.xzy;\n\treturn Root;\n}\nfloat LTC_EvaluateDisk(vec3 N, vec3 V, vec3 P, mat3 Minv, Coords points)\n{\n\tvec3 T1, T2;\n\tT1 = normalize(V - N * dot(V, N));\n\tT2 = cross(N, T1);\n\tmat3 R = transposeMat3( mat3( T1, T2, N ) );\n\tvec3 L_[ 3 ];\n\tL_[ 0 ] = R * ( points.coord0 - P );\n\tL_[ 1 ] = R * ( points.coord1 - P );\n\tL_[ 2 ] = R * ( points.coord2 - P );\n\tvec3 Lo_i = vec3(0);\n\tvec3 C  = 0.5 * (L_[0] + L_[2]);\n\tvec3 V1 = 0.5 * (L_[1] - L_[2]);\n\tvec3 V2 = 0.5 * (L_[1] - L_[0]);\n\tC  = Minv * C;\n\tV1 = Minv * V1;\n\tV2 = Minv * V2;\n\tfloat a, b;\n\tfloat d11 = dot(V1, V1);\n\tfloat d22 = dot(V2, V2);\n\tfloat d12 = dot(V1, V2);\n\tif (abs(d12) / sqrt(d11 * d22) > 0.0001)\n\t{\n\t\tfloat tr = d11 + d22;\n\t\tfloat det = -d12 * d12 + d11 * d22;\n\t\tdet = sqrt(det);\n\t\tfloat u = 0.5 * sqrt(tr - 2.0 * det);\n\t\tfloat v = 0.5 * sqrt(tr + 2.0 * det);\n\t\tfloat e_max = (u + v) * (u + v);\n\t\tfloat e_min = (u - v) * (u - v);\n\t\tvec3 V1_, V2_;\n\t\tif (d11 > d22)\n\t\t{\n\t\t\tV1_ = d12 * V1 + (e_max - d11) * V2;\n\t\t\tV2_ = d12 * V1 + (e_min - d11) * V2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tV1_ = d12*V2 + (e_max - d22)*V1;\n\t\t\tV2_ = d12*V2 + (e_min - d22)*V1;\n\t\t}\n\t\ta = 1.0 / e_max;\n\t\tb = 1.0 / e_min;\n\t\tV1 = normalize(V1_);\n\t\tV2 = normalize(V2_);\n\t}\n\telse\n\t{\n\t\ta = 1.0 / dot(V1, V1);\n\t\tb = 1.0 / dot(V2, V2);\n\t\tV1 *= sqrt(a);\n\t\tV2 *= sqrt(b);\n\t}\n\tvec3 V3 = cross(V1, V2);\n\tif (dot(C, V3) < 0.0)\n\t\tV3 *= -1.0;\n\tfloat L  = dot(V3, C);\n\tfloat x0 = dot(V1, C) / L;\n\tfloat y0 = dot(V2, C) / L;\n\tfloat E1 = inversesqrt(a);\n\tfloat E2 = inversesqrt(b);\n\ta *= L * L;\n\tb *= L * L;\n\tfloat c0 = a * b;\n\tfloat c1 = a * b * (1.0 + x0 * x0 + y0 * y0) - a - b;\n\tfloat c2 = 1.0 - a * (1.0 + x0 * x0) - b * (1.0 + y0 * y0);\n\tfloat c3 = 1.0;\n\tvec3 roots = SolveCubic(vec4(c0, c1, c2, c3));\n\tfloat e1 = roots.x;\n\tfloat e2 = roots.y;\n\tfloat e3 = roots.z;\n\tvec3 avgDir = vec3(a * x0 / (a - e2), b * y0 / (b - e2), 1.0);\n\tmat3 rotate = mat3(V1, V2, V3);\n\tavgDir = rotate * avgDir;\n\tavgDir = normalize(avgDir);\n\tfloat L1 = sqrt(-e2 / e3);\n\tfloat L2 = sqrt(-e2 / e1);\n\tfloat formFactor = L1 * L2 * inversesqrt((1.0 + L1 * L1) * (1.0 + L2 * L2));\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tvec2 uv = vec2(avgDir.z * 0.5 + 0.5, formFactor);\n\tuv = uv*LUT_SCALE + LUT_BIAS;\n\tfloat scale = texture2D( areaLightsLutTex2, uv ).w;\n\treturn formFactor*scale;\n}\nfloat getRectLightDiffuse() {\n\treturn LTC_EvaluateRect( dNormalW, dViewDirW, vPositionW, mat3( 1.0 ), dLTCCoords );\n}\nfloat getDiskLightDiffuse() {\n\treturn LTC_EvaluateDisk( dNormalW, dViewDirW, vPositionW, mat3( 1.0 ), dLTCCoords );\n}\nfloat getSphereLightDiffuse() {\n\tfloat falloff = dSphereRadius / (dot(dLightDirW, dLightDirW) + dSphereRadius);\n\treturn getLightDiffuse()*falloff;\n}\nmat3 getLTCLightInvMat(vec2 uv)\n{\n\tvec4 t1 = texture2D( areaLightsLutTex1, uv );\n\t#ifdef AREA_R8_G8_B8_A8_LUTS\n\tt1 *= vec4(1.001, 0.3239, 0.60437568, 1.0);\n\tt1 += vec4(0.0, -0.2976, -0.01381, 0.0);\n\t#endif\n\treturn mat3(\n\t\tvec3( t1.x, 0, t1.y ),\n\t\tvec3(\t0, 1,\t0 ),\n\t\tvec3( t1.z, 0, t1.w )\n\t);\n}\nfloat calcRectLightSpecular(vec3 tNormalW, vec2 uv) {\n\tmat3 mInv = getLTCLightInvMat(uv);\n\treturn LTC_EvaluateRect( tNormalW, dViewDirW, vPositionW, mInv, dLTCCoords );\n}\nfloat getRectLightSpecular() {\n\treturn calcRectLightSpecular(dNormalW, dLTCUV);\n}\n#ifdef CLEARCOAT\nfloat getRectLightSpecularCC() {\n\treturn calcRectLightSpecular(ccNormalW, ccLTCUV);\n}\n#endif\nfloat calcDiskLightSpecular(vec3 tNormalW, vec2 uv) {\n\tmat3 mInv = getLTCLightInvMat(uv);\n\treturn LTC_EvaluateDisk( tNormalW, dViewDirW, vPositionW, mInv, dLTCCoords );\n}\nfloat getDiskLightSpecular() {\n\treturn calcDiskLightSpecular(dNormalW, dLTCUV);\n}\n#ifdef CLEARCOAT\nfloat getDiskLightSpecularCC() {\n\treturn calcDiskLightSpecular(ccNormalW, ccLTCUV);\n}\n#endif\nfloat getSphereLightSpecular() {\n\treturn calcDiskLightSpecular(dNormalW, dLTCUV);\n}\n#ifdef CLEARCOAT\nfloat getSphereLightSpecularCC() {\n\treturn calcDiskLightSpecular(ccNormalW, ccLTCUV);\n}\n#endif\n",
        metalnessPS: "void processMetalness(float metalness) {\n\tconst float dielectricF0 = 0.04;\n\tdSpecularity = mix(vec3(dielectricF0), dAlbedo, metalness);\n\tdAlbedo *= 1.0 - metalness;\n}\n#ifdef MAPFLOAT\nuniform float material_metalness;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_metalnessMap;\n#endif\nvoid getSpecularity() {\n\tfloat metalness = 1.0;\n\t#ifdef MAPFLOAT\n\tmetalness *= material_metalness;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tmetalness *= texture2D(texture_metalnessMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tmetalness *= saturate(vVertexColor.$VC);\n\t#endif\n\tprocessMetalness(metalness);\n}\n",
        msdfPS: "uniform sampler2D texture_msdfMap;\n#ifdef GL_OES_standard_derivatives\n#define USE_FWIDTH\n#endif\n#ifdef GL2\n#define USE_FWIDTH\n#endif\nfloat median(float r, float g, float b) {\n\treturn max(min(r, g), min(max(r, g), b));\n}\nfloat map (float min, float max, float v) {\n\treturn (v - min) / (max - min);\n}\nuniform float font_sdfIntensity;\nuniform float font_pxrange;\nuniform float font_textureWidth;\nuniform vec4 outline_color;\nuniform float outline_thickness;\nuniform vec4 shadow_color;\nuniform vec2 shadow_offset;\nvec4 applyMsdf(vec4 color) {\n\tvec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;\n\tvec2 uvShdw = vUv0 - shadow_offset;\n\tvec3 ssample = texture2D(texture_msdfMap, uvShdw).rgb;\n\tfloat sigDist = median(tsample.r, tsample.g, tsample.b);\n\tfloat sigDistShdw = median(ssample.r, ssample.g, ssample.b);\n\tfloat smoothingMax = 0.2;\n\t#ifdef USE_FWIDTH\n\tvec2 w = fwidth(vUv0);\n\tfloat smoothing = clamp(w.x * font_textureWidth / font_pxrange, 0.0, smoothingMax);\n\t#else\n\tfloat font_size = 16.0;\n\tfloat smoothing = clamp(font_pxrange / font_size, 0.0, smoothingMax);\n\t#endif\n\tfloat mapMin = 0.05;\n\tfloat mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);\n\tfloat sigDistInner = map(mapMin, mapMax, sigDist);\n\tfloat sigDistOutline = map(mapMin, mapMax, sigDist + outline_thickness);\n\tsigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thickness);\n\tfloat center = 0.5;\n\tfloat inside = smoothstep(center-smoothing, center+smoothing, sigDistInner);\n\tfloat outline = smoothstep(center-smoothing, center+smoothing, sigDistOutline);\n\tfloat shadow = smoothstep(center-smoothing, center+smoothing, sigDistShdw);\n\tvec4 tcolor = (outline > inside) ? outline * vec4(outline_color.a * outline_color.rgb, outline_color.a) : vec4(0.0);\n\ttcolor = mix(tcolor, color, inside);\n\tvec4 scolor = (shadow > outline) ? shadow * vec4(shadow_color.a * shadow_color.rgb, shadow_color.a) : tcolor;\n\ttcolor = mix(scolor, tcolor, outline);\n\treturn tcolor;\n}\n",
        normalVS: "#ifdef MORPHING_TEXTURE_BASED_NORMAL\nuniform highp sampler2D morphNormalTex;\n#endif\nvec3 getNormal() {\n\t#ifdef SKIN\n\tdNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\n\t#elif defined(INSTANCING)\n\tdNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\n\t#else\n\tdNormalMatrix = matrix_normal;\n\t#endif\n\tvec3 tempNormal = vertex_normal;\n\t#ifdef MORPHING\n\t#ifdef MORPHING_NRM03\n\ttempNormal += morph_weights_a[0] * morph_nrm0;\n\ttempNormal += morph_weights_a[1] * morph_nrm1;\n\ttempNormal += morph_weights_a[2] * morph_nrm2;\n\ttempNormal += morph_weights_a[3] * morph_nrm3;\n\t#endif\n\t#ifdef MORPHING_NRM47\n\ttempNormal += morph_weights_b[0] * morph_nrm4;\n\ttempNormal += morph_weights_b[1] * morph_nrm5;\n\ttempNormal += morph_weights_b[2] * morph_nrm6;\n\ttempNormal += morph_weights_b[3] * morph_nrm7;\n\t#endif\n\t#endif\n\t#ifdef MORPHING_TEXTURE_BASED_NORMAL\n\tvec2 morphUV = getTextureMorphCoords();\n\tvec3 morphNormal = texture2D(morphNormalTex, morphUV).xyz;\n\ttempNormal += morphNormal;\n\t#endif\n\treturn normalize(dNormalMatrix * tempNormal);\n}\n",
        normalDetailMapPS: "#ifdef MAPTEXTURE\nuniform sampler2D texture_normalDetailMap;\nuniform float material_normalDetailMapBumpiness;\nvec3 blendNormals(vec3 n1, vec3 n2) {\n\tn1 += vec3(0, 0, 1);\n\tn2 *= vec3(-1, -1, 1);\n\treturn normalize(n1*dot(n1, n2)/n1.z - n2);\n}\n#endif\nvec3 addNormalDetail(vec3 normalMap) {\n\t#ifdef MAPTEXTURE\n\tvec3 normalDetailMap = unpackNormal(texture2D(texture_normalDetailMap, $UV));\n\tnormalDetailMap = normalize(mix(vec3(0.0, 0.0, 1.0), normalDetailMap, material_normalDetailMapBumpiness));\n\treturn blendNormals(normalMap, normalDetailMap);\n\t#else\n\treturn normalMap;\n\t#endif\n}\n",
        normalInstancedVS: "vec3 getNormal() {\n\tdNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\n\treturn normalize(dNormalMatrix * vertex_normal);\n}\n",
        normalMapPS: "uniform sampler2D texture_normalMap;\nuniform float material_bumpiness;\nvoid getNormal() {\n\tvec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\n\tnormalMap = normalize(mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness));\n\tdNormalMap = addNormalDetail(normalMap);\n\tdNormalW = dTBN * dNormalMap;\n}\n",
        normalMapFastPS: "uniform sampler2D texture_normalMap;\nvoid getNormal() {\n\tvec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\n\tdNormalMap = addNormalDetail(normalMap);\n\tdNormalW = dTBN * dNormalMap;\n}\n",
        normalSkinnedVS: "vec3 getNormal() {\n\tdNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\n\treturn normalize(dNormalMatrix * vertex_normal);\n}\n",
        normalVertexPS: "void getNormal() {\n\tdNormalW = normalize(dVertexNormalW);\n}\n",
        normalXYPS: "vec3 unpackNormal(vec4 nmap) {\n\tvec3 normal;\n\tnormal.xy = nmap.wy * 2.0 - 1.0;\n\tnormal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));\n\treturn normal;\n}\n",
        normalXYZPS: "vec3 unpackNormal(vec4 nmap) {\n\treturn nmap.xyz * 2.0 - 1.0;\n}\n",
        opacityPS: "#ifdef MAPFLOAT\nuniform float material_opacity;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_opacityMap;\n#endif\nvoid getOpacity() {\n\tdAlpha = 1.0;\n\t#ifdef MAPFLOAT\n\tdAlpha *= material_opacity;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tdAlpha *= texture2D(texture_opacityMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tdAlpha *= clamp(vVertexColor.$VC, 0.0, 1.0);\n\t#endif\n}\n",
        outputAlphaPS: "gl_FragColor.a = dAlpha;\n",
        outputAlphaOpaquePS: "gl_FragColor.a = 1.0;\n",
        outputAlphaPremulPS: "gl_FragColor.rgb *= dAlpha;\ngl_FragColor.a = dAlpha;\n",
        outputCubemapPS: "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params;\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec4 encodeRGBM(vec4 color) {\n\tcolor.rgb = pow(color.rgb, vec3(0.5));\n\tcolor.rgb *= 1.0 / 8.0;\n\tcolor.a = saturate( max( max( color.r, color.g ), max( color.b, 1.0 / 255.0 ) ) );\n\tcolor.a = ceil(color.a * 255.0) / 255.0;\n\tcolor.rgb /= color.a;\n\treturn color;\n}\nvoid main(void) {\n\tvec2 st = vUv0 * 2.0 - 1.0;\n\tfloat face = params.x;\n\tvec3 vec;\n\tif (face==0.0) {\n\t\tvec = vec3(1, -st.y, -st.x);\n\t} else if (face==1.0) {\n\t\tvec = vec3(-1, -st.y, st.x);\n\t} else if (face==2.0) {\n\t\tvec = vec3(st.x, 1, st.y);\n\t} else if (face==3.0) {\n\t\tvec = vec3(st.x, -1, -st.y);\n\t} else if (face==4.0) {\n\t\tvec = vec3(st.x, -st.y, 1);\n\t} else {\n\t\tvec = vec3(-st.x, -st.y, -1);\n\t}\n\tgl_FragColor = textureCube(source, vec);\n\tif (params.w >= 2.0) gl_FragColor = encodeRGBM(gl_FragColor);\n}\n",
        outputTex2DPS: "varying vec2 vUv0;\nuniform sampler2D source;\nvoid main(void) {\n\tgl_FragColor = texture2D(source, vUv0);\n}\n",
        packDepthPS: "\nvec4 packFloat(float depth) {\n\tconst vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n\tconst vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n\tvec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\n",
        packDepthMaskPS: "vec4 packFloat(float depth) {\n\tconst vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n\tconst vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n\tvec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n\tres.x = 0.0;\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\n",
        parallaxPS: "uniform sampler2D texture_heightMap;\nuniform float material_heightMapFactor;\nvoid getParallax() {\n\tfloat parallaxScale = material_heightMapFactor;\n\tfloat height = texture2D(texture_heightMap, $UV).$CH;\n\theight = height * parallaxScale - parallaxScale*0.5;\n\tvec3 viewDirT = dViewDirW * dTBN;\n\tviewDirT.z += 0.42;\n\tdUvOffset = height * (viewDirT.xy / viewDirT.z);\n}\n",
        particlePS: "varying vec4 texCoordsAlphaLife;\nuniform sampler2D colorMap;\nuniform sampler2D colorParam;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params;\n#endif\nuniform float softening;\nuniform float colorMult;\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n\tconst vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n\tfloat depth = dot(rgbaDepth, bitShift);\n\treturn depth;\n}\n#endif\nvoid main(void) {\n\tvec4 tex  = texture2DSRGB(colorMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y));\n\tvec4 ramp = texture2DSRGB(colorParam, vec2(texCoordsAlphaLife.w, 0.0));\n\tramp.rgb *= colorMult;\n\tramp.a += texCoordsAlphaLife.z;\n\tvec3 rgb = tex.rgb * ramp.rgb;\n\tfloat a  = tex.a * ramp.a;\n",
        particleVS: "vec3 unpack3NFloats(float src) {\n\tfloat r = fract(src);\n\tfloat g = fract(src * 256.0);\n\tfloat b = fract(src * 65536.0);\n\treturn vec3(r, g, b);\n}\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec4 tex1Dlod_lerp(highp sampler2D tex, vec2 tc) {\n\treturn mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );\n}\nvec4 tex1Dlod_lerp(highp sampler2D tex, vec2 tc, out vec3 w) {\n\tvec4 a = texture2D(tex,tc);\n\tvec4 b = texture2D(tex,tc + graphSampleSize);\n\tfloat c = fract(tc.x*graphNumSamples);\n\tvec3 unpackedA = unpack3NFloats(a.w);\n\tvec3 unpackedB = unpack3NFloats(b.w);\n\tw = mix(unpackedA, unpackedB, c);\n\treturn mix(a, b, c);\n}\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {\n\tfloat c = cos(pRotation);\n\tfloat s = sin(pRotation);\n\tmat2 m = mat2(c, -s, s, c);\n\trotMatrix = m;\n\treturn m * quadXY;\n}\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY) {\n\t#ifdef SCREEN_SPACE\n\t\tvec3 pos = vec3(-1, 0, 0) * quadXY.x + vec3(0, -1, 0) * quadXY.y;\n\t#else\n\t\tvec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\n\t#endif\n\treturn pos;\n}\nvec3 customFace(vec3 InstanceCoords, vec2 quadXY) {\n\tvec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;\n\treturn pos;\n}\nvec2 safeNormalize(vec2 v) {\n\tfloat l = length(v);\n\treturn (l > 1e-06) ? v / l : v;\n}\nvoid main(void) {\n\tvec3 meshLocalPos = particle_vertexData.xyz;\n\tfloat id = floor(particle_vertexData.w);\n\tfloat rndFactor = fract(sin(id + 1.0 + seed));\n\tvec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));\n\tfloat uv = id / numParticlesPot;\n\treadInput(uv);\n#ifdef LOCAL_SPACE\n\tinVel = mat3(matrix_model) * inVel;\n#endif\n\tvec2 velocityV = safeNormalize((mat3(matrix_view) * inVel).xy);\n\tfloat particleLifetime = lifetime;\n\tif (inLife <= 0.0 || inLife > particleLifetime || !inShow) meshLocalPos = vec3(0.0);\n\tvec2 quadXY = meshLocalPos.xy;\n\tfloat nlife = clamp(inLife / particleLifetime, 0.0, 1.0);\n\tvec3 paramDiv;\n\tvec4 params = tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\n\tfloat scale = params.y;\n\tfloat scaleDiv = paramDiv.x;\n\tfloat alphaDiv = paramDiv.z;\n\tscale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);\n#ifndef USE_MESH\n\ttexCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);\n#else\n\ttexCoordsAlphaLife = vec4(particle_uv, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);\n#endif\n\tvec3 particlePos = inPos;\n\tvec3 particlePosMoved = vec3(0.0);\n\tmat2 rotMatrix;\n",
        particleAnimFrameClampVS: "\tfloat animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.y) + animTexParams.x, animTexParams.z);\n",
        particleAnimFrameLoopVS: "\tfloat animFrame = floor(mod(texCoordsAlphaLife.w * animTexParams.y + animTexParams.x, animTexParams.z + 1.0));\n",
        particleAnimTexVS: "\tfloat animationIndex;\n\tif (animTexIndexParams.y == 1.0) {\n\t\tanimationIndex = floor((animTexParams.w + 1.0) * rndFactor3.z) * (animTexParams.z + 1.0);\n\t} else {\n\t\tanimationIndex = animTexIndexParams.x * (animTexParams.z + 1.0);\n\t}\n\tfloat atlasX = (animationIndex + animFrame) * animTexTilesParams.x;\n\tfloat atlasY = 1.0 - floor(atlasX + 1.0) * animTexTilesParams.y;\n\tatlasX = fract(atlasX);\n\ttexCoordsAlphaLife.xy *= animTexTilesParams.xy;\n\ttexCoordsAlphaLife.xy += vec2(atlasX, atlasY);\n",
        particleInputFloatPS: "void readInput(float uv) {\n\tvec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));\n\tvec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));\n\tinPos = tex.xyz;\n\tinVel = tex2.xyz;\n\tinAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;\n\tinShow = tex.w >= 0.0;\n\tinLife = tex2.w;\n}\n",
        particleInputRgba8PS: "\n#define PI2 6.283185307179586\nuniform vec3 inBoundsSize;\nuniform vec3 inBoundsCenter;\nuniform float maxVel;\nfloat decodeFloatRG(vec2 rg) {\n\treturn rg.y*(1.0/255.0) + rg.x;\n}\nfloat decodeFloatRGBA( vec4 rgba ) {\n  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\nvoid readInput(float uv) {\n\tvec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));\n\tvec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));\n\tvec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));\n\tvec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));\n\tinPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));\n\tinPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;\n\tinVel = tex2.xyz;\n\tinVel = (inVel - vec3(0.5)) * maxVel;\n\tinAngle = decodeFloatRG(tex1.ba) * PI2;\n\tinShow = tex2.a > 0.5;\n\tinLife = decodeFloatRGBA(tex3);\n\tfloat maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n\tfloat maxPosLife = lifetime+1.0;\n\tinLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;\n}\n",
        particleOutputFloatPS: "void writeOutput() {\n\tif (gl_FragCoord.y<1.0) {\n\t\tgl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);\n\t} else {\n\t\tgl_FragColor = vec4(outVel, outLife);\n\t}\n}\n",
        particleOutputRgba8PS: "uniform vec3 outBoundsMul;\nuniform vec3 outBoundsAdd;\nvec2 encodeFloatRG( float v ) {\n\tvec2 enc = vec2(1.0, 255.0) * v;\n\tenc = fract(enc);\n\tenc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n\treturn enc;\n}\nvec4 encodeFloatRGBA( float v ) {\n\tvec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;\n\tenc = fract(enc);\n\tenc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\n\treturn enc;\n}\nvoid writeOutput() {\n\toutPos = outPos * outBoundsMul + outBoundsAdd;\n\toutAngle = fract(outAngle / PI2);\n\toutVel = (outVel / maxVel) + vec3(0.5);\n\tfloat maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n\tfloat maxPosLife = lifetime+1.0;\n\toutLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);\n\tif (gl_FragCoord.y < 1.0) {\n\t\tgl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));\n\t} else if (gl_FragCoord.y < 2.0) {\n\t\tgl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));\n\t} else if (gl_FragCoord.y < 3.0) {\n\t\tgl_FragColor = vec4(outVel, visMode*0.5+0.5);\n\t} else {\n\t\tgl_FragColor = encodeFloatRGBA(outLife);\n\t}\n}\n",
        particleUpdaterAABBPS: "uniform mat3 spawnBounds;\nuniform vec3 spawnPosInnerRatio;\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\n\tvec3 pos = inBounds - vec3(0.5);\n\tvec3 posAbs = abs(pos);\n\tvec3 maxPos = vec3(max(posAbs.x, max(posAbs.y, posAbs.z)));\n\tvec3 edge = maxPos + (vec3(0.5) - maxPos) * spawnPosInnerRatio;\n\tpos.x = edge.x * (maxPos.x == posAbs.x ? sign(pos.x) : 2.0 * pos.x);\n\tpos.y = edge.y * (maxPos.y == posAbs.y ? sign(pos.y) : 2.0 * pos.y);\n\tpos.z = edge.z * (maxPos.z == posAbs.z ? sign(pos.z) : 2.0 * pos.z);\n#ifndef LOCAL_SPACE\n\treturn emitterPos + spawnBounds * pos;\n#else\n\treturn spawnBounds * pos;\n#endif\n}\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\n\tlocalVelocity -= vec3(0, 0, initialVelocity);\n}\n",
        particleUpdaterEndPS: "\twriteOutput();\n}\n",
        particleUpdaterInitPS: "varying vec2 vUv0;\nuniform highp sampler2D particleTexIN;\nuniform highp sampler2D internalTex0;\nuniform highp sampler2D internalTex1;\nuniform highp sampler2D internalTex2;\nuniform highp sampler2D internalTex3;\nuniform mat3 emitterMatrix, emitterMatrixInv;\nuniform vec3 emitterScale;\nuniform vec3 emitterPos, frameRandom, localVelocityDivMult, velocityDivMult;\nuniform float delta, rate, rateDiv, lifetime, numParticles, rotSpeedDivMult, radialSpeedDivMult, seed;\nuniform float startAngle, startAngle2;\nuniform float initialVelocity;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\nvec3 inPos;\nvec3 inVel;\nfloat inAngle;\nbool inShow;\nfloat inLife;\nfloat visMode;\nvec3 outPos;\nvec3 outVel;\nfloat outAngle;\nbool outShow;\nfloat outLife;\n",
        particleUpdaterNoRespawnPS: "\tif (outLife >= lifetime) {\n\t\toutLife -= max(lifetime, (numParticles - 1.0) * particleRate);\n\t\tvisMode = -1.0;\n\t}\n",
        particleUpdaterOnStopPS: "\tvisMode = outLife < 0.0? -1.0: visMode;\n",
        particleUpdaterRespawnPS: "\tif (outLife >= lifetime) {\n\t\toutLife -= max(lifetime, (numParticles - 1.0) * particleRate);\n\t\tvisMode = 1.0;\n\t}\n\tvisMode = outLife < 0.0? 1.0: visMode;\n",
        particleUpdaterSpherePS: "uniform float spawnBoundsSphere;\nuniform float spawnBoundsSphereInnerRatio;\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\n\tfloat rnd4 = fract(rndFactor * 1000.0);\n\tvec3 norm = normalize(inBounds.xyz - vec3(0.5));\n\tfloat r = rnd4 * (1.0 - spawnBoundsSphereInnerRatio) + spawnBoundsSphereInnerRatio;\n#ifndef LOCAL_SPACE\n\treturn emitterPos + norm * r * spawnBoundsSphere;\n#else\n\treturn norm * r * spawnBoundsSphere;\n#endif\n}\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\n\tlocalVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;\n}\n",
        particleUpdaterStartPS: "float saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec3 unpack3NFloats(float src) {\n\tfloat r = fract(src);\n\tfloat g = fract(src * 256.0);\n\tfloat b = fract(src * 65536.0);\n\treturn vec3(r, g, b);\n}\nvec3 tex1Dlod_lerp(highp sampler2D tex, vec2 tc, out vec3 w) {\n\tvec4 a = texture2D(tex, tc);\n\tvec4 b = texture2D(tex, tc + graphSampleSize);\n\tfloat c = fract(tc.x * graphNumSamples);\n\tvec3 unpackedA = unpack3NFloats(a.w);\n\tvec3 unpackedB = unpack3NFloats(b.w);\n\tw = mix(unpackedA, unpackedB, c);\n\treturn mix(a.xyz, b.xyz, c);\n}\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\nvec4 hash41(float p) {\n\tvec4 p4 = fract(vec4(p) * HASHSCALE4);\n\tp4 += dot(p4, p4.wzxy+19.19);\n\treturn fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\n}\nvoid main(void) {\n\tif (gl_FragCoord.x > numParticles) discard;\n\treadInput(vUv0.x);\n\tvisMode = inShow? 1.0 : -1.0;\n\tvec4 rndFactor = hash41(gl_FragCoord.x + seed);\n\tfloat particleRate = rate + rateDiv * rndFactor.x;\n\toutLife = inLife + delta;\n\tfloat nlife = clamp(outLife / lifetime, 0.0, 1.0);\n\tvec3 localVelocityDiv;\n\tvec3 velocityDiv;\n\tvec3 paramDiv;\n\tvec3 localVelocity = tex1Dlod_lerp(internalTex0, vec2(nlife, 0), localVelocityDiv);\n\tvec3 velocity =\t  tex1Dlod_lerp(internalTex1, vec2(nlife, 0), velocityDiv);\n\tvec3 params =\t\ttex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\n\tfloat rotSpeed = params.x;\n\tfloat rotSpeedDiv = paramDiv.y;\n\tvec3 radialParams = tex1Dlod_lerp(internalTex3, vec2(nlife, 0), paramDiv);\n\tfloat radialSpeed = radialParams.x;\n\tfloat radialSpeedDiv = radialParams.y;\n\tbool respawn = inLife <= 0.0 || outLife >= lifetime;\n\tinPos = respawn ? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : inPos;\n\tinAngle = respawn ? mix(startAngle, startAngle2, rndFactor.x) : inAngle;\n#ifndef LOCAL_SPACE\n\tvec3 radialVel = inPos - emitterPos;\n#else\n\tvec3 radialVel = inPos;\n#endif\n\tradialVel = (dot(radialVel, radialVel) > 1.0E-8) ? radialSpeed * normalize(radialVel) : vec3(0.0);\n\tradialVel += (radialSpeedDiv * vec3(2.0) - vec3(1.0)) * radialSpeedDivMult * rndFactor.xyz;\n\tlocalVelocity +=\t(localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;\n\tvelocity +=\t\t (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;\n\trotSpeed +=\t\t (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;\n\taddInitialVelocity(localVelocity, rndFactor.xyz);\n#ifndef LOCAL_SPACE\n\toutVel = emitterMatrix * localVelocity + (radialVel + velocity) * emitterScale;\n#else\n\toutVel = (localVelocity + radialVel) / emitterScale + emitterMatrixInv * velocity;\n#endif\n\toutPos = inPos + outVel * delta;\n\toutAngle = inAngle + rotSpeed * delta;\n",
        particle_billboardVS: "\tquadXY = rotate(quadXY, inAngle, rotMatrix);\n\tvec3 localPos = billboard(particlePos, quadXY);\n",
        particle_blendAddPS: "\tdBlendModeFogFactor = 0.0;\n\trgb *= saturate(gammaCorrectInput(max(a, 0.0)));\n\tif ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;\n",
        particle_blendMultiplyPS: "\trgb = mix(vec3(1.0), rgb, vec3(a));\n\tif (rgb.r + rgb.g + rgb.b > 2.99) discard;\n",
        particle_blendNormalPS: "\tif (a < 0.01) discard;\n",
        particle_cpuVS: "attribute vec4 particle_vertexData;\nattribute vec4 particle_vertexData2;\nattribute vec4 particle_vertexData3;\nattribute float particle_vertexData4;\n#ifndef USE_MESH\n#define VDATA5TYPE vec2\n#else\n#define VDATA5TYPE vec4\n#endif\nattribute VDATA5TYPE particle_vertexData5;\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform mat3 matrix_normal;\nuniform mat4 matrix_viewInverse;\nuniform float numParticles;\nuniform float lifetime;\nuniform float stretch;\nuniform float seed;\nuniform vec3 wrapBounds, emitterScale, faceTangent, faceBinorm;\nuniform sampler2D texLifeAndSourcePosOUT;\nuniform highp sampler2D internalTex0;\nuniform highp sampler2D internalTex1;\nuniform highp sampler2D internalTex2;\nuniform vec3 emitterPos;\nvarying vec4 texCoordsAlphaLife;\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)\n{\n\tfloat c = cos(pRotation);\n\tfloat s = sin(pRotation);\n\tmat2 m = mat2(c, -s, s, c);\n\trotMatrix = m;\n\treturn m * quadXY;\n}\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY)\n{\n\tvec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\n\treturn pos;\n}\nvec3 customFace(vec3 InstanceCoords, vec2 quadXY)\n{\n\tvec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;\n\treturn pos;\n}\nvoid main(void)\n{\n\tvec3 particlePos = particle_vertexData.xyz;\n\tvec3 inPos = particlePos;\n\tvec3 vertPos = particle_vertexData3.xyz;\n\tvec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData5.x);\n\tfloat id = floor(particle_vertexData4);\n\tfloat rndFactor = fract(sin(id + 1.0 + seed));\n\tvec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));\n#ifdef LOCAL_SPACE\n\tinVel = mat3(matrix_model) * inVel;\n#endif\n\tvec2 velocityV = normalize((mat3(matrix_view) * inVel).xy);\n\tvec2 quadXY = vertPos.xy;\n#ifdef USE_MESH\n\ttexCoordsAlphaLife = vec4(particle_vertexData5.zw, particle_vertexData2.z, particle_vertexData.w);\n#else\n\ttexCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);\n#endif\n\tmat2 rotMatrix;\n\tfloat inAngle = particle_vertexData2.x;\n\tvec3 particlePosMoved = vec3(0.0);\n\tvec3 meshLocalPos = particle_vertexData3.xyz;\n",
        particle_cpu_endVS: "\tlocalPos *= particle_vertexData2.y * emitterScale;\n\tlocalPos += particlePos;\n\tgl_Position = matrix_viewProjection * vec4(localPos, 1.0);\n",
        particle_customFaceVS: "\tquadXY = rotate(quadXY, inAngle, rotMatrix);\n\tvec3 localPos = customFace(particlePos, quadXY);\n",
        particle_endPS: "\trgb = addFog(rgb);\n\trgb = toneMap(rgb);\n\trgb = gammaCorrectOutput(rgb);\n\tgl_FragColor = vec4(rgb, a);\n}\n",
        particle_endVS: "\tlocalPos *= scale * emitterScale;\n\tlocalPos += particlePos;\n\t#ifdef SCREEN_SPACE\n\tgl_Position = vec4(localPos.x, localPos.y, 0.0, 1.0);\n\t#else\n\tgl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);\n\t#endif\n",
        particle_halflambertPS: "\tvec3 negNormal = normal*0.5+0.5;\n\tvec3 posNormal = -normal*0.5+0.5;\n\tnegNormal *= negNormal;\n\tposNormal *= posNormal;\n",
        particle_initVS: "attribute vec4 particle_vertexData;\n#ifdef USE_MESH\nattribute vec2 particle_uv;\n#endif\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\nuniform mat3 matrix_normal;\nuniform mat4 matrix_viewInverse;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform float numParticles, numParticlesPot;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\nuniform float stretch;\nuniform vec3 wrapBounds;\nuniform vec3 emitterScale, emitterPos, faceTangent, faceBinorm;\nuniform float rate, rateDiv, lifetime, deltaRandomnessStatic, scaleDivMult, alphaDivMult, seed, delta;\nuniform sampler2D particleTexOUT, particleTexIN;\nuniform highp sampler2D internalTex0;\nuniform highp sampler2D internalTex1;\nuniform highp sampler2D internalTex2;\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params;\n#endif\nvarying vec4 texCoordsAlphaLife;\nvec3 inPos;\nvec3 inVel;\nfloat inAngle;\nbool inShow;\nfloat inLife;\n",
        particle_lambertPS: "\tvec3 negNormal = max(normal, vec3(0.0));\n\tvec3 posNormal = max(-normal, vec3(0.0));\n",
        particle_lightingPS: "\tvec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +\n\t\t\t\t\t\tnegNormal.y*lightCube[2] + posNormal.y*lightCube[3] +\n\t\t\t\t\t\tnegNormal.z*lightCube[4] + posNormal.z*lightCube[5];\n\trgb *= light;\n",
        particle_localShiftVS: "\tparticlePos = (matrix_model * vec4(particlePos, 1.0)).xyz;\n",
        particle_meshVS: "\tvec3 localPos = meshLocalPos;\n\tlocalPos.xy = rotate(localPos.xy, inAngle, rotMatrix);\n\tlocalPos.yz = rotate(localPos.yz, inAngle, rotMatrix);\n\tbillboard(particlePos, quadXY);\n",
        particle_normalVS: "\tNormal = normalize(localPos + matrix_viewInverse[2].xyz);\n",
        particle_normalMapPS: "\tvec3 normalMap = normalize(texture2D(normalMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y)).xyz * 2.0 - 1.0);\n\tvec3 normal = ParticleMat * normalMap;\n",
        particle_pointAlongVS: "\tinAngle = atan(velocityV.x, velocityV.y);\n",
        particle_softPS: "\tfloat depth = getLinearScreenDepth();\n\tfloat particleDepth = vDepth;\n\tfloat depthDiff = saturate(abs(particleDepth - depth) * softening);\n\ta *= depthDiff;\n",
        particle_softVS: "\tvDepth = getLinearDepth(localPos);\n",
        particle_stretchVS: "\tvec3 moveDir = inVel * stretch;\n\tvec3 posPrev = particlePos - moveDir;\n\tposPrev += particlePosMoved;\n\tvec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);\n\tfloat interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;\n\tparticlePos = mix(particlePos, posPrev, interpolation);\n",
        particle_TBNVS: "\tmat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0, rotMatrix[1][0], rotMatrix[1][1], 0.0, 0.0, 0.0, 1.0);\n\tParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;\n",
        particle_wrapVS: "\tvec3 origParticlePos = particlePos;\n\tparticlePos -= matrix_model[3].xyz;\n\tparticlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;\n\tparticlePos += matrix_model[3].xyz;\n\tparticlePosMoved = particlePos - origParticlePos;\n",
        precisionTestPS: "void main(void) {\n\tgl_FragColor = vec4(2147483648.0);\n}\n",
        precisionTest2PS: "uniform sampler2D source;\nvec4 packFloat(float depth) {\n\tconst vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n\tconst vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n\tvec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main(void) {\n\tfloat c = texture2D(source, vec2(0.0)).r;\n\tfloat diff = abs(c - 2147483648.0) / 2147483648.0;\n\tgl_FragColor = packFloat(diff);\n}\n",
        prefilterCubemapPS: "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params;\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nfloat rnd(vec2 uv) {\n\treturn fract(sin(dot(uv, vec2(12.9898, 78.233) * 2.0)) * 43758.5453);\n}\nconst float PI = 3.14159265358979;\nvec3 hemisphereSample_cos(vec2 uv, mat3 vecSpace, vec3 cubeDir, float gloss) {\n\tfloat phi = uv.y * 2.0 * PI;\n\tfloat cosTheta = sqrt(1.0 - uv.x);\n\tfloat sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\tvec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\treturn normalize(mix(vecSpace * sampleDir, cubeDir, params.y));\n}\nvec3 hemisphereSample_phong(vec2 uv, mat3 vecSpace, vec3 cubeDir, float specPow) {\n\tfloat phi = uv.y * 2.0 * PI;\n\tfloat cosTheta = pow(1.0 - uv.x, 1.0 / (specPow + 1.0));\n\tfloat sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\tvec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\treturn vecSpace * sampleDir;\n}\nmat3 matrixFromVector(vec3 n) {\n\tfloat a = 1.0 / (1.0 + n.z);\n\tfloat b = -n.x * n.y * a;\n\tvec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\n\tvec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\n\treturn mat3(b1, b2, n);\n}\nvec4 encodeRGBM(vec3 color) {\n\tvec4 encoded;\n\tencoded.rgb = pow(color.rgb, vec3(0.5));\n\tencoded.rgb *= 1.0 / 8.0;\n\tencoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );\n\tencoded.a = ceil(encoded.a * 255.0) / 255.0;\n\tencoded.rgb /= encoded.a;\n\treturn encoded;\n}\nvoid main(void) {\n\tvec2 st = vUv0 * 2.0 - 1.0;\n\tif (params.w==1.0 || params.w==3.0) {\n\t\tst = 2.0 * floor(gl_FragCoord.xy) / (params.z - 1.0) - 1.0;\n\t}\n\tfloat face = params.x;\n\tvec3 vec;\n\tif (face==0.0) {\n\t\tvec = vec3(1, -st.y, -st.x);\n\t} else if (face==1.0) {\n\t\tvec = vec3(-1, -st.y, st.x);\n\t} else if (face==2.0) {\n\t\tvec = vec3(st.x, 1, st.y);\n\t} else if (face==3.0) {\n\t\tvec = vec3(st.x, -1, -st.y);\n\t} else if (face==4.0) {\n\t\tvec = vec3(st.x, -st.y, 1);\n\t} else {\n\t\tvec = vec3(-st.x, -st.y, -1);\n\t}\n\tmat3 vecSpace = matrixFromVector(normalize(vec));\n\tvec3 color = vec3(0.0);\n\tconst int samples = $NUMSAMPLES;\n\tvec3 vect;\n\tfor(int i=0; i<samples; i++) {\n\t\tfloat sini = sin(float(i));\n\t\tfloat cosi = cos(float(i));\n\t\tfloat rand = rnd(vec2(sini, cosi));\n\t\tvect = hemisphereSample_$METHOD(vec2(float(i) / float(samples), rand), vecSpace, vec, params.y);\n\t\tcolor += $textureCube(source, vect).rgb;\n\t}\n\tcolor /= float(samples);\n\tgl_FragColor = params.w < 2.0? vec4(color, 1.0) : encodeRGBM(color);\n}\n",
        reflDirPS: "void getReflDir() {\n\tdReflDirW = normalize(-reflect(dViewDirW, dNormalW));\n}\n",
        reflDirAnisoPS: "void getReflDir() {\n\tfloat roughness = sqrt(1.0 - min(dGlossiness, 1.0));\n\tfloat anisotropy = material_anisotropy * roughness;\n\tvec3 anisotropicDirection = anisotropy >= 0.0 ? dTBN[1] : dTBN[0];\n\tvec3 anisotropicTangent = cross(anisotropicDirection, dViewDirW);\n\tvec3 anisotropicNormal = cross(anisotropicTangent, anisotropicDirection);\n\tvec3 bentNormal = normalize(mix(normalize(dNormalW), normalize(anisotropicNormal), anisotropy));\n\tdReflDirW = reflect(-dViewDirW, bentNormal);\n}\n",
        reflectionCCPS: "#ifdef CLEARCOAT\nuniform float material_clearCoatReflectivity;\nvoid addReflectionCC() {\n\tccReflection += vec4(calcReflection(ccReflDirW, ccGlossiness), material_clearCoatReflectivity);\n}\n#endif\n",
        reflectionCubePS: "uniform samplerCube texture_cubeMap;\nuniform float material_reflectivity;\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tvec3 lookupVec = fixSeams(cubeMapProject(tReflDirW));\n#ifndef RIGHT_HANDED_CUBEMAP\n\tlookupVec.x *= -1.0;\n#endif\n\treturn $textureCubeSAMPLE(texture_cubeMap, lookupVec).rgb;\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        reflectionDpAtlasPS: "uniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvec2 getDpAtlasUv(vec2 uv, float mip) {\n\tvec4 rect;\n\tfloat sx = saturate(mip - 2.0);\n\trect.x = sx * 0.5;\n\tfloat t = mip - rect.x * 6.0;\n\tfloat i = 1.0 - rect.x;\n\trect.y = min(t * 0.5, 0.75) * i + rect.x;\n\tfloat st = saturate(t);\n\trect.z = (1.0 - st * 0.5) * i;\n\trect.w = rect.z * 0.5;\n\tfloat rcRectZ = 1.0 / rect.z;\n\tfloat scaleFactor = 0.00390625 * rcRectZ;\n\tvec2 scale = vec2(scaleFactor, scaleFactor * 2.0);\n\tuv = uv * (vec2(1.0) - scale) + scale * 0.5;\n\tuv = uv * rect.zw + rect.xy;\n\treturn uv;\n}\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tvec3 reflDir = normalize(cubeMapProject(tReflDirW));\n\tbool up = reflDir.y > 0.0;\n\tfloat scale = 0.90909090909090909090909090909091;\n\tvec3 reflDirWarp = reflDir.xzx * vec3(-0.25, 0.5, 0.25);\n\tfloat reflDirVer = abs(reflDir.y) + 1.0;\n\treflDirWarp /= reflDirVer;\n\treflDirWarp *= scale;\n\treflDirWarp = vec3(0.75, 0.5, 0.25) - reflDirWarp;\n\tvec2 tc = up? reflDirWarp.xy : reflDirWarp.zy;\n\tfloat bias = saturate(1.0 - tGlossiness) * 5.0;\n\tfloat mip = floor(bias);\n\tvec3 tex1 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\n\tmip = min(mip + 1.0, 5.0);\n\tvec3 tex2 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\n\ttex1 = mix(tex1, tex2, fract(bias));\n\ttex1 = processEnvironment(tex1);\n\treturn tex1;\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        reflectionPrefilteredCubePS: "uniform samplerCube texture_prefilteredCubeMap128;\nuniform samplerCube texture_prefilteredCubeMap64;\nuniform samplerCube texture_prefilteredCubeMap32;\nuniform samplerCube texture_prefilteredCubeMap16;\nuniform samplerCube texture_prefilteredCubeMap8;\n#ifndef PMREM4\n#define PMREM4\nuniform samplerCube texture_prefilteredCubeMap4;\n#endif\nuniform float material_reflectivity;\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tvec3 refl = cubeMapProject(tReflDirW);\n#ifndef RIGHT_HANDED_CUBEMAP\n\trefl.x *= -1.0;\n#endif\n\tvec3 seam = calcSeam(refl);\n\tvec4 c0 = textureCube(texture_prefilteredCubeMap128, applySeam(refl, seam, 1.0 / 128.0));\n\tvec4 c1 = textureCube(texture_prefilteredCubeMap64, applySeam(refl, seam, 2.0 / 128.0));\n\tvec4 c2 = textureCube(texture_prefilteredCubeMap32, applySeam(refl, seam, 4.0 / 128.0));\n\tvec4 c3 = textureCube(texture_prefilteredCubeMap16, applySeam(refl, seam, 8.0 / 128.0));\n\tvec4 c4 = textureCube(texture_prefilteredCubeMap8, applySeam(refl, seam, 16.0 / 128.0));\n\tvec4 c5 = textureCube(texture_prefilteredCubeMap4, applySeam(refl, seam, 32.0 / 128.0));\n\tfloat bias = saturate(1.0 - tGlossiness) * 5.0;\n\tvec4 cubes0;\n\tvec4 cubes1;\n\tif (bias < 1.0) {\n\t\tcubes0 = c0;\n\t\tcubes1 = c1;\n\t} else if (bias < 2.0) {\n\t\tcubes0 = c1;\n\t\tcubes1 = c2;\n\t} else if (bias < 3.0) {\n\t\tcubes0 = c2;\n\t\tcubes1 = c3;\n\t} else if (bias < 4.0) {\n\t\tcubes0 = c3;\n\t\tcubes1 = c4;\n\t} else {\n\t\tcubes0 = c4;\n\t\tcubes1 = c5;\n\t}\n\tvec4 cubeFinal = mix(cubes0, cubes1, fract(bias));\n\treturn processEnvironment($DECODE(cubeFinal).rgb);\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        reflectionPrefilteredCubeLodPS: "#ifndef PMREM4\n#define PMREM4\n#ifndef GL2\n#extension GL_EXT_shader_texture_lod : enable\n#endif\nuniform samplerCube texture_prefilteredCubeMap128;\n#endif\nuniform float material_reflectivity;\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tfloat bias = saturate(1.0 - tGlossiness) * 5.0;\n\tvec3 fixedReflDir = fixSeams(cubeMapProject(tReflDirW), bias);\n#ifndef RIGHT_HANDED_CUBEMAP\n\tfixedReflDir.x *= -1.0;\n#endif\n\tvec3 refl = processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, bias) ).rgb);\n\treturn refl;\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        reflectionSpherePS: "#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tvec3 reflDirV = (mat3(matrix_view) * tReflDirW).xyz;\n\tfloat m = 2.0 * sqrt( dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z+1.0)*(reflDirV.z+1.0) );\n\tvec2 sphereMapUv = reflDirV.xy / m + 0.5;\n\treturn $texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb;\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        reflectionSphereLowPS: "uniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvec3 calcReflection(vec3 tReflDirW, float tGlossiness) {\n\tvec3 reflDirV = vNormalV;\n\tvec2 sphereMapUv = reflDirV.xy * 0.5 + 0.5;\n\treturn $texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb;\n}\nvoid addReflection() {\n\tdReflection += vec4(calcReflection(dReflDirW, dGlossiness), material_reflectivity);\n}\n",
        refractionPS: "uniform float material_refraction, material_refractionIndex;\nvec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {\n\tfloat vn = dot(viewVec, Normal);\n\tfloat k = 1.0 - IOR * IOR * (1.0 - vn * vn);\n\tvec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;\n\treturn refrVec;\n}\nvoid addRefraction() {\n\tvec3 tmp = dReflDirW;\n\tvec4 tmp2 = dReflection;\n\tdReflection = vec4(0.0);\n\tdReflDirW = refract2(-dViewDirW, dNormalW, material_refractionIndex);\n\taddReflection();\n\tdDiffuseLight = mix(dDiffuseLight, dReflection.rgb * dAlbedo, material_refraction);\n\tdReflDirW = tmp;\n\tdReflection = tmp2;\n}\n",
        reprojectPS: "\nvarying vec2 vUv0;\nuniform sampler2D sourceTex;\nuniform samplerCube sourceCube;\nuniform vec4 params;\nfloat targetFace() { return params.x; }\nfloat specularPower() { return params.y; }\nfloat sourceCubeSeamScale() { return params.z; }\nfloat targetCubeSeamScale() { return params.w; }\nfloat PI = 3.141592653589793;\nfloat saturate(float x) {\n\treturn clamp(x, 0.0, 1.0);\n}\nvec3 decodeLinear(vec4 source) {\n\treturn source.rgb;\n}\nvec4 encodeLinear(vec3 source) {\n\treturn vec4(source, 1.0);\n}\nvec3 decodeGamma(vec4 source) {\n\treturn pow(source.xyz, vec3(2.2));\n}\nvec4 encodeGamma(vec3 source) {\n\treturn vec4(pow(source + 0.0000001, vec3(1.0 / 2.2)), 1.0);\n}\nvec3 decodeRGBM(vec4 rgbm) {\n\tvec3 color = (8.0 * rgbm.a) * rgbm.rgb;\n\treturn color * color;\n}\nvec4 encodeRGBM(vec3 source) {\n\tvec4 result;\n\tresult.rgb = pow(source.rgb, vec3(0.5));\n\tresult.rgb *= 1.0 / 8.0;\n\tresult.a = saturate( max( max( result.r, result.g ), max( result.b, 1.0 / 255.0 ) ) );\n\tresult.a = ceil(result.a * 255.0) / 255.0;\n\tresult.rgb /= result.a;\n\treturn result;\n}\nvec3 decodeRGBE(vec4 source) {\n\tif (source.a == 0.0) {\n\t\treturn vec3(0.0, 0.0, 0.0);\n\t} else {\n\t\treturn source.xyz * pow(2.0, source.w * 255.0 - 128.0);\n\t}\n}\nvec4 encodeRGBE(vec3 source) {\n\tfloat maxVal = max(source.x, max(source.y, source.z));\n\tif (maxVal < 1e-32) {\n\t\treturn vec4(0, 0, 0, 0);\n\t} else {\n\t\tfloat e = ceil(log2(maxVal));\n\t\treturn vec4(source / pow(2.0, e), (e + 128.0) / 255.0);\n\t}\n}\nvec3 modifySeams(vec3 dir, float amount) {\n\tif (amount != 1.0) {\n\t\tvec3 adir = abs(dir);\n\t\tfloat M = max(max(adir.x, adir.y), adir.z);\n\t\tif (adir.x == M) {\n\t\t\tdir.y *= amount;\n\t\t\tdir.z *= amount;\n\t\t}\n\t\telse if (adir.y == M) {\n\t\t\tdir.x *= amount;\n\t\t\tdir.z *= amount;\n\t\t} else {\n\t\t\tdir.x *= amount;\n\t\t\tdir.y *= amount;\n\t\t}\n\t}\n\treturn dir;\n}\nvec2 toSpherical(vec3 dir) {\n\treturn vec2(atan(dir.z, dir.x), asin(dir.y));\n}\nvec3 fromSpherical(vec2 uv) {\n\treturn vec3(cos(uv.y) * cos(uv.x),\n\t\t\t\tsin(uv.y),\n\t\t\t\tcos(uv.y) * sin(uv.x));\n}\nvec4 sampleEquirect(vec2 sph) {\n\tvec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;\n\treturn texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));\n}\nvec4 sampleEquirect(vec3 dir) {\n\treturn sampleEquirect(toSpherical(dir));\n}\nvec4 sampleCubemap(vec3 dir) {\n\treturn textureCube(sourceCube, modifySeams(dir, sourceCubeSeamScale()));\n}\nvec4 sampleCubemap(vec2 sph) {\n\treturn sampleCubemap(fromSpherical(sph));\n}\nvec3 getDirectionEquirect() {\n\treturn fromSpherical((vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0) * vec2(PI, PI * 0.5));\n}\nfloat signNotZero(float k){\n\treturn(k >= 0.0) ? 1.0 : -1.0;\n}\nvec2 signNotZero(vec2 v) {\n\treturn vec2(signNotZero(v.x), signNotZero(v.y));\n}\nvec3 octDecode(vec2 o) {\n\tvec3 v = vec3(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);\n\tif (v.y < 0.0) {\n\t\tv.xz = (1.0 - abs(v.zx)) * signNotZero(v.xz);\n\t}\n\treturn normalize(v);\n}\nvec3 getDirectionOctahedral() {\n\treturn octDecode(vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0);\n}\nvec2 octEncode(in vec3 v) {\n\tfloat l1norm = abs(v.x) + abs(v.y) + abs(v.z);\n\tvec2 result = v.xz * (1.0 / l1norm);\n\tif (v.y < 0.0) {\n\t\tresult = (1.0 - abs(result.yx)) * signNotZero(result.xy);\n\t}\n\treturn result;\n}\nvec4 sampleOctahedral(vec3 dir) {\n\tvec2 uv = octEncode(dir) * 0.5 + 0.5;\n\treturn texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));\n}\nvec4 sampleOctahedral(vec2 sph) {\n\treturn sampleOctahedral(fromSpherical(sph));\n}\nvec3 getDirectionCubemap() {\n\tvec2 st = vUv0 * 2.0 - 1.0;\n\tfloat face = targetFace();\n\tvec3 vec;\n\tif (face == 0.0) {\n\t\tvec = vec3(1, -st.y, -st.x);\n\t} else if (face == 1.0) {\n\t\tvec = vec3(-1, -st.y, st.x);\n\t} else if (face == 2.0) {\n\t\tvec = vec3(st.x, 1, st.y);\n\t} else if (face == 3.0) {\n\t\tvec = vec3(st.x, -1, -st.y);\n\t} else if (face == 4.0) {\n\t\tvec = vec3(st.x, -st.y, 1);\n\t} else {\n\t\tvec = vec3(-st.x, -st.y, -1);\n\t}\n\treturn normalize(modifySeams(vec, 1.0 / targetCubeSeamScale()));\n}\nmat3 matrixFromVector(vec3 n) {\n\tfloat a = 1.0 / (1.0 + n.z);\n\tfloat b = -n.x * n.y * a;\n\tvec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\n\tvec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\n\treturn mat3(b1, b2, n);\n}\nmat3 matrixFromVectorSlow(vec3 n) {\n\tvec3 a = normalize(cross(n, vec3(0, 1, 0)));\n\tvec3 b = cross(n, a);\n\treturn mat3(a, b, n);\n}\nfloat rnd(int i) {\n\tfloat sini = sin(float(i));\n\tfloat cosi = cos(float(i));\n\treturn fract(sin(dot(vec2(sini, cosi), vec2(12.9898, 78.233) * 2.0)) * 43758.5453);\n}\nvec3 hemisphereSamplePhong(vec2 uv, float specPow) {\n\tfloat phi = uv.y * 2.0 * PI;\n\tfloat cosTheta = pow(1.0 - uv.x, 1.0 / (specPow + 1.0));\n\tfloat sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n\treturn vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n}\nvec4 reproject() {\n\tif (NUM_SAMPLES <= 1) {\n\t\treturn ENCODE_FUNC(DECODE_FUNC(SOURCE_FUNC(TARGET_FUNC())));\n\t} else {\n\t\tvec2 sph = toSpherical(TARGET_FUNC());\n\t\tvec2 sphu = dFdx(sph);\n\t\tvec2 sphv = dFdy(sph);\n\t\tvec3 result = vec3(0.0);\n\t\tfor (float u = 0.0; u < NUM_SAMPLES_SQRT; ++u) {\n\t\t\tfor (float v = 0.0; v < NUM_SAMPLES_SQRT; ++v) {\n\t\t\t\tresult += DECODE_FUNC(SOURCE_FUNC(sph +\n\t\t\t\t\t\t\t\t\t\t\t\t  sphu * (u / NUM_SAMPLES_SQRT - 0.5) +\n\t\t\t\t\t\t\t\t\t\t\t\t  sphv * (v / NUM_SAMPLES_SQRT - 0.5)));\n\t\t\t}\n\t\t}\n\t\treturn ENCODE_FUNC(result / (NUM_SAMPLES_SQRT * NUM_SAMPLES_SQRT));\n\t}\n}\nvec4 prefilter() {\n\tvec3 vec = TARGET_FUNC();\n\tmat3 vecSpace = matrixFromVectorSlow(vec);\n\tvec3 result = vec3(0.0);\n\tfor (int i=0; i<NUM_SAMPLES; ++i) {\n\t\tvec2 uv = vec2(float(i) / float(NUM_SAMPLES), rnd(i));\n\t\tvec3 dir = vecSpace * hemisphereSamplePhong(uv, specularPower());\n\t\tresult += DECODE_FUNC(SOURCE_FUNC(dir));\n\t}\n\treturn ENCODE_FUNC(result / float(NUM_SAMPLES));\n}\nvoid main(void) {\n\tgl_FragColor = PROCESS_FUNC();\n}\n",
        rgbmPS: "vec3 decodeRGBM(vec4 rgbm) {\n\tvec3 color = (8.0 * rgbm.a) * rgbm.rgb;\n\treturn color * color;\n}\nvec3 texture2DRGBM(sampler2D tex, vec2 uv) {\n\treturn decodeRGBM(texture2D(tex, uv));\n}\nvec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {\n\treturn decodeRGBM(textureCube(tex, uvw));\n}\n",
        screenDepthPS: "uniform highp sampler2D uDepthMap;\n#ifndef SCREENSIZE\n#define SCREENSIZE\nuniform vec4 uScreenSize;\n#endif\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params;\n#endif\n#ifdef GL2\nfloat linearizeDepth(float z) {\n\tz = z * 2.0 - 1.0;\n\treturn 1.0 / (camera_params.z * z + camera_params.w);\n}\n#else\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n\tconst vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n\treturn dot(rgbaDepth, bitShift);\n}\n#endif\n#endif\nfloat getLinearScreenDepth(vec2 uv) {\n\t#ifdef GL2\n\treturn linearizeDepth(texture2D(uDepthMap, uv).r) * camera_params.y;\n\t#else\n\treturn unpackFloat(texture2D(uDepthMap, uv)) * camera_params.y;\n\t#endif\n}\n#ifndef VERTEXSHADER\nfloat getLinearScreenDepth() {\n\tvec2 uv = gl_FragCoord.xy * uScreenSize.zw;\n\treturn getLinearScreenDepth(uv);\n}\n#endif\nfloat getLinearDepth(vec3 pos) {\n\treturn -(matrix_view * vec4(pos, 1.0)).z;\n}\n",
        shadowCascadesPS: "const float maxCascades = 4.0;\nmat4 cascadeShadowMat;\nvoid getShadowCascadeMatrix(mat4 shadowMatrixPalette[4], float shadowCascadeDistances[4], float shadowCascadeCount) {\n\tfloat depth = 1.0 / gl_FragCoord.w;\n\tfloat cascadeIndex = 0.0;\n\tfor (float i = 0.0; i < maxCascades; i++) {\n\t\tif (depth < shadowCascadeDistances[int(i)]) {\n\t\t\tcascadeIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tcascadeIndex = min(cascadeIndex, shadowCascadeCount - 1.0);\n\t#ifdef GL2\n\t\tcascadeShadowMat = shadowMatrixPalette[int(cascadeIndex)];\n\t#else\n\t\tif (cascadeIndex == 0.0) {\n\t\t\tcascadeShadowMat = shadowMatrixPalette[0];\n\t\t}\n\t\telse if (cascadeIndex == 1.0) {\n\t\t\tcascadeShadowMat = shadowMatrixPalette[1];\n\t\t}\n\t\telse if (cascadeIndex == 2.0) {\n\t\t\tcascadeShadowMat = shadowMatrixPalette[2];\n\t\t}\n\t\telse {\n\t\t\tcascadeShadowMat = shadowMatrixPalette[3];\n\t\t}\n\t#endif\n}\nvoid fadeShadow(float shadowCascadeDistances[4]) {\n\tfloat depth = 1.0 / gl_FragCoord.w;\n\tif (depth > shadowCascadeDistances[int(maxCascades - 1.0)]) {\n\t\tdShadowCoord.z = -9999999.0;\n\t}\n}\n",
        shadowCommonPS: "void normalOffsetPointShadow(vec4 shadowParams) {\n\tfloat distScale = length(dLightDirW);\n\tvec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n\tvec3 dir = wPos - dLightPosW;\n\tdLightDirW = dir;\n}\n",
        shadowCoordPS: "void _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\n\tdShadowCoord = (shadowMatrix * vec4(wPos, 1.0)).xyz;\n\tdShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;\n\t#ifdef SHADOWBIAS\n\tdShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\n\t#endif\n}\nvoid _getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\n\tvec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n\tprojPos.xy /= projPos.w;\n\tdShadowCoord.xy = projPos.xy;\n\tdShadowCoord.z = length(dLightDirW) * shadowParams.w;\n\t#ifdef SHADOWBIAS\n\tdShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\n\t#endif\n}\nvoid getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {\n\t_getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams) {\n\t_getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\n\tfloat distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW));\n\tvec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n\t_getShadowCoordPersp(shadowMatrix, shadowParams, wPos);\n}\nvoid getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\n\tvec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0);\n\t_getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);\n}\n",
        shadowCoordPerspZbufferPS: "void _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\n\tvec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n\tprojPos.xyz /= projPos.w;\n\tdShadowCoord = projPos.xyz;\n}\nvoid getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\n\tfloat distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW));\n\tvec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n\t_getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);\n}\nvoid getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams) {\n\t_getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, vPositionW);\n}\n",
        shadowEVSMPS: "float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n\tvec3 moments = texture2D(tex, texCoords).xyz;\n\treturn calculateEVSM(moments, Z, vsmBias, exponent);\n}\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n\treturn VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\n}\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n\treturn VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\n}\n",
        shadowEVSMnPS: "float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n\tfloat pixelSize = 1.0 / resolution;\n\ttexCoords -= vec2(pixelSize);\n\tvec3 s00 = texture2D(tex, texCoords).xyz;\n\tvec3 s10 = texture2D(tex, texCoords + vec2(pixelSize, 0)).xyz;\n\tvec3 s01 = texture2D(tex, texCoords + vec2(0, pixelSize)).xyz;\n\tvec3 s11 = texture2D(tex, texCoords + vec2(pixelSize)).xyz;\n\tvec2 fr = fract(texCoords * resolution);\n\tvec3 h0 = mix(s00, s10, fr.x);\n\tvec3 h1 = mix(s01, s11, fr.x);\n\tvec3 moments = mix(h0, h1, fr.y);\n\treturn calculateEVSM(moments, Z, vsmBias, exponent);\n}\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n\treturn VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\n}\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n\treturn VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\n}\n",
        shadowStandardPS: "vec3 lessThan2(vec3 a, vec3 b) {\n\treturn clamp((b - a)*1000.0, 0.0, 1.0);\n}\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n\tconst vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n\treturn dot(rgbaDepth, bitShift);\n}\n#endif\n#ifdef GL2\nfloat _getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\n\tfloat z = dShadowCoord.z;\n\tvec2 uv = dShadowCoord.xy * shadowParams.x;\n\tfloat shadowMapSizeInv = 1.0 / shadowParams.x;\n\tvec2 base_uv = floor(uv + 0.5);\n\tfloat s = (uv.x + 0.5 - base_uv.x);\n\tfloat t = (uv.y + 0.5 - base_uv.y);\n\tbase_uv -= vec2(0.5);\n\tbase_uv *= shadowMapSizeInv;\n\tfloat sum = 0.0;\n\tfloat uw0 = (3.0 - 2.0 * s);\n\tfloat uw1 = (1.0 + 2.0 * s);\n\tfloat u0 = (2.0 - s) / uw0 - 1.0;\n\tfloat u1 = s / uw1 + 1.0;\n\tfloat vw0 = (3.0 - 2.0 * t);\n\tfloat vw1 = (1.0 + 2.0 * t);\n\tfloat v0 = (2.0 - t) / vw0 - 1.0;\n\tfloat v1 = t / vw1 + 1.0;\n\tu0 = u0 * shadowMapSizeInv + base_uv.x;\n\tv0 = v0 * shadowMapSizeInv + base_uv.y;\n\tu1 = u1 * shadowMapSizeInv + base_uv.x;\n\tv1 = v1 * shadowMapSizeInv + base_uv.y;\n\tsum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\n\tsum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\n\tsum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\n\tsum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\n\tsum *= 1.0f / 16.0;\n\treturn sum;\n}\nfloat getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\n\treturn _getShadowPCF3x3(shadowMap, shadowParams);\n}\nfloat getShadowSpotPCF3x3(sampler2DShadow shadowMap, vec4 shadowParams) {\n\treturn _getShadowPCF3x3(shadowMap, shadowParams.xyz);\n}\n#else\nfloat _xgetShadowPCF3x3(mat3 depthKernel, sampler2D shadowMap, vec3 shadowParams) {\n\tmat3 shadowKernel;\n\tvec3 shadowCoord = dShadowCoord;\n\tvec3 shadowZ = vec3(shadowCoord.z);\n\tshadowKernel[0] = vec3(greaterThan(depthKernel[0], shadowZ));\n\tshadowKernel[1] = vec3(greaterThan(depthKernel[1], shadowZ));\n\tshadowKernel[2] = vec3(greaterThan(depthKernel[2], shadowZ));\n\tvec2 fractionalCoord = fract( shadowCoord.xy * shadowParams.x );\n\tshadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n\tshadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n\tvec4 shadowValues;\n\tshadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n\tshadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n\tshadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n\tshadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n\treturn dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n}\nfloat _getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\n\tvec3 shadowCoord = dShadowCoord;\n\tfloat xoffset = 1.0 / shadowParams.x;\n\tfloat dx0 = -xoffset;\n\tfloat dx1 = xoffset;\n\tmat3 depthKernel;\n\tdepthKernel[0][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx0)));\n\tdepthKernel[0][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, 0.0)));\n\tdepthKernel[0][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx1)));\n\tdepthKernel[1][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx0)));\n\tdepthKernel[1][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy));\n\tdepthKernel[1][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx1)));\n\tdepthKernel[2][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx0)));\n\tdepthKernel[2][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, 0.0)));\n\tdepthKernel[2][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx1)));\n\treturn _xgetShadowPCF3x3(depthKernel, shadowMap, shadowParams);\n}\nfloat getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\n\treturn _getShadowPCF3x3(shadowMap, shadowParams);\n}\nfloat getShadowSpotPCF3x3(sampler2D shadowMap, vec4 shadowParams) {\n\treturn _getShadowPCF3x3(shadowMap, shadowParams.xyz);\n}\n#endif\nfloat _getShadowPoint(samplerCube shadowMap, vec4 shadowParams, vec3 dir) {\n\tvec3 tc = normalize(dir);\n\tvec3 tcAbs = abs(tc);\n\tvec4 dirX = vec4(1,0,0, tc.x);\n\tvec4 dirY = vec4(0,1,0, tc.y);\n\tfloat majorAxisLength = tc.z;\n\tif ((tcAbs.x > tcAbs.y) && (tcAbs.x > tcAbs.z)) {\n\t\tdirX = vec4(0,0,1, tc.z);\n\t\tdirY = vec4(0,1,0, tc.y);\n\t\tmajorAxisLength = tc.x;\n\t} else if ((tcAbs.y > tcAbs.x) && (tcAbs.y > tcAbs.z)) {\n\t\tdirX = vec4(1,0,0, tc.x);\n\t\tdirY = vec4(0,0,1, tc.z);\n\t\tmajorAxisLength = tc.y;\n\t}\n\tfloat shadowParamsInFaceSpace = ((1.0/shadowParams.x) * 2.0) * abs(majorAxisLength);\n\tvec3 xoffset = (dirX.xyz * shadowParamsInFaceSpace);\n\tvec3 yoffset = (dirY.xyz * shadowParamsInFaceSpace);\n\tvec3 dx0 = -xoffset;\n\tvec3 dy0 = -yoffset;\n\tvec3 dx1 = xoffset;\n\tvec3 dy1 = yoffset;\n\tmat3 shadowKernel;\n\tmat3 depthKernel;\n\tdepthKernel[0][0] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy0));\n\tdepthKernel[0][1] = unpackFloat(textureCube(shadowMap, tc + dx0));\n\tdepthKernel[0][2] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy1));\n\tdepthKernel[1][0] = unpackFloat(textureCube(shadowMap, tc + dy0));\n\tdepthKernel[1][1] = unpackFloat(textureCube(shadowMap, tc));\n\tdepthKernel[1][2] = unpackFloat(textureCube(shadowMap, tc + dy1));\n\tdepthKernel[2][0] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy0));\n\tdepthKernel[2][1] = unpackFloat(textureCube(shadowMap, tc + dx1));\n\tdepthKernel[2][2] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy1));\n\tvec3 shadowZ = vec3(length(dir) * shadowParams.w + shadowParams.z);\n\tshadowKernel[0] = vec3(lessThan2(depthKernel[0], shadowZ));\n\tshadowKernel[1] = vec3(lessThan2(depthKernel[1], shadowZ));\n\tshadowKernel[2] = vec3(lessThan2(depthKernel[2], shadowZ));\n\tvec2 uv = (vec2(dirX.w, dirY.w) / abs(majorAxisLength)) * 0.5;\n\tvec2 fractionalCoord = fract( uv * shadowParams.x );\n\tshadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n\tshadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n\tvec4 shadowValues;\n\tshadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n\tshadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n\tshadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n\tshadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n\treturn 1.0 - dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n}\nfloat getShadowPointPCF3x3(samplerCube shadowMap, vec4 shadowParams) {\n\treturn _getShadowPoint(shadowMap, shadowParams, dLightDirW);\n}\n",
        shadowStandardGL2PS: "float _getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\n\tfloat z = dShadowCoord.z;\n\tvec2 uv = dShadowCoord.xy * shadowParams.x;\n\tfloat shadowMapSizeInv = 1.0 / shadowParams.x;\n\tvec2 base_uv = floor(uv + 0.5);\n\tfloat s = (uv.x + 0.5 - base_uv.x);\n\tfloat t = (uv.y + 0.5 - base_uv.y);\n\tbase_uv -= vec2(0.5);\n\tbase_uv *= shadowMapSizeInv;\n\tfloat uw0 = (4.0 - 3.0 * s);\n\tfloat uw1 = 7.0;\n\tfloat uw2 = (1.0 + 3.0 * s);\n\tfloat u0 = (3.0 - 2.0 * s) / uw0 - 2.0;\n\tfloat u1 = (3.0 + s) / uw1;\n\tfloat u2 = s / uw2 + 2.0;\n\tfloat vw0 = (4.0 - 3.0 * t);\n\tfloat vw1 = 7.0;\n\tfloat vw2 = (1.0 + 3.0 * t);\n\tfloat v0 = (3.0 - 2.0 * t) / vw0 - 2.0;\n\tfloat v1 = (3.0 + t) / vw1;\n\tfloat v2 = t / vw2 + 2.0;\n\tfloat sum = 0.0;\n\tu0 = u0 * shadowMapSizeInv + base_uv.x;\n\tv0 = v0 * shadowMapSizeInv + base_uv.y;\n\tu1 = u1 * shadowMapSizeInv + base_uv.x;\n\tv1 = v1 * shadowMapSizeInv + base_uv.y;\n\tu2 = u2 * shadowMapSizeInv + base_uv.x;\n\tv2 = v2 * shadowMapSizeInv + base_uv.y;\n\tsum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\n\tsum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\n\tsum += uw2 * vw0 * texture(shadowMap, vec3(u2, v0, z));\n\tsum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\n\tsum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\n\tsum += uw2 * vw1 * texture(shadowMap, vec3(u2, v1, z));\n\tsum += uw0 * vw2 * texture(shadowMap, vec3(u0, v2, z));\n\tsum += uw1 * vw2 * texture(shadowMap, vec3(u1, v2, z));\n\tsum += uw2 * vw2 * texture(shadowMap, vec3(u2, v2, z));\n\tsum *= 1.0f / 144.0;\n\tsum = gammaCorrectInput(sum);\n\tsum = saturate(sum);\n\treturn sum;\n}\nfloat getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\n\treturn _getShadowPCF5x5(shadowMap, shadowParams);\n}\nfloat getShadowSpotPCF5x5(sampler2DShadow shadowMap, vec4 shadowParams) {\n\treturn _getShadowPCF5x5(shadowMap, shadowParams.xyz);\n}\n",
        shadowVSM8PS: "float calculateVSM8(vec3 moments, float Z, float vsmBias) {\n\tfloat VSMBias = vsmBias;\n\tfloat depthScale = VSMBias * Z;\n\tfloat minVariance1 = depthScale * depthScale;\n\treturn chebyshevUpperBound(moments.xy, Z, minVariance1, 0.1);\n}\nfloat decodeFloatRG(vec2 rg) {\n\treturn rg.y*(1.0/255.0) + rg.x;\n}\nfloat VSM8(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n\tvec4 c = texture2D(tex, texCoords);\n\tvec3 moments = vec3(decodeFloatRG(c.xy), decodeFloatRG(c.zw), 0.0);\n\treturn calculateVSM8(moments, Z, vsmBias);\n}\nfloat getShadowVSM8(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n\treturn VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, 0.0);\n}\nfloat getShadowSpotVSM8(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n\treturn VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, 0.0);\n}\n",
        shadowVSM_commonPS: "float linstep(float a, float b, float v) {\n\treturn saturate((v - a) / (b - a));\n}\nfloat reduceLightBleeding(float pMax, float amount) {\n   return linstep(amount, 1.0, pMax);\n}\nfloat chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {\n\tfloat variance = moments.y - (moments.x * moments.x);\n\tvariance = max(variance, minVariance);\n\tfloat d = mean - moments.x;\n\tfloat pMax = variance / (variance + (d * d));\n\tpMax = reduceLightBleeding(pMax, lightBleedingReduction);\n\treturn (mean <= moments.x ? 1.0 : pMax);\n}\nfloat calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {\n\tZ = 2.0 * Z - 1.0;\n\tfloat warpedDepth = exp(exponent * Z);\n\tmoments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);\n\tfloat VSMBias = vsmBias;\n\tfloat depthScale = VSMBias * exponent * warpedDepth;\n\tfloat minVariance1 = depthScale * depthScale;\n\treturn chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);\n}\n",
        skinBatchConstVS: "attribute float vertex_boneIndices;\nuniform vec4 matrix_pose[BONE_LIMIT * 3];\nmat4 getBoneMatrix(const in float i) {\n\tvec4 v1 = matrix_pose[int(3.0 * i)];\n\tvec4 v2 = matrix_pose[int(3.0 * i + 1.0)];\n\tvec4 v3 = matrix_pose[int(3.0 * i + 2.0)];\n\treturn mat4(\n\t\tv1.x, v2.x, v3.x, 0,\n\t\tv1.y, v2.y, v3.y, 0,\n\t\tv1.z, v2.z, v3.z, 0,\n\t\tv1.w, v2.w, v3.w, 1\n\t);\n}\n",
        skinBatchTexVS: "attribute float vertex_boneIndices;\nuniform highp sampler2D texture_poseMap;\nuniform vec4 texture_poseMapSize;\nmat4 getBoneMatrix(const in float i) {\n\tfloat j = i * 3.0;\n\tfloat dx = texture_poseMapSize.z;\n\tfloat dy = texture_poseMapSize.w;\n\tfloat y = floor(j * dx);\n\tfloat x = j - (y * texture_poseMapSize.x);\n\ty = dy * (y + 0.5);\n\tvec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\n\tvec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\n\tvec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\n\treturn mat4(\n\t\tv1.x, v2.x, v3.x, 0,\n\t\tv1.y, v2.y, v3.y, 0,\n\t\tv1.z, v2.z, v3.z, 0,\n\t\tv1.w, v2.w, v3.w, 1\n\t);\n}\n",
        skinConstVS: "attribute vec4 vertex_boneWeights;\nattribute vec4 vertex_boneIndices;\nuniform vec4 matrix_pose[BONE_LIMIT * 3];\nvoid getBoneMatrix(const in float i, out vec4 v1, out vec4 v2, out vec4 v3) {\n\tv1 = matrix_pose[int(3.0 * i)];\n\tv2 = matrix_pose[int(3.0 * i + 1.0)];\n\tv3 = matrix_pose[int(3.0 * i + 2.0)];\n}\nmat4 getSkinMatrix(const in vec4 indices, const in vec4 weights) {\n\tvec4 a1, a2, a3;\n\tgetBoneMatrix(indices.x, a1, a2, a3);\n\tvec4 b1, b2, b3;\n\tgetBoneMatrix(indices.y, b1, b2, b3);\n\tvec4 c1, c2, c3;\n\tgetBoneMatrix(indices.z, c1, c2, c3);\n\tvec4 d1, d2, d3;\n\tgetBoneMatrix(indices.w, d1, d2, d3);\n\tvec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;\n\tvec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;\n\tvec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;\n\tfloat one = dot(weights, vec4(1.0));\n\treturn mat4(\n\t\tv1.x, v2.x, v3.x, 0,\n\t\tv1.y, v2.y, v3.y, 0,\n\t\tv1.z, v2.z, v3.z, 0,\n\t\tv1.w, v2.w, v3.w, one\n\t);\n}\n",
        skinTexVS: "attribute vec4 vertex_boneWeights;\nattribute vec4 vertex_boneIndices;\nuniform highp sampler2D texture_poseMap;\nuniform vec4 texture_poseMapSize;\nvoid getBoneMatrix(const in float i, out vec4 v1, out vec4 v2, out vec4 v3) {\n\tfloat j = i * 3.0;\n\tfloat dx = texture_poseMapSize.z;\n\tfloat dy = texture_poseMapSize.w;\n\tfloat y = floor(j * dx);\n\tfloat x = j - (y * texture_poseMapSize.x);\n\ty = dy * (y + 0.5);\n\tv1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\n\tv2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\n\tv3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\n}\nmat4 getSkinMatrix(const in vec4 indices, const in vec4 weights) {\n\tvec4 a1, a2, a3;\n\tgetBoneMatrix(indices.x, a1, a2, a3);\n\tvec4 b1, b2, b3;\n\tgetBoneMatrix(indices.y, b1, b2, b3);\n\tvec4 c1, c2, c3;\n\tgetBoneMatrix(indices.z, c1, c2, c3);\n\tvec4 d1, d2, d3;\n\tgetBoneMatrix(indices.w, d1, d2, d3);\n\tvec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;\n\tvec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;\n\tvec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;\n\tfloat one = dot(weights, vec4(1.0));\n\treturn mat4(\n\t\tv1.x, v2.x, v3.x, 0,\n\t\tv1.y, v2.y, v3.y, 0,\n\t\tv1.z, v2.z, v3.z, 0,\n\t\tv1.w, v2.w, v3.w, one\n\t);\n}\n",
        skyboxHDRPS: "varying vec3 vViewDir;\nuniform samplerCube texture_cubeMap;\nvoid main(void) {\n\tvec3 dir=vViewDir;\n#ifndef RIGHT_HANDED_CUBEMAP\n\tdir.x *= -1.0;\n#endif\n\tvec3 color = processEnvironment($textureCubeSAMPLE(texture_cubeMap, fixSeamsStatic(dir, $FIXCONST)).rgb);\n\tcolor = toneMap(color);\n\tcolor = gammaCorrectOutput(color);\n\tgl_FragColor = vec4(color, 1.0);\n}\n",
        skyboxVS: "attribute vec3 aPosition;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform mat4 matrix_projectionSkybox;\nuniform mat3 cubeMapRotationMatrix;\nvarying vec3 vViewDir;\nvoid main(void) {\n\tmat4 view = matrix_view;\n\tview[3][0] = view[3][1] = view[3][2] = 0.0;\n\tgl_Position = matrix_projectionSkybox * view * vec4(aPosition, 1.0);\n\tgl_Position.z = gl_Position.w - 0.00001;\n\tvViewDir = aPosition * cubeMapRotationMatrix;\n}\n",
        specularPS: "#ifdef MAPCOLOR\nuniform vec3 material_specular;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_specularMap;\n#endif\nvoid getSpecularity() {\n\tdSpecularity = vec3(1.0);\n\t#ifdef MAPCOLOR\n\tdSpecularity *= material_specular;\n\t#endif\n\t#ifdef MAPTEXTURE\n\tdSpecularity *= texture2D(texture_specularMap, $UV).$CH;\n\t#endif\n\t#ifdef MAPVERTEX\n\tdSpecularity *= saturate(vVertexColor.$VC);\n\t#endif\n}\n",
        specularAaNonePS: "float antiAliasGlossiness(float power) {\n\treturn power;\n}\n",
        specularAaToksvigPS: "float antiAliasGlossiness(float power) {\n\tfloat rlen = 1.0 / saturate(length(dNormalMap));\n\tfloat toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\n\treturn power * mix(1.0, toksvig, material_bumpiness);\n}\n",
        specularAaToksvigFastPS: "float antiAliasGlossiness(float power) {\n\tfloat rlen = 1.0 / saturate(length(dNormalMap));\n\tfloat toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\n\treturn power * toksvig;\n}\n",
        spotPS: "float getSpotEffect(vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {\n\tfloat cosAngle = dot(dLightDirNormW, lightSpotDirW);\n\treturn smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);\n}\n",
        startPS: "void main(void) {\n\tdDiffuseLight = vec3(0);\n\tdSpecularLight = vec3(0);\n\tdReflection = vec4(0);\n\tdSpecularity = vec3(0);\n\t#ifdef CLEARCOAT\n\tccSpecularLight = vec3(0);\n\tccReflection = vec4(0);\n\t#endif\n",
        startVS: "void main(void) {\n\tgl_Position = getPosition();\n",
        startNineSlicedPS: "\tnineSlicedUv = vUv0;\n\tnineSlicedUv.y = 1.0 - nineSlicedUv.y;\n",
        startNineSlicedTiledPS: "\tvec2 tileMask = step(vMask, vec2(0.99999));\n\tvec2 tileSize = 0.5 * (innerOffset.xy + innerOffset.zw);\n\tvec2 tileScale = vec2(1.0) / (vec2(1.0) - tileSize);\n\tvec2 clampedUv = mix(innerOffset.xy * 0.5, vec2(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));\n\tclampedUv = clampedUv * atlasRect.zw + atlasRect.xy;\n\tnineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);\n\tnineSlicedUv.y = 1.0 - nineSlicedUv.y;\n",
        storeEVSMPS: "float exponent = VSM_EXPONENT;\ndepth = 2.0 * depth - 1.0;\ndepth =  exp(exponent * depth);\ngl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);\n",
        tangentBinormalVS: "vec3 getTangent() {\n\treturn normalize(dNormalMatrix * vertex_tangent.xyz);\n}\nvec3 getBinormal() {\n\treturn cross(vNormalW, vTangentW) * vertex_tangent.w;\n}\nvec3 getObjectSpaceUp() {\n\treturn normalize(dNormalMatrix * vec3(0, 1, 0));\n}\n",
        TBNPS: "void getTBN() {\n\tdTBN = mat3(normalize(dTangentW), normalize(dBinormalW), normalize(dVertexNormalW));\n}\n",
        TBNderivativePS: "uniform float tbnBasis;\nvoid getTBN() {\n\tvec2 uv = $UV;\n\tvec3 dp1 = dFdx( vPositionW );\n\tvec3 dp2 = dFdy( vPositionW );\n\tvec2 duv1 = dFdx( uv );\n\tvec2 duv2 = dFdy( uv );\n\tvec3 dp2perp = cross( dp2, dVertexNormalW );\n\tvec3 dp1perp = cross( dVertexNormalW, dp1 );\n\tvec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n\tvec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\tfloat denom = max( dot(T,T), dot(B,B) );\n\tfloat invmax = (denom == 0.0) ? 0.0 : tbnBasis / sqrt( denom );\n\tdTBN = mat3(T * invmax, -B * invmax, dVertexNormalW );\n}\n",
        TBNfastPS: "void getTBN() {\n\tdTBN = mat3(dTangentW, dBinormalW, dVertexNormalW);\n}\n",
        TBNObjectSpacePS: "void getTBN() {\n\tvec3 B = cross(dVertexNormalW, vObjectSpaceUpW);\n\tvec3 T = cross(dVertexNormalW, B);\n\tif (dot(B,B)==0.0)\n\t{\n\t\tfloat major=max(max(dVertexNormalW.x, dVertexNormalW.y),dVertexNormalW.z);\n\t\tif (dVertexNormalW.x==major)\n\t\t{\n\t\t\tB=cross(dVertexNormalW, vec3(0,1,0));\n\t\t\tT=cross(dVertexNormalW, B);\n\t\t}\n\t\telse if (dVertexNormalW.y==major)\n\t\t{\n\t\t\tB=cross(dVertexNormalW, vec3(0,0,1));\n\t\t\tT=cross(dVertexNormalW, B);\n\t\t}\n\t\telse if (dVertexNormalW.z==major)\n\t\t{\n\t\t\tB=cross(dVertexNormalW, vec3(1,0,0));\n\t\t\tT=cross(dVertexNormalW, B);\n\t\t}\n\t}\n\tdTBN = mat3(normalize(T), normalize(B), normalize(dVertexNormalW));\n}\n",
        tonemappingAcesPS: "uniform float exposure;\nvec3 toneMap(vec3 color) {\n\tfloat tA = 2.51;\n\tfloat tB = 0.03;\n\tfloat tC = 2.43;\n\tfloat tD = 0.59;\n\tfloat tE = 0.14;\n\tvec3 x = color * exposure;\n\treturn (x*(tA*x+tB))/(x*(tC*x+tD)+tE);\n}\n",
        tonemappingAces2PS: "uniform float exposure;\nconst mat3 ACESInputMat = mat3(\n\t0.59719, 0.35458, 0.04823,\n\t0.07600, 0.90834, 0.01566,\n\t0.02840, 0.13383, 0.83777\n);\nconst mat3 ACESOutputMat = mat3(\n\t 1.60475, -0.53108, -0.07367,\n\t-0.10208,  1.10813, -0.00605,\n\t-0.00327, -0.07276,  1.07602\n);\nvec3 RRTAndODTFit(vec3 v) {\n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn a / b;\n}\nvec3 toneMap(vec3 color) {\n\tcolor *= exposure;\n\tcolor = color * ACESInputMat;\n\tcolor = RRTAndODTFit(color);\n\tcolor = color * ACESOutputMat;\n\tcolor = clamp(color, 0.0, 1.0);\n\treturn color;\n}\n",
        tonemappingFilmicPS: "const float A =  0.15;\nconst float B =  0.50;\nconst float C =  0.10;\nconst float D =  0.20;\nconst float E =  0.02;\nconst float F =  0.30;\nconst float W =  11.2;\nuniform float exposure;\nvec3 uncharted2Tonemap(vec3 x) {\n   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\nvec3 toneMap(vec3 color) {\n\tcolor = uncharted2Tonemap(color * exposure);\n\tvec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));\n\tcolor = color * whiteScale;\n\treturn color;\n}\n",
        tonemappingHejlPS: "uniform float exposure;\nvec3 toneMap(vec3 color) {\n\tcolor *= exposure;\n\tconst float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;\n\tconst float Scl = 1.25;\n\tvec3 h = max( vec3(0.0), color - vec3(0.004) );\n\treturn (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);\n}\n",
        tonemappingLinearPS: "uniform float exposure;\nvec3 toneMap(vec3 color) {\n\treturn color * exposure;\n}\n",
        tonemappingNonePS: "vec3 toneMap(vec3 color) {\n\treturn color;\n}\n",
        transformVS: "#ifdef PIXELSNAP\nuniform vec4 uScreenSize;\n#endif\n#ifdef MORPHING\nuniform vec4 morph_weights_a;\nuniform vec4 morph_weights_b;\n#endif\n#ifdef MORPHING_TEXTURE_BASED\nuniform vec4 morph_tex_params;\nvec2 getTextureMorphCoords() {\n\tfloat vertexId = morph_vertex_id;\n\tvec2 textureSize = morph_tex_params.xy;\n\tvec2 invTextureSize = morph_tex_params.zw;\n\tfloat morphGridV = floor(vertexId * invTextureSize.x);\n\tfloat morphGridU = vertexId - (morphGridV * textureSize.x);\n\treturn (vec2(morphGridU, morphGridV) * invTextureSize) + (0.5 * invTextureSize);\n}\n#endif\n#ifdef MORPHING_TEXTURE_BASED_POSITION\nuniform highp sampler2D morphPositionTex;\n#endif\nmat4 getModelMatrix() {\n\t#ifdef DYNAMICBATCH\n\treturn getBoneMatrix(vertex_boneIndices);\n\t#elif defined(SKIN)\n\treturn matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);\n\t#elif defined(INSTANCING)\n\treturn mat4(instance_line1, instance_line2, instance_line3, instance_line4);\n\t#else\n\treturn matrix_model;\n\t#endif\n}\nvec4 getPosition() {\n\tdModelMatrix = getModelMatrix();\n\tvec3 localPos = vertex_position;\n\t#ifdef NINESLICED\n\tlocalPos.xz *= outerScale;\n\tvec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\n\tvec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\n\tlocalPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\n\tvTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0;\n\tlocalPos.xz *= -0.5;\n\tlocalPos = localPos.xzy;\n\t#endif\n\t#ifdef MORPHING\n\t#ifdef MORPHING_POS03\n\tlocalPos.xyz += morph_weights_a[0] * morph_pos0;\n\tlocalPos.xyz += morph_weights_a[1] * morph_pos1;\n\tlocalPos.xyz += morph_weights_a[2] * morph_pos2;\n\tlocalPos.xyz += morph_weights_a[3] * morph_pos3;\n\t#endif\n\t#ifdef MORPHING_POS47\n\tlocalPos.xyz += morph_weights_b[0] * morph_pos4;\n\tlocalPos.xyz += morph_weights_b[1] * morph_pos5;\n\tlocalPos.xyz += morph_weights_b[2] * morph_pos6;\n\tlocalPos.xyz += morph_weights_b[3] * morph_pos7;\n\t#endif\n\t#endif\n\t#ifdef MORPHING_TEXTURE_BASED_POSITION\n\tvec2 morphUV = getTextureMorphCoords();\n\tvec3 morphPos = texture2D(morphPositionTex, morphUV).xyz;\n\tlocalPos += morphPos;\n\t#endif\n\tvec4 posW = dModelMatrix * vec4(localPos, 1.0);\n\t#ifdef SCREENSPACE\n\tposW.zw = vec2(0.0, 1.0);\n\t#endif\n\tdPositionW = posW.xyz;\n\tvec4 screenPos;\n\t#ifdef UV1LAYOUT\n\tscreenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);\n\t#else\n\t#ifdef SCREENSPACE\n\tscreenPos = posW;\n\t#else\n\tscreenPos = matrix_viewProjection * posW;\n\t#endif\n\t#ifdef PIXELSNAP\n\tscreenPos.xy = (screenPos.xy * 0.5) + 0.5;\n\tscreenPos.xy *= uScreenSize.xy;\n\tscreenPos.xy = floor(screenPos.xy);\n\tscreenPos.xy *= uScreenSize.zw;\n\tscreenPos.xy = (screenPos.xy * 2.0) - 1.0;\n\t#endif\n\t#endif\n\treturn screenPos;\n}\nvec3 getWorldPosition() {\n\treturn dPositionW;\n}\n",
        transformDeclVS: "attribute vec3 vertex_position;\nuniform mat4 matrix_model;\nuniform mat4 matrix_viewProjection;\nvec3 dPositionW;\nmat4 dModelMatrix;\n",
        uv0VS: "#ifdef NINESLICED\nvec2 getUv0() {\n\tvec2 uv = vertex_position.xz;\n\tvec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\n\tvec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\n\tuv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\n\tuv = uv * -0.5 + 0.5;\n\tuv = uv * atlasRect.zw + atlasRect.xy;\n\tvMask = vertex_texCoord0.xy;\n\treturn uv;\n}\n#else\nvec2 getUv0() {\n\treturn vertex_texCoord0;\n}\n#endif\n",
        uv1VS: "vec2 getUv1() {\n\treturn vertex_texCoord1;\n}\n",
        viewDirPS: "void getViewDir() {\n\tdViewDirW = normalize(view_position - vPositionW);\n}\n",
        viewNormalVS: "#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nvec3 getViewNormal() {\n\treturn mat3(matrix_view) * vNormalW;\n}\n"
    };
    function si(t, e) {
        return e || (e = ni),
        1 === t || 2 === t ? e.gamma2_2PS ? e.gamma2_2PS : ni.gamma2_2PS : 3 === t ? "#define HDR\n" + (e.gamma2_2PS ? e.gamma2_2PS : ni.gamma2_2PS) : e.gamma1_0PS ? e.gamma1_0PS : ni.gamma1_0PS
    }
    function ai(t, e) {
        return e || (e = ni),
        1 === t ? e.tonemappingFilmicPS ? e.tonemappingFilmicPS : ni.tonemappingFilmicPS : 0 === t ? e.tonemappingLinearPS ? e.tonemappingLinearPS : ni.tonemappingLinearPS : 2 === t ? e.tonemappingHejlPS ? e.tonemappingHejlPS : ni.tonemappingHejlPS : 3 === t ? e.tonemappingAcesPS ? e.tonemappingAcesPS : ni.tonemappingAcesPS : 4 === t ? e.tonemappingAces2PS ? e.tonemappingAces2PS : ni.tonemappingAces2PS : e.tonemapingNonePS ? e.tonemapingNonePS : ni.tonemappingNonePS
    }
    function ri(t, e) {
        return e || (e = ni),
        "linear" === t ? e.fogLinearPS ? e.fogLinearPS : ni.fogLinearPS : "exp" === t ? e.fogExpPS ? e.fogExpPS : ni.fogExpPS : "exp2" === t ? e.fogExp2PS ? e.fogExp2PS : ni.fogExp2PS : e.fogNonePS ? e.fogNonePS : ni.fogNonePS
    }
    function oi(t, e) {
        return e || (e = ni),
        t.supportsBoneTextures ? e.skinTexVS : "#define BONE_LIMIT " + t.getBoneLimit() + "\n" + e.skinConstVS
    }
    function hi(t) {
        var e = "precision " + t.precision + " float;\n";
        return t.webgl2 && (e += "#ifdef GL2\nprecision " + t.precision + " sampler2DShadow;\n#endif\n"),
        e
    }
    function li(t) {
        return t.webgl2 ? "#version 300 es\n" : ""
    }
    function ci() {
        return "void main(void) {gl_FragColor = vec4(0.0);}"
    }
    function ui() {
        return "void main(void)\n{\n"
    }
    function di() {
        return "}\n"
    }
    var fi = {
        vertex_position: se,
        vertex_normal: ae,
        vertex_tangent: re,
        vertex_texCoord0: ue,
        vertex_texCoord1: de,
        vertex_texCoord2: fe,
        vertex_texCoord3: pe,
        vertex_texCoord4: me,
        vertex_texCoord5: _e,
        vertex_texCoord6: ge,
        vertex_texCoord7: ve,
        vertex_color: le,
        vertex_boneIndices: he,
        vertex_boneWeights: oe
    };
    function pi(t) {
        for (var e = {}, i = 0, n = t.indexOf("attribute"); n >= 0 && !(n > 0 && "/" === t[n - 1]); ) {
            var s = t.indexOf(";", n)
              , a = t.lastIndexOf(" ", s)
              , r = t.substr(a + 1, s - (a + 1))
              , o = fi[r];
            void 0 !== o ? e[r] = o : (e[r] = "ATTR" + i,
            i++),
            n = t.indexOf("attribute", n + 1)
        }
        return e
    }
    function mi(t, e, i, n, s, a) {
        var r = t.programLib._cache
          , o = r[n];
        if (void 0 !== o)
            return o;
        i = hi(t) + "\n" + (i || "void main(void) {gl_FragColor = vec4(0.0);}");
        var h = pi(e);
        return t.webgl2 && (e = li(t) + ni.gles3VS + e,
        i = li(t) + ni.gles3PS + i),
        r[n] = new ii(t,{
            attributes: h,
            vshader: e,
            fshader: (a || "") + i,
            useTransformFeedback: s
        }),
        r[n]
    }
    ni.collectAttribs = pi,
    ni.createShader = function(t, e, i, n) {
        var s = ni[e]
          , a = hi(t) + "\n" + ni[i]
          , r = pi(s);
        return t.webgl2 && (s = li(t) + ni.gles3VS + s,
        a = li(t) + ni.gles3PS + a),
        new ii(t,{
            attributes: r,
            vshader: s,
            fshader: a,
            useTransformFeedback: n
        })
    }
    ,
    ni.createShaderFromCode = mi;
    var _i = {
        generateKey: function(t) {
            var e = "basic";
            return t.fog && (e += "_fog"),
            t.alphaTest && (e += "_atst"),
            t.vertexColors && (e += "_vcol"),
            t.diffuseMap && (e += "_diff"),
            t.skin && (e += "_skin"),
            t.screenSpace && (e += "_ss"),
            t.useInstancing && (e += "_inst"),
            t.useMorphPosition && (e += "_morphp"),
            t.useMorphNormal && (e += "_morphn"),
            t.useMorphTextureBased && (e += "_morpht"),
            e += "_" + t.pass
        },
        createShaderDefinition: function(t, e) {
            var i = {
                vertex_position: se
            };
            e.skin && (i.vertex_boneWeights = oe,
            i.vertex_boneIndices = he),
            e.vertexColors && (i.vertex_color = le),
            e.diffuseMap && (i.vertex_texCoord0 = ue);
            var n = "";
            n += ni.transformDeclVS,
            e.skin ? (n += oi(t),
            n += ni.transformSkinnedVS) : n += ni.transformVS,
            e.vertexColors && (n += "attribute vec4 vertex_color;\n",
            n += "varying vec4 vColor;\n"),
            e.diffuseMap && (n += "attribute vec2 vertex_texCoord0;\n",
            n += "varying vec2 vUv0;\n"),
            2 === e.pass && (n += "varying float vDepth;\n",
            n += "#ifndef VIEWMATRIX\n",
            n += "#define VIEWMATRIX\n",
            n += "uniform mat4 matrix_view;\n",
            n += "#endif\n",
            n += "#ifndef CAMERAPLANES\n",
            n += "#define CAMERAPLANES\n",
            n += "uniform vec4 camera_params;\n\n",
            n += "#endif\n"),
            n += "void main(void)\n{\n",
            n += "   gl_Position = getPosition();\n",
            2 === e.pass && (n += "    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z * camera_params.x;\n"),
            e.vertexColors && (n += "    vColor = vertex_color;\n"),
            e.diffuseMap && (n += "    vUv0 = vertex_texCoord0;\n");
            var s = n += "}\n";
            return n = hi(t),
            e.vertexColors ? n += "varying vec4 vColor;\n" : n += "uniform vec4 uColor;\n",
            e.diffuseMap && (n += "varying vec2 vUv0;\n",
            n += "uniform sampler2D texture_diffuseMap;\n"),
            e.fog && (n += ri(e.fog)),
            e.alphatest && (n += ni.alphaTestPS),
            2 === e.pass && (n += "varying float vDepth;\n",
            n += ni.packDepthPS),
            n += "void main(void)\n{\n",
            e.vertexColors ? n += "    gl_FragColor = vColor;\n" : n += "    gl_FragColor = uColor;\n",
            e.diffuseMap && (n += "    gl_FragColor *= texture2D(texture_diffuseMap, vUv0);\n"),
            e.alphatest && (n += "   alphaTest(gl_FragColor.a);\n"),
            e.pass !== Bt && (2 === e.pass ? n += "    gl_FragColor = packFloat(vDepth);\n" : e.fog && (n += "   glFragColor.rgb = addFog(gl_FragColor.rgb);\n")),
            {
                attributes: i,
                vshader: s,
                fshader: n += "}\n"
            }
        }
    }
      , gi = {
        generateKey: function(t) {
            var e = "particle";
            for (var i in t)
                t.hasOwnProperty(i) && (e += t[i]);
            return e
        },
        _animTex: function(t) {
            var e = "";
            return e += t.animTexLoop ? ni.particleAnimFrameLoopVS : ni.particleAnimFrameClampVS,
            e += ni.particleAnimTexVS
        },
        createShaderDefinition: function(t, e) {
            var i = ""
              , n = hi(t) + "\n";
            n += "#define PARTICLE\n",
            t.webgl2 && (i += "#define GL2\n",
            n += "#define GL2\n"),
            i += "#define VERTEXSHADER\n",
            e.mesh && (i += "#define USE_MESH\n"),
            e.localSpace && (i += "#define LOCAL_SPACE\n"),
            e.screenSpace && (i += "#define SCREEN_SPACE\n"),
            e.animTex && (i += "\nuniform vec2 animTexTilesParams;\n"),
            e.animTex && (i += "\nuniform vec4 animTexParams;\n"),
            e.animTex && (i += "\nuniform vec2 animTexIndexParams;\n"),
            2 === e.normal && (i += "\nvarying mat3 ParticleMat;\n"),
            1 === e.normal && (i += "\nvarying vec3 Normal;\n"),
            e.soft && (i += "\nvarying float vDepth;\n");
            var s = e.customFace ? ni.particle_customFaceVS : ni.particle_billboardVS;
            return e.useCpu ? (e.soft > 0 && (i += ni.screenDepthPS),
            i += ni.particle_cpuVS,
            e.localSpace && (i += ni.particle_localShiftVS),
            e.animTex && (i += this._animTex(e)),
            e.alignToMotion && (i += ni.particle_pointAlongVS),
            i += e.mesh ? ni.particle_meshVS : s,
            1 === e.normal && (i += ni.particle_normalVS),
            2 === e.normal && (i += ni.particle_TBNVS),
            e.stretch > 0 && (i += ni.particle_stretchVS),
            i += ni.particle_cpu_endVS,
            e.soft > 0 && (i += ni.particle_softVS)) : (i += ni.particle_initVS,
            i += e.pack8 ? ni.particleInputRgba8PS : ni.particleInputFloatPS,
            e.soft > 0 && (i += ni.screenDepthPS),
            i += ni.particleVS,
            e.localSpace && (i += ni.particle_localShiftVS),
            e.animTex && (i += this._animTex(e)),
            e.wrap && (i += ni.particle_wrapVS),
            e.alignToMotion && (i += ni.particle_pointAlongVS),
            i += e.mesh ? ni.particle_meshVS : s,
            1 === e.normal && (i += ni.particle_normalVS),
            2 === e.normal && (i += ni.particle_TBNVS),
            e.stretch > 0 && (i += ni.particle_stretchVS),
            i += ni.particle_endVS,
            e.soft > 0 && (i += ni.particle_softVS)),
            i += "}\n",
            e.normal > 0 && (1 === e.normal ? n += "\nvarying vec3 Normal;\n" : 2 === e.normal && (n += "\nvarying mat3 ParticleMat;\n"),
            n += "\nuniform vec3 lightCube[6];\n"),
            e.soft && (n += "\nvarying float vDepth;\n"),
            0 === e.normal && "none" === e.fog && (e.srgb = !1),
            n += si(e.gamma),
            n += ai(e.toneMap),
            "linear" === e.fog ? n += ni.fogLinearPS : "exp" === e.fog ? n += ni.fogExpPS : "exp2" === e.fog ? n += ni.fogExp2PS : n += ni.fogNonePS,
            2 === e.normal && (n += "\nuniform sampler2D normalMap;\n"),
            e.soft > 0 && (n += ni.screenDepthPS),
            n += ni.particlePS,
            e.soft > 0 && (n += ni.particle_softPS),
            1 === e.normal && (n += "\nvec3 normal = Normal;\n"),
            2 === e.normal && (n += ni.particle_normalMapPS),
            e.normal > 0 && (n += e.halflambert ? ni.particle_halflambertPS : ni.particle_lambertPS),
            e.normal > 0 && (n += ni.particle_lightingPS),
            2 === e.blend ? n += ni.particle_blendNormalPS : 1 === e.blend ? n += ni.particle_blendAddPS : 5 === e.blend && (n += ni.particle_blendMultiplyPS),
            n += ni.particle_endPS,
            {
                attributes: pi(i),
                vshader: i,
                fshader: n
            }
        }
    }
      , vi = {
        generateKey: function(t) {
            return "skybox" + t.rgbm + " " + t.hdr + " " + t.fixSeams + t.toneMapping + t.gamma + t.useIntensity + t.useRightHandedCubeMap + t.mip
        },
        createShaderDefinition: function(t, e) {
            var i = hi(t);
            return i += e.useRightHandedCubeMap ? "#define RIGHT_HANDED_CUBEMAP\n" : "",
            i += e.mip ? ni.fixCubemapSeamsStretchPS : ni.fixCubemapSeamsNonePS,
            i += e.useIntensity ? ni.envMultiplyPS : ni.envConstPS,
            i += si(e.gamma),
            i += ai(e.toneMapping),
            i += ni.rgbmPS,
            i += ni.skyboxHDRPS.replace(/\$textureCubeSAMPLE/g, e.rgbm ? "textureCubeRGBM" : e.hdr ? "textureCube" : "textureCubeSRGB").replace(/\$FIXCONST/g, 1 - 1 / [128, 64, 32, 16, 8, 4, 2][e.mip] + ""),
            {
                attributes: {
                    aPosition: se
                },
                vshader: ni.skyboxVS,
                fshader: i
            }
        }
    }
      , yi = 1 / 255
      , xi = new Float32Array(1)
      , bi = new Int32Array(xi.buffer)
      , Si = function() {
        function t() {}
        return t.float2Half = function(t) {
            xi[0] = t;
            var e = bi[0]
              , i = e >> 16 & 32768
              , n = e >> 12 & 2047
              , s = e >> 23 & 255;
            return s < 103 ? i : s > 142 ? (i |= 31744,
            i |= (255 === s ? 0 : 1) && 8388607 & e) : s < 113 ? i |= ((n |= 2048) >> 114 - s) + (n >> 113 - s & 1) : (i |= s - 112 << 10 | n >> 1,
            i += 1 & n)
        }
        ,
        t.float2Bytes = function(t, e, i, n) {
            var s = 255 * t % 1;
            if (e[i + 0] = Math.round(255 * (t % 1 - yi * s)),
            n > 1) {
                var a = 65025 * t % 1;
                if (e[i + 1] = Math.round(255 * (s - yi * a)),
                n > 2) {
                    var r = 16581375 * t % 1;
                    e[i + 2] = Math.round(255 * (a - yi * r)),
                    n > 3 && (e[i + 3] = Math.round(255 * r))
                }
            }
        }
        ,
        t.float2BytesRange = function(e, i, n, s, a, r) {
            e = it.clamp((e - s) / (a - s), 0, 1),
            t.float2Bytes(e, i, n, r)
        }
        ,
        t.float2MantisaExponent = function(e, i, n, s) {
            var a = Math.floor(Math.log2(Math.abs(e))) + 1;
            e /= Math.pow(2, a),
            t.float2BytesRange(e, i, n, -1, 1, s - 1),
            i[n + s - 1] = Math.round(a + 127)
        }
        ,
        t
    }()
      , Ti = null
      , wi = null
      , Mi = function() {
        function t(t, e) {
            this.device = t,
            this.name = null,
            this._width = 4,
            this._height = 4,
            this._depth = 1,
            this._format = 7,
            this.type = Fe,
            this.projection = ze,
            this._cubemap = !1,
            this._volume = !1,
            this.fixCubemapSeams = !1,
            this._flipY = !1,
            this._premultiplyAlpha = !1,
            this._isRenderTarget = !1,
            this._mipmaps = !0,
            this._minFilter = 5,
            this._magFilter = 1,
            this._anisotropy = 1,
            this._addressU = 0,
            this._addressV = 0,
            this._addressW = 0,
            this._compareOnRead = !1,
            this._compareFunc = 1,
            void 0 !== e && (void 0 !== e.name && (this.name = e.name),
            this._width = void 0 !== e.width ? e.width : this._width,
            this._height = void 0 !== e.height ? e.height : this._height,
            this._format = void 0 !== e.format ? e.format : this._format,
            e.hasOwnProperty("type") ? this.type = e.type : e.hasOwnProperty("rgbm") ? this.type = e.rgbm ? Be : Fe : e.hasOwnProperty("swizzleGGGR") && (this.type = e.swizzleGGGR ? Ue : Fe),
            void 0 !== e.mipmaps ? this._mipmaps = e.mipmaps : this._mipmaps = void 0 !== e.autoMipmap ? e.autoMipmap : this._mipmaps,
            this._levels = e.levels,
            this._cubemap = void 0 !== e.cubemap ? e.cubemap : this._cubemap,
            this.fixCubemapSeams = void 0 !== e.fixCubemapSeams ? e.fixCubemapSeams : this.fixCubemapSeams,
            this._cubemap ? this.projection = Ve : e.projection && e.projection !== Ve && (this.projection = e.projection),
            this._minFilter = void 0 !== e.minFilter ? e.minFilter : this._minFilter,
            this._magFilter = void 0 !== e.magFilter ? e.magFilter : this._magFilter,
            this._anisotropy = void 0 !== e.anisotropy ? e.anisotropy : this._anisotropy,
            this._addressU = void 0 !== e.addressU ? e.addressU : this._addressU,
            this._addressV = void 0 !== e.addressV ? e.addressV : this._addressV,
            this._compareOnRead = void 0 !== e.compareOnRead ? e.compareOnRead : this._compareOnRead,
            this._compareFunc = void 0 !== e._compareFunc ? e._compareFunc : this._compareFunc,
            this._flipY = void 0 !== e.flipY ? e.flipY : this._flipY,
            this._premultiplyAlpha = void 0 !== e.premultiplyAlpha ? e.premultiplyAlpha : this._premultiplyAlpha,
            t.webgl2 && (this._depth = void 0 !== e.depth ? e.depth : this._depth,
            this._volume = void 0 !== e.volume ? e.volume : this._volume,
            this._addressW = void 0 !== e.addressW ? e.addressW : this._addressW)),
            this._compressed = 8 === this._format || 9 === this._format || this._format === Yt || this._format >= ee,
            this._invalid = !1,
            this._lockedLevel = -1,
            this._levels || (this._levels = this._cubemap ? [[null, null, null, null, null, null]] : [null]),
            this.dirtyAll(),
            this._gpuSize = 0
        }
        t.calcGpuSize = function(t, e, i, n, s, a) {
            Ti || ((Ti = [])[0] = 1,
            Ti[1] = 1,
            Ti[2] = 2,
            Ti[3] = 2,
            Ti[4] = 2,
            Ti[5] = 2,
            Ti[6] = 4,
            Ti[7] = 4,
            Ti[11] = 8,
            Ti[12] = 8,
            Ti[13] = 16,
            Ti[14] = 16,
            Ti[15] = 4,
            Ti[16] = 4,
            Ti[17] = 4,
            Ti[18] = 4,
            Ti[19] = 4,
            Ti[20] = 4),
            wi || ((wi = [])[21] = 8,
            wi[22] = 8,
            wi[24] = 8,
            wi[25] = 8,
            wi[26] = 8,
            wi[27] = 8,
            wi[8] = 8,
            wi[29] = 8,
            wi[23] = 16,
            wi[9] = 16,
            wi[10] = 16,
            wi[28] = 16,
            wi[30] = 16);
            for (var r = Ti.hasOwnProperty(n) ? Ti[n] : 0, o = wi.hasOwnProperty(n) ? wi[n] : 0, h = 0; ; ) {
                if (r > 0)
                    h += t * e * i * r;
                else {
                    var l = Math.floor((t + 3) / 4)
                      , c = Math.floor((e + 3) / 4)
                      , u = Math.floor((i + 3) / 4);
                    n !== ie && n !== ne || (l = Math.max(Math.floor(l / 2), 1)),
                    h += l * c * u * o
                }
                if (!s || 1 === t && 1 === e && 1 === i)
                    break;
                t = Math.max(Math.floor(t / 2), 1),
                e = Math.max(Math.floor(e / 2), 1),
                i = Math.max(Math.floor(i / 2), 1)
            }
            return h * (a ? 6 : 1)
        }
        ;
        var e = t.prototype;
        return e.destroy = function() {
            this.device && this.device.destroyTexture(this),
            this.device = null,
            this._levels = this._cubemap ? [[null, null, null, null, null, null]] : [null]
        }
        ,
        e.dirtyAll = function() {
            this._levelsUpdated = this._cubemap ? [[!0, !0, !0, !0, !0, !0]] : [!0],
            this._needsUpload = !0,
            this._needsMipmapsUpload = this._mipmaps,
            this._mipmapsUploaded = !1,
            this._parameterFlags = 255
        }
        ,
        e.lock = function(t) {
            if (void 0 === t && (t = {}),
            void 0 === t.level && (t.level = 0),
            void 0 === t.face && (t.face = 0),
            void 0 === t.mode && (t.mode = 2),
            this._lockedLevel = t.level,
            null === this._levels[t.level])
                switch (this._format) {
                case 0:
                case 1:
                    this._levels[t.level] = new Uint8Array(this._width * this._height * this._depth);
                    break;
                case 2:
                    this._levels[t.level] = new Uint8Array(this._width * this._height * this._depth * 2);
                    break;
                case 3:
                case 4:
                case 5:
                    this._levels[t.level] = new Uint16Array(this._width * this._height * this._depth);
                    break;
                case 6:
                    this._levels[t.level] = new Uint8Array(this._width * this._height * this._depth * 3);
                    break;
                case 7:
                    this._levels[t.level] = new Uint8Array(this._width * this._height * this._depth * 4);
                    break;
                case 8:
                    this._levels[t.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 8 * this._depth);
                    break;
                case 9:
                case Yt:
                    this._levels[t.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 16 * this._depth);
                    break;
                case Kt:
                    this._levels[t.level] = new Uint16Array(this._width * this._height * this._depth * 3);
                    break;
                case $t:
                    this._levels[t.level] = new Float32Array(this._width * this._height * this._depth * 3);
                    break;
                case Zt:
                    this._levels[t.level] = new Uint16Array(this._width * this._height * this._depth * 4);
                    break;
                case Qt:
                    this._levels[t.level] = new Float32Array(this._width * this._height * this._depth * 4)
                }
            return this._levels[t.level]
        }
        ,
        e.setSource = function(t, e) {
            void 0 === e && (e = 0);
            var i, n, s = !1;
            if (this._cubemap) {
                if (t[0]) {
                    i = t[0].width || 0,
                    n = t[0].height || 0;
                    for (var a = 0; a < 6; a++) {
                        var r = t[a];
                        if (!r || r.width !== i || r.height !== n || !this.device._isBrowserInterface(r)) {
                            s = !0;
                            break
                        }
                    }
                } else
                    s = !0;
                if (!s)
                    for (var o = 0; o < 6; o++)
                        this._levels[e][o] !== t[o] && (this._levelsUpdated[e][o] = !0)
            } else
                this.device._isBrowserInterface(t) || (s = !0),
                s || (t !== this._levels[e] && (this._levelsUpdated[e] = !0),
                i = t.width,
                n = t.height);
            if (s)
                if (this._width = 4,
                this._height = 4,
                this._cubemap)
                    for (var h = 0; h < 6; h++)
                        this._levels[e][h] = null,
                        this._levelsUpdated[e][h] = !0;
                else
                    this._levels[e] = null,
                    this._levelsUpdated[e] = !0;
            else
                0 === e && (this._width = i,
                this._height = n),
                this._levels[e] = t;
            this._invalid === s && s || (this._invalid = s,
            this.upload())
        }
        ,
        e.getSource = function(t) {
            return void 0 === t && (t = 0),
            this._levels[t]
        }
        ,
        e.unlock = function() {
            this.upload(),
            this._lockedLevel = -1
        }
        ,
        e.upload = function() {
            this._needsUpload = !0,
            this._needsMipmapsUpload = this._mipmaps
        }
        ,
        e.getDds = function() {
            for (var t = 128, e = 0; this._levels[e]; ) {
                if (this.cubemap)
                    for (var i = 0; i < 6; i++) {
                        if (!this._levels[e][i])
                            return;
                        var n = this._levels[e][i].length;
                        if (!n)
                            return;
                        t += n
                    }
                else {
                    var s = this._levels[e].length;
                    if (!s)
                        return;
                    t += s
                }
                t += this._levels[e].length,
                e++
            }
            var a = new ArrayBuffer(t)
              , r = new Uint32Array(a,0,32)
              , o = 528391;
            this._levels.length > 1 && (o |= 131072);
            var h = 4096;
            this._levels.length > 1 && (h |= 4194304),
            (this._levels.length > 1 || this.cubemap) && (h |= 8);
            var l = this.cubemap ? 65024 : 0;
            r[0] = 542327876,
            r[1] = 124,
            r[2] = o,
            r[3] = this.height,
            r[4] = this.width,
            r[5] = this.width * this.height * 4,
            r[6] = 0,
            r[7] = this._levels.length;
            for (var c = 0; c < 11; c++)
                r[8 + c] = 0;
            r[19] = 32,
            r[20] = 65,
            r[21] = 0,
            r[22] = 32,
            r[23] = 16711680,
            r[24] = 65280,
            r[25] = 255,
            r[26] = 4278190080,
            r[27] = h,
            r[28] = l,
            r[29] = 0,
            r[30] = 0,
            r[31] = 0;
            var u = 128;
            if (this.cubemap)
                for (var d = 0; d < 6; d++)
                    for (var f = 0; f < this._levels.length; f++) {
                        for (var p = this._levels[f][d], m = new Uint8Array(a,u,p.length), _ = 0; _ < p.length; _++)
                            m[_] = p[_];
                        u += p.length
                    }
            else
                for (var g = 0; g < this._levels.length; g++) {
                    for (var v = this._levels[g], y = new Uint8Array(a,u,v.length), x = 0; x < v.length; x++)
                        y[x] = v[x];
                    u += v.length
                }
            return a
        }
        ,
        G(t, [{
            key: "minFilter",
            get: function() {
                return this._minFilter
            },
            set: function(t) {
                this._minFilter !== t && (this._minFilter = t,
                this._parameterFlags |= 1)
            }
        }, {
            key: "magFilter",
            get: function() {
                return this._magFilter
            },
            set: function(t) {
                this._magFilter !== t && (this._magFilter = t,
                this._parameterFlags |= 2)
            }
        }, {
            key: "addressU",
            get: function() {
                return this._addressU
            },
            set: function(t) {
                this._addressU !== t && (this._addressU = t,
                this._parameterFlags |= 4)
            }
        }, {
            key: "addressV",
            get: function() {
                return this._addressV
            },
            set: function(t) {
                this._addressV !== t && (this._addressV = t,
                this._parameterFlags |= 8)
            }
        }, {
            key: "addressW",
            get: function() {
                return this._addressW
            },
            set: function(t) {
                this.device.webgl2 && this._volume && t !== this._addressW && (this._addressW = t,
                this._parameterFlags |= 16)
            }
        }, {
            key: "compareOnRead",
            get: function() {
                return this._compareOnRead
            },
            set: function(t) {
                this._compareOnRead !== t && (this._compareOnRead = t,
                this._parameterFlags |= 32)
            }
        }, {
            key: "compareFunc",
            get: function() {
                return this._compareFunc
            },
            set: function(t) {
                this._compareFunc !== t && (this._compareFunc = t,
                this._parameterFlags |= 64)
            }
        }, {
            key: "anisotropy",
            get: function() {
                return this._anisotropy
            },
            set: function(t) {
                this._anisotropy !== t && (this._anisotropy = t,
                this._parameterFlags |= 128)
            }
        }, {
            key: "autoMipmap",
            get: function() {
                return this._mipmaps
            },
            set: function(t) {
                this._mipmaps = t
            }
        }, {
            key: "mipmaps",
            get: function() {
                return this._mipmaps
            },
            set: function(t) {
                this._mipmaps !== t && (this._mipmaps = t,
                this._minFilterDirty = !0,
                t && (this._needsMipmapsUpload = !0))
            }
        }, {
            key: "width",
            get: function() {
                return this._width
            }
        }, {
            key: "height",
            get: function() {
                return this._height
            }
        }, {
            key: "depth",
            get: function() {
                return this._depth
            }
        }, {
            key: "format",
            get: function() {
                return this._format
            }
        }, {
            key: "cubemap",
            get: function() {
                return this._cubemap
            }
        }, {
            key: "gpuSize",
            get: function() {
                var e = this.pot && this._mipmaps && !(this._compressed && 1 === this._levels.length);
                return t.calcGpuSize(this._width, this._height, this._depth, this._format, e, this._cubemap)
            }
        }, {
            key: "volume",
            get: function() {
                return this._volume
            }
        }, {
            key: "flipY",
            get: function() {
                return this._flipY
            },
            set: function(t) {
                this._flipY !== t && (this._flipY = t,
                this._needsUpload = !0)
            }
        }, {
            key: "premultiplyAlpha",
            get: function() {
                return this._premultiplyAlpha
            },
            set: function(t) {
                this._premultiplyAlpha !== t && (this._premultiplyAlpha = t,
                this._needsUpload = !0)
            }
        }, {
            key: "pot",
            get: function() {
                return it.powerOfTwo(this._width) && it.powerOfTwo(this._height)
            }
        }]),
        t
    }()
      , Ai = new lt
      , Ci = new lt
      , Ei = new lt
      , Pi = new vt
      , Ri = function() {
        function t() {
            this._aspectRatio = 16 / 9,
            this._aspectRatioMode = 0,
            this._calculateProjection = null,
            this._calculateTransform = null,
            this._clearColor = new at(.75,.75,.75,1),
            this._clearColorBuffer = !0,
            this._clearDepth = 1,
            this._clearDepthBuffer = !0,
            this._clearStencil = 0,
            this._clearStencilBuffer = !0,
            this._cullingMask = 4294967295,
            this._cullFaces = !0,
            this._farClip = 1e3,
            this._flipFaces = !1,
            this._fov = 45,
            this._frustumCulling = !0,
            this._horizontalFov = !1,
            this._layers = [0, 1, 2, 4, 3],
            this._nearClip = .1,
            this._node = null,
            this._orthoHeight = 10,
            this._projection = 0,
            this._rect = new dt(0,0,1,1),
            this._renderTarget = null,
            this._scissorRect = new dt(0,0,1,1),
            this._scissorRectClear = !1,
            this._vrDisplay = null,
            this._projMat = new vt,
            this._projMatDirty = !0,
            this._projMatSkybox = new vt,
            this._viewMat = new vt,
            this._viewMatDirty = !0,
            this._viewProjMat = new vt,
            this._viewProjMatDirty = !0,
            this.frustum = new Ut
        }
        var e = t.prototype;
        return e.clone = function() {
            return (new t).copy(this)
        }
        ,
        e.copy = function(t) {
            return this.aspectRatio = t.aspectRatio,
            this.aspectRatioMode = t.aspectRatioMode,
            this.calculateProjection = t.calculateProjection,
            this.calculateTransform = t.calculateTransform,
            this.clearColor = t.clearColor,
            this.clearColorBuffer = t.clearColorBuffer,
            this.clearDepth = t.clearDepth,
            this.clearDepthBuffer = t.clearDepthBuffer,
            this.clearStencil = t.clearStencil,
            this.clearStencilBuffer = t.clearStencilBuffer,
            this.cullFaces = t.cullFaces,
            this.cullingMask = t.cullingMask,
            this.farClip = t.farClip,
            this.flipFaces = t.flipFaces,
            this.fov = t.fov,
            this.frustumCulling = t.frustumCulling,
            this.horizontalFov = t.horizontalFov,
            this.layers = t.layers,
            this.nearClip = t.nearClip,
            this.orthoHeight = t.orthoHeight,
            this.projection = t.projection,
            this.rect = t.rect,
            this.renderTarget = t.renderTarget,
            this.scissorRect = t.scissorRect,
            this.vrDisplay = t.vrDisplay,
            this
        }
        ,
        e._updateViewProjMat = function() {
            (this._projMatDirty || this._viewMatDirty || this._viewProjMatDirty) && (this._viewProjMat.mul2(this.projectionMatrix, this.viewMatrix),
            this._viewProjMatDirty = !1)
        }
        ,
        e.worldToScreen = function(t, e, i, n) {
            void 0 === n && (n = new lt),
            this._updateViewProjMat(),
            this._viewProjMat.transformPoint(t, n);
            var s = this._viewProjMat.data
              , a = t.x * s[3] + t.y * s[7] + t.z * s[11] + 1 * s[15];
            return n.x = .5 * (n.x / a + 1) * e,
            n.y = .5 * (1 - n.y / a) * i,
            n
        }
        ,
        e.screenToWorld = function(t, e, i, n, s, a) {
            void 0 === a && (a = new lt);
            var r = this._farClip - this._nearClip;
            if (Ai.set(t / n, (s - e) / s, i / r),
            Ai.mulScalar(2),
            Ai.sub(lt.ONE),
            0 === this._projection) {
                vt._getPerspectiveHalfSize(Ci, this._fov, this._aspectRatio, this._nearClip, this._horizontalFov),
                Ci.x *= Ai.x,
                Ci.y *= Ai.y;
                var o = this._node.getWorldTransform();
                Ci.z = -this._nearClip,
                o.transformPoint(Ci, Ei);
                var h = this._node.getPosition();
                a.sub2(Ei, h),
                a.normalize(),
                a.mulScalar(i),
                a.add(h)
            } else
                this._updateViewProjMat(),
                Pi.copy(this._viewProjMat).invert(),
                Pi.transformPoint(Ai, a);
            return a
        }
        ,
        e._evaluateProjectionMatrix = function() {
            if (this._projMatDirty) {
                if (0 === this._projection)
                    this._projMat.setPerspective(this._fov, this._aspectRatio, this._nearClip, this._farClip, this._horizontalFov),
                    this._projMatSkybox.copy(this._projMat);
                else {
                    var t = this._orthoHeight
                      , e = t * this._aspectRatio;
                    this._projMat.setOrtho(-e, e, -t, t, this._nearClip, this._farClip),
                    this._projMatSkybox.setPerspective(this._fov, this._aspectRatio, this._nearClip, this._farClip)
                }
                this._projMatDirty = !1
            }
        }
        ,
        e.getProjectionMatrixSkybox = function() {
            return this._evaluateProjectionMatrix(),
            this._projMatSkybox
        }
        ,
        G(t, [{
            key: "aspectRatio",
            get: function() {
                return this._aspectRatio
            },
            set: function(t) {
                this._aspectRatio !== t && (this._aspectRatio = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "aspectRatioMode",
            get: function() {
                return this._aspectRatioMode
            },
            set: function(t) {
                this._aspectRatioMode !== t && (this._aspectRatioMode = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "calculateProjection",
            get: function() {
                return this._calculateProjection
            },
            set: function(t) {
                this._calculateProjection = t,
                this._projMatDirty = !0
            }
        }, {
            key: "calculateTransform",
            get: function() {
                return this._calculateTransform
            },
            set: function(t) {
                this._calculateTransform = t
            }
        }, {
            key: "clearColor",
            get: function() {
                return this._clearColor
            },
            set: function(t) {
                this._clearColor.copy(t)
            }
        }, {
            key: "clearColorBuffer",
            get: function() {
                return this._clearColorBuffer
            },
            set: function(t) {
                this._clearColorBuffer = t
            }
        }, {
            key: "clearDepth",
            get: function() {
                return this._clearDepth
            },
            set: function(t) {
                this._clearDepth = t
            }
        }, {
            key: "clearDepthBuffer",
            get: function() {
                return this._clearDepthBuffer
            },
            set: function(t) {
                this._clearDepthBuffer = t
            }
        }, {
            key: "clearStencil",
            get: function() {
                return this._clearStencil
            },
            set: function(t) {
                this._clearStencil = t
            }
        }, {
            key: "clearStencilBuffer",
            get: function() {
                return this._clearStencilBuffer
            },
            set: function(t) {
                this._clearStencilBuffer = t
            }
        }, {
            key: "cullingMask",
            get: function() {
                return this._cullingMask
            },
            set: function(t) {
                this._cullingMask = t
            }
        }, {
            key: "cullFaces",
            get: function() {
                return this._cullFaces
            },
            set: function(t) {
                this._cullFaces = t
            }
        }, {
            key: "farClip",
            get: function() {
                return this._farClip
            },
            set: function(t) {
                this._farClip !== t && (this._farClip = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "flipFaces",
            get: function() {
                return this._flipFaces
            },
            set: function(t) {
                this._flipFaces = t
            }
        }, {
            key: "fov",
            get: function() {
                return this._fov
            },
            set: function(t) {
                this._fov !== t && (this._fov = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "frustumCulling",
            get: function() {
                return this._frustumCulling
            },
            set: function(t) {
                this._frustumCulling = t
            }
        }, {
            key: "horizontalFov",
            get: function() {
                return this._horizontalFov
            },
            set: function(t) {
                this._horizontalFov !== t && (this._horizontalFov = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                this._layers = t.slice(0)
            }
        }, {
            key: "nearClip",
            get: function() {
                return this._nearClip
            },
            set: function(t) {
                this._nearClip !== t && (this._nearClip = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "node",
            get: function() {
                return this._node
            },
            set: function(t) {
                this._node = t
            }
        }, {
            key: "orthoHeight",
            get: function() {
                return this._orthoHeight
            },
            set: function(t) {
                this._orthoHeight !== t && (this._orthoHeight = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "projection",
            get: function() {
                return this._projection
            },
            set: function(t) {
                this._projection !== t && (this._projection = t,
                this._projMatDirty = !0)
            }
        }, {
            key: "projectionMatrix",
            get: function() {
                return this._evaluateProjectionMatrix(),
                this._projMat
            }
        }, {
            key: "rect",
            get: function() {
                return this._rect
            },
            set: function(t) {
                this._rect.copy(t)
            }
        }, {
            key: "renderTarget",
            get: function() {
                return this._renderTarget
            },
            set: function(t) {
                this._renderTarget = t
            }
        }, {
            key: "scissorRect",
            get: function() {
                return this._scissorRect
            },
            set: function(t) {
                this._scissorRect.copy(t)
            }
        }, {
            key: "viewMatrix",
            get: function() {
                if (this._viewMatDirty) {
                    var t = this._node.getWorldTransform();
                    this._viewMat.copy(t).invert(),
                    this._viewMatDirty = !1
                }
                return this._viewMat
            }
        }, {
            key: "vrDisplay",
            get: function() {
                return this._vrDisplay
            },
            set: function(t) {
                this._vrDisplay = t,
                t && (t._camera = this)
            }
        }]),
        t
    }()
      , Ii = new vt
      , Li = new lt
      , Di = new yt
      , ki = new yt
      , Oi = new lt
      , Fi = new lt
      , Bi = new vt
      , Ni = new yt
      , Ui = new lt
      , zi = new vt
      , Vi = new yt
      , Gi = new yt
      , Wi = new vt
      , Hi = new lt
      , Xi = new lt
      , ji = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).name = "string" == typeof e ? e : "Untitled",
            i.tags = new $(j(i)),
            i._labels = {},
            i.localPosition = new lt(0,0,0),
            i.localRotation = new yt(0,0,0,1),
            i.localScale = new lt(1,1,1),
            i.localEulerAngles = new lt(0,0,0),
            i.position = new lt(0,0,0),
            i.rotation = new yt(0,0,0,1),
            i.eulerAngles = new lt(0,0,0),
            i._scale = null,
            i.localTransform = new vt,
            i._dirtyLocal = !1,
            i._aabbVer = 0,
            i._frozen = !1,
            i.worldTransform = new vt,
            i._dirtyWorld = !1,
            i.normalMatrix = new ct,
            i._dirtyNormal = !0,
            i._right = null,
            i._up = null,
            i._forward = null,
            i._parent = null,
            i._children = [],
            i._graphDepth = 0,
            i._enabled = !0,
            i._enabledInHierarchy = !1,
            i.scaleCompensation = !1,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._notifyHierarchyStateChanged = function(t, e) {
            t._onHierarchyStateChanged(e);
            for (var i = t._children, n = 0, s = i.length; n < s; n++)
                i[n]._enabled && this._notifyHierarchyStateChanged(i[n], e)
        }
        ,
        i._onHierarchyStateChanged = function(t) {
            this._enabledInHierarchy = t,
            t && !this._frozen && this._unfreezeParentToRoot()
        }
        ,
        i._cloneInternal = function(t) {
            t.name = this.name;
            var e = this.tags._list;
            t.tags.clear();
            for (var i = 0; i < e.length; i++)
                t.tags.add(e[i]);
            t._labels = Object.assign({}, this._labels),
            t.localPosition.copy(this.localPosition),
            t.localRotation.copy(this.localRotation),
            t.localScale.copy(this.localScale),
            t.localEulerAngles.copy(this.localEulerAngles),
            t.position.copy(this.position),
            t.rotation.copy(this.rotation),
            t.eulerAngles.copy(this.eulerAngles),
            t.localTransform.copy(this.localTransform),
            t._dirtyLocal = this._dirtyLocal,
            t.worldTransform.copy(this.worldTransform),
            t._dirtyWorld = this._dirtyWorld,
            t._dirtyNormal = this._dirtyNormal,
            t._aabbVer = this._aabbVer + 1,
            t._enabled = this._enabled,
            t.scaleCompensation = this.scaleCompensation,
            t._enabledInHierarchy = !1
        }
        ,
        i.clone = function() {
            var t = new e;
            return this._cloneInternal(t),
            t
        }
        ,
        i.copy = function(t) {
            return t._cloneInternal(this),
            this
        }
        ,
        i.find = function(t, e) {
            var i = []
              , n = this._children.length;
            if (t instanceof Function) {
                var s = t;
                s(this) && i.push(this);
                for (var a = 0; a < n; a++) {
                    var r = this._children[a].find(s);
                    r.length && (i = i.concat(r))
                }
            } else {
                this[t] && (this[t]instanceof Function ? this[t]() : this[t]) === e && i.push(this);
                for (var o = 0; o < n; ++o) {
                    var h = this._children[o].find(t, e);
                    h.length && (i = i.concat(h))
                }
            }
            return i
        }
        ,
        i.findOne = function(t, e) {
            var i = this._children.length
              , n = null;
            if (t instanceof Function) {
                var s = t;
                if (n = s(this))
                    return this;
                for (var a = 0; a < i; a++)
                    if (n = this._children[a].findOne(s))
                        return n
            } else {
                if (this[t] && (this[t]instanceof Function ? this[t]() : this[t]) === e)
                    return this;
                for (var r = 0; r < i; r++)
                    if (null !== (n = this._children[r].findOne(t, e)))
                        return n
            }
            return null
        }
        ,
        i.findByTag = function() {
            var t = this.tags._processArguments(arguments);
            return this._findByTag(t)
        }
        ,
        i._findByTag = function(t) {
            for (var e = [], i = this._children.length, n = 0; n < i; n++) {
                this._children[n].tags._has(t) && e.push(this._children[n]);
                var s = this._children[n]._findByTag(t);
                s.length && (e = e.concat(s))
            }
            return e
        }
        ,
        i.findByName = function(t) {
            if (this.name === t)
                return this;
            for (var e = 0; e < this._children.length; e++) {
                var i = this._children[e].findByName(t);
                if (null !== i)
                    return i
            }
            return null
        }
        ,
        i.findByPath = function(t) {
            for (var e = Array.isArray(t) ? t : t.split("/"), i = this, n = function(t, n) {
                if (!(i = i.children.find((function(i) {
                    return i.name === e[t]
                }
                ))))
                    return {
                        v: null
                    }
            }, s = 0, a = e.length; s < a; ++s) {
                var r = n(s);
                if ("object" == typeof r)
                    return r.v
            }
            return i
        }
        ,
        i.forEach = function(t, e) {
            t.call(e, this);
            for (var i = this._children, n = 0; n < i.length; n++)
                i[n].forEach(t, e)
        }
        ,
        i.isDescendantOf = function(t) {
            for (var e = this._parent; e; ) {
                if (e === t)
                    return !0;
                e = e._parent
            }
            return !1
        }
        ,
        i.isAncestorOf = function(t) {
            return t.isDescendantOf(this)
        }
        ,
        i.getEulerAngles = function() {
            return this.getWorldTransform().getEulerAngles(this.eulerAngles),
            this.eulerAngles
        }
        ,
        i.getLocalEulerAngles = function() {
            return this.localRotation.getEulerAngles(this.localEulerAngles),
            this.localEulerAngles
        }
        ,
        i.getLocalPosition = function() {
            return this.localPosition
        }
        ,
        i.getLocalRotation = function() {
            return this.localRotation
        }
        ,
        i.getLocalScale = function() {
            return this.localScale
        }
        ,
        i.getLocalTransform = function() {
            return this._dirtyLocal && (this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale),
            this._dirtyLocal = !1),
            this.localTransform
        }
        ,
        i.getPosition = function() {
            return this.getWorldTransform().getTranslation(this.position),
            this.position
        }
        ,
        i.getRotation = function() {
            return this.rotation.setFromMat4(this.getWorldTransform()),
            this.rotation
        }
        ,
        i.getScale = function() {
            return this._scale || (this._scale = new lt),
            this.getWorldTransform().getScale(this._scale)
        }
        ,
        i.getWorldTransform = function() {
            return this._dirtyLocal || this._dirtyWorld ? (this._parent && this._parent.getWorldTransform(),
            this._sync(),
            this.worldTransform) : this.worldTransform
        }
        ,
        i.reparent = function(t, e) {
            var i = this._parent;
            i && i.removeChild(this),
            t && (e >= 0 ? t.insertChild(this, e) : t.addChild(this))
        }
        ,
        i.setLocalEulerAngles = function(t, e, i) {
            t instanceof lt ? this.localRotation.setFromEulerAngles(t.x, t.y, t.z) : this.localRotation.setFromEulerAngles(t, e, i),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.setLocalPosition = function(t, e, i) {
            t instanceof lt ? this.localPosition.copy(t) : this.localPosition.set(t, e, i),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.setLocalRotation = function(t, e, i, n) {
            t instanceof yt ? this.localRotation.copy(t) : this.localRotation.set(t, e, i, n),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.setLocalScale = function(t, e, i) {
            t instanceof lt ? this.localScale.copy(t) : this.localScale.set(t, e, i),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i._dirtifyLocal = function() {
            this._dirtyLocal || (this._dirtyLocal = !0,
            this._dirtyWorld || this._dirtifyWorld())
        }
        ,
        i._unfreezeParentToRoot = function() {
            for (var t = this._parent; t; )
                t._frozen = !1,
                t = t._parent
        }
        ,
        i._dirtifyWorld = function() {
            this._dirtyWorld || this._unfreezeParentToRoot(),
            this._dirtifyWorldInternal()
        }
        ,
        i._dirtifyWorldInternal = function() {
            if (!this._dirtyWorld) {
                this._frozen = !1,
                this._dirtyWorld = !0;
                for (var t = 0; t < this._children.length; t++)
                    this._children[t]._dirtyWorld || this._children[t]._dirtifyWorldInternal()
            }
            this._dirtyNormal = !0,
            this._aabbVer++
        }
        ,
        i.setPosition = function(t, e, i) {
            t instanceof lt ? Ui.copy(t) : Ui.set(t, e, i),
            null === this._parent ? this.localPosition.copy(Ui) : (zi.copy(this._parent.getWorldTransform()).invert(),
            zi.transformPoint(Ui, this.localPosition)),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.setRotation = function(t, e, i, n) {
            if (t instanceof yt ? Vi.copy(t) : Vi.set(t, e, i, n),
            null === this._parent)
                this.localRotation.copy(Vi);
            else {
                var s = this._parent.getRotation();
                Gi.copy(s).invert(),
                this.localRotation.copy(Gi).mul(Vi)
            }
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.setEulerAngles = function(t, e, i) {
            if (t instanceof lt ? this.localRotation.setFromEulerAngles(t.x, t.y, t.z) : this.localRotation.setFromEulerAngles(t, e, i),
            null !== this._parent) {
                var n = this._parent.getRotation();
                Gi.copy(n).invert(),
                this.localRotation.mul2(Gi, this.localRotation)
            }
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.addChild = function(t) {
            if (null !== t._parent)
                throw new Error("GraphNode is already parented");
            this._children.push(t),
            this._onInsertChild(t)
        }
        ,
        i.addChildAndSaveTransform = function(t) {
            var e = t.getPosition()
              , i = t.getRotation()
              , n = t._parent;
            n && n.removeChild(t),
            t.setPosition(Bi.copy(this.worldTransform).invert().transformPoint(e)),
            t.setRotation(Ni.copy(this.getRotation()).invert().mul(i)),
            this._children.push(t),
            this._onInsertChild(t)
        }
        ,
        i.insertChild = function(t, e) {
            if (null !== t._parent)
                throw new Error("GraphNode is already parented");
            this._children.splice(e, 0, t),
            this._onInsertChild(t)
        }
        ,
        i._fireOnHierarchy = function(t, e, i) {
            this.fire(t, i);
            for (var n = 0; n < this._children.length; n++)
                this._children[n]._fireOnHierarchy(e, e, i)
        }
        ,
        i._onInsertChild = function(t) {
            t._parent = this;
            var e = t._enabled && this.enabled;
            t._enabledInHierarchy !== e && (t._enabledInHierarchy = e,
            t._notifyHierarchyStateChanged(t, e)),
            t._updateGraphDepth(),
            t._dirtifyWorld(),
            this._frozen && t._unfreezeParentToRoot(),
            t._fireOnHierarchy("insert", "inserthierarchy", this),
            this.fire && this.fire("childinsert", t)
        }
        ,
        i._updateGraphDepth = function() {
            this._parent ? this._graphDepth = this._parent._graphDepth + 1 : this._graphDepth = 0;
            for (var t = 0, e = this._children.length; t < e; t++)
                this._children[t]._updateGraphDepth()
        }
        ,
        i.removeChild = function(t) {
            for (var e = this._children.length, i = 0; i < e; ++i)
                if (this._children[i] === t)
                    return this._children.splice(i, 1),
                    t._parent = null,
                    t._fireOnHierarchy("remove", "removehierarchy", this),
                    void (this.fire && this.fire("childremove", t))
        }
        ,
        i._sync = function() {
            if (this._dirtyLocal && (this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale),
            this._dirtyLocal = !1),
            this._dirtyWorld) {
                if (null === this._parent)
                    this.worldTransform.copy(this.localTransform);
                else if (this.scaleCompensation) {
                    var t, e = this._parent, i = this.localScale, n = e;
                    if (n) {
                        for (; n && n.scaleCompensation; )
                            n = n._parent;
                        n && (n = n._parent) && (t = n.worldTransform.getScale(),
                        Oi.mul2(t, this.localScale),
                        i = Oi)
                    }
                    ki.setFromMat4(e.worldTransform),
                    Di.mul2(ki, this.localRotation);
                    var s = e.worldTransform;
                    e.scaleCompensation && (Fi.mul2(t, e.getLocalScale()),
                    Ii.setTRS(e.worldTransform.getTranslation(Li), ki, Fi),
                    s = Ii),
                    s.transformPoint(this.localPosition, Li),
                    this.worldTransform.setTRS(Li, Di, i)
                } else
                    this.worldTransform.mulAffine2(this._parent.worldTransform, this.localTransform);
                this._dirtyWorld = !1
            }
        }
        ,
        i.syncHierarchy = function() {
            if (this._enabled && !this._frozen) {
                this._frozen = !0,
                (this._dirtyLocal || this._dirtyWorld) && this._sync();
                for (var t = this._children, e = 0, i = t.length; e < i; e++)
                    t[e].syncHierarchy()
            }
        }
        ,
        i.lookAt = function(t, e, i, n, s, a) {
            if (void 0 === n && (n = 0),
            void 0 === s && (s = 1),
            void 0 === a && (a = 0),
            t instanceof lt)
                Hi.copy(t),
                e instanceof lt ? Xi.copy(e) : Xi.copy(lt.UP);
            else {
                if (void 0 === i)
                    return;
                Hi.set(t, e, i),
                Xi.set(n, s, a)
            }
            Wi.setLookAt(this.getPosition(), Hi, Xi),
            Vi.setFromMat4(Wi),
            this.setRotation(Vi)
        }
        ,
        i.translate = function(t, e, i) {
            t instanceof lt ? Ui.copy(t) : Ui.set(t, e, i),
            Ui.add(this.getPosition()),
            this.setPosition(Ui)
        }
        ,
        i.translateLocal = function(t, e, i) {
            t instanceof lt ? Ui.copy(t) : Ui.set(t, e, i),
            this.localRotation.transformVector(Ui, Ui),
            this.localPosition.add(Ui),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.rotate = function(t, e, i) {
            if (t instanceof lt ? Vi.setFromEulerAngles(t.x, t.y, t.z) : Vi.setFromEulerAngles(t, e, i),
            null === this._parent)
                this.localRotation.mul2(Vi, this.localRotation);
            else {
                var n = this.getRotation()
                  , s = this._parent.getRotation();
                Gi.copy(s).invert(),
                Vi.mul2(Gi, Vi),
                this.localRotation.mul2(Vi, n)
            }
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i.rotateLocal = function(t, e, i) {
            t instanceof lt ? Vi.setFromEulerAngles(t.x, t.y, t.z) : Vi.setFromEulerAngles(t, e, i),
            this.localRotation.mul(Vi),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        G(e, [{
            key: "right",
            get: function() {
                return this._right || (this._right = new lt),
                this.getWorldTransform().getX(this._right).normalize()
            }
        }, {
            key: "up",
            get: function() {
                return this._up || (this._up = new lt),
                this.getWorldTransform().getY(this._up).normalize()
            }
        }, {
            key: "forward",
            get: function() {
                return this._forward || (this._forward = new lt),
                this.getWorldTransform().getZ(this._forward).normalize().mulScalar(-1)
            }
        }, {
            key: "enabled",
            get: function() {
                return this._enabled && this._enabledInHierarchy
            },
            set: function(t) {
                this._enabled !== t && (this._enabled = t,
                this._parent && !this._parent.enabled || this._notifyHierarchyStateChanged(this, t))
            }
        }, {
            key: "parent",
            get: function() {
                return this._parent
            }
        }, {
            key: "path",
            get: function() {
                var t = this._parent;
                if (t) {
                    for (var e = this.name; t && t._parent; )
                        e = t.name + "/" + e,
                        t = t._parent;
                    return e
                }
                return ""
            }
        }, {
            key: "root",
            get: function() {
                var t = this._parent;
                if (!t)
                    return this;
                for (; t._parent; )
                    t = t._parent;
                return t
            }
        }, {
            key: "children",
            get: function() {
                return this._children
            }
        }, {
            key: "graphDepth",
            get: function() {
                return this._graphDepth
            }
        }]),
        e
    }(u)
      , qi = new vt
      , Yi = new vt
      , Ki = new vt
      , Zi = function() {
        function t() {}
        return t.create = function(e, i, n) {
            var s = new Ri;
            switch (s.node = new ji(e),
            s.aspectRatio = 1,
            s.aspectRatioMode = 1,
            s._scissorRectClear = !0,
            i) {
            case 1:
                s.node.setRotation(t.pointLightRotations[n]),
                s.fov = 90,
                s.projection = 0;
                break;
            case 2:
                s.projection = 0;
                break;
            case 0:
                s.projection = 1
            }
            return s
        }
        ,
        t.evalSpotCookieMatrix = function(e) {
            var i = t._spotCookieCamera;
            i || (i = t.create("SpotCookieCamera", 2),
            t._spotCookieCamera = i),
            i.fov = 2 * e._outerConeAngle;
            var n = i._node;
            n.setPosition(e._node.getPosition()),
            n.setRotation(e._node.getRotation()),
            n.rotateLocal(-90, 0, 0),
            qi.setTRS(n.getPosition(), n.getRotation(), lt.ONE).invert(),
            Yi.mul2(i.projectionMatrix, qi);
            var s = e.cookieMatrix
              , a = e.atlasViewport;
            return Ki.setViewport(a.x, a.y, a.z, a.w),
            s.mul2(Ki, Yi),
            s
        }
        ,
        t
    }();
    Zi.pointLightRotations = [(new yt).setFromEulerAngles(0, 90, 180), (new yt).setFromEulerAngles(0, -90, 180), (new yt).setFromEulerAngles(90, 0, 0), (new yt).setFromEulerAngles(-90, 0, 0), (new yt).setFromEulerAngles(0, 180, 180), (new yt).setFromEulerAngles(0, 0, 180)],
    Zi._spotCookieCamera = null;
    var $i = new lt
      , Qi = new Float32Array(6)
      , Ji = new lt(-.5,0,0)
      , tn = new lt(0,0,.5)
      , en = {
        FLAGS: 0,
        COLOR_A: 1,
        COLOR_B: 2,
        SPOT_ANGLES: 3,
        SHADOW_BIAS: 4,
        COOKIE_A: 5,
        COOKIE_B: 6,
        COUNT_ALWAYS: 7,
        POSITION_X: 7,
        POSITION_Y: 8,
        POSITION_Z: 9,
        RANGE: 10,
        SPOT_DIRECTION_X: 11,
        SPOT_DIRECTION_Y: 12,
        SPOT_DIRECTION_Z: 13,
        PROJ_MAT_00: 14,
        ATLAS_VIEWPORT_A: 14,
        PROJ_MAT_01: 15,
        ATLAS_VIEWPORT_B: 15,
        PROJ_MAT_02: 16,
        PROJ_MAT_03: 17,
        PROJ_MAT_10: 18,
        PROJ_MAT_11: 19,
        PROJ_MAT_12: 20,
        PROJ_MAT_13: 21,
        PROJ_MAT_20: 22,
        PROJ_MAT_21: 23,
        PROJ_MAT_22: 24,
        PROJ_MAT_23: 25,
        PROJ_MAT_30: 26,
        PROJ_MAT_31: 27,
        PROJ_MAT_32: 28,
        PROJ_MAT_33: 29,
        AREA_DATA_WIDTH_X: 30,
        AREA_DATA_WIDTH_Y: 31,
        AREA_DATA_WIDTH_Z: 32,
        AREA_DATA_HEIGHT_X: 33,
        AREA_DATA_HEIGHT_Y: 34,
        AREA_DATA_HEIGHT_Z: 35,
        COUNT: 36
    }
      , nn = {
        POSITION_RANGE: 0,
        SPOT_DIRECTION: 1,
        PROJ_MAT_0: 2,
        ATLAS_VIEWPORT: 2,
        PROJ_MAT_1: 3,
        PROJ_MAT_2: 4,
        PROJ_MAT_3: 5,
        AREA_DATA_WIDTH: 6,
        AREA_DATA_HEIGHT: 7,
        COUNT: 8
    }
      , sn = function() {
        function t(e, i, n, s) {
            this.device = e,
            this.cookiesEnabled = i,
            this.shadowsEnabled = n,
            this.areaLightsEnabled = s,
            this.maxLights = 255;
            var a = en.COUNT_ALWAYS
              , r = 0;
            t.lightTextureFormat === t.FORMAT_FLOAT ? r = nn.COUNT : a = en.COUNT,
            this.lights8 = new Uint8ClampedArray(4 * a * this.maxLights),
            this.lightsTexture8 = t.createTexture(this.device, a, this.maxLights, 7),
            this._lightsTexture8Id = this.device.scope.resolve("lightsTexture8"),
            r ? (this.lightsFloat = new Float32Array(4 * r * this.maxLights),
            this.lightsTextureFloat = t.createTexture(this.device, r, this.maxLights, Qt),
            this._lightsTextureFloatId = this.device.scope.resolve("lightsTextureFloat")) : (this.lightsFloat = null,
            this.lightsTextureFloat = null,
            this._lightsTextureFloatId = void 0),
            this._lightsTextureInvSizeId = this.device.scope.resolve("lightsTextureInvSize"),
            this._lightsTextureInvSizeData = new Float32Array(4),
            this._lightsTextureInvSizeData[0] = r ? 1 / this.lightsTextureFloat.width : 0,
            this._lightsTextureInvSizeData[1] = r ? 1 / this.lightsTextureFloat.height : 0,
            this._lightsTextureInvSizeData[2] = 1 / this.lightsTexture8.width,
            this._lightsTextureInvSizeData[3] = 1 / this.lightsTexture8.height,
            this.invMaxColorValue = 0,
            this.invMaxAttenuation = 0,
            this.boundsMin = new lt,
            this.boundsDelta = new lt
        }
        t.initShaderDefines = function() {
            var e = t.lightTextureFormat === t.FORMAT_FLOAT ? "FLOAT" : "8BIT";
            t.shaderDefines = "\n            \n#define CLUSTER_TEXTURE_" + e + "\n            " + t.buildShaderDefines(en, "CLUSTER_TEXTURE_8_") + "\n            " + t.buildShaderDefines(nn, "CLUSTER_TEXTURE_F_") + "\n        "
        }
        ,
        t.buildShaderDefines = function(t, e) {
            var i = "";
            return Object.keys(t).forEach((function(n) {
                i += "\n#define " + e + n + " " + t[n] + ".5"
            }
            )),
            i
        }
        ,
        t.init = function(e) {
            t.lightTextureFormat = e.extTextureFloat ? t.FORMAT_FLOAT : t.FORMAT_8BIT,
            t.initShaderDefines()
        }
        ,
        t.createTexture = function(t, e, i, n) {
            return new Mi(t,{
                width: e,
                height: i,
                mipmaps: !1,
                format: n,
                addressU: 1,
                addressV: 1,
                type: Fe,
                magFilter: 0,
                minFilter: 0,
                anisotropy: 1
            })
        }
        ;
        var e = t.prototype;
        return e.destroy = function() {
            this.lightsTexture8 && (this.lightsTexture8.destroy(),
            this.lightsTexture8 = null),
            this.lightsTextureFloat && (this.lightsTextureFloat.destroy(),
            this.lightsTextureFloat = null)
        }
        ,
        e.setCompressionRanges = function(t, e) {
            this.invMaxColorValue = 1 / e,
            this.invMaxAttenuation = 1 / t
        }
        ,
        e.setBounds = function(t, e) {
            this.boundsMin.copy(t),
            this.boundsDelta.copy(e)
        }
        ,
        e.uploadTextures = function() {
            this.lightsTextureFloat && (this.lightsTextureFloat.lock().set(this.lightsFloat),
            this.lightsTextureFloat.unlock()),
            this.lightsTexture8.lock().set(this.lights8),
            this.lightsTexture8.unlock()
        }
        ,
        e.updateUniforms = function() {
            this._lightsTexture8Id.setValue(this.lightsTexture8),
            t.lightTextureFormat === t.FORMAT_FLOAT && this._lightsTextureFloatId.setValue(this.lightsTextureFloat),
            this._lightsTextureInvSizeId.setValue(this._lightsTextureInvSizeData)
        }
        ,
        e.getSpotDirection = function(t, e) {
            e._node.getWorldTransform().getY(t).mulScalar(-1),
            t.normalize()
        }
        ,
        e.getLightAreaSizes = function(t) {
            var e = t._node.getWorldTransform();
            return e.transformVector(Ji, $i),
            Qi[0] = $i.x,
            Qi[1] = $i.y,
            Qi[2] = $i.z,
            e.transformVector(tn, $i),
            Qi[3] = $i.x,
            Qi[4] = $i.y,
            Qi[5] = $i.z,
            Qi
        }
        ,
        e.addLightDataFlags = function(t, e, i, n) {
            t[e + 0] = n ? 255 : 0,
            t[e + 1] = 64 * i._shape,
            t[e + 2] = 255 * i._falloffMode,
            t[e + 3] = i.castShadows ? 255 : 0
        }
        ,
        e.addLightDataColor = function(t, e, i, n, s) {
            var a = this.invMaxColorValue
              , r = n ? i._linearFinalColor : i._finalColor;
            Si.float2Bytes(r[0] * a, t, e + 0, 2),
            Si.float2Bytes(r[1] * a, t, e + 2, 2),
            Si.float2Bytes(r[2] * a, t, e + 4, 2),
            t[e + 6] = s ? 255 : 0
        }
        ,
        e.addLightDataSpotAngles = function(t, e, i) {
            Si.float2Bytes(.499999 * i._innerConeAngleCos + .5, t, e + 0, 2),
            Si.float2Bytes(.499999 * i._outerConeAngleCos + .5, t, e + 2, 2)
        }
        ,
        e.addLightDataShadowBias = function(t, e, i) {
            var n = i.getRenderData(null, 0)
              , s = i._getUniformBiasValues(n);
            Si.float2BytesRange(s.bias, t, e, -1, 20, 2),
            Si.float2Bytes(s.normalBias, t, e + 2, 2)
        }
        ,
        e.addLightDataPositionRange = function(t, e, i, n) {
            var s = $i.sub2(n, this.boundsMin).div(this.boundsDelta);
            Si.float2Bytes(s.x, t, e + 0, 4),
            Si.float2Bytes(s.y, t, e + 4, 4),
            Si.float2Bytes(s.z, t, e + 8, 4),
            Si.float2Bytes(i.attenuationEnd * this.invMaxAttenuation, t, e + 12, 4)
        }
        ,
        e.addLightDataSpotDirection = function(t, e, i) {
            this.getSpotDirection($i, i),
            Si.float2Bytes(.499999 * $i.x + .5, t, e + 0, 4),
            Si.float2Bytes(.499999 * $i.y + .5, t, e + 4, 4),
            Si.float2Bytes(.499999 * $i.z + .5, t, e + 8, 4)
        }
        ,
        e.addLightDataLightProjMatrix = function(t, e, i) {
            for (var n = i.data, s = 0; s < 12; s++)
                Si.float2BytesRange(n[s], t, e + 4 * s, -2, 2, 4);
            for (var a = 12; a < 16; a++)
                Si.float2MantisaExponent(n[a], t, e + 4 * a, 4)
        }
        ,
        e.addLightDataCookies = function(t, e, i) {
            var n = "rgb" === i._cookieChannel;
            if (t[e + 0] = Math.floor(255 * i.cookieIntensity),
            t[e + 1] = n ? 255 : 0,
            !n) {
                var s = i._cookieChannel;
                t[e + 4] = "rrr" === s ? 255 : 0,
                t[e + 5] = "ggg" === s ? 255 : 0,
                t[e + 6] = "bbb" === s ? 255 : 0,
                t[e + 7] = "aaa" === s ? 255 : 0
            }
        }
        ,
        e.addLightAtlasViewport = function(t, e, i) {
            Si.float2Bytes(i.x, t, e + 0, 2),
            Si.float2Bytes(i.y, t, e + 2, 2),
            Si.float2Bytes(i.z / 3, t, e + 4, 2)
        }
        ,
        e.addLightAreaSizes = function(t, e, i) {
            for (var n = this.getLightAreaSizes(i), s = 0; s < 6; s++)
                Si.float2MantisaExponent(n[s], t, e + 4 * s, 4)
        }
        ,
        e.addLightData = function(e, i, n) {
            var s = 2 === e._type
              , a = this.cookiesEnabled && !!e._cookie
              , r = this.areaLightsEnabled && 0 !== e.shape
              , o = this.shadowsEnabled && e.castShadows
              , h = e._node.getPosition()
              , l = null
              , c = null;
            s ? o ? l = e.getRenderData(null, 0).shadowMatrix : a && (l = Zi.evalSpotCookieMatrix(e)) : (o || a) && (c = e.atlasViewport);
            var u = this.lights8
              , d = i * this.lightsTexture8.width * 4;
            if (this.addLightDataFlags(u, d + 4 * en.FLAGS, e, s),
            this.addLightDataColor(u, d + 4 * en.COLOR_A, e, n, a),
            s && this.addLightDataSpotAngles(u, d + 4 * en.SPOT_ANGLES, e),
            e.castShadows && this.addLightDataShadowBias(u, d + 4 * en.SHADOW_BIAS, e),
            a && this.addLightDataCookies(u, d + 4 * en.COOKIE_A, e),
            t.lightTextureFormat === t.FORMAT_FLOAT) {
                var f = this.lightsFloat
                  , p = i * this.lightsTextureFloat.width * 4;
                if (f[p + 4 * nn.POSITION_RANGE + 0] = h.x,
                f[p + 4 * nn.POSITION_RANGE + 1] = h.y,
                f[p + 4 * nn.POSITION_RANGE + 2] = h.z,
                f[p + 4 * nn.POSITION_RANGE + 3] = e.attenuationEnd,
                s && (this.getSpotDirection($i, e),
                f[p + 4 * nn.SPOT_DIRECTION + 0] = $i.x,
                f[p + 4 * nn.SPOT_DIRECTION + 1] = $i.y,
                f[p + 4 * nn.SPOT_DIRECTION + 2] = $i.z),
                l)
                    for (var m = l.data, _ = 0; _ < 16; _++)
                        f[p + 4 * nn.PROJ_MAT_0 + _] = m[_];
                if (c && (f[p + 4 * nn.ATLAS_VIEWPORT + 0] = c.x,
                f[p + 4 * nn.ATLAS_VIEWPORT + 1] = c.y,
                f[p + 4 * nn.ATLAS_VIEWPORT + 2] = c.z / 3),
                r) {
                    var g = this.getLightAreaSizes(e);
                    f[p + 4 * nn.AREA_DATA_WIDTH + 0] = g[0],
                    f[p + 4 * nn.AREA_DATA_WIDTH + 1] = g[1],
                    f[p + 4 * nn.AREA_DATA_WIDTH + 2] = g[2],
                    f[p + 4 * nn.AREA_DATA_HEIGHT + 0] = g[3],
                    f[p + 4 * nn.AREA_DATA_HEIGHT + 1] = g[4],
                    f[p + 4 * nn.AREA_DATA_HEIGHT + 2] = g[5]
                }
            } else
                this.addLightDataPositionRange(u, d + 4 * en.POSITION_X, e, h),
                s && this.addLightDataSpotDirection(u, d + 4 * en.SPOT_DIRECTION_X, e),
                l && this.addLightDataLightProjMatrix(u, d + 4 * en.PROJ_MAT_00, l),
                c && this.addLightAtlasViewport(u, d + 4 * en.ATLAS_VIEWPORT_A, c),
                r && this.addLightAreaSizes(u, d + 4 * en.AREA_DATA_WIDTH_X, e)
        }
        ,
        t
    }();
    sn.FORMAT_FLOAT = 0,
    sn.FORMAT_8BIT = 1,
    sn.lightTextureFormat = sn.FORMAT_8BIT,
    sn.shaderDefines = "";
    var an, rn = function(t, e) {
        if (t.size !== e.size)
            return !1;
        for (var i, n = Y(t); !(i = n()).done; ) {
            var s = i.value;
            if (!e.has(s))
                return !1
        }
        return !0
    }, on = function() {
        function t() {
            this.layerIndex = 0,
            this.cameraIndex = 0,
            this.camera = null,
            this.renderTarget = null,
            this.lightClusters = null,
            this.clearColor = !1,
            this.clearDepth = !1,
            this.clearStencil = !1,
            this.triggerPostprocess = !1,
            this.firstCameraUse = !1,
            this.directionalLightsSet = new Set,
            this.directionalLights = [],
            this.directionalLightsIndices = []
        }
        var e = t.prototype;
        return e.reset = function() {
            this.lightClusters = null,
            this.directionalLightsSet.clear(),
            this.directionalLights.length = 0,
            this.directionalLightsIndices.length = 0
        }
        ,
        e.collectDirectionalLights = function(t, e, i) {
            this.directionalLightsSet.clear(),
            this.directionalLights.length = 0,
            this.directionalLightsIndices.length = 0;
            for (var n = 0; n < e.length; n++) {
                var s = e[n];
                if (s.castShadows)
                    for (var a = 0; a < t.length; a++)
                        if (t[a]._splitLights[0].indexOf(s) >= 0 && !this.directionalLightsSet.has(s)) {
                            this.directionalLightsSet.add(s),
                            this.directionalLights.push(s);
                            var r = i.indexOf(s);
                            this.directionalLightsIndices.push(r)
                        }
            }
        }
        ,
        t
    }(), hn = new lt, ln = new lt, cn = new lt, un = new Mt, dn = 1e-6, fn = function() {
        this.light = null,
        this.min = new lt,
        this.max = new lt
    }, pn = function() {
        function t(t, e, i, n, s, a) {
            void 0 === n && (n = !1),
            void 0 === s && (s = !1),
            void 0 === a && (a = !1),
            this.device = t,
            this.name = "Untitled",
            this.reportCount = 0,
            this._bounds = new Mt,
            this.boundsMin = new lt,
            this.boundsMax = new lt,
            this.boundsDelta = new lt,
            this._cells = new lt,
            this._cellsLimit = new lt,
            this.cells = e,
            this._maxCellLightCount = 0,
            this._pixelsPerCellCount = 0,
            this.maxCellLightCount = i,
            this._maxAttenuation = 0,
            this._maxColorValue = 0,
            this._usedLights = [],
            this._usedLights.push(new fn),
            this.lightsBuffer = new sn(t,n,s,a),
            this.registerUniforms(t)
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.lightsBuffer.destroy(),
            this.releaseClusterTexture()
        }
        ,
        e.releaseClusterTexture = function() {
            this.clusterTexture && (this.clusterTexture.destroy(),
            this.clusterTexture = null)
        }
        ,
        e.registerUniforms = function(t) {
            this._clusterWorldTextureId = t.scope.resolve("clusterWorldTexture"),
            this._clusterPixelsPerCellId = t.scope.resolve("clusterPixelsPerCell"),
            this._clusterTextureSizeId = t.scope.resolve("clusterTextureSize"),
            this._clusterTextureSizeData = new Float32Array(3),
            this._clusterBoundsMinId = t.scope.resolve("clusterBoundsMin"),
            this._clusterBoundsMinData = new Float32Array(3),
            this._clusterBoundsDeltaId = t.scope.resolve("clusterBoundsDelta"),
            this._clusterBoundsDeltaData = new Float32Array(3),
            this._clusterCellsCountByBoundsSizeId = t.scope.resolve("clusterCellsCountByBoundsSize"),
            this._clusterCellsCountByBoundsSizeData = new Float32Array(3),
            this._clusterCellsDotId = t.scope.resolve("clusterCellsDot"),
            this._clusterCellsDotData = new Float32Array(3),
            this._clusterCellsMaxId = t.scope.resolve("clusterCellsMax"),
            this._clusterCellsMaxData = new Float32Array(3),
            this._clusterCompressionLimit0Id = t.scope.resolve("clusterCompressionLimit0"),
            this._clusterCompressionLimit0Data = new Float32Array(2)
        }
        ,
        e.updateCells = function() {
            if (this._cellsDirty) {
                this._cellsDirty = !1;
                var t = this._cells.x
                  , e = this._cells.y
                  , i = this._cells.z
                  , n = t * e * i
                  , s = this._pixelsPerCellCount * n
                  , a = Math.ceil(Math.sqrt(s));
                a = it.roundUp(a, this._pixelsPerCellCount);
                var r = Math.ceil(s / a);
                this._clusterCellsMaxData[0] = t,
                this._clusterCellsMaxData[1] = e,
                this._clusterCellsMaxData[2] = i,
                this._clusterCellsDotData[0] = this._pixelsPerCellCount,
                this._clusterCellsDotData[1] = t * i * this._pixelsPerCellCount,
                this._clusterCellsDotData[2] = t * this._pixelsPerCellCount,
                this.clusters = new Uint8ClampedArray(4 * s),
                this.counts = new Int32Array(n),
                this._clusterTextureSizeData[0] = a,
                this._clusterTextureSizeData[1] = 1 / a,
                this._clusterTextureSizeData[2] = 1 / r,
                this.releaseClusterTexture(),
                this.clusterTexture = sn.createTexture(this.device, a, r, 7)
            }
        }
        ,
        e.uploadTextures = function() {
            this.clusterTexture.lock().set(this.clusters),
            this.clusterTexture.unlock(),
            this.lightsBuffer.uploadTextures()
        }
        ,
        e.updateUniforms = function() {
            this.lightsBuffer.updateUniforms(),
            this._clusterWorldTextureId.setValue(this.clusterTexture);
            var t = this.boundsDelta;
            this._clusterCellsCountByBoundsSizeData[0] = this._cells.x / t.x,
            this._clusterCellsCountByBoundsSizeData[1] = this._cells.y / t.y,
            this._clusterCellsCountByBoundsSizeData[2] = this._cells.z / t.z,
            this._clusterCellsCountByBoundsSizeId.setValue(this._clusterCellsCountByBoundsSizeData),
            this._clusterBoundsMinData[0] = this.boundsMin.x,
            this._clusterBoundsMinData[1] = this.boundsMin.y,
            this._clusterBoundsMinData[2] = this.boundsMin.z,
            this._clusterBoundsDeltaData[0] = t.x,
            this._clusterBoundsDeltaData[1] = t.y,
            this._clusterBoundsDeltaData[2] = t.z,
            this._clusterCompressionLimit0Data[0] = this._maxAttenuation,
            this._clusterCompressionLimit0Data[1] = this._maxColorValue,
            this._clusterPixelsPerCellId.setValue(this._pixelsPerCellCount),
            this._clusterTextureSizeId.setValue(this._clusterTextureSizeData),
            this._clusterBoundsMinId.setValue(this._clusterBoundsMinData),
            this._clusterBoundsDeltaId.setValue(this._clusterBoundsDeltaData),
            this._clusterCellsDotId.setValue(this._clusterCellsDotData),
            this._clusterCellsMaxId.setValue(this._clusterCellsMaxData),
            this._clusterCompressionLimit0Id.setValue(this._clusterCompressionLimit0Data)
        }
        ,
        e.evalLightCellMinMax = function(t, e, i) {
            e.copy(t.min),
            e.sub(this.boundsMin),
            e.div(this.boundsDelta),
            e.mul2(e, this.cells),
            e.floor(),
            i.copy(t.max),
            i.sub(this.boundsMin),
            i.div(this.boundsDelta),
            i.mul2(i, this.cells),
            i.ceil(),
            e.max(lt.ZERO),
            i.min(this._cellsLimit)
        }
        ,
        e.collectLights = function(t) {
            for (var e = this.lightsBuffer.maxLights, i = this._usedLights, n = 1, s = 0; s < t.length; s++) {
                var a = t[s];
                if (a.enabled && 0 !== a.type && a.visibleThisFrame && a.intensity > 0) {
                    if (!(n < e)) {
                        console.warn("Clustered lighting: more than " + (e - 1) + " lights in the frame, ignoring some.");
                        break
                    }
                    var r = void 0;
                    n < i.length ? r = i[n] : (r = new fn,
                    i.push(r)),
                    r.light = a,
                    a.getBoundingBox(un),
                    r.min.copy(un.getMin()),
                    r.max.copy(un.getMax()),
                    n++
                }
            }
            i.length = n
        }
        ,
        e.evaluateBounds = function() {
            var t = this._usedLights
              , e = this.boundsMin
              , i = this.boundsMax;
            if (t.length > 1) {
                e.copy(t[1].min),
                i.copy(t[1].max);
                for (var n = 2; n < t.length; n++)
                    e.min(t[n].min),
                    i.max(t[n].max)
            } else
                e.set(0, 0, 0),
                i.set(1, 1, 1);
            this.boundsDelta.sub2(i, e),
            this.lightsBuffer.setBounds(e, this.boundsDelta)
        }
        ,
        e.evaluateCompressionLimits = function(t) {
            for (var e = 0, i = 0, n = this._usedLights, s = 1; s < n.length; s++) {
                var a = n[s].light;
                e = Math.max(a.attenuationEnd, e);
                var r = t ? a._linearFinalColor : a._finalColor;
                i = Math.max(r[0], i),
                i = Math.max(r[1], i),
                i = Math.max(r[2], i)
            }
            this._maxAttenuation = e + dn,
            this._maxColorValue = i + dn,
            this.lightsBuffer.setCompressionRanges(this._maxAttenuation, this._maxColorValue)
        }
        ,
        e.updateClusters = function(t) {
            this.counts.fill(0),
            this.clusters.fill(0);
            for (var e = this._cells.x, i = this._cells.z, n = this.counts, s = this._maxCellLightCount, a = this.clusters, r = this._pixelsPerCellCount, o = this._usedLights, h = 1; h < o.length; h++) {
                var l = o[h]
                  , c = l.light;
                this.lightsBuffer.addLightData(c, h, t),
                this.evalLightCellMinMax(l, ln, cn);
                for (var u = ln.x, d = cn.x, f = ln.y, p = cn.y, m = ln.z, _ = cn.z, g = u; g <= d; g++)
                    for (var v = m; v <= _; v++)
                        for (var y = f; y <= p; y++) {
                            var x = g + e * (v + y * i)
                              , b = n[x];
                            b < s && (a[r * x * 4 + b] = h,
                            n[x] = b + 1)
                        }
            }
        }
        ,
        e.update = function(t, e) {
            this.updateCells(),
            this.collectLights(t),
            this.evaluateBounds(),
            this.evaluateCompressionLimits(e),
            this.updateClusters(e),
            this.uploadTextures()
        }
        ,
        e.activate = function() {
            this.updateUniforms()
        }
        ,
        G(t, [{
            key: "maxCellLightCount",
            get: function() {
                return this._maxCellLightCount
            },
            set: function(t) {
                var e = it.roundUp(t, 4);
                e !== this._maxCellLightCount && (this._maxCellLightCount = e,
                this._pixelsPerCellCount = this._maxCellLightCount / 4,
                this._cellsDirty = !0)
            }
        }, {
            key: "cells",
            get: function() {
                return this._cells
            },
            set: function(t) {
                hn.copy(t).floor(),
                this._cells.equals(hn) || (this._cells.copy(hn),
                this._cellsLimit.copy(hn).sub(lt.ONE),
                this._cellsDirty = !0)
            }
        }, {
            key: "cookiesEnabled",
            get: function() {
                return this.lightsBuffer.cookiesEnabled
            },
            set: function(t) {
                this.lightsBuffer.cookiesEnabled = t
            }
        }, {
            key: "shadowsEnabled",
            get: function() {
                return this.lightsBuffer.shadowsEnabled
            },
            set: function(t) {
                this.lightsBuffer.shadowsEnabled = t
            }
        }, {
            key: "areaLightsEnabled",
            get: function() {
                return this.lightsBuffer.areaLightsEnabled
            },
            set: function(t) {
                this.lightsBuffer.areaLightsEnabled = t
            }
        }]),
        t
    }(), mn = function() {
        function t() {
            this.shadowCastersSet = new Set,
            this.shadowCastersList = []
        }
        var e = t.prototype;
        return e.clearShadowCasters = function() {
            this.shadowCastersSet.clear(),
            this.shadowCastersList.length = 0
        }
        ,
        e.addShadowCasters = function(t) {
            for (var e = 0; e < t.length; e++) {
                var i = t[e];
                this.shadowCastersSet.has(i) || (this.shadowCastersSet.add(i),
                this.shadowCastersList.push(i))
            }
        }
        ,
        t
    }();
    function _n() {
        return an
    }
    function gn(t) {
        an = t
    }
    var vn = new Set
      , yn = []
      , xn = function(t) {
        function e(e, i) {
            var n, s;
            return void 0 === i && (i = "Untitled"),
            "string" == typeof e && (i = e = null),
            (s = t.call(this) || this).device = e || (null == (n = _n()) ? void 0 : n.graphicsDevice),
            s.name = i,
            s.logRenderActions = !1,
            s.layerList = [],
            s.subLayerList = [],
            s.subLayerEnabled = [],
            s._opaqueOrder = {},
            s._transparentOrder = {},
            s._dirty = !1,
            s._dirtyBlend = !1,
            s._dirtyLights = !1,
            s._dirtyCameras = !1,
            s._meshInstances = [],
            s._meshInstancesSet = new Set,
            s._lights = [],
            s._lightsMap = new Map,
            s._lightCompositionData = [],
            s._splitLights = [[], [], []],
            s.cameras = [],
            s._renderActions = [],
            s._worldClusters = [],
            s._emptyWorldClusters = null,
            s._clusteredLightingCells = new lt(10,3,10),
            s._clusteredLightingMaxLights = 64,
            s._clusteredLightingCookiesEnabled = !1,
            s._clusteredLightingShadowsEnabled = !0,
            s._clusteredLightingAreaLightsEnabled = !1,
            s
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this._emptyWorldClusters && (this._emptyWorldClusters.destroy(),
            this._emptyWorldClusters = null),
            this._worldClusters.forEach((function(t) {
                t.destroy()
            }
            )),
            this._worldClusters = null
        }
        ,
        i.updateWorldClusters = function() {
            var t = this;
            this._worldClusters.forEach((function(e) {
                e.cells = t._clusteredLightingCells,
                e.maxCellLightCount = t._clusteredLightingMaxLights,
                e.cookiesEnabled = t._clusteredLightingCookiesEnabled,
                e.shadowsEnabled = t._clusteredLightingShadowsEnabled,
                e.areaLightsEnabled = t._clusteredLightingAreaLightsEnabled
            }
            ))
        }
        ,
        i._splitLightsArray = function(t) {
            var e = t._lights;
            t._splitLights[0].length = 0,
            t._splitLights[1].length = 0,
            t._splitLights[2].length = 0;
            for (var i = 0; i < e.length; i++) {
                var n = e[i];
                n.enabled && t._splitLights[n._type].push(n)
            }
        }
        ,
        i._update = function() {
            var t = this.layerList.length
              , i = 0;
            if (!this._dirty || !this._dirtyLights || !this._dirtyCameras)
                for (var n = 0; n < t; n++) {
                    var s = this.layerList[n];
                    s._dirty && (this._dirty = !0),
                    s._dirtyLights && (this._dirtyLights = !0),
                    s._dirtyCameras && (this._dirtyCameras = !0)
                }
            function a(t, e, i) {
                for (var n = !1, s = i.length, a = 0; a < s; a++) {
                    var r = i[a];
                    if (!e.has(r)) {
                        e.add(r),
                        t.push(r);
                        var o = r.material;
                        o && o._dirtyBlend && (n = !0,
                        o._dirtyBlend = !1)
                    }
                }
                return n
            }
            if (this._dirty) {
                i |= 1,
                this._meshInstances.length = 0,
                this._meshInstancesSet.clear();
                for (var r = 0; r < t; r++) {
                    var o = this.layerList[r];
                    o.passThrough || (this._dirtyBlend = a(this._meshInstances, this._meshInstancesSet, o.opaqueMeshInstances) || this._dirtyBlend,
                    this._dirtyBlend = a(this._meshInstances, this._meshInstancesSet, o.transparentMeshInstances) || this._dirtyBlend),
                    o._dirty = !1
                }
                this._dirty = !1
            }
            function h(t, e, i) {
                for (var n = 0; n < e.length; ) {
                    var s = e[n].material;
                    (s && 3 !== s.blendType) === i ? (t.push(e[n]),
                    e[n] = e[e.length - 1],
                    e.length--) : n++
                }
            }
            if (this._dirtyBlend) {
                i |= 8;
                for (var l = 0; l < t; l++) {
                    var c = this.layerList[l];
                    c.passThrough || (h(c.opaqueMeshInstances, c.transparentMeshInstances, !1),
                    h(c.transparentMeshInstances, c.opaqueMeshInstances, !0))
                }
                this._dirtyBlend = !1
            }
            if (this._dirtyLights && (i |= 2,
            this._dirtyLights = !1,
            this.updateLights()),
            i && this.updateShadowCasters(),
            this._dirtyCameras || 2 & i) {
                this._dirtyCameras = !1,
                i |= 4,
                this.cameras.length = 0;
                for (var u = 0; u < t; u++) {
                    var d = this.layerList[u];
                    d._dirtyCameras = !1;
                    for (var f = 0; f < d.cameras.length; f++) {
                        var p = d.cameras[f];
                        this.cameras.indexOf(p) < 0 && this.cameras.push(p)
                    }
                }
                this.cameras.length > 1 && this.cameras.sort((function(t, e) {
                    return t.priority - e.priority
                }
                ));
                for (var m = [], _ = 0, g = 0; g < this.cameras.length; g++) {
                    var v = this.cameras[g];
                    m.length = 0;
                    for (var y = !0, x = _, b = null, S = !1, T = 0; T < t; T++) {
                        var w = this.layerList[T];
                        if (w && w.cameras.length > 0 && v.layers.indexOf(w.id) >= 0) {
                            m.push(w),
                            S || w.id !== v.disablePostEffectsLayer || (S = !0,
                            b && (b.triggerPostprocess = !0));
                            var M = w.cameras.indexOf(v);
                            M >= 0 && (b = this.addRenderAction(this._renderActions, _, w, T, M, y, S),
                            _++,
                            y = !1)
                        }
                    }
                    x < _ && this._renderActions[x].collectDirectionalLights(m, this._splitLights[0], this._lights),
                    !S && b && (b.triggerPostprocess = !0),
                    v.renderTarget && v.postEffectsEnabled && this.propagateRenderTarget(x - 1, v)
                }
                this._renderActions.length = _,
                e.clusteredLightingEnabled && this.allocateLightClusters()
            }
            return (2 & i || 4 & i) && this._logRenderActions(),
            i
        }
        ,
        i.updateShadowCasters = function() {
            for (var t = this._lights.length, e = 0; e < t; e++)
                this._lightCompositionData[e].clearShadowCasters();
            for (var i = this.layerList.length, n = 0; n < i; n++) {
                var s = this.layerList[n];
                if (!vn.has(s)) {
                    vn.add(s);
                    for (var a = s._lights, r = 0; r < a.length; r++)
                        if (a[r].castShadows) {
                            var o = this._lightsMap.get(a[r]);
                            this._lightCompositionData[o].addShadowCasters(s.shadowCasters)
                        }
                }
            }
            vn.clear()
        }
        ,
        i.updateLights = function() {
            this._lights.length = 0,
            this._lightsMap.clear();
            for (var t = this.layerList.length, e = 0; e < t; e++) {
                var i = this.layerList[e];
                if (!vn.has(i)) {
                    vn.add(i);
                    for (var n = i._lights, s = 0; s < n.length; s++) {
                        var a = n[s]
                          , r = this._lightsMap.get(a);
                        if (void 0 === r) {
                            r = this._lights.length,
                            this._lightsMap.set(a, r),
                            this._lights.push(a);
                            var o = this._lightCompositionData[r];
                            o || (o = new mn,
                            this._lightCompositionData[r] = o)
                        }
                    }
                }
                this._splitLightsArray(i),
                i._dirtyLights = !1
            }
            vn.clear(),
            this._splitLightsArray(this);
            var h = this._lights.length;
            this._lightCompositionData.length = h
        }
        ,
        i.findCompatibleCluster = function(t, e) {
            for (var i = 0; i < e; i++) {
                var n = this._renderActions[i]
                  , s = this.layerList[n.layerIndex];
                if (t === s)
                    return n.lightClusters;
                if (n.lightClusters && rn(t._clusteredLightsSet, s._clusteredLightsSet))
                    return n.lightClusters
            }
            return null
        }
        ,
        i.allocateLightClusters = function() {
            yn.push.apply(yn, this._worldClusters),
            this._worldClusters.length = 0;
            for (var t = this._renderActions.length, e = 0; e < t; e++) {
                var i = this._renderActions[e]
                  , n = this.layerList[i.layerIndex];
                if (n._clusteredLightsSet.size)
                    if ((this.subLayerList[i.layerIndex] ? n.transparentMeshInstances : n.opaqueMeshInstances).length) {
                        var s = this.findCompatibleCluster(n, e);
                        s || (yn.length && (s = yn.pop()),
                        s || (s = new pn(this.device,this._clusteredLightingCells,this._clusteredLightingMaxLights,this._clusteredLightingCookiesEnabled,this._clusteredLightingShadowsEnabled,this._clusteredLightingAreaLightsEnabled)),
                        s.name = "Cluster-" + this._worldClusters.length,
                        this._worldClusters.push(s)),
                        i.lightClusters = s
                    }
                i.lightClusters || (i.lightClusters = this.emptyWorldClusters)
            }
            yn.forEach((function(t) {
                t.destroy()
            }
            )),
            yn.length = 0
        }
        ,
        i.addRenderAction = function(t, e, i, n, s, a, r) {
            var o = t[e];
            o || (o = t[e] = new on);
            var h = i.renderTarget
              , l = i.cameras[s];
            l && l.renderTarget && 1 !== i.id && (h = l.renderTarget);
            for (var c = !1, u = e - 1; u >= 0; u--)
                if (t[u].camera === l && t[u].renderTarget === h) {
                    c = !0;
                    break
                }
            var d = a || !c
              , f = !!d && l.clearColorBuffer
              , p = !!d && l.clearDepthBuffer
              , m = !!d && l.clearStencilBuffer;
            return f |= i.clearColorBuffer,
            p |= i.clearDepthBuffer,
            m |= i.clearStencilBuffer,
            r && l.postEffectsEnabled && (h = null),
            o.reset(),
            o.triggerPostprocess = !1,
            o.layerIndex = n,
            o.cameraIndex = s,
            o.camera = l,
            o.renderTarget = h,
            o.clearColor = f,
            o.clearDepth = p,
            o.clearStencil = m,
            o.firstCameraUse = a,
            o
        }
        ,
        i.propagateRenderTarget = function(t, e) {
            for (var i = t; i >= 0; i--) {
                var n = this._renderActions[i]
                  , s = this.layerList[n.layerIndex];
                if (n.renderTarget && 1 !== s.id)
                    break;
                if (1 !== s.id) {
                    var a = null == n ? void 0 : n.camera.camera;
                    if (a && (!e.camera.rect.equals(a.rect) || !e.camera.scissorRect.equals(a.scissorRect)))
                        break;
                    n.renderTarget = e.renderTarget
                }
            }
        }
        ,
        i._logRenderActions = function() {}
        ,
        i._isLayerAdded = function(t) {
            return this.layerList.indexOf(t) >= 0
        }
        ,
        i._isSublayerAdded = function(t, e) {
            for (var i = 0; i < this.layerList.length; i++)
                if (this.layerList[i] === t && this.subLayerList[i] === e)
                    return !0;
            return !1
        }
        ,
        i.push = function(t) {
            this._isLayerAdded(t) || (this.layerList.push(t),
            this.layerList.push(t),
            this._opaqueOrder[t.id] = this.subLayerList.push(!1) - 1,
            this._transparentOrder[t.id] = this.subLayerList.push(!0) - 1,
            this.subLayerEnabled.push(!0),
            this.subLayerEnabled.push(!0),
            this._dirty = !0,
            this._dirtyLights = !0,
            this._dirtyCameras = !0,
            this.fire("add", t))
        }
        ,
        i.insert = function(t, e) {
            if (!this._isLayerAdded(t)) {
                this.layerList.splice(e, 0, t, t),
                this.subLayerList.splice(e, 0, !1, !0);
                var i = this.layerList.length;
                this._updateOpaqueOrder(e, i - 1),
                this._updateTransparentOrder(e, i - 1),
                this.subLayerEnabled.splice(e, 0, !0, !0),
                this._dirty = !0,
                this._dirtyLights = !0,
                this._dirtyCameras = !0,
                this.fire("add", t)
            }
        }
        ,
        i.remove = function(t) {
            var e = this.layerList.indexOf(t);
            for (delete this._opaqueOrder[e],
            delete this._transparentOrder[e]; e >= 0; )
                this.layerList.splice(e, 1),
                this.subLayerList.splice(e, 1),
                this.subLayerEnabled.splice(e, 1),
                e = this.layerList.indexOf(t),
                this._dirty = !0,
                this._dirtyLights = !0,
                this._dirtyCameras = !0,
                this.fire("remove", t);
            var i = this.layerList.length;
            this._updateOpaqueOrder(0, i - 1),
            this._updateTransparentOrder(0, i - 1)
        }
        ,
        i.pushOpaque = function(t) {
            this._isSublayerAdded(t, !1) || (this.layerList.push(t),
            this._opaqueOrder[t.id] = this.subLayerList.push(!1) - 1,
            this.subLayerEnabled.push(!0),
            this._dirty = !0,
            this._dirtyLights = !0,
            this._dirtyCameras = !0,
            this.fire("add", t))
        }
        ,
        i.insertOpaque = function(t, e) {
            if (!this._isSublayerAdded(t, !1)) {
                this.layerList.splice(e, 0, t),
                this.subLayerList.splice(e, 0, !1);
                var i = this.subLayerList.length;
                this._updateOpaqueOrder(e, i - 1),
                this.subLayerEnabled.splice(e, 0, !0),
                this._dirty = !0,
                this._dirtyLights = !0,
                this._dirtyCameras = !0,
                this.fire("add", t)
            }
        }
        ,
        i.removeOpaque = function(t) {
            for (var e = 0, i = this.layerList.length; e < i; e++)
                if (this.layerList[e] === t && !this.subLayerList[e])
                    return this.layerList.splice(e, 1),
                    this.subLayerList.splice(e, 1),
                    i--,
                    this._updateOpaqueOrder(e, i - 1),
                    this.subLayerEnabled.splice(e, 1),
                    this._dirty = !0,
                    this._dirtyLights = !0,
                    this._dirtyCameras = !0,
                    void (this.layerList.indexOf(t) < 0 && this.fire("remove", t))
        }
        ,
        i.pushTransparent = function(t) {
            this._isSublayerAdded(t, !0) || (this.layerList.push(t),
            this._transparentOrder[t.id] = this.subLayerList.push(!0) - 1,
            this.subLayerEnabled.push(!0),
            this._dirty = !0,
            this._dirtyLights = !0,
            this._dirtyCameras = !0,
            this.fire("add", t))
        }
        ,
        i.insertTransparent = function(t, e) {
            if (!this._isSublayerAdded(t, !0)) {
                this.layerList.splice(e, 0, t),
                this.subLayerList.splice(e, 0, !0);
                var i = this.subLayerList.length;
                this._updateTransparentOrder(e, i - 1),
                this.subLayerEnabled.splice(e, 0, !0),
                this._dirty = !0,
                this._dirtyLights = !0,
                this._dirtyCameras = !0,
                this.fire("add", t)
            }
        }
        ,
        i.removeTransparent = function(t) {
            for (var e = 0, i = this.layerList.length; e < i; e++)
                if (this.layerList[e] === t && this.subLayerList[e])
                    return this.layerList.splice(e, 1),
                    this.subLayerList.splice(e, 1),
                    i--,
                    this._updateTransparentOrder(e, i - 1),
                    this.subLayerEnabled.splice(e, 1),
                    this._dirty = !0,
                    this._dirtyLights = !0,
                    this._dirtyCameras = !0,
                    void (this.layerList.indexOf(t) < 0 && this.fire("remove", t))
        }
        ,
        i._getSublayerIndex = function(t, e) {
            var i = this.layerList.indexOf(t);
            if (i < 0)
                return -1;
            if (this.subLayerList[i] !== e) {
                if ((i = this.layerList.indexOf(t, i + 1)) < 0)
                    return -1;
                if (this.subLayerList[i] !== e)
                    return -1
            }
            return i
        }
        ,
        i.getOpaqueIndex = function(t) {
            return this._getSublayerIndex(t, !1)
        }
        ,
        i.getTransparentIndex = function(t) {
            return this._getSublayerIndex(t, !0)
        }
        ,
        i.getLayerById = function(t) {
            for (var e = 0; e < this.layerList.length; e++)
                if (this.layerList[e].id === t)
                    return this.layerList[e];
            return null
        }
        ,
        i.getLayerByName = function(t) {
            for (var e = 0; e < this.layerList.length; e++)
                if (this.layerList[e].name === t)
                    return this.layerList[e];
            return null
        }
        ,
        i._updateOpaqueOrder = function(t, e) {
            for (var i = t; i <= e; i++)
                !1 === this.subLayerList[i] && (this._opaqueOrder[this.layerList[i].id] = i)
        }
        ,
        i._updateTransparentOrder = function(t, e) {
            for (var i = t; i <= e; i++)
                !0 === this.subLayerList[i] && (this._transparentOrder[this.layerList[i].id] = i)
        }
        ,
        i._sortLayersDescending = function(t, e, i) {
            for (var n = -1, s = -1, a = 0, r = t.length; a < r; a++) {
                var o = t[a];
                i.hasOwnProperty(o) && (n = Math.max(n, i[o]))
            }
            for (var h = 0, l = e.length; h < l; h++) {
                var c = e[h];
                i.hasOwnProperty(c) && (s = Math.max(s, i[c]))
            }
            return -1 === n && -1 !== s ? 1 : -1 === s && -1 !== n ? -1 : s - n
        }
        ,
        i.sortTransparentLayers = function(t, e) {
            return this._sortLayersDescending(t, e, this._transparentOrder)
        }
        ,
        i.sortOpaqueLayers = function(t, e) {
            return this._sortLayersDescending(t, e, this._opaqueOrder)
        }
        ,
        G(e, [{
            key: "clusteredLightingCells",
            get: function() {
                return this._clusteredLightingCells
            },
            set: function(t) {
                this._clusteredLightingCells.equals(t) || (this._clusteredLightingCells.copy(t),
                this.updateWorldClusters())
            }
        }, {
            key: "clusteredLightingMaxLights",
            get: function() {
                return this._clusteredLightingMaxLights
            },
            set: function(t) {
                this._clusteredLightingMaxLights !== t && (this._clusteredLightingMaxLights = t,
                this.updateWorldClusters())
            }
        }, {
            key: "clusteredLightingCookiesEnabled",
            get: function() {
                return this._clusteredLightingCookiesEnabled
            },
            set: function(t) {
                this._clusteredLightingCookiesEnabled !== t && (this._clusteredLightingCookiesEnabled = t,
                this._dirtyLights = !0,
                this.updateWorldClusters())
            }
        }, {
            key: "clusteredLightingAreaLightsEnabled",
            get: function() {
                return this._clusteredLightingAreaLightsEnabled
            },
            set: function(t) {
                this.device.supportsAreaLights || (t = !1),
                this._clusteredLightingAreaLightsEnabled !== t && (this._clusteredLightingAreaLightsEnabled = t,
                this._dirtyLights = !0,
                this.updateWorldClusters())
            }
        }, {
            key: "clusteredLightingShadowsEnabled",
            get: function() {
                return this._clusteredLightingShadowsEnabled
            },
            set: function(t) {
                this._clusteredLightingShadowsEnabled !== t && (this._clusteredLightingShadowsEnabled = t,
                this._dirtyLights = !0,
                this.updateWorldClusters())
            }
        }, {
            key: "emptyWorldClusters",
            get: function() {
                return this._emptyWorldClusters || (this._emptyWorldClusters = new pn(this.device,new lt(1,1,1),4),
                this._emptyWorldClusters.name = "ClusterEmpty",
                this._emptyWorldClusters.update([], !1)),
                this._emptyWorldClusters
            }
        }]),
        e
    }(u);
    xn.clusteredLightingEnabled = !1;
    var bn = function(t, e, i) {
        return "\n#ifdef MAPFLOAT\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , Sn = function(t, e, i) {
        return "\n#ifdef MAPCOLOR\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , Tn = function(t, e, i) {
        return "\n#ifdef MAPTEXTURE\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , wn = function(t, e, i) {
        return "#undef MAPTEXTURECOLOR\n#ifdef MAPTEXTURE\n#ifdef MAPCOLOR\n#define MAPTEXTURECOLOR\n#endif\n#endif\n#ifdef MAPTEXTURECOLOR\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , Mn = function(t, e, i) {
        return "#undef MAPTEXTUREFLOAT\n#ifdef MAPTEXTURE\n#ifdef MAPFLOAT\n#define MAPTEXTUREFLOAT\n#endif\n#endif\n#ifdef MAPTEXTUREFLOAT\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , An = function(t, e, i) {
        return "\n#ifdef MAPVERTEX\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , Cn = function(t, e, i) {
        return "#undef MAPVERTEXCOLOR\n#ifdef MAPVERTEX\n#ifdef MAPCOLOR\n#define MAPVERTEXCOLOR\n#endif\n#endif\n#ifdef MAPVERTEXCOLOR\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , En = function(t, e, i) {
        return "#undef MAPVERTEXFLOAT\n#ifdef MAPVERTEX\n#ifdef MAPFLOAT\n#define MAPVERTEXFLOAT\n#endif\n#endif\n#ifdef MAPVERTEXFLOAT\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
    }
      , Pn = []
      , Rn = {
        _oldChunkToNew: {
            aoTexPS: {
                n: "aoPS",
                f: Tn
            },
            aoVertPS: {
                n: "aoPS",
                f: An
            },
            diffuseConstPS: {
                n: "diffusePS",
                f: Sn
            },
            diffuseTexPS: {
                n: "diffusePS",
                f: Tn
            },
            diffuseTexConstPS: {
                n: "diffusePS",
                f: wn
            },
            diffuseVertPS: {
                n: "diffusePS",
                f: An
            },
            diffuseVertConstPS: {
                n: "diffusePS",
                f: Cn
            },
            emissiveConstPS: {
                n: "emissivePS",
                f: Sn
            },
            emissiveTexPS: {
                n: "emissivePS",
                f: Tn
            },
            emissiveTexConstPS: {
                n: "emissivePS",
                f: wn
            },
            emissiveTexConstFloatPS: {
                n: "emissivePS",
                f: Mn
            },
            emissiveVertPS: {
                n: "emissivePS",
                f: An
            },
            emissiveVertConstPS: {
                n: "emissivePS",
                f: Cn
            },
            emissiveVertConstFloatPS: {
                n: "emissivePS",
                f: En
            },
            glossConstPS: {
                n: "glossPS",
                f: bn
            },
            glossTexPS: {
                n: "glossPS",
                f: Tn
            },
            glossTexConstPS: {
                n: "glossPS",
                f: Mn
            },
            glossVertPS: {
                n: "glossPS",
                f: An
            },
            glossVertConstPS: {
                n: "glossPS",
                f: En
            },
            metalnessConstPS: {
                n: "metalnessPS",
                f: bn
            },
            metalnessTexPS: {
                n: "metalnessPS",
                f: Tn
            },
            metalnessTexConstPS: {
                n: "metalnessPS",
                f: Mn
            },
            metalnessVertPS: {
                n: "metalnessPS",
                f: An
            },
            metalnessVertConstPS: {
                n: "metalnessPS",
                f: En
            },
            opacityConstPS: {
                n: "opacityPS",
                f: bn
            },
            opacityTexPS: {
                n: "opacityPS",
                f: Tn
            },
            opacityTexConstPS: {
                n: "opacityPS",
                f: Mn
            },
            opacityVertPS: {
                n: "opacityPS",
                f: An
            },
            opacityVertConstPS: {
                n: "opacityPS",
                f: En
            },
            specularConstPS: {
                n: "specularPS",
                f: Sn
            },
            specularTexPS: {
                n: "specularPS",
                f: Tn
            },
            specularTexConstPS: {
                n: "specularPS",
                f: wn
            },
            specularVertPS: {
                n: "specularPS",
                f: An
            },
            specularVertConstPS: {
                n: "specularPS",
                f: Cn
            },
            transformBatchSkinnedVS: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef DYNAMICBATCH\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformInstancedVS: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef INSTANCING\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformPixelSnapVS: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef PIXELSNAP\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformScreenSpaceVS: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef SCREENSPACE\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformScreenSpaceBatchSkinned: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "#undef SCREENSPACEBATCH\n#ifdef SCREENSPACE\n#ifdef BATCH\n#define SCREENSPACEBATCH\n#endif\n#endif\n#ifdef SCREENSPACEBATCH\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformSkinned: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef SKIN\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            },
            transformUv1: {
                n: "transformVS",
                f: function(t, e, i) {
                    return "\n#ifdef UV1LAYOUT\n" + t + "\n#else\n" + ni[e] + "\n#endif\n"
                }
            }
        },
        optionsContext: {},
        optionsContextMin: {},
        generateKey: function(t) {
            var e, i = function(t) {
                var e = [];
                for (var i in t)
                    t.hasOwnProperty(i) && "chunks" !== i && "lights" !== i && e.push(i);
                return e.sort()
            };
            t === this.optionsContextMin ? (this.propsMin || (this.propsMin = i(t)),
            e = this.propsMin) : t === this.optionsContext ? (this.props || (this.props = i(t)),
            e = this.props) : e = i(t);
            for (var n = "standard", s = 0; s < e.length; s++)
                t[e[s]] && (n += e[s] + t[e[s]]);
            if (t.chunks) {
                var a = [];
                for (var r in t.chunks)
                    t.chunks.hasOwnProperty(r) && a.push(r + t.chunks[r]);
                a.sort(),
                n += a
            }
            if (t.lights)
                for (var o = 0; o < t.lights.length; o++)
                    n += t.lights[o].key;
            return $e(n)
        },
        _correctChannel: function(t, e) {
            if (Pn[t] > 0) {
                if (Pn[t] < e.length)
                    return e.substring(0, Pn[t]);
                if (Pn[t] > e.length) {
                    for (var i = e, n = i.charAt(i.length - 1), s = Pn[t] - i.length, a = 0; a < s; a++)
                        i += n;
                    return i
                }
                return e
            }
        },
        _setMapTransform: function(t, e, i, n) {
            var s = "texture_" + e + "MapTransform"
              , a = i + 100 * n;
            return t[0] += "uniform vec3 " + s + "0;\n",
            t[0] += "uniform vec3 " + s + "1;\n",
            t[3][a] || (t[1] += "varying vec2 vUV" + n + "_" + i + ";\n",
            t[2] += "   vUV" + n + "_" + i + " = vec2(dot(vec3(uv" + n + ", 1), " + s + "0), dot(vec3(uv" + n + ", 1), " + s + "1));\n",
            t[3][a] = !0),
            t
        },
        _getUvSourceExpression: function(t, e, i) {
            var n, s = i[t], a = i[e], r = 0 === i.pass || 1 === i.pass;
            return r && 1 === i.nineSlicedMode ? n = "nineSlicedUv" : r && 2 === i.nineSlicedMode ? n = "nineSlicedUv, -1000.0" : (n = 0 === s ? "vUv" + a : "vUV" + a + "_" + s,
            i.heightMap && "heightMapTransform" !== t && (n += " + dUvOffset")),
            n
        },
        _addMapDef: function(t, e) {
            var i = "\n#undef " + t + "\n";
            return e && (i += " #define " + t + "\n"),
            i
        },
        _addMapDefs: function(t, e, i, n) {
            var s = "";
            return s += this._addMapDef("MAPFLOAT", t),
            s += this._addMapDef("MAPCOLOR", e),
            s += this._addMapDef("MAPVERTEX", i),
            s += this._addMapDef("MAPTEXTURE", n)
        },
        _addMap: function(t, e, i, n, s) {
            var a = t + "Map"
              , r = a + "Uv"
              , o = a + "Transform"
              , h = a + "Channel"
              , l = t + "VertexColorChannel"
              , c = t + "VertexColor"
              , u = t + "Mode"
              , d = i[t + "Tint"]
              , f = i[c]
              , p = i[a]
              , m = i[u]
              , _ = n[e];
            if (p) {
                var g = this._getUvSourceExpression(o, r, i);
                if (_ = _.replace(/\$UV/g, g).replace(/\$CH/g, i[h]),
                void 0 !== s) {
                    var v = 0 === s ? "texture2DSRGB" : 1 === s ? "texture2DRGBM" : "texture2D";
                    _ = _.replace(/\$texture2DSAMPLE/g, v)
                }
            }
            f && (_ = _.replace(/\$VC/g, i[l])),
            m && (_ = _.replace(/\$DETAILMODE/g, m));
            var y = 1 === d
              , x = 3 === d;
            return (_ = this._addMapDefs(y, x, f, p) + _).replace(/\$/g, "")
        },
        _directionalShadowMapProjection: function(t, e, i, n, s) {
            var a = "";
            return t.numCascades > 1 && (a += "getShadowCascadeMatrix(light" + n + "_shadowMatrixPalette, light" + n + "_shadowCascadeDistances, light" + n + "_shadowCascadeCount);\n",
            e = "(cascadeShadowMat, " + i + ");\n"),
            a += s + e,
            a += "fadeShadow(light" + n + "_shadowCascadeDistances);\n"
        },
        _nonPointShadowMapProjection: function(t, e, i, n, s) {
            var a = "(" + i + ", " + n + ");\n";
            return !e._normalOffsetBias || e._isVsm ? 2 === e._type ? e._isPcf && (t.webgl2 || t.extStandardDerivatives) ? "       getShadowCoordPerspZbuffer" + a : "       getShadowCoordPersp" + a : this._directionalShadowMapProjection(e, a, n, s, "getShadowCoordOrtho") : 2 === e._type ? e._isPcf && (t.webgl2 || t.extStandardDerivatives) ? "       getShadowCoordPerspZbufferNormalOffset" + a : "       getShadowCoordPerspNormalOffset" + a : this._directionalShadowMapProjection(e, a, n, s, "getShadowCoordOrthoNormalOffset")
        },
        _addVaryingIfNeeded: function(t, e, i) {
            return t.indexOf(i) >= 0 ? "varying " + e + " " + i + ";\n" : ""
        },
        _getLightSourceShapeString: function(t) {
            switch (t) {
            case 1:
                return "Rect";
            case 2:
                return "Disk";
            case 3:
                return "Sphere";
            default:
                return ""
            }
        },
        _vsAddTransformCode: function(t, e, i, n) {
            return t += i.transformVS
        },
        _vsAddBaseCode: function(t, e, i, n) {
            return t += i.baseVS,
            1 !== n.nineSlicedMode && 2 !== n.nineSlicedMode || (t += i.baseNineSlicedVS),
            t
        },
        _fsAddBaseCode: function(t, e, i, n) {
            return t += i.basePS,
            1 === n.nineSlicedMode ? t += i.baseNineSlicedPS : 2 === n.nineSlicedMode && (t += i.baseNineSlicedTiledPS),
            t
        },
        _fsAddStartCode: function(t, e, i, n) {
            return t += i.startPS,
            1 === n.nineSlicedMode ? t += i.startNineSlicedPS : 2 === n.nineSlicedMode && (t += i.startNineSlicedTiledPS),
            t
        },
        _buildShadowPassFragmentCode: function(t, e, i, n, s) {
            var a = xn.clusteredLightingEnabled
              , r = n.pass - 3
              , o = Math.floor(r / 5)
              , h = r - 5 * o;
            return e.extStandardDerivatives && !e.webgl2 && (t += "uniform vec2 polygonOffset;\n"),
            3 === h ? e.textureFloatHighPrecision ? t += "#define VSM_EXPONENT 15.0\n\n" : t += "#define VSM_EXPONENT 5.54\n\n" : 2 === h && (t += "#define VSM_EXPONENT 5.54\n\n"),
            0 !== o && (t += "uniform vec3 view_position;\n",
            t += "uniform float light_radius;\n"),
            t += s,
            n.alphaTest && (t += "float dAlpha;\n",
            t += this._addMap("opacity", "opacityPS", n, i),
            t += i.alphaTestPS),
            0 !== h || e.webgl2 && 1 !== o ? 1 === h && (t += "vec2 encodeFloatRG( float v ) {\n",
            t += "    vec2 enc = vec2(1.0, 255.0) * v;\n",
            t += "    enc = fract(enc);\n",
            t += "    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n",
            t += "    return enc;\n",
            t += "}\n\n") : t += i.packDepthPS,
            t += "void main(void)\n{\n",
            n.alphaTest && (t += "   getOpacity();\n",
            t += "   alphaTest(dAlpha);\n"),
            t += 1 === o || (1 === h || 2 === h || 3 === h) && 0 !== o ? "   float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);\n" : "   float depth = gl_FragCoord.z;\n",
            0 !== h || e.webgl2 && (1 !== o || a) ? 0 === h || 4 === h ? (t += "   gl_FragColor = vec4(1.0);\n",
            a && 1 === o && e.webgl2 && (t += "   gl_FragDepth = depth;\n")) : t += 1 === h ? "   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));\n" : i.storeEVSMPS : e.extStandardDerivatives && !e.webgl2 ? (t += "   float minValue = 2.3374370500153186e-10; //(1.0 / 255.0) / (256.0 * 256.0 * 256.0);\n",
            t += "   depth += polygonOffset.x * max(abs(dFdx(depth)), abs(dFdy(depth))) + minValue * polygonOffset.y;\n",
            t += "   gl_FragColor = packFloat(depth);\n") : t += "   gl_FragColor = packFloat(depth);\n",
            t += "}\n"
        },
        createShaderDefinition: function(t, e) {
            var i = e.lights.length > 0;
            e.dirLightMap && (i = !0),
            xn.clusteredLightingEnabled && e.useLighting && (i = !0),
            0 === e.shadingModel ? (e.fresnelModel = 0,
            e.specularAntialias = !1,
            e.prefilteredCubemap = !1,
            e.dpAtlas = !1,
            e.ambientSH = !1) : e.fresnelModel = 0 === e.fresnelModel ? 2 : e.fresnelModel;
            var n = (e.cubeMap || e.prefilteredCubemap && e.useSpecular) && !e.sphereMap && !e.dpAtlas
              , s = e.sphereMap || n || e.dpAtlas
              , a = e.useTexCubeLod;
            e.cubeMap && (e.sphereMap = null),
            e.dpAtlas && (e.prefilteredCubemap = null),
            e.useSpecular || (e.specularMap = e.glossMap = null);
            var r = e.pass >= 3 && e.pass <= 17
              , o = i || s || e.ambientSH || e.prefilteredCubemap || e.heightMap || e.enableGGXSpecular || xn.clusteredLightingEnabled && !r || e.clearCoatNormalMap;
            this.options = e;
            var h, l, c = "", u = "", d = "", f = ni, p = {
                vertex_position: se
            };
            if (e.chunks) {
                var m = {};
                for (var _ in f)
                    f.hasOwnProperty(_) && (e.chunks[_] ? ((l = e.chunks[_]).indexOf("vertex_normal") >= 0 && (p.vertex_normal = ae),
                    l.indexOf("vertex_tangent") >= 0 && (p.vertex_tangent = re),
                    l.indexOf("vertex_texCoord0") >= 0 && (p.vertex_texCoord0 = ue),
                    l.indexOf("vertex_texCoord1") >= 0 && (p.vertex_texCoord1 = de),
                    l.indexOf("vertex_color") >= 0 && (p.vertex_color = le),
                    l.indexOf("vertex_boneWeights") >= 0 && (p.vertex_boneWeights = oe),
                    l.indexOf("vertex_boneIndices") >= 0 && (p.vertex_boneIndices = he),
                    m[_] = l) : m[_] = f[_]);
                for (var g in e.chunks) {
                    var v = this._oldChunkToNew[g];
                    v && (m[v.n] = v.f(e.chunks[g], v.n, g))
                }
                f = m
            }
            c = this._vsAddBaseCode(c, t, f, e),
            u += "   vPositionW    = getWorldPosition();\n",
            2 === e.pass && (c += "varying float vDepth;\n",
            c += "#ifndef VIEWMATRIX\n",
            c += "#define VIEWMATRIX\n",
            c += "uniform mat4 matrix_view;\n",
            c += "#endif\n",
            c += "#ifndef CAMERAPLANES\n",
            c += "#define CAMERAPLANES\n",
            c += "uniform vec4 camera_params;\n\n",
            c += "#endif\n",
            u += "    vDepth = -(matrix_view * vec4(vPositionW,1.0)).z * camera_params.x;\n"),
            e.useInstancing && (p.instance_line1 = Le,
            p.instance_line2 = De,
            p.instance_line3 = ke,
            p.instance_line4 = Oe,
            c += f.instancingVS),
            o && (p.vertex_normal = ae,
            u += "   vNormalW = getNormal();\n",
            e.sphereMap && t.fragmentUniformsCount <= 16 && (c += f.viewNormalVS,
            u += "   vNormalV    = getViewNormal();\n"),
            (e.heightMap || e.normalMap || e.enableGGXSpecular) && e.hasTangents ? (p.vertex_tangent = re,
            c += f.tangentBinormalVS,
            u += "   vTangentW   = getTangent();\n",
            u += "   vBinormalW  = getBinormal();\n") : e.enableGGXSpecular && (c += f.tangentBinormalVS,
            u += "   vObjectSpaceUpW  = getObjectSpaceUp();\n"));
            var y = []
              , x = [];
            for (var b in Pn) {
                var S = b + "Map";
                if (e[b + "VertexColor"]) {
                    var T = b + "VertexColorChannel";
                    e[T] = this._correctChannel(b, e[T])
                }
                if (e[S]) {
                    var w = S + "Channel"
                      , M = S + "Transform"
                      , A = S + "Uv";
                    e[A] = Math.min(e[A], 1),
                    e[w] = this._correctChannel(b, e[w]);
                    var C = e[A];
                    y[C] = !0,
                    x[C] = x[C] || e[S] && !e[M]
                }
            }
            e.forceUv1 && (y[1] = !0,
            x[1] = void 0 === x[1] || x[1]);
            for (var E = 0; E < 2; E++)
                y[E] && (p["vertex_texCoord" + E] = "TEXCOORD" + E,
                c += f["uv" + E + "VS"],
                u += "   vec2 uv" + E + " = getUv" + E + "();\n"),
                x[E] && (u += "   vUv" + E + " = uv" + E + ";\n");
            var P = [c, d, u, []];
            for (var R in Pn) {
                var I = R + "Map";
                if (e[I]) {
                    var L = I + "Transform";
                    if (e[L]) {
                        var D = I + "Uv";
                        this._setMapTransform(P, R, e[L], e[D])
                    }
                }
            }
            c = P[0],
            d = P[1],
            u = P[2],
            e.vertexColors && (p.vertex_color = le,
            u += "   vVertexColor = vertex_color;\n"),
            (e.useMorphPosition || e.useMorphNormal) && (e.useMorphTextureBased ? (c += "#define MORPHING_TEXTURE_BASED\n",
            e.useMorphPosition && (c += "#define MORPHING_TEXTURE_BASED_POSITION\n"),
            e.useMorphNormal && (c += "#define MORPHING_TEXTURE_BASED_NORMAL\n"),
            p.morph_vertex_id = Oe,
            c += "attribute float morph_vertex_id;\n") : (c += "#define MORPHING\n",
            e.useMorphPosition ? (p.morph_pos0 = Ee,
            p.morph_pos1 = Pe,
            p.morph_pos2 = Re,
            p.morph_pos3 = Ie,
            c += "#define MORPHING_POS03\n",
            c += "attribute vec3 morph_pos0;\n",
            c += "attribute vec3 morph_pos1;\n",
            c += "attribute vec3 morph_pos2;\n",
            c += "attribute vec3 morph_pos3;\n") : e.useMorphNormal && (p.morph_nrm0 = Ee,
            p.morph_nrm1 = Pe,
            p.morph_nrm2 = Re,
            p.morph_nrm3 = Ie,
            c += "#define MORPHING_NRM03\n",
            c += "attribute vec3 morph_nrm0;\n",
            c += "attribute vec3 morph_nrm1;\n",
            c += "attribute vec3 morph_nrm2;\n",
            c += "attribute vec3 morph_nrm3;\n"),
            e.useMorphNormal ? (p.morph_nrm4 = Le,
            p.morph_nrm5 = De,
            p.morph_nrm6 = ke,
            p.morph_nrm7 = Oe,
            c += "#define MORPHING_NRM47\n",
            c += "attribute vec3 morph_nrm4;\n",
            c += "attribute vec3 morph_nrm5;\n",
            c += "attribute vec3 morph_nrm6;\n",
            c += "attribute vec3 morph_nrm7;\n") : (p.morph_pos4 = Le,
            p.morph_pos5 = De,
            p.morph_pos6 = ke,
            p.morph_pos7 = Oe,
            c += "#define MORPHING_POS47\n",
            c += "attribute vec3 morph_pos4;\n",
            c += "attribute vec3 morph_pos5;\n",
            c += "attribute vec3 morph_pos6;\n",
            c += "attribute vec3 morph_pos7;\n"))),
            e.skin ? (p.vertex_boneWeights = oe,
            p.vertex_boneIndices = he,
            c += oi(t, f),
            c += "#define SKIN\n") : e.useInstancing && (c += "#define INSTANCING\n"),
            e.screenSpace && (c += "#define SCREENSPACE\n"),
            e.pixelSnap && (c += "#define PIXELSNAP\n"),
            c = this._vsAddTransformCode(c, t, f, e),
            o && (c += f.normalVS),
            c += "\n",
            c += f.startVS,
            c += u,
            c += f.endVS;
            var k = c += "}"
              , O = d;
            d = "",
            d += this._addVaryingIfNeeded(c, "vec4", "vVertexColor"),
            d += this._addVaryingIfNeeded(c, "vec3", "vPositionW"),
            d += this._addVaryingIfNeeded(c, "vec3", "vNormalV"),
            d += this._addVaryingIfNeeded(c, "vec3", "vNormalW"),
            d += this._addVaryingIfNeeded(c, "vec3", "vTangentW"),
            d += this._addVaryingIfNeeded(c, "vec3", "vBinormalW"),
            d += this._addVaryingIfNeeded(c, "vec3", "vObjectSpaceUpW"),
            d += this._addVaryingIfNeeded(c, "vec2", "vUv0"),
            d += this._addVaryingIfNeeded(c, "vec2", "vUv1"),
            k = (d += O) + k;
            var F = "";
            if (t.webgl2 ? (F = li(t),
            f.extensionVS && (F += f.extensionVS + "\n"),
            k = F + f.gles3VS + k) : (f.extensionVS && (F = f.extensionVS + "\n"),
            k = F + k),
            e.forceFragmentPrecision && "highp" !== e.forceFragmentPrecision && "mediump" !== e.forceFragmentPrecision && "lowp" !== e.forceFragmentPrecision && (e.forceFragmentPrecision = null),
            e.forceFragmentPrecision && ("highp" === e.forceFragmentPrecision && "highp" !== t.maxPrecision && (e.forceFragmentPrecision = "mediump"),
            "mediump" === e.forceFragmentPrecision && "lowp" === t.maxPrecision && (e.forceFragmentPrecision = "lowp")),
            c = "",
            t.webgl2 && (c += li(t)),
            t.extStandardDerivatives && !t.webgl2 && (c += "#extension GL_OES_standard_derivatives : enable\n\n"),
            f.extensionPS && (c += f.extensionPS + "\n"),
            t.webgl2 && (c += f.gles3PS),
            c += e.forceFragmentPrecision ? "precision " + e.forceFragmentPrecision + " float;\n\n" : hi(t),
            e.pass === Bt)
                return c += "uniform vec4 uColor;\n",
                c += d,
                e.alphaTest && (c += "float dAlpha;\n",
                c += this._addMap("opacity", "opacityPS", e, f),
                c += f.alphaTestPS),
                c += "void main(void)\n{\n",
                e.alphaTest && (c += "   getOpacity();\n",
                c += "   alphaTest(dAlpha);\n"),
                c += "    gl_FragColor = uColor;\n",
                {
                    attributes: p,
                    vshader: k,
                    fshader: c += "}\n"
                };
            if (2 === e.pass)
                return c += "varying float vDepth;\n",
                c += d,
                c += f.packDepthPS,
                e.alphaTest && (c += "float dAlpha;\n",
                c += this._addMap("opacity", "opacityPS", e, f),
                c += f.alphaTestPS),
                c += "void main(void)\n{\n",
                e.alphaTest && (c += "   getOpacity();\n",
                c += "   alphaTest(dAlpha);\n"),
                c += "    gl_FragColor = packFloat(vDepth);\n",
                {
                    attributes: p,
                    vshader: k,
                    fshader: c += "}\n"
                };
            if (r)
                return {
                    attributes: p,
                    vshader: k,
                    fshader: this._buildShadowPassFragmentCode(c, t, f, e, d)
                };
            if (e.customFragmentShader)
                return {
                    attributes: p,
                    vshader: k,
                    fshader: c + e.customFragmentShader,
                    tag: 1
                };
            c += d,
            c = this._fsAddBaseCode(c, t, f, e),
            e.detailModes && (c += f.detailModesPS);
            var B = c;
            c = "",
            e.clearCoat > 0 && (c += "#define CLEARCOAT\n",
            c += "#define CLUSTER_CLEAR_COAT\n"),
            !1 === e.opacityFadesSpecular && (c += "uniform float material_alphaFade;\n");
            var N = 0
              , U = []
              , z = !1
              , V = !1
              , G = !1
              , W = xn.clusteredLightingEnabled
              , H = e.lights.some((function(t) {
                return t._shape && 0 !== t._shape
            }
            ));
            W && e.clusteredLightingAreaLightsEnabled && (H = !0),
            7 === t.areaLightLutFormat ? (c += "#define AREA_R8_G8_B8_A8_LUTS\n",
            c += "#define AREA_LUTS_PRECISION lowp\n") : c += "#define AREA_LUTS_PRECISION highp\n",
            (H || W) && (c += "#define AREA_LIGHTS\n",
            c += "uniform AREA_LUTS_PRECISION sampler2D areaLightsLutTex1;\n",
            c += "uniform AREA_LUTS_PRECISION sampler2D areaLightsLutTex2;\n");
            for (var X, j = 0, q = 0; q < e.lights.length; q++) {
                var Y = e.lights[q]
                  , K = Y._type;
                W && 0 !== K || (c += "uniform vec3 light" + q + "_color;\n",
                0 === K ? c += "uniform vec3 light" + q + "_direction;\n" : (c += "uniform vec3 light" + q + "_position;\n",
                c += "uniform float light" + q + "_radius;\n",
                2 === K && (c += "uniform vec3 light" + q + "_direction;\n",
                c += "uniform float light" + q + "_innerConeAngle;\n",
                c += "uniform float light" + q + "_outerConeAngle;\n")),
                0 !== (j = H && Y._shape ? Y._shape : 0) && (0 === K && (c += "uniform vec3 light" + q + "_position;\n"),
                c += "uniform vec3 light" + q + "_halfWidth;\n",
                c += "uniform vec3 light" + q + "_halfHeight;\n"),
                Y.castShadows && !e.noShadow && (c += "uniform mat4 light" + q + "_shadowMatrix;\n",
                0 === K && (c += "uniform mat4 light" + q + "_shadowMatrixPalette[4];\n",
                c += "uniform float light" + q + "_shadowCascadeDistances[4];\n",
                c += "uniform float light" + q + "_shadowCascadeCount;\n"),
                0 !== K ? c += "uniform vec4 light" + q + "_shadowParams;\n" : (z = !0,
                c += "uniform vec3 light" + q + "_shadowParams;\n"),
                1 === K ? c += "uniform samplerCube light" + q + "_shadowMap;\n" : Y._isPcf && t.webgl2 ? c += "uniform sampler2DShadow light" + q + "_shadowMap;\n" : c += "uniform sampler2D light" + q + "_shadowMap;\n",
                N++,
                U[Y._shadowType] = !0,
                Y._isVsm && (V = !0),
                Y._isPcf && (t.webgl2 || t.extStandardDerivatives) && 2 === K && (G = !0)),
                Y._cookie && (Y._cookie._cubemap ? 1 === K && (c += "uniform samplerCube light" + q + "_cookie;\n",
                c += "uniform float light" + q + "_cookieIntensity;\n",
                Y.castShadows && !e.noShadow || (c += "uniform mat4 light" + q + "_shadowMatrix;\n")) : 2 === K && (c += "uniform sampler2D light" + q + "_cookie;\n",
                c += "uniform float light" + q + "_cookieIntensity;\n",
                Y.castShadows && !e.noShadow || (c += "uniform mat4 light" + q + "_shadowMatrix;\n"),
                Y._cookieTransform && (c += "uniform vec4 light" + q + "_cookieMatrix;\n",
                c += "uniform vec2 light" + q + "_cookieOffset;\n"))))
            }
            if (c += "\n",
            X = !e.hasTangents && t.extStandardDerivatives ? f.TBNderivativePS : e.fastTbn ? f.TBNfastPS : f.TBNPS,
            o)
                if (e.normalMap || e.clearCoatNormalMap) {
                    if (c += e.packedNormal ? f.normalXYPS : f.normalXYZPS,
                    !e.hasTangents) {
                        var Z = e.normalMap ? "normalMapTransform" : "clearCoatNormalMapTransform"
                          , $ = this._getUvSourceExpression(Z, "normalMapUv", e);
                        X = X.replace(/\$UV/g, $)
                    }
                    c += X
                } else
                    e.enableGGXSpecular && !e.heightMap && (c += f.normalVertexPS,
                    c += f.TBNObjectSpacePS);
            if (o)
                if (e.normalMap) {
                    e.normalDetail && (c += this._addMap("normalDetail", "normalDetailMapPS", e, f));
                    var Q = this._getUvSourceExpression("normalMapTransform", "normalMapUv", e);
                    e.normalizeNormalMap ? c += f.normalMapPS.replace(/\$UV/g, Q) : c += f.normalMapFastPS.replace(/\$UV/g, Q)
                } else
                    e.enableGGXSpecular && !e.heightMap || (c += f.normalVertexPS);
            if (c += si(e.gamma, f),
            c += ai(e.toneMap, f),
            c += ri(e.fog, f),
            e.useRgbm && (c += f.rgbmPS),
            (n || e.prefilteredCubemap) && (c += e.fixSeams ? f.fixCubemapSeamsStretchPS : f.fixCubemapSeamsNonePS),
            e.useCubeMapRotation && (c += "#define CUBEMAP_ROTATION\n"),
            e.useRightHandedCubeMap && (c += "#define RIGHT_HANDED_CUBEMAP\n"),
            o && (c += f.cubeMapRotatePS,
            c += e.cubeMapProjection > 0 ? f.cubeMapProjectBoxPS : f.cubeMapProjectNonePS,
            c += e.skyboxIntensity ? f.envMultiplyPS : f.envConstPS),
            e.diffuseDetail && (c += this._addMap("diffuseDetail", "diffuseDetailMapPS", e, f)),
            c += this._addMap("diffuse", "diffusePS", e, f),
            (3 !== e.blendType || e.alphaTest || e.alphaToCoverage) && (c += this._addMap("opacity", "opacityPS", e, f)),
            c += this._addMap("emissive", "emissivePS", e, f, e.emissiveFormat),
            i && e.useSpecular || s) {
                e.specularAntialias && e.normalMap ? e.normalizeNormalMap && o ? c += f.specularAaToksvigPS : c += f.specularAaToksvigFastPS : c += f.specularAaNonePS;
                var J = e.useMetalness ? "metalness" : "specular";
                c += this._addMap(J, J + "PS", e, f),
                c += this._addMap("gloss", "glossPS", e, f),
                2 === e.fresnelModel && (c += f.fresnelSchlickPS)
            }
            if (e.clearCoat > 0 && (c += this._addMap("clearCoat", "clearCoatPS", e, f),
            c += this._addMap("clearCoatGloss", "clearCoatGlossPS", e, f),
            c += this._addMap("clearCoatNormal", "clearCoatNormalPS", e, f)),
            e.heightMap) {
                if (!e.normalMap) {
                    var tt = this._getUvSourceExpression("heightMapTransform", "heightMapUv", e);
                    e.hasTangents || (X = X.replace(/\$UV/g, tt)),
                    c += X
                }
                c += this._addMap("height", "parallaxPS", e, f)
            }
            var et = e.aoMap || e.aoVertexColor;
            et && (c += this._addMap("ao", "aoPS", e, f),
            e.occludeSpecular && (1 === e.occludeSpecular ? c += e.occludeSpecularFloat ? f.aoSpecOccSimplePS : f.aoSpecOccConstSimplePS : c += e.occludeSpecularFloat ? f.aoSpecOccPS : f.aoSpecOccConstPS));
            var it = e.rgbmReflection ? "decodeRGBM" : e.hdrReflection ? "" : "gammaCorrectInput";
            if (e.sphereMap) {
                var nt = t.fragmentUniformsCount > 16 ? f.reflectionSpherePS : f.reflectionSphereLowPS;
                c += nt = nt.replace(/\$texture2DSAMPLE/g, e.rgbmReflection ? "texture2DRGBM" : e.hdrReflection ? "texture2D" : "texture2DSRGB")
            } else
                n ? e.prefilteredCubemap ? c += a ? f.reflectionPrefilteredCubeLodPS.replace(/\$DECODE/g, it) : f.reflectionPrefilteredCubePS.replace(/\$DECODE/g, it) : c += f.reflectionCubePS.replace(/\$textureCubeSAMPLE/g, e.rgbmReflection ? "textureCubeRGBM" : e.hdrReflection ? "textureCube" : "textureCubeSRGB") : e.dpAtlas && (c += f.reflectionDpAtlasPS.replace(/\$texture2DSAMPLE/g, e.rgbmReflection ? "texture2DRGBM" : e.hdrReflection ? "texture2D" : "texture2DSRGB"));
            (n || e.sphereMap || e.dpAtlas) && (e.clearCoat > 0 && (c += f.reflectionCCPS),
            e.refraction && (c += f.refractionPS)),
            xn.clusteredLightingEnabled && (c += f.clusteredLightUtilsPS,
            c += f.clusteredLightCookiesPS,
            U[0] = !0,
            G = !0),
            (N > 0 || xn.clusteredLightingEnabled) && (z && (c += f.shadowCascadesPS),
            U[0] && (c += f.shadowStandardPS),
            U[4] && (c += f.shadowStandardGL2PS),
            V && (c += f.shadowVSM_commonPS,
            U[1] && (c += f.shadowVSM8PS),
            U[2] && (c += t.extTextureHalfFloatLinear ? f.shadowEVSMPS.replace(/\$/g, "16") : f.shadowEVSMnPS.replace(/\$/g, "16")),
            U[3] && (c += t.extTextureFloatLinear ? f.shadowEVSMPS.replace(/\$/g, "32") : f.shadowEVSMnPS.replace(/\$/g, "32"))),
            t.webgl2 || t.extStandardDerivatives || (c += f.biasConstPS),
            c += f.shadowCoordPS + f.shadowCommonPS,
            G && (c += f.shadowCoordPerspZbufferPS)),
            xn.clusteredLightingEnabled && (c += f.clusteredLightShadowsPS),
            e.enableGGXSpecular && (c += "uniform float material_anisotropy;\n"),
            i && (c += f.lightDiffuseLambertPS,
            (H || W) && (c += f.ltc));
            var st = !1;
            e.useSpecular ? (c += "#define CLUSTER_SPECULAR\n",
            e.conserveEnergy && (c += "#define CLUSTER_CONSERVE_ENERGY\n"),
            i && (c += 0 === e.shadingModel ? f.lightSpecularPhongPS : e.enableGGXSpecular ? f.lightSpecularAnisoGGXPS : f.lightSpecularBlinnPS),
            e.sphereMap || n || e.dpAtlas || e.fresnelModel > 0 ? e.fresnelModel > 0 ? e.conserveEnergy && !H ? c += f.combineDiffuseSpecularPS : c += f.combineDiffuseSpecularNoConservePS : c += f.combineDiffuseSpecularOldPS : e.diffuseMap ? c += f.combineDiffuseSpecularNoReflPS : (c += f.combineDiffuseSpecularNoReflSeparateAmbientPS,
            st = !0)) : c += f.combineDiffusePS,
            e.clearCoat > 0 && (c += f.combineClearCoatPS);
            var at = !0;
            if (e.lightMap || e.lightVertexColor) {
                var rt = e.dirLightMap && e.useSpecular ? "lightmapDirPS" : "lightmapSinglePS";
                c += this._addMap("light", rt, e, f, e.lightMapFormat),
                at = e.lightMapWithoutAmbient
            }
            if (at) {
                var ot = e.rgbmAmbient ? "decodeRGBM" : e.hdrAmbient ? "" : "gammaCorrectInput";
                e.ambientSH ? c += f.ambientSHPS : e.prefilteredCubemap ? c += a ? f.ambientPrefilteredCubeLodPS.replace(/\$DECODE/g, ot) : f.ambientPrefilteredCubePS.replace(/\$DECODE/g, ot) : c += f.ambientConstantPS
            }
            e.ambientTint && !st && (c += "uniform vec3 material_ambient;\n"),
            e.alphaTest && (c += f.alphaTestPS),
            e.msdf && (c += f.msdfPS),
            o && (c += f.viewDirPS,
            e.useSpecular && (c += e.enableGGXSpecular ? f.reflDirAnisoPS : f.reflDirPS));
            var ht, lt = !1, ct = !1, ut = !1, dt = !1, ft = !1;
            xn.clusteredLightingEnabled && i && (dt = !0,
            lt = !0,
            ct = !0,
            ft = !0,
            c += f.floatUnpackingPS,
            e.clusteredLightingCookiesEnabled && (c += "\n#define CLUSTER_COOKIES"),
            e.clusteredLightingShadowsEnabled && !e.noShadow && (c += "\n#define CLUSTER_SHADOWS"),
            e.clusteredLightingAreaLightsEnabled && (c += "\n#define CLUSTER_AREALIGHTS"),
            c += sn.shaderDefines,
            c += f.clusteredLightPS),
            e.twoSidedLighting && (c += "uniform float twoSidedLightingNegScaleFactor;\n"),
            c = this._fsAddStartCode(c, t, f, e),
            o && (e.hasTangents || !t.extStandardDerivatives || e.fastTbn ? e.twoSidedLighting ? c += "   dVertexNormalW = gl_FrontFacing ? vNormalW * twoSidedLightingNegScaleFactor : -vNormalW * twoSidedLightingNegScaleFactor;\n" : c += "   dVertexNormalW = vNormalW;\n" : e.twoSidedLighting ? c += "   dVertexNormalW = normalize(gl_FrontFacing ? vNormalW * twoSidedLightingNegScaleFactor : -vNormalW * twoSidedLightingNegScaleFactor);\n" : c += "   dVertexNormalW = normalize(vNormalW);\n",
            (e.heightMap || e.normalMap) && e.hasTangents && (e.twoSidedLighting ? (c += "   dTangentW = gl_FrontFacing ? vTangentW * twoSidedLightingNegScaleFactor : -vTangentW * twoSidedLightingNegScaleFactor;\n",
            c += "   dBinormalW = gl_FrontFacing ? vBinormalW * twoSidedLightingNegScaleFactor : -vBinormalW * twoSidedLightingNegScaleFactor;\n") : (c += "   dTangentW = vTangentW;\n",
            c += "   dBinormalW = vBinormalW;\n")));
            var pt = !1;
            3 !== e.blendType || e.alphaTest || e.alphaToCoverage ? e.heightMap && e.opacityMap ? pt = !0 : (c += "   getOpacity();\n",
            e.alphaTest && (c += "   alphaTest(dAlpha);\n")) : c += "   dAlpha = 1.0;\n";
            var mt = !1;
            if (o && (c += "   getViewDir();\n",
            (e.heightMap || e.normalMap || e.clearCoatNormalMap || e.enableGGXSpecular) && (c += "   getTBN();\n"),
            e.heightMap && (c += "   getParallax();\n"),
            pt && (c += "   getOpacity();\n",
            e.alphaTest && (c += "   alphaTest(dAlpha);\n")),
            c += "   getNormal();\n",
            e.useSpecular && (e.enableGGXSpecular && (c += "   getGlossiness();\n",
            mt = !0),
            c += "   getReflDir();\n")),
            c += "   getAlbedo();\n",
            e.clearCoat > 0 && (c += "   getClearCoat();\n",
            c += "   getClearCoatGlossiness();\n",
            c += "   getClearCoatNormal();\n"),
            (i && e.useSpecular || s) && (c += "   getSpecularity();\n",
            mt || (c += "   getGlossiness();\n"),
            H && (c += "   #ifdef AREA_LIGHTS\n",
            c += "   dSpecularityNoFres = dSpecularity;\n",
            c += "   #ifdef CLEARCOAT\n",
            c += "   ccSpecularityNoFres = ccSpecularity;\n",
            c += "   #endif\n",
            c += "   #endif\n"),
            e.fresnelModel > 0 && (c += "   getFresnel();\n")),
            at && (c += "   addAmbient();\n",
            e.separateAmbient && (c += "\n                    vec3 dAmbientLight = dDiffuseLight;\n                    dDiffuseLight = vec3(0);\n                ")),
            e.ambientTint && !st && (c += "   dDiffuseLight *= material_ambient;\n"),
            et && !e.occludeDirect && (c += "    applyAO();\n"),
            (e.lightMap || e.lightVertexColor) && (c += "   addLightMap();\n"),
            i || s) {
                (n || e.sphereMap || e.dpAtlas) && (e.clearCoat > 0 && (c += "   addReflectionCC();\n"),
                c += "   addReflection();\n"),
                H && (c += "   ccReflection.rgb *= ccSpecularity;\n",
                c += "   dReflection.rgb *= dSpecularity;\n",
                c += "   dSpecularLight *= dSpecularity;\n",
                c += "   float roughness = max((1.0 - dGlossiness) * (1.0 - dGlossiness), 0.001);\n",
                c += "   calcLTCLightValues();\n");
                for (var _t = "", gt = 0; gt < e.lights.length; gt++) {
                    var vt = e.lights[gt]
                      , yt = vt._type;
                    if (!xn.clusteredLightingEnabled || 0 === yt) {
                        if (ht = !1,
                        H && vt._shape ? (j = vt._shape,
                        _t = this._getLightSourceShapeString(j)) : (j = 0,
                        _t = ""),
                        0 !== j && (c += "   calc" + _t + "LightValues(light" + gt + "_position, light" + gt + "_halfWidth, light" + gt + "_halfHeight);\n"),
                        0 === yt ? (c += "   dLightDirNormW = light" + gt + "_direction;\n",
                        c += "   dAtten = 1.0;\n") : (vt._cookie && (2 !== yt || vt._cookie._cubemap ? 1 === yt && vt._cookie._cubemap && (ft = !0,
                        ht = !0) : (ft = !0,
                        ht = !0)),
                        c += "   getLightDirPoint(light" + gt + "_position);\n",
                        lt = !0,
                        ht && (c += 2 === yt ? "   dAtten3 = getCookie2D" + (vt._cookieFalloff ? "" : "Clip") + (vt._cookieTransform ? "Xform" : "") + "(light" + gt + "_cookie, light" + gt + "_shadowMatrix, light" + gt + "_cookieIntensity" + (vt._cookieTransform ? ", light" + gt + "_cookieMatrix, light" + gt + "_cookieOffset" : "") + ")." + vt._cookieChannel + ";\n" : "   dAtten3 = getCookieCube(light" + gt + "_cookie, light" + gt + "_shadowMatrix, light" + gt + "_cookieIntensity)." + vt._cookieChannel + ";\n"),
                        0 === j ? 0 === vt._falloffMode ? (c += "   dAtten = getFalloffLinear(light" + gt + "_radius);\n",
                        ct = !0) : (c += "   dAtten = getFalloffInvSquared(light" + gt + "_radius);\n",
                        ut = !0) : (c += "   dAtten = getFalloffWindow(light" + gt + "_radius);\n",
                        ut = !0),
                        c += "   if (dAtten > 0.00001) {\n",
                        2 === yt && (ht && !vt._cookieFalloff || (c += "       dAtten *= getSpotEffect(light" + gt + "_direction, light" + gt + "_innerConeAngle, light" + gt + "_outerConeAngle);\n",
                        dt = !0))),
                        c += 0 !== j ? 0 === yt ? "       dAttenD = getLightDiffuse();\n" : "       dAttenD = get" + _t + "LightDiffuse() * 16.0;\n" : "       dAtten *= getLightDiffuse();\n",
                        vt.castShadows && !e.noShadow) {
                            var xt = null
                              , bt = void 0;
                            if (1 === vt._shadowType ? (xt = "VSM8",
                            bt = "0.0") : 2 === vt._shadowType ? (xt = "VSM16",
                            bt = "5.54") : 3 === vt._shadowType ? (xt = "VSM32",
                            bt = t.textureFloatHighPrecision ? "15.0" : "5.54") : xt = 4 === vt._shadowType ? "PCF5x5" : "PCF3x3",
                            null !== xt)
                                if (1 === yt)
                                    h = "(light" + gt + "_shadowMap, light" + gt + "_shadowParams);\n",
                                    vt._normalOffsetBias && (c += "       normalOffsetPointShadow(light" + gt + "_shadowParams);\n"),
                                    c += "       dAtten *= getShadowPoint" + xt + h;
                                else {
                                    var St = "light" + gt + "_shadowMatrix"
                                      , Tt = "light" + gt + "_shadowParams";
                                    c += this._nonPointShadowMapProjection(t, e.lights[gt], St, Tt, gt),
                                    2 === yt && (xt = "Spot" + xt),
                                    c += "       dAtten *= getShadow" + xt + "(light" + gt + "_shadowMap, light" + gt + "_shadowParams" + (vt._isVsm ? ", " + bt : "") + ");\n"
                                }
                        }
                        0 !== j ? e.conserveEnergy && e.useSpecular ? c += "       dDiffuseLight += mix((dAttenD * dAtten) * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ", vec3(0), dLTCSpecFres);\n" : c += "       dDiffuseLight += (dAttenD * dAtten) * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n" : H && e.conserveEnergy && e.useSpecular ? c += "       dDiffuseLight += mix(dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ", vec3(0), dSpecularity);\n" : c += "       dDiffuseLight += dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n",
                        0 !== j ? (e.clearCoat > 0 && (c += "       ccSpecularLight += ccLTCSpecFres * get" + _t + "LightSpecularCC() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n"),
                        e.useSpecular && (c += "       dSpecularLight += dLTCSpecFres * get" + _t + "LightSpecular() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n")) : H ? (e.clearCoat > 0 && (c += "       ccSpecularLight += ccSpecularity * getLightSpecularCC() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n"),
                        e.useSpecular && (c += "       dSpecularLight += dSpecularity * getLightSpecular() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n")) : (e.clearCoat > 0 && (c += "       ccSpecularLight += getLightSpecularCC() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n"),
                        e.useSpecular && (c += "       dSpecularLight += getLightSpecular() * dAtten * light" + gt + "_color" + (ht ? " * dAtten3" : "") + ";\n")),
                        0 !== yt && (c += "   }\n"),
                        c += "\n"
                    }
                }
                xn.clusteredLightingEnabled && i && (ct = !0,
                ut = !0,
                lt = !0,
                c += "   addClusteredLights();\n"),
                H && (e.clearCoat > 0 && (c += "   ccSpecularity = 1.0;\n"),
                e.useSpecular && (c += "   dSpecularity = vec3(1);\n")),
                (n || e.sphereMap || e.dpAtlas) && e.refraction && (c += "   addRefraction();\n")
            }
            c += "\n",
            et && (e.occludeDirect && (c += "    applyAO();\n"),
            e.occludeSpecular && (c += "    occludeSpecular();\n")),
            !1 === e.opacityFadesSpecular && (2 !== e.blendType && 4 !== e.blendType || (c += "float specLum = dot((dSpecularLight + dReflection.rgb * dReflection.a) * dSpecularity, vec3( 0.2126, 0.7152, 0.0722 ));\n",
            c += "#ifdef CLEARCOAT\n specLum += dot(ccSpecularLight * ccSpecularity + ccReflection.rgb * ccReflection.a * ccSpecularity, vec3( 0.2126, 0.7152, 0.0722 ));\n#endif\n",
            c += "dAlpha = clamp(dAlpha + gammaCorrectInput(specLum), 0.0, 1.0);\n"),
            c += "dAlpha *= material_alphaFade;\n"),
            c += f.endPS,
            2 === e.blendType || 6 === e.blendType || e.alphaToCoverage ? c += f.outputAlphaPS : 4 === e.blendType ? c += f.outputAlphaPremulPS : c += f.outputAlphaOpaquePS,
            e.msdf && (c += "   gl_FragColor = applyMsdf(gl_FragColor);\n"),
            c += "\n",
            c += "}\n",
            lt && (c = f.lightDirPointPS + c),
            ct && (c = f.falloffLinearPS + c),
            ut && (c = f.falloffInvSquaredPS + c),
            dt && (c = f.spotPS + c),
            ft && (c = f.cookiePS + c);
            var wt = "";
            return c.includes("dReflection") && (wt += "vec4 dReflection;\n"),
            c.includes("dTBN") && (wt += "mat3 dTBN;\n"),
            c.includes("dAlbedo") && (wt += "vec3 dAlbedo;\n"),
            c.includes("dEmission") && (wt += "vec3 dEmission;\n"),
            c.includes("dNormalW") && (wt += "vec3 dNormalW;\n"),
            c.includes("dVertexNormalW") && (wt += "vec3 dVertexNormalW;\n"),
            c.includes("dTangentW") && (wt += "vec3 dTangentW;\n"),
            c.includes("dBinormalW") && (wt += "vec3 dBinormalW;\n"),
            c.includes("dViewDirW") && (wt += "vec3 dViewDirW;\n"),
            c.includes("dReflDirW") && (wt += "vec3 dReflDirW;\n"),
            c.includes("dDiffuseLight") && (wt += "vec3 dDiffuseLight;\n"),
            c.includes("dSpecularLight") && (wt += "vec3 dSpecularLight;\n"),
            c.includes("dLightDirNormW") && (wt += "vec3 dLightDirNormW;\n"),
            c.includes("dLightDirW") && (wt += "vec3 dLightDirW;\n"),
            c.includes("dLightPosW") && (wt += "vec3 dLightPosW;\n"),
            c.includes("dShadowCoord") && (wt += "vec3 dShadowCoord;\n"),
            c.includes("dNormalMap") && (wt += "vec3 dNormalMap;\n"),
            c.includes("dSpecularity") && (wt += "vec3 dSpecularity;\n"),
            c.includes("dSpecularityNoFres") && (wt += "vec3 dSpecularityNoFres;\n"),
            c.includes("dUvOffset") && (wt += "vec2 dUvOffset;\n"),
            c.includes("dGlossiness") && (wt += "float dGlossiness;\n"),
            c.includes("dAlpha") && (wt += "float dAlpha;\n"),
            c.includes("dAtten") && (wt += "float dAtten;\n"),
            c.includes("dAttenD") && (wt += "float dAttenD;\n"),
            c.includes("dAtten3") && (wt += "vec3 dAtten3;\n"),
            c.includes("dAo") && (wt += "float dAo;\n"),
            c.includes("dMsdf") && (wt += "vec4 dMsdf;\n"),
            c.includes("ccReflection") && (wt += "vec4 ccReflection;\n"),
            c.includes("ccNormalW") && (wt += "vec3 ccNormalW;\n"),
            c.includes("ccReflDirW") && (wt += "vec3 ccReflDirW;\n"),
            c.includes("ccSpecularLight") && (wt += "vec3 ccSpecularLight;\n"),
            c.includes("ccSpecularity") && (wt += "float ccSpecularity;\n"),
            c.includes("ccSpecularityNoFres") && (wt += "float ccSpecularityNoFres;\n"),
            c.includes("ccGlossiness") && (wt += "float ccGlossiness;\n"),
            {
                attributes: p,
                vshader: k,
                fshader: c = B + wt + c,
                tag: 1
            }
        }
    }
      , In = {
        begin: ui,
        dummyFragmentCode: ci,
        end: di,
        fogCode: ri,
        gammaCode: si,
        precisionCode: hi,
        skinCode: oi,
        tonemapCode: ai,
        versionCode: li,
        basic: _i,
        particle: gi,
        skybox: vi,
        standard: Rn
    };
    function Ln(t, e, i, n) {
        var s = e.fixCubemapSeams ? ni.fixCubemapSeamsStretchPS : ni.fixCubemapSeamsNonePS
          , a = mi(t, ni.fullscreenQuadVS, s + ni.genParaboloidPS, "genParaboloid")
          , r = t.scope.resolve("source")
          , o = t.scope.resolve("params")
          , h = new Float32Array(4)
          , l = e.width
          , c = e.format;
        l = 2 * Math.max(l, 8);
        var u = new Mi(t,{
            type: e.type,
            format: c,
            width: 2 * l,
            height: l,
            mipmaps: !1
        });
        u.name = "paraboloid";
        var d = new ms({
            colorBuffer: u,
            depth: !1
        });
        return h[0] = i,
        h[1] = n ? -1 : 1,
        r.setValue(e),
        o.setValue(h),
        ei(t, d, a),
        u
    }
    function Dn(t, e) {
        t.x = .5 * it.clamp(e - 2, 0, 1);
        var i = e - 6 * t.x
          , n = 1 - t.x;
        return t.y = Math.min(.5 * i, .75) * n + t.x,
        t.z = (1 - .5 * it.clamp(i, 0, 1)) * n,
        t.w = .5 * t.z,
        1 / t.z
    }
    var kn = function() {
        function t() {}
        return t.get = function(t) {
            var e = this.cache.get(t);
            return e || ((e = new qn).name = "Default Material",
            e.shadingModel = 1,
            this.cache.set(t, e)),
            e
        }
        ,
        t.remove = function(t) {
            this.cache.delete(t)
        }
        ,
        t
    }();
    kn.cache = new Map;
    var On = 0
      , Fn = function() {
        function t() {
            this.name = "Untitled",
            this.id = On++,
            this._shader = null,
            this.variants = {},
            this.parameters = {},
            this.alphaTest = 0,
            this.alphaToCoverage = !1,
            this.blend = !1,
            this.blendSrc = 1,
            this.blendDst = 0,
            this.blendEquation = 0,
            this.separateAlphaBlend = !1,
            this.blendSrcAlpha = 1,
            this.blendDstAlpha = 0,
            this.blendAlphaEquation = 0,
            this.cull = 1,
            this.depthTest = !0,
            this.depthWrite = !0,
            this.stencilFront = null,
            this.stencilBack = null,
            this.depthBias = 0,
            this.slopeDepthBias = 0,
            this.redWrite = !0,
            this.greenWrite = !0,
            this.blueWrite = !0,
            this.alphaWrite = !0,
            this.meshInstances = [],
            this._shaderVersion = 0,
            this._scene = null,
            this._dirtyBlend = !1,
            this.dirty = !0
        }
        var e = t.prototype;
        return e._cloneInternal = function(t) {
            t.name = this.name,
            t.shader = this.shader,
            t.alphaTest = this.alphaTest,
            t.alphaToCoverage = this.alphaToCoverage,
            t.blend = this.blend,
            t.blendSrc = this.blendSrc,
            t.blendDst = this.blendDst,
            t.blendEquation = this.blendEquation,
            t.separateAlphaBlend = this.separateAlphaBlend,
            t.blendSrcAlpha = this.blendSrcAlpha,
            t.blendDstAlpha = this.blendDstAlpha,
            t.blendAlphaEquation = this.blendAlphaEquation,
            t.cull = this.cull,
            t.depthTest = this.depthTest,
            t.depthWrite = this.depthWrite,
            t.depthBias = this.depthBias,
            t.slopeDepthBias = this.slopeDepthBias,
            this.stencilFront && (t.stencilFront = this.stencilFront.clone()),
            this.stencilBack && (this.stencilFront === this.stencilBack ? t.stencilBack = t.stencilFront : t.stencilBack = this.stencilBack.clone()),
            t.redWrite = this.redWrite,
            t.greenWrite = this.greenWrite,
            t.blueWrite = this.blueWrite,
            t.alphaWrite = this.alphaWrite
        }
        ,
        e.clone = function() {
            var e = new t;
            return this._cloneInternal(e),
            e
        }
        ,
        e._updateMeshInstanceKeys = function() {
            for (var t = this.meshInstances, e = 0; e < t.length; e++)
                t[e].updateKey()
        }
        ,
        e.updateUniforms = function(t, e) {}
        ,
        e.updateShader = function(t, e, i) {}
        ,
        e.update = function() {
            this.dirty = !0,
            this._shader && (this._shader.failed = !1)
        }
        ,
        e.clearParameters = function() {
            this.parameters = {}
        }
        ,
        e.getParameters = function() {
            return this.parameters
        }
        ,
        e.clearVariants = function() {
            this.variants = {};
            for (var t = 0; t < this.meshInstances.length; t++)
                for (var e = this.meshInstances[t], i = 0; i < e._shader.length; i++)
                    e._shader[i] = null
        }
        ,
        e.getParameter = function(t) {
            return this.parameters[t]
        }
        ,
        e.setParameter = function(t, e) {
            if (void 0 === e && "object" == typeof t) {
                var i = t;
                if (i.length) {
                    for (var n = 0; n < i.length; n++)
                        this.setParameter(i[n]);
                    return
                }
                t = i.name,
                e = i.value
            }
            var s = this.parameters[t];
            s ? s.data = e : this.parameters[t] = {
                scopeId: null,
                data: e
            }
        }
        ,
        e.deleteParameter = function(t) {
            this.parameters[t] && delete this.parameters[t]
        }
        ,
        e.setParameters = function(t, e) {
            var i = this.parameters;
            for (var n in void 0 === e && (e = i),
            e) {
                var s = i[n];
                s && (s.scopeId || (s.scopeId = t.scope.resolve(n)),
                s.scopeId.setValue(s.data))
            }
        }
        ,
        e.destroy = function() {
            this.variants = {},
            this.shader = null;
            for (var t = 0; t < this.meshInstances.length; t++) {
                for (var e = this.meshInstances[t], i = 0; i < e._shader.length; i++)
                    e._shader[i] = null;
                e._material = null;
                var n = kn.get(e.mesh.device);
                this !== n && (e.material = n)
            }
        }
        ,
        e.addMeshInstanceRef = function(t) {
            this.meshInstances.push(t)
        }
        ,
        e.removeMeshInstanceRef = function(t) {
            var e = this.meshInstances
              , i = e.indexOf(t);
            -1 !== i && e.splice(i, 1)
        }
        ,
        G(t, [{
            key: "shader",
            get: function() {
                return this._shader
            },
            set: function(t) {
                this._shader = t
            }
        }, {
            key: "blendType",
            get: function() {
                return this.blend || 1 !== this.blendSrc || 0 !== this.blendDst || 0 !== this.blendEquation ? this.blend && 6 === this.blendSrc && 8 === this.blendDst && 0 === this.blendEquation ? 2 : this.blend && 1 === this.blendSrc && 1 === this.blendDst && 0 === this.blendEquation ? 1 : this.blend && 6 === this.blendSrc && 1 === this.blendDst && 0 === this.blendEquation ? 6 : this.blend && 4 === this.blendSrc && 2 === this.blendDst && 0 === this.blendEquation ? 7 : this.blend && 5 === this.blendSrc && 1 === this.blendDst && 0 === this.blendEquation ? 8 : this.blend && 1 === this.blendSrc && 1 === this.blendDst && 3 === this.blendEquation ? 9 : this.blend && 1 === this.blendSrc && 1 === this.blendDst && 4 === this.blendEquation ? 10 : this.blend && 4 === this.blendSrc && 0 === this.blendDst && 0 === this.blendEquation ? 5 : this.blend && 1 === this.blendSrc && 8 === this.blendDst && 0 === this.blendEquation ? 4 : 2 : 3
            },
            set: function(t) {
                var e = this.blend;
                switch (t) {
                case 3:
                    this.blend = !1,
                    this.blendSrc = 1,
                    this.blendDst = 0,
                    this.blendEquation = 0;
                    break;
                case 2:
                    this.blend = !0,
                    this.blendSrc = 6,
                    this.blendDst = 8,
                    this.blendEquation = 0;
                    break;
                case 4:
                    this.blend = !0,
                    this.blendSrc = 1,
                    this.blendDst = 8,
                    this.blendEquation = 0;
                    break;
                case 1:
                    this.blend = !0,
                    this.blendSrc = 1,
                    this.blendDst = 1,
                    this.blendEquation = 0;
                    break;
                case 6:
                    this.blend = !0,
                    this.blendSrc = 6,
                    this.blendDst = 1,
                    this.blendEquation = 0;
                    break;
                case 7:
                    this.blend = !0,
                    this.blendSrc = 4,
                    this.blendDst = 2,
                    this.blendEquation = 0;
                    break;
                case 8:
                    this.blend = !0,
                    this.blendSrc = 5,
                    this.blendDst = 1,
                    this.blendEquation = 0;
                    break;
                case 5:
                    this.blend = !0,
                    this.blendSrc = 4,
                    this.blendDst = 0,
                    this.blendEquation = 0;
                    break;
                case 9:
                    this.blend = !0,
                    this.blendSrc = 1,
                    this.blendDst = 1,
                    this.blendEquation = 3;
                    break;
                case 10:
                    this.blend = !0,
                    this.blendSrc = 1,
                    this.blendDst = 1,
                    this.blendEquation = 4
                }
                e !== this.blend && (this._scene ? this._scene.layers._dirtyBlend = !0 : this._dirtyBlend = !0),
                this._updateMeshInstanceKeys()
            }
        }]),
        t
    }()
      , Bn = function(t, e) {
        if (t.length !== e.length)
            return !1;
        for (var i = 0; i < t.length; ++i)
            if (t[i] !== e[i])
                return !1;
        return !0
    }
      , Nn = function() {
        function t() {
            this._mapXForms = null
        }
        var e = t.prototype;
        return e.updateMinRef = function(t, e, i, n, s, a, r, o, h) {
            this._updateSharedOptions(t, n, s, r),
            this._updateMinOptions(t, n),
            this._updateUVOptions(t, n, s, !0)
        }
        ,
        e.updateRef = function(t, e, i, n, s, a, r, o, h) {
            this._updateSharedOptions(t, n, s, r),
            t.useTexCubeLod = e.useTexCubeLod,
            this._updateEnvOptions(t, e, n, i, h),
            this._updateMaterialOptions(t, n),
            1 === r && (t.gamma && (t.gamma = 3),
            t.toneMap = 0),
            t.hasTangents = s && n.normalMap && 0 != (512 & s),
            this._updateLightOptions(t, n, s, o, a),
            this._updateUVOptions(t, n, s, !1)
        }
        ,
        e._updateSharedOptions = function(t, e, i, n) {
            t.pass = n,
            t.alphaTest = e.alphaTest > 0,
            t.forceFragmentPrecision = e.forceFragmentPrecision || "",
            t.chunks = e.chunks || "",
            t.blendType = e.blendType,
            t.forceUv1 = e.forceUv1,
            t.separateAmbient = !1,
            t.screenSpace = i && 0 != (i & Lt),
            t.skin = i && 0 != (2 & i),
            t.useInstancing = i && 0 != (32 & i),
            t.useMorphPosition = i && 0 != (i & Dt),
            t.useMorphNormal = i && 0 != (i & kt),
            t.useMorphTextureBased = i && 0 != (i & Ot),
            t.nineSlicedMode = e.nineSlicedMode || 0
        }
        ,
        e._updateUVOptions = function(t, e, i, n) {
            var s = !1
              , a = !1
              , r = !1;
            for (var o in i && (s = 0 != (4 & i),
            a = 0 != (8 & i),
            r = 0 != (16 & i)),
            t.vertexColors = !1,
            this._mapXForms = [],
            Pn)
                this._updateTexOptions(t, e, o, s, a, r, n);
            this._mapXForms = null
        }
        ,
        e._updateMinOptions = function(t, e) {
            t.opacityTint = 1 !== e.opacity && 3 !== e.blendType,
            t.lights = []
        }
        ,
        e._updateMaterialOptions = function(t, e) {
            var i = 1 === e.diffuse.r && 1 === e.diffuse.g && 1 === e.diffuse.b || !e.diffuseTint && (e.diffuseMap || e.diffuseVertexColor) ? 0 : 3
              , n = !1
              , s = !!(e.useMetalness || e.specularMap || e.sphereMap || e.cubeMap || e.dpAtlas);
            (s = (s = (s = s || !!e.useMetalness || !(0 === e.specular.r && 0 === e.specular.g && 0 === e.specular.b)) || e.enableGGXSpecular) || e.clearCoat > 0) && (!e.specularTint && (e.specularMap || e.specularVertexColor) || e.useMetalness || (n = 1 !== e.specular.r || 1 !== e.specular.g || 1 !== e.specular.b));
            var a = e.emissiveMap ? 0 : 3;
            a || (a = (a = (1 !== e.emissive.r || 1 !== e.emissive.g || 1 !== e.emissive.b || 1 !== e.emissiveIntensity) && e.emissiveTint) ? 3 : 1 !== e.emissiveIntensity ? 1 : 0);
            var r = !!e.normalMap && (e.normalMap.format === Yt || e.normalMap.type === Ue);
            t.opacityTint = 1 !== e.opacity && 3 !== e.blendType ? 1 : 0,
            t.blendMapsWithColors = !0,
            t.ambientTint = e.ambientTint,
            t.diffuseTint = i,
            t.specularTint = n ? 3 : 0,
            t.metalnessTint = e.useMetalness && e.metalness < 1 ? 1 : 0,
            t.glossTint = 1,
            t.emissiveTint = a,
            t.alphaToCoverage = e.alphaToCoverage,
            t.normalizeNormalMap = e.normalizeNormalMap,
            t.sphereMap = !!e.sphereMap,
            t.cubeMap = !!e.cubeMap,
            t.dpAtlas = !!e.dpAtlas,
            t.ambientSH = !!e.ambientSH,
            t.useSpecular = s,
            t.emissiveFormat = e.emissiveMap ? e.emissiveMap.type === Be ? 1 : e.emissiveMap.format === Qt ? 2 : 0 : null,
            t.lightMapFormat = e.lightMap ? e.lightMap.type === Be ? 1 : e.lightMap.format === Qt ? 2 : 0 : null,
            t.specularAntialias = e.specularAntialias && !!e.normalMap && !!e.normalMap.mipmaps && !r,
            t.conserveEnergy = e.conserveEnergy,
            t.opacityFadesSpecular = e.opacityFadesSpecular,
            t.alphaFade = e.alphaFade,
            t.occludeSpecular = e.occludeSpecular,
            t.occludeSpecularFloat = 1 !== e.occludeSpecularIntensity,
            t.occludeDirect = e.occludeDirect,
            t.shadingModel = e.shadingModel,
            t.fresnelModel = e.fresnelModel,
            t.packedNormal = r,
            t.fastTbn = e.fastTbn,
            t.cubeMapProjection = e.cubeMapProjection,
            t.customFragmentShader = e.customFragmentShader,
            t.refraction = !!e.refraction,
            t.useMetalness = e.useMetalness,
            t.enableGGXSpecular = e.enableGGXSpecular,
            t.msdf = !!e.msdfMap,
            t.twoSidedLighting = e.twoSidedLighting,
            t.pixelSnap = e.pixelSnap,
            t.aoMapUv = e.aoUvSet,
            t.diffuseDetail = !!e.diffuseMap,
            t.normalDetail = !!e.normalMap,
            t.diffuseDetailMode = e.diffuseDetailMode,
            t.detailModes = !!t.diffuseDetail,
            t.clearCoat = !!e.clearCoat,
            t.clearCoatTint = 1 !== e.clearCoat ? 1 : 0,
            t.clearCoatGlossiness = !!e.clearCoatGlossiness,
            t.clearCoatGlossTint = 1 !== e.clearCoatGlossiness ? 1 : 0
        }
        ,
        e._updateEnvOptions = function(t, e, i, n, s) {
            var a, r = s && s.type === Be || i.cubeMap && i.cubeMap.type === Be || i.dpAtlas && i.dpAtlas.type === Be, o = s && (s.type === Be || s.format === Qt) || i.cubeMap && (i.cubeMap.type === Be || i.cubeMap.format === Qt) || i.dpAtlas && (i.dpAtlas.type === Be || i.dpAtlas.format === Qt), h = s && !i.cubeMap && !i.sphereMap && !i.dpAtlas && s.type === Be || i.cubeMap && i.cubeMap.type === Be || i.sphereMap && i.sphereMap.type === Be || i.dpAtlas && i.dpAtlas.type === Be, l = !(!s || i.cubeMap || i.sphereMap || i.dpAtlas) && (s.type === Be || s.format === Qt) || i.cubeMap && (i.cubeMap.type === Be || i.cubeMap.format === Qt) || i.sphereMap && (i.sphereMap.type === Be || i.sphereMap.format === Qt) || i.dpAtlas && (i.dpAtlas.type === Be || i.dpAtlas.format === Qt);
            i.useSkybox && n._skyboxPrefiltered && (a = n._skyboxPrefiltered[0]),
            t.fog = i.useFog ? n.fog : "none",
            t.gamma = i.useGammaTonemap ? n.gammaCorrection : 0,
            t.toneMap = i.useGammaTonemap ? n.toneMapping : -1,
            t.rgbmAmbient = r,
            t.hdrAmbient = o,
            t.rgbmReflection = h,
            t.hdrReflection = l,
            t.useRgbm = h || r || i.emissiveMap && i.emissiveMap.type === Be || i.lightMap && i.lightMap.type === Be,
            t.fixSeams = s ? s.fixCubemapSeams : !!i.cubeMap && i.cubeMap.fixCubemapSeams,
            t.prefilteredCubemap = !!s,
            t.skyboxIntensity = s && a && s === a && 1 !== n.skyboxIntensity,
            t.useCubeMapRotation = !i.cubeMap && !i.prefilteredCubeMap128 && i.useSkybox && n && n.skyboxRotation && !n.skyboxRotation.equals(yt.IDENTITY),
            t.useRightHandedCubeMap = i.cubeMap ? i.cubeMap._isRenderTarget : !i.prefilteredCubeMap128 && i.useSkybox && n && n._skyboxIsRenderTarget,
            xn.clusteredLightingEnabled && n.layers && (t.clusteredLightingCookiesEnabled = n.layers.clusteredLightingCookiesEnabled,
            t.clusteredLightingShadowsEnabled = n.layers.clusteredLightingShadowsEnabled,
            t.clusteredLightingAreaLightsEnabled = n.layers.clusteredLightingAreaLightsEnabled)
        }
        ,
        e._updateLightOptions = function(t, e, i, n, s) {
            if (t.lightMap = !1,
            t.lightMapChannel = "",
            t.lightMapUv = 0,
            t.lightMapTransform = 0,
            t.lightMapWithoutAmbient = !1,
            t.dirLightMap = !1,
            i && (t.noShadow = 0 != (1 & i),
            0 != (64 & i) && (t.lightMapFormat = 1,
            t.lightMap = !0,
            t.lightMapChannel = "rgb",
            t.lightMapUv = 1,
            t.lightMapTransform = 0,
            t.lightMapWithoutAmbient = !e.lightMap,
            t.useRgbm = !0,
            0 != (i & It) && (t.dirLightMap = !0),
            0 != (i & Ft) && (t.lightMapWithoutAmbient = !1))),
            e.useLighting) {
                var a = []
                  , r = i ? i >> 16 : 1;
                n && (this._collectLights(0, n[0], a, r),
                this._collectLights(1, n[1], a, r, s),
                this._collectLights(2, n[2], a, r, s)),
                t.lights = a
            } else
                t.lights = [];
            0 === t.lights.length && (t.noShadow = !0)
        }
        ,
        e._updateTexOptions = function(t, e, i, n, s, a, r) {
            var o = i + "Map"
              , h = i + "VertexColor"
              , l = i + "VertexColorChannel"
              , c = o + "Channel"
              , u = o + "Transform"
              , d = o + "Uv";
            "light" !== i && (t[o] = !1,
            t[c] = "",
            t[u] = 0,
            t[d] = 0),
            t[h] = !1,
            t[l] = "";
            var f = "opacity" === i;
            if (f && 3 === e.blendType && 0 === e.alphaTest && !e.alphaToCoverage)
                return t;
            if ((!r || f) && ("height" !== i && e[h] && a && (t[h] = e[h],
            t[l] = e[l],
            t.vertexColors = !0),
            e[o])) {
                var p = !0;
                0 !== e[d] || n || (p = !1),
                1 !== e[d] || s || (p = !1),
                p && (t[o] = !!e[o],
                t[u] = this._getMapTransformID(e.getUniform(u), e[d]),
                t[c] = e[c],
                t[d] = e[d])
            }
        }
        ,
        e._collectLights = function(t, e, i, n, s) {
            for (var a = 0; a < e.length; a++) {
                var r = e[a];
                if (r.enabled && r.mask & n) {
                    if (0 !== t && r.isStatic)
                        continue;
                    i.push(r)
                }
            }
            if (s)
                for (var o = 0; o < s.length; o++) {
                    var h = s[o];
                    h._type === t && i.push(h)
                }
        }
        ,
        e._getMapTransformID = function(t, e) {
            if (!t)
                return 0;
            var i = this._mapXForms[e];
            i || (i = [],
            this._mapXForms[e] = i);
            for (var n = 0; n < i.length; n++)
                if (Bn(i[n][0].value, t[0].value) && Bn(i[n][1].value, t[1].value))
                    return n + 1;
            return i.push(t)
        }
        ,
        t
    }()
      , Un = {
        name: "string",
        chunks: "chunks",
        mappingFormat: "string",
        _engine: "boolean",
        ambient: "rgb",
        ambientTint: "boolean",
        aoVertexColor: "boolean",
        aoVertexColorChannel: "string",
        aoMap: "texture",
        aoMapChannel: "string",
        aoMapUv: "number",
        aoMapTiling: "vec2",
        aoMapOffset: "vec2",
        aoMapRotation: "number",
        diffuse: "rgb",
        diffuseTint: "boolean",
        diffuseVertexColor: "boolean",
        diffuseVertexColorChannel: "string",
        diffuseMap: "texture",
        diffuseMapChannel: "string",
        diffuseMapUv: "number",
        diffuseMapTiling: "vec2",
        diffuseMapOffset: "vec2",
        diffuseMapRotation: "number",
        diffuseDetailMap: "texture",
        diffuseDetailMapChannel: "string",
        diffuseDetailMapUv: "number",
        diffuseDetailMapTiling: "vec2",
        diffuseDetailMapOffset: "vec2",
        diffuseDetailMapRotation: "number",
        diffuseDetailMode: "string",
        specular: "rgb",
        specularTint: "boolean",
        specularVertexColor: "boolean",
        specularVertexColorChannel: "string",
        specularMap: "texture",
        specularMapChannel: "string",
        specularMapUv: "number",
        specularMapTiling: "vec2",
        specularMapOffset: "vec2",
        specularMapRotation: "number",
        specularAntialias: "boolean",
        occludeSpecular: "enum:occludeSpecular",
        useMetalness: "boolean",
        metalness: "number",
        enableGGXSpecular: "boolean",
        anisotropy: "number",
        metalnessTint: "boolean",
        metalnessVertexColor: "boolean",
        metalnessVertexColorChannel: "string",
        metalnessMap: "texture",
        metalnessMapChannel: "string",
        metalnessMapUv: "number",
        metalnessMapTiling: "vec2",
        metalnessMapOffset: "vec2",
        netalnessMapRotation: "number",
        conserveEnergy: "boolean",
        shininess: "number",
        glossVertexColor: "boolean",
        glossVertexColorChannel: "string",
        glossMap: "texture",
        glossMapChannel: "string",
        glossMapUv: "number",
        glossMapTiling: "vec2",
        glossMapOffset: "vec2",
        glossMapRotation: "number",
        clearCoat: "number",
        clearCoatVertexColor: "boolean",
        clearCoatVertexColorChannel: "string",
        clearCoatMap: "texture",
        clearCoatMapChannel: "string",
        clearCoatMapUv: "number",
        clearCoatMapTiling: "vec2",
        clearCoatMapOffset: "vec2",
        clearCoatMapRotation: "number",
        clearCoatGlossiness: "number",
        clearCoatGlossVertexColor: "boolean",
        clearCoatGlossVertexColorChannel: "string",
        clearCoatGlossMap: "texture",
        clearCoatGlossMapChannel: "string",
        clearCoatGlossMapUv: "number",
        clearCoatGlossMapTiling: "vec2",
        clearCoatGlossMapOffset: "vec2",
        clearCoatGlossMapRotation: "number",
        clearCoatBumpiness: "number",
        clearCoatNormalMap: "texture",
        clearCoatNormalMapUv: "number",
        clearCoatNormalMapTiling: "vec2",
        clearCoatNormalMapOffset: "vec2",
        clearCoatNormalMapRotation: "number",
        fresnelModel: "number",
        emissive: "rgb",
        emissiveTint: "boolean",
        emissiveVertexColor: "boolean",
        emissiveVertexColorChannel: "string",
        emissiveMap: "texture",
        emissiveMapChannel: "string",
        emissiveMapUv: "number",
        emissiveMapTiling: "vec2",
        emissiveMapOffset: "vec2",
        emissiveMapMapRotation: "number",
        emissiveIntensity: "number",
        normalMap: "texture",
        normalMapTiling: "vec2",
        normalMapOffset: "vec2",
        normalMapRotation: "number",
        normalMapUv: "number",
        bumpiness: "number",
        normalDetailMap: "texture",
        normalDetailMapTiling: "vec2",
        normalDetailMapOffset: "vec2",
        normalDetailMapRotation: "number",
        normalDetailMapUv: "number",
        normalDetailMapBumpiness: "number",
        heightMap: "texture",
        heightMapChannel: "string",
        heightMapUv: "number",
        heightMapTiling: "vec2",
        heightMapOffset: "vec2",
        heightMapRotation: "number",
        heightMapFactor: "number",
        alphaToCoverage: "boolean",
        alphaTest: "number",
        alphaFade: "number",
        opacity: "number",
        opacityVertexColor: "boolean",
        opacityVertexColorChannel: "string",
        opacityMap: "texture",
        opacityMapChannel: "string",
        opacityMapUv: "number",
        opacityMapTiling: "vec2",
        opacityMapOffset: "vec2",
        opacityMapRotation: "number",
        opacityFadesSpecular: "boolean",
        reflectivity: "number",
        refraction: "number",
        refractionIndex: "number",
        sphereMap: "texture",
        cubeMap: "cubemap",
        cubeMapProjection: "number",
        cubeMapProjectionBox: "boundingbox",
        lightVertexColor: "boolean",
        lightVertexColorChannel: "string",
        lightMap: "texture",
        lightMapChannel: "string",
        lightMapUv: "number",
        lightMapTiling: "vec2",
        lightMapOffset: "vec2",
        lightMapRotation: "number",
        depthTest: "boolean",
        depthWrite: "boolean",
        depthBias: "number",
        slopeDepthBias: "number",
        cull: "enum:cull",
        blendType: "enum:blendType",
        shadingModel: "enum:shadingModel",
        useFog: "boolean",
        useLighting: "boolean",
        useSkybox: "boolean",
        useGammaTonemap: "boolean",
        prefilteredCubeMap128: "texture",
        prefilteredCubeMap64: "texture",
        prefilteredCubeMap32: "texture",
        prefilteredCubeMap16: "texture",
        prefilteredCubeMap8: "texture",
        prefilteredCubeMap4: "texture"
    }
      , zn = [];
    for (var Vn in Un) {
        "texture" === Un[Vn] && zn.push(Vn)
    }
    var Gn = [];
    for (var Wn in Un) {
        "cubemap" === Un[Wn] && Gn.push(Wn)
    }
    var Hn = {}
      , Xn = {}
      , jn = new Set
      , qn = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this)._dirtyShader = !0,
            e._assetReferences = {},
            e._validator = null,
            e._activeParams = new Set,
            e._activeLightingParams = new Set,
            e.shaderOptBuilder = new Nn,
            e.reset(),
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.reset = function() {
            var t = this;
            Object.keys(Hn).forEach((function(e) {
                t["_" + e] = Hn[e].value()
            }
            )),
            this._chunks = {},
            this._uniformCache = {}
        }
        ,
        i.clone = function() {
            var t = this
              , i = new e;
            for (var n in this._cloneInternal(i),
            Object.keys(Hn).forEach((function(e) {
                i[e] = t[e]
            }
            )),
            this._chunks)
                this._chunks.hasOwnProperty(n) && (i._chunks[n] = this._chunks[n]);
            return i
        }
        ,
        i._setParameter = function(t, e) {
            jn.add(t),
            this.setParameter(t, e)
        }
        ,
        i._setParameters = function(t) {
            var e = this;
            t.forEach((function(t) {
                e._setParameter(t.name, t.value)
            }
            ))
        }
        ,
        i._processParameters = function(t) {
            var e = this
              , i = this[t];
            i.forEach((function(t) {
                jn.has(t) || delete e.parameters[t]
            }
            )),
            this[t] = jn,
            (jn = i).clear()
        }
        ,
        i._updateMap = function(t) {
            var e = t + "Map"
              , i = this[e];
            if (i) {
                this._setParameter("texture_" + e, i);
                var n = e + "Transform"
                  , s = this.getUniform(n);
                s && this._setParameters(s)
            }
        }
        ,
        i._allocUniform = function(t, e) {
            var i = this._uniformCache[t];
            return i || (i = e(),
            this._uniformCache[t] = i),
            i
        }
        ,
        i.getUniform = function(t, e, i) {
            return Xn[t](this, e, i)
        }
        ,
        i.updateUniforms = function(t, e) {
            var i = this
              , n = function(n) {
                return i.getUniform(n, t, e)
            };
            for (var s in this._setParameter("material_ambient", n("ambient")),
            this.diffuseMap && !this.diffuseTint || this._setParameter("material_diffuse", n("diffuse")),
            this.useMetalness ? (!this.metalnessMap || this.metalness < 1) && this._setParameter("material_metalness", this.metalness) : this.specularMap && !this.specularTint || this._setParameter("material_specular", n("specular")),
            this.enableGGXSpecular && this._setParameter("material_anisotropy", this.anisotropy),
            this.clearCoat > 0 && (this._setParameter("material_clearCoat", this.clearCoat),
            this._setParameter("material_clearCoatGlossiness", this.clearCoatGlossiness),
            this._setParameter("material_clearCoatReflectivity", this.clearCoat),
            this._setParameter("material_clearCoatBumpiness", this.clearCoatBumpiness)),
            this._setParameter("material_shininess", n("shininess")),
            this.emissiveMap && !this.emissiveTint || this._setParameter("material_emissive", n("emissive")),
            this.emissiveMap && this._setParameter("material_emissiveIntensity", this.emissiveIntensity),
            this.refraction > 0 && (this._setParameter("material_refraction", this.refraction),
            this._setParameter("material_refractionIndex", this.refractionIndex)),
            this._setParameter("material_opacity", this.opacity),
            !1 === this.opacityFadesSpecular && this._setParameter("material_alphaFade", this.alphaFade),
            this.occludeSpecular && this._setParameter("material_occludeSpecularIntensity", this.occludeSpecularIntensity),
            1 === this.cubeMapProjection && this._setParameter(n("cubeMapProjectionBox")),
            Pn)
                this._updateMap(s);
            this.ambientSH && this._setParameter("ambientSH[0]", this.ambientSH),
            this.normalMap && this._setParameter("material_bumpiness", this.bumpiness),
            this.normalMap && this.normalDetailMap && this._setParameter("material_normalDetailMapBumpiness", this.normalDetailMapBumpiness),
            this.heightMap && this._setParameter("material_heightMapFactor", n("heightMapFactor")),
            this.cubeMap && this._setParameter("texture_cubeMap", this.cubeMap),
            this.sphereMap && this._setParameter("texture_sphereMap", this.sphereMap),
            this.dpAtlas && this._setParameter("texture_sphereMap", this.dpAtlas),
            this._setParameter("material_reflectivity", this.reflectivity),
            this._processParameters("_activeParams"),
            this._dirtyShader && (this.shader = null,
            this.clearVariants())
        }
        ,
        i.updateLightingUniforms = function(t, e) {
            var i, n, s, a, r, o;
            this.useSkybox && (i = e._skyboxPrefiltered[0],
            n = e._skyboxPrefiltered[1],
            s = e._skyboxPrefiltered[2],
            a = e._skyboxPrefiltered[3],
            r = e._skyboxPrefiltered[4],
            o = e._skyboxPrefiltered[5]);
            var h = this.prefilteredCubeMap128 || i
              , l = this.prefilteredCubeMap64 || n
              , c = this.prefilteredCubeMap32 || s
              , u = this.prefilteredCubeMap16 || a
              , d = this.prefilteredCubeMap8 || r
              , f = this.prefilteredCubeMap4 || o;
            if (h) {
                var p = h && l && c && u && d && f
                  , m = !t.extTextureLod && p
                  , _ = m ? h.sh || ys(t, u) : null;
                if (m && _) {
                    if (!h.dpAtlas) {
                        var g = [h, l, c, u, d, f];
                        h.dpAtlas = function(t, e, i) {
                            var n, s = new dt, a = new Float32Array(4), r = 2 * e[0].width * 2, o = mi(t, ni.fullscreenQuadVS, ni.dpAtlasQuadPS, "dpAtlasQuad"), h = t.scope.resolve("source"), l = t.scope.resolve("params"), c = new Mi(t,{
                                type: e[0].type,
                                format: e[0].format,
                                width: r,
                                height: r,
                                mipmaps: !1
                            });
                            c.name = "paraboloid";
                            for (var u, d = new ms({
                                colorBuffer: c,
                                depth: !1
                            }), f = (r + 2) / r - 1, p = 0; p < 6; p++)
                                n = Ln(t, e[p], p, i),
                                h.setValue(n),
                                u = Dn(s, p),
                                a[0] = u * f,
                                a[1] = 2 * a[0],
                                a[0] += 1,
                                a[1] += 1,
                                l.setValue(a),
                                s.x *= r,
                                s.y *= r,
                                s.z *= r,
                                s.w *= r,
                                ei(t, d, o, s);
                            return c
                        }(t, g),
                        h.sh = _
                    }
                    this.dpAtlas = h.dpAtlas,
                    this.ambientSH = h.sh,
                    this._setParameter("ambientSH[0]", this.ambientSH),
                    this._setParameter("texture_sphereMap", this.dpAtlas)
                } else
                    t.useTexCubeLod ? h._levels.length < 6 ? p ? this._setParameter("texture_prefilteredCubeMap128", h) : console.log("Can't use prefiltered cubemap: " + p + ", " + t.useTexCubeLod + ", " + h._levels) : this._setParameter("texture_prefilteredCubeMap128", h) : p ? (this._setParameter("texture_prefilteredCubeMap128", h),
                    this._setParameter("texture_prefilteredCubeMap64", l),
                    this._setParameter("texture_prefilteredCubeMap32", c),
                    this._setParameter("texture_prefilteredCubeMap16", u),
                    this._setParameter("texture_prefilteredCubeMap8", d),
                    this._setParameter("texture_prefilteredCubeMap4", f)) : console.log("Can't use prefiltered cubemap: " + p + ", " + t.useTexCubeLod + ", " + h._levels);
                this.useSkybox && !e.skyboxRotation.equals(yt.IDENTITY) && e._skyboxRotationMat3 && this._setParameter("cubeMapRotationMatrix", e._skyboxRotationMat3.data)
            }
            this._processParameters("_activeLightingParams")
        }
        ,
        i.updateShader = function(t, e, i, n, s, a) {
            this.updateLightingUniforms(t, e);
            var r = this.prefilteredCubeMap128 || this.useSkybox && e._skyboxPrefiltered[0]
              , o = s > 1 && s <= Bt
              , h = o ? Rn.optionsContextMin : Rn.optionsContext;
            o ? this.shaderOptBuilder.updateMinRef(h, t, e, this, i, n, s, a, r) : this.shaderOptBuilder.updateRef(h, t, e, this, i, n, s, a, r),
            this.onUpdateShader && (h = this.onUpdateShader(h));
            var l = t.getProgramLibrary();
            this.shader = l.getProgram("standard", h),
            i || (this.clearVariants(),
            this.variants[0] = this.shader),
            this._dirtyShader = !1
        }
        ,
        i.destroy = function() {
            for (var e in this._assetReferences)
                this._assetReferences[e]._unbind();
            this._assetReferences = null,
            this._validator = null,
            t.prototype.destroy.call(this)
        }
        ,
        e
    }(Fn);
    qn.TEXTURE_PARAMETERS = zn,
    qn.CUBEMAP_PARAMETERS = Gn;
    var Yn = function(t, e) {
        Xn[t] = e
    }
      , Kn = function(t) {
        var e = t.name
          , i = "_" + e
          , n = t.defaultValue
          , s = t.dirtyShaderFunc || null
          , a = t.getUniformFunc || null
          , r = n && n.clone ? {
            equals: function(t, e) {
                return t.equals(e)
            },
            clone: function(t) {
                return t.clone()
            },
            copy: function(t, e) {
                return t.copy(e)
            }
        } : {
            equals: function(t, e) {
                return t === e
            },
            clone: function(t) {
                return t
            },
            copy: function(t, e) {
                return e
            }
        }
          , o = t.default instanceof at;
        Object.defineProperty(qn.prototype, e, {
            get: function() {
                return o && (this._dirtyShader = !0),
                this[i]
            },
            set: function(t) {
                var e = this[i];
                r.equals(e, t) || (this._dirtyShader || (this._dirtyShader = !s || s(e, t)),
                this[i] = r.copy(e, t))
            }
        }),
        Hn[e] = {
            value: function() {
                return r.clone(n)
            }
        },
        a && Yn(e, a)
    };
    function Zn(t, e, i, n, s, a) {
        Pn[t] = i,
        Kn({
            name: t + "Map",
            defaultValue: null,
            dirtyShaderFunc: function(t, e) {
                return !!t != !!e || t && (t.type !== e.type || t.fixCubemapSeams !== e.fixCubemapSeams || t.format !== e.format)
            }
        }),
        Kn({
            name: t + "MapTiling",
            defaultValue: new ut(1,1)
        }),
        Kn({
            name: t + "MapOffset",
            defaultValue: new ut(0,0)
        }),
        Kn({
            name: t + "MapRotation",
            defaultValue: 0
        }),
        Kn({
            name: t + "MapUv",
            defaultValue: e
        }),
        i > 0 && Kn({
            name: t + "MapChannel",
            defaultValue: n || (i > 1 ? "rgb" : "g")
        }),
        s && (Kn({
            name: t + "VertexColor",
            defaultValue: !1
        }),
        i > 0 && Kn({
            name: t + "VertexColorChannel",
            defaultValue: n || (i > 1 ? "rgb" : "g")
        })),
        a && Kn({
            name: t + "Mode",
            defaultValue: "mul"
        });
        var r = t + "MapTiling"
          , o = t + "MapOffset"
          , h = t + "MapRotation"
          , l = t + "MapTransform";
        Yn(l, (function(t, e, i) {
            var n = t[r]
              , s = t[o]
              , a = t[h];
            if (1 === n.x && 1 === n.y && 0 === s.x && 0 === s.y && 0 === a)
                return null;
            var c = t._allocUniform(l, (function() {
                return [{
                    name: "texture_" + l + "0",
                    value: new Float32Array(3)
                }, {
                    name: "texture_" + l + "1",
                    value: new Float32Array(3)
                }]
            }
            ))
              , u = Math.cos(a * it.DEG_TO_RAD)
              , d = Math.sin(a * it.DEG_TO_RAD)
              , f = c[0].value;
            f[0] = u * n.x,
            f[1] = -d * n.y,
            f[2] = s.x;
            var p = c[1].value;
            return p[0] = d * n.x,
            p[1] = u * n.y,
            p[2] = 1 - n.y - s.y,
            c
        }
        ))
    }
    function $n(t, e, i) {
        var n = t + "Intensity";
        Kn({
            name: t,
            defaultValue: e,
            getUniformFunc: function(e, s, a) {
                var r = e._allocUniform(t, (function() {
                    return new Float32Array(3)
                }
                ))
                  , o = e[t]
                  , h = i ? e[n] : 1;
                return e.useGammaTonemap && a.gammaCorrection ? (r[0] = Math.pow(o.r, 2.2) * h,
                r[1] = Math.pow(o.g, 2.2) * h,
                r[2] = Math.pow(o.b, 2.2) * h) : (r[0] = o.r * h,
                r[1] = o.g * h,
                r[2] = o.b * h),
                r
            }
        }),
        i && Kn({
            name: n,
            defaultValue: 1
        })
    }
    function Qn(t, e, i) {
        Kn({
            name: "" + t,
            defaultValue: e,
            dirtyShaderFunc: function(t, e) {
                return (0 === t || 1 === t) != (0 === e || 1 === e)
            },
            getUniformFunc: i
        })
    }
    function Jn(t, e) {
        Kn({
            name: t,
            defaultValue: null,
            dirtyShaderFunc: function(t, e) {
                return !!t == !!e
            },
            getUniformFunc: e
        })
    }
    function ts(t, e) {
        Object.defineProperty(qn.prototype, e, {
            get: function() {
                return this[t]
            },
            set: function(e) {
                this[t] = e
            }
        })
    }
    function es(t, e) {
        Kn({
            name: t,
            defaultValue: e
        })
    }
    $n("ambient", new at(.7,.7,.7)),
    $n("diffuse", new at(1,1,1)),
    $n("specular", new at(0,0,0)),
    $n("emissive", new at(0,0,0), !0),
    Qn("shininess", 25, (function(t, e, i) {
        return 0 === t.shadingModel ? Math.pow(2, .01 * t.shininess * 11) : .01 * t.shininess
    }
    )),
    Qn("heightMapFactor", 1, (function(t, e, i) {
        return .025 * t.heightMapFactor
    }
    )),
    Qn("opacity", 1),
    Qn("alphaFade", 1),
    Qn("alphaTest", 0),
    Qn("bumpiness", 1),
    Qn("normalDetailMapBumpiness", 1),
    Qn("reflectivity", 1),
    Qn("occludeSpecularIntensity", 1),
    Qn("refraction", 0),
    Qn("refractionIndex", 1 / 1.5),
    Qn("metalness", 1),
    Qn("anisotropy", 0),
    Qn("clearCoat", 0),
    Qn("clearCoatGlossiness", 1),
    Qn("clearCoatBumpiness", 1),
    Qn("aoUvSet", 0, null),
    Jn("ambientSH"),
    Jn("cubeMapProjectionBox", (function(t, e, i) {
        var n = t._allocUniform("cubeMapProjectionBox", (function() {
            return [{
                name: "envBoxMin",
                value: new Float32Array(3)
            }, {
                name: "envBoxMax",
                value: new Float32Array(3)
            }]
        }
        ))
          , s = t.cubeMapProjectionBox.getMin()
          , a = n[0].value;
        a[0] = s.x,
        a[1] = s.y,
        a[2] = s.z;
        var r = t.cubeMapProjectionBox.getMax()
          , o = n[1].value;
        return o[0] = r.x,
        o[1] = r.y,
        o[2] = r.z,
        n
    }
    )),
    Object.defineProperty(qn.prototype, "chunks", {
        get: function() {
            return this._dirtyShader = !0,
            this._chunks
        },
        set: function(t) {
            this._dirtyShader = !0,
            this._chunks = t
        }
    }),
    es("ambientTint", !1),
    es("diffuseTint", !1),
    es("specularTint", !1),
    es("emissiveTint", !1),
    es("fastTbn", !1),
    es("specularAntialias", !1),
    es("useMetalness", !1),
    es("enableGGXSpecular", !1),
    es("occludeDirect", !1),
    es("normalizeNormalMap", !0),
    es("conserveEnergy", !0),
    es("opacityFadesSpecular", !0),
    es("occludeSpecular", 1),
    es("shadingModel", 1),
    es("fresnelModel", 2),
    es("cubeMapProjection", 0),
    es("customFragmentShader", null),
    es("forceFragmentPrecision", null),
    es("useFog", !0),
    es("useLighting", !0),
    es("useGammaTonemap", !0),
    es("useSkybox", !0),
    es("forceUv1", !1),
    es("pixelSnap", !1),
    es("twoSidedLighting", !1),
    es("nineSlicedMode", void 0),
    Zn("diffuse", 0, 3, "", !0),
    Zn("specular", 0, 3, "", !0),
    Zn("emissive", 0, 3, "", !0),
    Zn("normal", 0, -1, "", !1),
    Zn("metalness", 0, 1, "", !0),
    Zn("gloss", 0, 1, "", !0),
    Zn("opacity", 0, 1, "a", !0),
    Zn("height", 0, 1, "", !1),
    Zn("ao", 0, 1, "", !0),
    Zn("light", 1, 3, "", !0),
    Zn("msdf", 0, 3, "", !1),
    Zn("diffuseDetail", 0, 3, "", !1, !0),
    Zn("normalDetail", 0, -1, "", !1),
    Zn("clearCoat", 0, 1, "", !0),
    Zn("clearCoatGloss", 0, 1, "", !0),
    Zn("clearCoatNormal", 0, -1, "", !1),
    Jn("cubeMap"),
    Jn("sphereMap"),
    Jn("dpAtlas"),
    Jn("prefilteredCubeMap128"),
    Jn("prefilteredCubeMap64"),
    Jn("prefilteredCubeMap32"),
    Jn("prefilteredCubeMap16"),
    Jn("prefilteredCubeMap8"),
    Jn("prefilteredCubeMap4"),
    ts("diffuseTint", "diffuseMapTint"),
    ts("specularTint", "specularMapTint"),
    ts("emissiveTint", "emissiveMapTint"),
    ts("aoVertexColor", "aoMapVertexColor"),
    ts("diffuseVertexColor", "diffuseMapVertexColor"),
    ts("specularVertexColor", "specularMapVertexColor"),
    ts("emissiveVertexColor", "emissiveMapVertexColor"),
    ts("metalnessVertexColor", "metalnessMapVertexColor"),
    ts("glossVertexColor", "glossMapVertexColor"),
    ts("opacityVertexColor", "opacityMapVertexColor"),
    ts("lightVertexColor", "lightMapVertexColor");
    var is = function() {
        function t(t) {
            this._device = t,
            this._cache = {},
            this._generators = {},
            this._isClearingCache = !1,
            this._precached = !1,
            this._programsCollection = [],
            this._defaultStdMatOption = {},
            this._defaultStdMatOptionMin = {};
            var e = new qn;
            e.shaderOptBuilder.updateRef(this._defaultStdMatOption, t, {}, e, null, [], 0, null, null),
            e.shaderOptBuilder.updateMinRef(this._defaultStdMatOptionMin, t, {}, e, null, [], 3, null, null)
        }
        var e = t.prototype;
        return e.register = function(t, e) {
            this.isRegistered(t) || (this._generators[t] = e)
        }
        ,
        e.unregister = function(t) {
            this.isRegistered(t) && delete this._generators[t]
        }
        ,
        e.isRegistered = function(t) {
            return void 0 !== this._generators[t]
        }
        ,
        e.getProgram = function(t, e) {
            var i = this._generators[t];
            if (void 0 === i)
                return null;
            var n = this._device
              , s = i.generateKey(e)
              , a = this._cache[s];
            if (!a) {
                var r;
                e.lights && (r = e.lights,
                e.lights = r.map((function(t) {
                    var e = t.clone ? t.clone() : t;
                    return e.key = t.key,
                    e
                }
                ))),
                this.storeNewProgram(t, e),
                e.lights && (e.lights = r),
                this._precached && console.warn("ProgramLibrary#getProgram: Cache miss for shader " + t + " key " + s + " after shaders precaching");
                var o = i.createShaderDefinition(n, e);
                a = this._cache[s] = new ii(n,o)
            }
            return a
        }
        ,
        e.storeNewProgram = function(t, e) {
            var i = {};
            if ("standard" === t) {
                var n = this._getDefaultStdMatOptions(e.pass);
                for (var s in e)
                    (e.hasOwnProperty(s) && n[s] !== e[s] || "pass" === s) && (i[s] = e[s])
            } else
                i = e;
            this._programsCollection.push(JSON.stringify({
                name: t,
                options: i
            }))
        }
        ,
        e.dumpPrograms = function() {
            var t = "let device = pc.app ? pc.app.graphicsDevice : pc.Application.getApplication().graphicsDevice;\n";
            t += "let shaders = [",
            this._programsCollection[0] && (t += "\n\t" + this._programsCollection[0]);
            for (var e = 1; e < this._programsCollection.length; ++e)
                t += ",\n\t" + this._programsCollection[e];
            t += "\n];\n",
            t += "device.programLib.precompile(shaders);\n",
            t += 'if (pc.version != "1.50.2" || pc.revision != "db39f193d")\n',
            t += '\tconsole.warn("precompile-shaders.js: engine version mismatch, rebuild shaders lib with current engine");';
            var i = document.createElement("a");
            i.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(t)),
            i.setAttribute("download", "precompile-shaders.js"),
            i.style.display = "none",
            document.body.appendChild(i),
            i.click(),
            document.body.removeChild(i)
        }
        ,
        e.clearCache = function() {
            var t = this._cache;
            for (var e in this._isClearingCache = !0,
            t)
                t.hasOwnProperty(e) && t[e].destroy();
            this._cache = {},
            this._isClearingCache = !1
        }
        ,
        e.removeFromCache = function(t) {
            if (!this._isClearingCache) {
                var e = this._cache;
                for (var i in e)
                    if (e.hasOwnProperty(i) && e[i] === t) {
                        delete e[i];
                        break
                    }
            }
        }
        ,
        e._getDefaultStdMatOptions = function(t) {
            return t > 1 && t <= Bt ? this._defaultStdMatOptionMin : this._defaultStdMatOption
        }
        ,
        e.precompile = function(t) {
            if (t)
                for (var e = new Array(t.length), i = 0; i < t.length; i++) {
                    if ("standard" === t[i].name) {
                        var n = t[i].options
                          , s = this._getDefaultStdMatOptions(n.pass);
                        for (var a in s)
                            s.hasOwnProperty(a) && void 0 === n[a] && (n[a] = s[a]);
                        n.useTexCubeLod = this._device.useTexCubeLod
                    }
                    e[i] = this.getProgram(t[i].name, t[i].options)
                }
            this._precached = !0
        }
        ,
        t
    }()
      , ns = function() {
        function t() {
            this.globalId = 0,
            this.revision = 0
        }
        var e = t.prototype;
        return e.equals = function(t) {
            return this.globalId === t.globalId && this.revision === t.revision
        }
        ,
        e.copy = function(t) {
            this.globalId = t.globalId,
            this.revision = t.revision
        }
        ,
        e.reset = function() {
            this.globalId = 0,
            this.revision = 0
        }
        ,
        t
    }()
      , ss = 0
      , as = function() {
        function t() {
            ss++,
            this.version = new ns,
            this.version.globalId = ss
        }
        return t.prototype.increment = function() {
            this.version.revision++
        }
        ,
        t
    }()
      , rs = function() {
        function t(t) {
            this.name = t,
            this.value = null,
            this.versionObject = new as
        }
        var e = t.prototype;
        return e.setValue = function(t) {
            this.value = t,
            this.versionObject.increment()
        }
        ,
        e.getValue = function() {
            return this.value
        }
        ,
        t
    }()
      , os = function() {
        function t(t) {
            this.name = t,
            this.variables = new Map
        }
        var e = t.prototype;
        return e.resolve = function(t) {
            return this.variables.has(t) || this.variables.set(t, new rs(t)),
            this.variables.get(t)
        }
        ,
        e.removeValue = function(t) {
            for (var e in this.variables) {
                var i = this.variables[e];
                i.value === t && (i.value = null)
            }
        }
        ,
        t
    }()
      , hs = function(t, e, i, n) {
        if (this.locationId = n,
        this.scopeId = t.scope.resolve(e),
        this.version = new ns,
        "[0]" === e.substr(e.length - 3))
            switch (i) {
            case 2:
                i = 17;
                break;
            case 3:
                i = 21;
                break;
            case 4:
                i = 22;
                break;
            case 5:
                i = 23
            }
        this.dataType = i,
        this.value = [null, null, null, null],
        this.array = []
    }
      , ls = function() {
        function t(t, e) {
            this.device = t,
            this.useAlpha = e,
            this.useMipmaps = t.webgl2,
            this.texture = null,
            this.renderTarget = null,
            this.textureId = null
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.textureId = null,
            this.renderTarget && (this.renderTarget.destroy(),
            this.renderTarget = null),
            this.texture && (this.texture.destroy(),
            this.texture = null)
        }
        ,
        e.create = function() {
            if (!this.texture) {
                var t = new Mi(this.device,{
                    format: this.useAlpha ? 7 : 6,
                    minFilter: this.useMipmaps ? 5 : 1,
                    magFilter: 1,
                    addressU: 1,
                    addressV: 1,
                    mipmaps: this.useMipmaps
                });
                t.name = "texture_grabPass",
                this.texture = t,
                this.renderTarget = new ms({
                    colorBuffer: t,
                    depth: !1
                }),
                this.textureId = this.device.scope.resolve(t.name),
                this.textureId.setValue(t)
            }
        }
        ,
        e.update = function() {
            var t = this.device
              , e = t.gl;
            if (!t.grabPassAvailable)
                return !1;
            var i = t.renderTarget
              , n = i && i._glResolveFrameBuffer
              , s = this.texture
              , a = t.width
              , r = t.height;
            if (t.webgl2 && !t._tempMacChromeBlitFramebufferWorkaround && a === s._width && r === s._height) {
                n && i.resolve(!0);
                var o = i ? i._glFrameBuffer : null
                  , h = i ? i._glResolveFrameBuffer || i._glFrameBuffer : null;
                t.initRenderTarget(this.renderTarget);
                var l = this.renderTarget._glFrameBuffer;
                e.bindFramebuffer(e.READ_FRAMEBUFFER, h),
                e.bindFramebuffer(e.DRAW_FRAMEBUFFER, l),
                e.blitFramebuffer(0, 0, a, r, 0, 0, a, r, e.COLOR_BUFFER_BIT, e.NEAREST),
                e.bindFramebuffer(e.DRAW_FRAMEBUFFER, o)
            } else {
                n && (i.resolve(!0),
                e.bindFramebuffer(e.FRAMEBUFFER, i._glResolveFrameBuffer));
                var c = s._glFormat;
                e.copyTexImage2D(e.TEXTURE_2D, 0, c, 0, 0, a, r, 0),
                s._width = a,
                s._height = r,
                n && e.bindFramebuffer(e.FRAMEBUFFER, i._glFrameBuffer)
            }
            return !0
        }
        ,
        e.generateMipmaps = function() {
            this.useMipmaps && this.device.gl.generateMipmap(this.texture._glTarget)
        }
        ,
        e.prepareTexture = function() {
            var t = this.update();
            return t && this.generateMipmaps(),
            t
        }
        ,
        t
    }()
      , cs = "resizecanvas";
    function us(t, e) {
        var i = t.width
          , n = t.height;
        if (i > e || n > e) {
            var s = e / Math.max(i, n)
              , a = Math.floor(i * s)
              , r = Math.floor(n * s)
              , o = document.createElement("canvas");
            return o.width = a,
            o.height = r,
            o.getContext("2d").drawImage(t, 0, 0, i, n, 0, 0, a, r),
            o
        }
        return t
    }
    function ds(t, e) {
        var i = !0
          , n = t.createTexture();
        t.bindTexture(t.TEXTURE_2D, n),
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.NEAREST),
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.NEAREST),
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
        t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, 2, 2, 0, t.RGBA, e, null);
        var s = t.createFramebuffer();
        return t.bindFramebuffer(t.FRAMEBUFFER, s),
        t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0),
        t.checkFramebufferStatus(t.FRAMEBUFFER) !== t.FRAMEBUFFER_COMPLETE && (i = !1),
        t.bindTexture(t.TEXTURE_2D, null),
        t.deleteTexture(n),
        t.bindFramebuffer(t.FRAMEBUFFER, null),
        t.deleteFramebuffer(s),
        i
    }
    var fs = function(t) {
        function e(e, i) {
            var n;
            void 0 === i && (i = {}),
            (n = t.call(this) || this).canvas = e,
            n._enableAutoInstancing = !1,
            n.autoInstancingMaxObjects = 16384,
            n.defaultFramebuffer = null,
            n._maxPixelRatio = 1,
            n._width = 0,
            n._height = 0,
            n.updateClientRect(),
            n.shaders = [],
            n.buffers = [],
            n.textures = [],
            n.targets = [],
            n.contextLost = !1,
            n._contextLostHandler = function(t) {
                t.preventDefault(),
                n.contextLost = !0,
                n.loseContext(),
                n.fire("devicelost")
            }
            ,
            n._contextRestoredHandler = function() {
                n.restoreContext(),
                n.contextLost = !1,
                n.fire("devicerestored")
            }
            ;
            var a = void 0 === i.preferWebGl2 || i.preferWebGl2 ? ["webgl2", "webgl", "experimental-webgl"] : ["webgl", "experimental-webgl"]
              , r = null;
            i.stencil = !0;
            for (var o = 0; o < a.length; o++)
                if (r = e.getContext(a[o], i)) {
                    n.webgl2 = "webgl2" === a[o];
                    break
                }
            if (!r)
                throw new Error("WebGL not supported");
            var h, l, c, u, d, f = E.browser && !!window.chrome, p = E.browser && -1 !== navigator.appVersion.indexOf("Mac");
            for (var m in n.gl = r,
            n._tempEnableSafariTextureUnitWorkaround = E.browser && !!window.safari,
            n._tempMacChromeBlitFramebufferWorkaround = p && f && !i.alpha,
            n.webgl2 || function(t) {
                if (t.getSupportedExtensions) {
                    if (-1 != t.getSupportedExtensions().indexOf("OES_vertex_array_object"))
                        return
                } else if (t.getExtension && t.getExtension("OES_vertex_array_object"))
                    return;
                if (t.getSupportedExtensions) {
                    var e = t.getSupportedExtensions;
                    t.getSupportedExtensions = function() {
                        var t = e.call(this) || [];
                        return t.push("OES_vertex_array_object"),
                        t
                    }
                }
                var i = t.getExtension;
                t.getExtension = function(e) {
                    return "OES_vertex_array_object" == e ? (t.__OESVertexArrayObject || (t.__OESVertexArrayObject = new s(t)),
                    t.__OESVertexArrayObject) : i ? i.call(this, e) : null
                }
            }(r),
            e.addEventListener("webglcontextlost", n._contextLostHandler, !1),
            e.addEventListener("webglcontextrestored", n._contextRestoredHandler, !1),
            n.initializeExtensions(),
            n.initializeCapabilities(),
            n.initializeRenderState(),
            n.initializeContextCaches(),
            n.defaultClearOptions = {
                color: [0, 0, 0, 1],
                depth: 1,
                stencil: 0,
                flags: 3
            },
            n.glAddress = [r.REPEAT, r.CLAMP_TO_EDGE, r.MIRRORED_REPEAT],
            n.glBlendEquation = [r.FUNC_ADD, r.FUNC_SUBTRACT, r.FUNC_REVERSE_SUBTRACT, n.webgl2 ? r.MIN : n.extBlendMinmax ? n.extBlendMinmax.MIN_EXT : r.FUNC_ADD, n.webgl2 ? r.MAX : n.extBlendMinmax ? n.extBlendMinmax.MAX_EXT : r.FUNC_ADD],
            n.glBlendFunction = [r.ZERO, r.ONE, r.SRC_COLOR, r.ONE_MINUS_SRC_COLOR, r.DST_COLOR, r.ONE_MINUS_DST_COLOR, r.SRC_ALPHA, r.SRC_ALPHA_SATURATE, r.ONE_MINUS_SRC_ALPHA, r.DST_ALPHA, r.ONE_MINUS_DST_ALPHA],
            n.glComparison = [r.NEVER, r.LESS, r.EQUAL, r.LEQUAL, r.GREATER, r.NOTEQUAL, r.GEQUAL, r.ALWAYS],
            n.glStencilOp = [r.KEEP, r.ZERO, r.REPLACE, r.INCR, r.INCR_WRAP, r.DECR, r.DECR_WRAP, r.INVERT],
            n.glClearFlag = [0, r.COLOR_BUFFER_BIT, r.DEPTH_BUFFER_BIT, r.COLOR_BUFFER_BIT | r.DEPTH_BUFFER_BIT, r.STENCIL_BUFFER_BIT, r.STENCIL_BUFFER_BIT | r.COLOR_BUFFER_BIT, r.STENCIL_BUFFER_BIT | r.DEPTH_BUFFER_BIT, r.STENCIL_BUFFER_BIT | r.COLOR_BUFFER_BIT | r.DEPTH_BUFFER_BIT],
            n.glCull = [0, r.BACK, r.FRONT, r.FRONT_AND_BACK],
            n.glFilter = [r.NEAREST, r.LINEAR, r.NEAREST_MIPMAP_NEAREST, r.NEAREST_MIPMAP_LINEAR, r.LINEAR_MIPMAP_NEAREST, r.LINEAR_MIPMAP_LINEAR],
            n.glPrimitive = [r.POINTS, r.LINES, r.LINE_LOOP, r.LINE_STRIP, r.TRIANGLES, r.TRIANGLE_STRIP, r.TRIANGLE_FAN],
            n.glType = [r.BYTE, r.UNSIGNED_BYTE, r.SHORT, r.UNSIGNED_SHORT, r.INT, r.UNSIGNED_INT, r.FLOAT],
            n.pcUniformType = {},
            n.pcUniformType[r.BOOL] = 0,
            n.pcUniformType[r.INT] = 1,
            n.pcUniformType[r.FLOAT] = 2,
            n.pcUniformType[r.FLOAT_VEC2] = 3,
            n.pcUniformType[r.FLOAT_VEC3] = 4,
            n.pcUniformType[r.FLOAT_VEC4] = 5,
            n.pcUniformType[r.INT_VEC2] = 6,
            n.pcUniformType[r.INT_VEC3] = 7,
            n.pcUniformType[r.INT_VEC4] = 8,
            n.pcUniformType[r.BOOL_VEC2] = 9,
            n.pcUniformType[r.BOOL_VEC3] = 10,
            n.pcUniformType[r.BOOL_VEC4] = 11,
            n.pcUniformType[r.FLOAT_MAT2] = 12,
            n.pcUniformType[r.FLOAT_MAT3] = 13,
            n.pcUniformType[r.FLOAT_MAT4] = 14,
            n.pcUniformType[r.SAMPLER_2D] = 15,
            n.pcUniformType[r.SAMPLER_CUBE] = 16,
            n.webgl2 && (n.pcUniformType[r.SAMPLER_2D_SHADOW] = 18,
            n.pcUniformType[r.SAMPLER_CUBE_SHADOW] = 19,
            n.pcUniformType[r.SAMPLER_3D] = 20),
            n.targetToSlot = {},
            n.targetToSlot[r.TEXTURE_2D] = 0,
            n.targetToSlot[r.TEXTURE_CUBE_MAP] = 1,
            n.targetToSlot[r.TEXTURE_3D] = 2,
            n.commitFunction = [],
            n.commitFunction[0] = function(t, e) {
                t.value !== e && (r.uniform1i(t.locationId, e),
                t.value = e)
            }
            ,
            n.commitFunction[1] = n.commitFunction[0],
            n.commitFunction[2] = function(t, e) {
                t.value !== e && (r.uniform1f(t.locationId, e),
                t.value = e)
            }
            ,
            n.commitFunction[3] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                d[0] === h && d[1] === l || (r.uniform2fv(t.locationId, e),
                d[0] = h,
                d[1] = l)
            }
            ,
            n.commitFunction[4] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                c = e[2],
                d[0] === h && d[1] === l && d[2] === c || (r.uniform3fv(t.locationId, e),
                d[0] = h,
                d[1] = l,
                d[2] = c)
            }
            ,
            n.commitFunction[5] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                c = e[2],
                u = e[3],
                d[0] === h && d[1] === l && d[2] === c && d[3] === u || (r.uniform4fv(t.locationId, e),
                d[0] = h,
                d[1] = l,
                d[2] = c,
                d[3] = u)
            }
            ,
            n.commitFunction[6] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                d[0] === h && d[1] === l || (r.uniform2iv(t.locationId, e),
                d[0] = h,
                d[1] = l)
            }
            ,
            n.commitFunction[9] = n.commitFunction[6],
            n.commitFunction[7] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                c = e[2],
                d[0] === h && d[1] === l && d[2] === c || (r.uniform3iv(t.locationId, e),
                d[0] = h,
                d[1] = l,
                d[2] = c)
            }
            ,
            n.commitFunction[10] = n.commitFunction[7],
            n.commitFunction[8] = function(t, e) {
                d = t.value,
                h = e[0],
                l = e[1],
                c = e[2],
                u = e[3],
                d[0] === h && d[1] === l && d[2] === c && d[3] === u || (r.uniform4iv(t.locationId, e),
                d[0] = h,
                d[1] = l,
                d[2] = c,
                d[3] = u)
            }
            ,
            n.commitFunction[11] = n.commitFunction[8],
            n.commitFunction[12] = function(t, e) {
                r.uniformMatrix2fv(t.locationId, !1, e)
            }
            ,
            n.commitFunction[13] = function(t, e) {
                r.uniformMatrix3fv(t.locationId, !1, e)
            }
            ,
            n.commitFunction[14] = function(t, e) {
                r.uniformMatrix4fv(t.locationId, !1, e)
            }
            ,
            n.commitFunction[17] = function(t, e) {
                r.uniform1fv(t.locationId, e)
            }
            ,
            n.commitFunction[21] = function(t, e) {
                r.uniform2fv(t.locationId, e)
            }
            ,
            n.commitFunction[22] = function(t, e) {
                r.uniform3fv(t.locationId, e)
            }
            ,
            n.commitFunction[23] = function(t, e) {
                r.uniform4fv(t.locationId, e)
            }
            ,
            n.scope = new os("Device"),
            n.programLib = new is(j(n)),
            In)
                n.programLib.register(m, In[m]);
            n.supportsBoneTextures = n.extTextureFloat && n.maxVertexTextures > 0,
            n.useTexCubeLod = n.extTextureLod && n.maxTextures < 16;
            var _ = n.vertexUniformsCount;
            _ -= 16,
            _ -= 8,
            _ -= 1,
            _ -= 16,
            n.boneLimit = Math.floor(_ / 3),
            n.boneLimit = Math.min(n.boneLimit, 128),
            "Mali-450 MP" === n.unmaskedRenderer && (n.boneLimit = 34),
            n._drawCallsPerFrame = 0,
            n._shaderSwitchesPerFrame = 0,
            n._primsPerFrame = [];
            for (var g = 0; g <= 6; g++)
                n._primsPerFrame[g] = 0;
            return n._renderTargetCreationTime = 0,
            n._vram = {
                tex: 0,
                vb: 0,
                ib: 0
            },
            n._shaderStats = {
                vsCompiled: 0,
                fsCompiled: 0,
                linked: 0,
                materialShaders: 0,
                compileTime: 0
            },
            n.constantTexSource = n.scope.resolve("source"),
            n.extTextureFloat ? n.webgl2 ? n.textureFloatRenderable = !!n.extColorBufferFloat : n.textureFloatRenderable = ds(r, r.FLOAT) : n.textureFloatRenderable = !1,
            n.extColorBufferHalfFloat ? n.textureHalfFloatRenderable = !!n.extColorBufferHalfFloat : n.extTextureHalfFloat ? n.webgl2 ? n.textureHalfFloatRenderable = !!n.extColorBufferFloat : n.textureHalfFloatRenderable = ds(r, n.extTextureHalfFloat.HALF_FLOAT_OES) : n.textureHalfFloatRenderable = !1,
            n.supportsMorphTargetTexturesCore = "highp" === n.maxPrecision && n.maxVertexTextures >= 2,
            n._textureFloatHighPrecision = void 0,
            n._textureHalfFloatUpdatable = void 0,
            n.grabPassAvailable = !0,
            n.grabPass = new ls(j(n),i.alpha),
            n.grabPass.create(),
            Qe.init(j(n)),
            n.areaLightLutFormat = 7,
            n.extTextureHalfFloat && n.textureHalfFloatUpdatable && n.extTextureHalfFloatLinear ? n.areaLightLutFormat = Zt : n.extTextureFloat && n.extTextureFloatLinear && (n.areaLightLutFormat = Qt),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            var t = this.gl;
            this.grabPass.destroy(),
            this.webgl2 && this.feedback && t.deleteTransformFeedback(this.feedback),
            this.clearShaderCache(),
            this.clearVertexArrayObjectCache(),
            this.canvas.removeEventListener("webglcontextlost", this._contextLostHandler, !1),
            this.canvas.removeEventListener("webglcontextrestored", this._contextRestoredHandler, !1),
            this._contextLostHandler = null,
            this._contextRestoredHandler = null,
            this.scope = null,
            this.canvas = null,
            this.gl = null
        }
        ,
        i.toJSON = function(t) {}
        ,
        i.getPrecision = function() {
            var t = this.gl
              , e = "highp";
            if (t.getShaderPrecisionFormat) {
                var i = t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT)
                  , n = t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT)
                  , s = t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT)
                  , a = t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT)
                  , r = i.precision > 0 && s.precision > 0
                  , o = n.precision > 0 && a.precision > 0;
                r || (e = o ? "mediump" : "lowp")
            }
            return e
        }
        ,
        i.initializeExtensions = function() {
            var t, e = this.gl, i = {};
            e.getSupportedExtensions().forEach((function(t) {
                i[t] = !0
            }
            ));
            var n = function() {
                for (var t = 0; t < arguments.length; t++)
                    if (i.hasOwnProperty(arguments[t]))
                        return e.getExtension(arguments[t]);
                return null
            };
            this.webgl2 ? (this.extBlendMinmax = !0,
            this.extDrawBuffers = !0,
            this.extInstancing = !0,
            this.extStandardDerivatives = !0,
            this.extTextureFloat = !0,
            this.extTextureHalfFloat = !0,
            this.extTextureLod = !0,
            this.extUintElement = !0,
            this.extVertexArrayObject = !0,
            this.extColorBufferFloat = n("EXT_color_buffer_float"),
            this.extDisjointTimerQuery = n("EXT_disjoint_timer_query_webgl2", "EXT_disjoint_timer_query")) : (this.extBlendMinmax = n("EXT_blend_minmax"),
            this.extDrawBuffers = n("EXT_draw_buffers"),
            this.extInstancing = n("ANGLE_instanced_arrays"),
            this.extInstancing && (t = this.extInstancing,
            e.drawArraysInstanced = t.drawArraysInstancedANGLE.bind(t),
            e.drawElementsInstanced = t.drawElementsInstancedANGLE.bind(t),
            e.vertexAttribDivisor = t.vertexAttribDivisorANGLE.bind(t)),
            this.extStandardDerivatives = n("OES_standard_derivatives"),
            this.extTextureFloat = n("OES_texture_float"),
            this.extTextureHalfFloat = n("OES_texture_half_float"),
            this.extTextureLod = n("EXT_shader_texture_lod"),
            this.extUintElement = n("OES_element_index_uint"),
            this.extVertexArrayObject = n("OES_vertex_array_object"),
            this.extVertexArrayObject && (t = this.extVertexArrayObject,
            e.createVertexArray = t.createVertexArrayOES.bind(t),
            e.deleteVertexArray = t.deleteVertexArrayOES.bind(t),
            e.isVertexArray = t.isVertexArrayOES.bind(t),
            e.bindVertexArray = t.bindVertexArrayOES.bind(t)),
            this.extColorBufferFloat = null,
            this.extDisjointTimerQuery = null),
            this.extDebugRendererInfo = n("WEBGL_debug_renderer_info"),
            this.extTextureFloatLinear = n("OES_texture_float_linear"),
            this.extTextureHalfFloatLinear = n("OES_texture_half_float_linear"),
            this.extFloatBlend = n("EXT_float_blend"),
            this.extTextureFilterAnisotropic = n("EXT_texture_filter_anisotropic", "WEBKIT_EXT_texture_filter_anisotropic"),
            this.extCompressedTextureETC1 = n("WEBGL_compressed_texture_etc1"),
            this.extCompressedTextureETC = n("WEBGL_compressed_texture_etc"),
            this.extCompressedTexturePVRTC = n("WEBGL_compressed_texture_pvrtc", "WEBKIT_WEBGL_compressed_texture_pvrtc"),
            this.extCompressedTextureS3TC = n("WEBGL_compressed_texture_s3tc", "WEBKIT_WEBGL_compressed_texture_s3tc"),
            this.extCompressedTextureATC = n("WEBGL_compressed_texture_atc"),
            this.extCompressedTextureASTC = n("WEBGL_compressed_texture_astc"),
            this.extParallelShaderCompile = n("KHR_parallel_shader_compile"),
            this.extColorBufferHalfFloat = n("EXT_color_buffer_half_float"),
            this.supportsInstancing = !!this.extInstancing
        }
        ,
        i.initializeCapabilities = function() {
            var t, e = this.gl;
            this.maxPrecision = this.precision = this.getPrecision();
            var i = e.getContextAttributes();
            this.supportsMsaa = i.antialias,
            this.supportsStencil = i.stencil,
            this.maxTextureSize = e.getParameter(e.MAX_TEXTURE_SIZE),
            this.maxCubeMapSize = e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),
            this.maxRenderBufferSize = e.getParameter(e.MAX_RENDERBUFFER_SIZE),
            this.maxTextures = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),
            this.maxCombinedTextures = e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),
            this.maxVertexTextures = e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
            this.vertexUniformsCount = e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),
            this.fragmentUniformsCount = e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),
            this.webgl2 ? (this.maxDrawBuffers = e.getParameter(e.MAX_DRAW_BUFFERS),
            this.maxColorAttachments = e.getParameter(e.MAX_COLOR_ATTACHMENTS),
            this.maxVolumeSize = e.getParameter(e.MAX_3D_TEXTURE_SIZE)) : (t = this.extDrawBuffers,
            this.maxDrawBuffers = t ? e.getParameter(t.MAX_DRAW_BUFFERS_EXT) : 1,
            this.maxColorAttachments = t ? e.getParameter(t.MAX_COLOR_ATTACHMENTS_EXT) : 1,
            this.maxVolumeSize = 1),
            t = this.extDebugRendererInfo,
            this.unmaskedRenderer = t ? e.getParameter(t.UNMASKED_RENDERER_WEBGL) : "",
            this.unmaskedVendor = t ? e.getParameter(t.UNMASKED_VENDOR_WEBGL) : "",
            t = this.extTextureFilterAnisotropic,
            this.maxAnisotropy = t ? e.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1,
            this.samples = e.getParameter(e.SAMPLES),
            this.maxSamples = this.webgl2 ? e.getParameter(e.MAX_SAMPLES) : 1,
            this.supportsAreaLights = this.webgl2 || !E.android,
            this.maxTextures <= 8 && (this.supportsAreaLights = !1)
        }
        ,
        i.initializeRenderState = function() {
            var t = this.gl;
            this.blending = !1,
            t.disable(t.BLEND),
            this.blendSrc = 1,
            this.blendDst = 0,
            this.blendSrcAlpha = 1,
            this.blendDstAlpha = 0,
            this.separateAlphaBlend = !1,
            this.blendEquation = 0,
            this.blendAlphaEquation = 0,
            this.separateAlphaEquation = !1,
            t.blendFunc(t.ONE, t.ZERO),
            t.blendEquation(t.FUNC_ADD),
            this.writeRed = !0,
            this.writeGreen = !0,
            this.writeBlue = !0,
            this.writeAlpha = !0,
            t.colorMask(!0, !0, !0, !0),
            this.cullMode = 1,
            t.enable(t.CULL_FACE),
            t.cullFace(t.BACK),
            this.depthTest = !0,
            t.enable(t.DEPTH_TEST),
            this.depthFunc = 3,
            t.depthFunc(t.LEQUAL),
            this.depthWrite = !0,
            t.depthMask(!0),
            this.stencil = !1,
            t.disable(t.STENCIL_TEST),
            this.stencilFuncFront = this.stencilFuncBack = 7,
            this.stencilRefFront = this.stencilRefBack = 0,
            this.stencilMaskFront = this.stencilMaskBack = 255,
            t.stencilFunc(t.ALWAYS, 0, 255),
            this.stencilFailFront = this.stencilFailBack = 0,
            this.stencilZfailFront = this.stencilZfailBack = 0,
            this.stencilZpassFront = this.stencilZpassBack = 0,
            this.stencilWriteMaskFront = 255,
            this.stencilWriteMaskBack = 255,
            t.stencilOp(t.KEEP, t.KEEP, t.KEEP),
            t.stencilMask(255),
            this.alphaToCoverage = !1,
            this.raster = !0,
            this.webgl2 && (t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),
            t.disable(t.RASTERIZER_DISCARD)),
            this.depthBiasEnabled = !1,
            t.disable(t.POLYGON_OFFSET_FILL),
            this.clearDepth = 1,
            t.clearDepth(1),
            this.clearRed = 0,
            this.clearBlue = 0,
            this.clearGreen = 0,
            this.clearAlpha = 0,
            t.clearColor(0, 0, 0, 0),
            this.clearStencil = 0,
            t.clearStencil(0),
            this.vx = this.vy = this.vw = this.vh = 0,
            this.sx = this.sy = this.sw = this.sh = 0,
            this.webgl2 ? t.hint(t.FRAGMENT_SHADER_DERIVATIVE_HINT, t.NICEST) : this.extStandardDerivatives && t.hint(this.extStandardDerivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, t.NICEST),
            t.enable(t.SCISSOR_TEST),
            t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, t.NONE),
            this.unpackFlipY = !1,
            t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, !1),
            this.unpackPremultiplyAlpha = !1,
            t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1),
            t.pixelStorei(t.UNPACK_ALIGNMENT, 1)
        }
        ,
        i.initializeContextCaches = function() {
            this.vertexShaderCache = {},
            this.fragmentShaderCache = {},
            this._vaoMap = new Map,
            this.boundVao = null,
            this.indexBuffer = null,
            this.vertexBuffers = [],
            this.shader = null,
            this.renderTarget = null,
            this.activeFramebuffer = null,
            this.feedback = null,
            this.transformFeedbackBuffer = null,
            this.textureUnit = 0,
            this.textureUnits = [];
            for (var t = 0; t < this.maxCombinedTextures; t++)
                this.textureUnits.push([null, null, null])
        }
        ,
        i.loseContext = function() {
            for (var t, e = Y(this.shaders); !(t = e()).done; ) {
                t.value.loseContext()
            }
            for (this.grabPass.destroy(); this.textures.length > 0; ) {
                var i = this.textures[0];
                this.destroyTexture(i),
                i.dirtyAll()
            }
            for (var n, s = Y(this.buffers); !(n = s()).done; ) {
                n.value.loseContext()
            }
            for (var a, r = Y(this.targets); !(a = r()).done; ) {
                a.value.loseContext()
            }
        }
        ,
        i.restoreContext = function() {
            this.initializeExtensions(),
            this.initializeCapabilities(),
            this.initializeRenderState(),
            this.initializeContextCaches();
            for (var t, e = Y(this.shaders); !(t = e()).done; ) {
                var i = t.value;
                this.compileAndLinkShader(i)
            }
            for (var n, s = Y(this.buffers); !(n = s()).done; ) {
                n.value.unlock()
            }
            this.grabPass.create()
        }
        ,
        i.updateClientRect = function() {
            this.clientRect = this.canvas.getBoundingClientRect()
        }
        ,
        i.setViewport = function(t, e, i, n) {
            this.vx === t && this.vy === e && this.vw === i && this.vh === n || (this.gl.viewport(t, e, i, n),
            this.vx = t,
            this.vy = e,
            this.vw = i,
            this.vh = n)
        }
        ,
        i.setScissor = function(t, e, i, n) {
            this.sx === t && this.sy === e && this.sw === i && this.sh === n || (this.gl.scissor(t, e, i, n),
            this.sx = t,
            this.sy = e,
            this.sw = i,
            this.sh = n)
        }
        ,
        i.getProgramLibrary = function() {
            return this.programLib
        }
        ,
        i.setProgramLibrary = function(t) {
            this.programLib = t
        }
        ,
        i.setFramebuffer = function(t) {
            this.activeFramebuffer !== t && (this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, t),
            this.activeFramebuffer = t)
        }
        ,
        i._checkFbo = function() {
            var t = this.gl;
            switch (t.checkFramebufferStatus(t.FRAMEBUFFER)) {
            case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                console.error("ERROR: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
                break;
            case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                console.error("ERROR: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
                break;
            case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                console.error("ERROR: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
                break;
            case t.FRAMEBUFFER_UNSUPPORTED:
                console.error("ERROR: FRAMEBUFFER_UNSUPPORTED");
                break;
            case t.FRAMEBUFFER_COMPLETE:
            }
        }
        ,
        i.copyRenderTarget = function(t, e, i, n) {
            var s = this.gl;
            if (!this.webgl2 && n)
                return !1;
            if (i)
                if (e) {
                    if (!t._colorBuffer || !e._colorBuffer)
                        return !1;
                    if (t._colorBuffer._format !== e._colorBuffer._format)
                        return !1
                } else if (!t._colorBuffer)
                    return !1;
            if (n) {
                if (!t._depthBuffer || !e._depthBuffer)
                    return !1;
                if (t._depthBuffer._format !== e._depthBuffer._format)
                    return !1
            }
            if (this.webgl2 && e) {
                var a = this.renderTarget;
                this.renderTarget = e,
                this.updateBegin(),
                s.bindFramebuffer(s.READ_FRAMEBUFFER, t ? t._glFrameBuffer : null),
                s.bindFramebuffer(s.DRAW_FRAMEBUFFER, e._glFrameBuffer);
                var r = t ? t.width : e.width
                  , o = t ? t.height : e.height;
                s.blitFramebuffer(0, 0, r, o, 0, 0, r, o, (i ? s.COLOR_BUFFER_BIT : 0) | (n ? s.DEPTH_BUFFER_BIT : 0), s.NEAREST),
                this.renderTarget = a,
                s.bindFramebuffer(s.FRAMEBUFFER, a ? a._glFrameBuffer : null)
            } else {
                var h = this.getCopyShader();
                this.constantTexSource.setValue(t._colorBuffer),
                ei(this, e, h)
            }
            return !0
        }
        ,
        i.initRenderTarget = function(t) {
            if (!t._glFrameBuffer) {
                t._device = this;
                var e = this.gl;
                t._glFrameBuffer = e.createFramebuffer(),
                this.setFramebuffer(t._glFrameBuffer);
                var i = t._colorBuffer;
                i && (i._glTexture || (i._width = Math.min(i.width, this.maxRenderBufferSize),
                i._height = Math.min(i.height, this.maxRenderBufferSize),
                this.setTexture(i, 0)),
                e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, i._cubemap ? e.TEXTURE_CUBE_MAP_POSITIVE_X + t._face : e.TEXTURE_2D, i._glTexture, 0));
                var n = t._depthBuffer;
                if (n && this.webgl2)
                    n._glTexture || (n._width = Math.min(n.width, this.maxRenderBufferSize),
                    n._height = Math.min(n.height, this.maxRenderBufferSize),
                    this.setTexture(n, 0)),
                    t._stencil ? e.framebufferTexture2D(e.FRAMEBUFFER, e.DEPTH_STENCIL_ATTACHMENT, n._cubemap ? e.TEXTURE_CUBE_MAP_POSITIVE_X + t._face : e.TEXTURE_2D, t._depthBuffer._glTexture, 0) : e.framebufferTexture2D(e.FRAMEBUFFER, e.DEPTH_ATTACHMENT, n._cubemap ? e.TEXTURE_CUBE_MAP_POSITIVE_X + t._face : e.TEXTURE_2D, t._depthBuffer._glTexture, 0);
                else if (t._depth) {
                    t._samples > 1 && this.webgl2 || (t._glDepthBuffer || (t._glDepthBuffer = e.createRenderbuffer()),
                    e.bindRenderbuffer(e.RENDERBUFFER, t._glDepthBuffer),
                    t._stencil ? (e.renderbufferStorage(e.RENDERBUFFER, e.DEPTH_STENCIL, t.width, t.height),
                    e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_STENCIL_ATTACHMENT, e.RENDERBUFFER, t._glDepthBuffer)) : (e.renderbufferStorage(e.RENDERBUFFER, e.DEPTH_COMPONENT16, t.width, t.height),
                    e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_ATTACHMENT, e.RENDERBUFFER, t._glDepthBuffer)),
                    e.bindRenderbuffer(e.RENDERBUFFER, null))
                }
                this.webgl2 && t._samples > 1 && (t._glResolveFrameBuffer = t._glFrameBuffer,
                t._glFrameBuffer = e.createFramebuffer(),
                this.setFramebuffer(t._glFrameBuffer),
                i && (t._glMsaaColorBuffer || (t._glMsaaColorBuffer = e.createRenderbuffer()),
                e.bindRenderbuffer(e.RENDERBUFFER, t._glMsaaColorBuffer),
                e.renderbufferStorageMultisample(e.RENDERBUFFER, t._samples, i._glInternalFormat, t.width, t.height),
                e.framebufferRenderbuffer(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.RENDERBUFFER, t._glMsaaColorBuffer)),
                t._depth && (t._glMsaaDepthBuffer || (t._glMsaaDepthBuffer = e.createRenderbuffer()),
                e.bindRenderbuffer(e.RENDERBUFFER, t._glMsaaDepthBuffer),
                t._stencil ? (e.renderbufferStorageMultisample(e.RENDERBUFFER, t._samples, e.DEPTH24_STENCIL8, t.width, t.height),
                e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_STENCIL_ATTACHMENT, e.RENDERBUFFER, t._glMsaaDepthBuffer)) : (e.renderbufferStorageMultisample(e.RENDERBUFFER, t._samples, e.DEPTH_COMPONENT32F, t.width, t.height),
                e.framebufferRenderbuffer(e.FRAMEBUFFER, e.DEPTH_ATTACHMENT, e.RENDERBUFFER, t._glMsaaDepthBuffer)))),
                this.targets.push(t)
            }
        }
        ,
        i.getCopyShader = function() {
            return this._copyShader || (this._copyShader = mi(this, ni.fullscreenQuadVS, ni.outputTex2DPS, "outputTex2D")),
            this._copyShader
        }
        ,
        i.updateBegin = function() {
            if (this.boundVao = null,
            this._tempEnableSafariTextureUnitWorkaround)
                for (var t = 0; t < this.textureUnits.length; ++t)
                    for (var e = 0; e < 3; ++e)
                        this.textureUnits[t][e] = null;
            var i = this.renderTarget;
            i ? i._glFrameBuffer ? this.setFramebuffer(i._glFrameBuffer) : this.initRenderTarget(i) : this.setFramebuffer(this.defaultFramebuffer)
        }
        ,
        i.updateEnd = function() {
            var t = this.gl;
            this.boundVao && (this.boundVao = null,
            this.gl.bindVertexArray(null));
            var e = this.renderTarget;
            if (e) {
                var i = e._colorBuffer;
                i && i._glTexture && i.mipmaps && (i.pot || this.webgl2) && (this.activeTexture(this.maxCombinedTextures - 1),
                this.bindTexture(i),
                t.generateMipmap(i._glTarget)),
                this.webgl2 && e._samples > 1 && e.autoResolve && e.resolve()
            }
        }
        ,
        i.initializeTexture = function(t) {
            var e, i = this.gl;
            switch (t._glTexture = i.createTexture(),
            t._glTarget = t._cubemap ? i.TEXTURE_CUBE_MAP : t._volume ? i.TEXTURE_3D : i.TEXTURE_2D,
            t._format) {
            case 0:
                t._glFormat = i.ALPHA,
                t._glInternalFormat = i.ALPHA,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 1:
                t._glFormat = i.LUMINANCE,
                t._glInternalFormat = i.LUMINANCE,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 2:
                t._glFormat = i.LUMINANCE_ALPHA,
                t._glInternalFormat = i.LUMINANCE_ALPHA,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 3:
                t._glFormat = i.RGB,
                t._glInternalFormat = i.RGB,
                t._glPixelType = i.UNSIGNED_SHORT_5_6_5;
                break;
            case 4:
                t._glFormat = i.RGBA,
                t._glInternalFormat = i.RGBA,
                t._glPixelType = i.UNSIGNED_SHORT_5_5_5_1;
                break;
            case 5:
                t._glFormat = i.RGBA,
                t._glInternalFormat = i.RGBA,
                t._glPixelType = i.UNSIGNED_SHORT_4_4_4_4;
                break;
            case 6:
                t._glFormat = i.RGB,
                t._glInternalFormat = this.webgl2 ? i.RGB8 : i.RGB,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 7:
                t._glFormat = i.RGBA,
                t._glInternalFormat = this.webgl2 ? i.RGBA8 : i.RGBA,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 8:
                e = this.extCompressedTextureS3TC,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB_S3TC_DXT1_EXT;
                break;
            case 9:
                e = this.extCompressedTextureS3TC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                break;
            case Yt:
                e = this.extCompressedTextureS3TC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                break;
            case ee:
                e = this.extCompressedTextureETC1,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB_ETC1_WEBGL;
                break;
            case ie:
                e = this.extCompressedTexturePVRTC,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                break;
            case ne:
                e = this.extCompressedTexturePVRTC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                break;
            case 26:
                e = this.extCompressedTexturePVRTC,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                break;
            case 27:
                e = this.extCompressedTexturePVRTC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                break;
            case 22:
                e = this.extCompressedTextureETC,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB8_ETC2;
                break;
            case 23:
                e = this.extCompressedTextureETC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA8_ETC2_EAC;
                break;
            case 28:
                e = this.extCompressedTextureASTC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_ASTC_4x4_KHR;
                break;
            case 29:
                e = this.extCompressedTextureATC,
                t._glFormat = i.RGB,
                t._glInternalFormat = e.COMPRESSED_RGB_ATC_WEBGL;
                break;
            case 30:
                e = this.extCompressedTextureATC,
                t._glFormat = i.RGBA,
                t._glInternalFormat = e.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;
                break;
            case Kt:
                e = this.extTextureHalfFloat,
                t._glFormat = i.RGB,
                this.webgl2 ? (t._glInternalFormat = i.RGB16F,
                t._glPixelType = i.HALF_FLOAT) : (t._glInternalFormat = i.RGB,
                t._glPixelType = e.HALF_FLOAT_OES);
                break;
            case Zt:
                e = this.extTextureHalfFloat,
                t._glFormat = i.RGBA,
                this.webgl2 ? (t._glInternalFormat = i.RGBA16F,
                t._glPixelType = i.HALF_FLOAT) : (t._glInternalFormat = i.RGBA,
                t._glPixelType = e.HALF_FLOAT_OES);
                break;
            case $t:
                t._glFormat = i.RGB,
                this.webgl2 ? t._glInternalFormat = i.RGB32F : t._glInternalFormat = i.RGB,
                t._glPixelType = i.FLOAT;
                break;
            case Qt:
                t._glFormat = i.RGBA,
                this.webgl2 ? t._glInternalFormat = i.RGBA32F : t._glInternalFormat = i.RGBA,
                t._glPixelType = i.FLOAT;
                break;
            case 15:
                t._glFormat = i.RED,
                t._glInternalFormat = i.R32F,
                t._glPixelType = i.FLOAT;
                break;
            case Jt:
                this.webgl2 ? (t._glFormat = i.DEPTH_COMPONENT,
                t._glInternalFormat = i.DEPTH_COMPONENT32F,
                t._glPixelType = i.FLOAT) : (t._glFormat = i.DEPTH_COMPONENT,
                t._glInternalFormat = i.DEPTH_COMPONENT,
                t._glPixelType = i.UNSIGNED_SHORT);
                break;
            case te:
                t._glFormat = i.DEPTH_STENCIL,
                t._glInternalFormat = i.DEPTH24_STENCIL8,
                t._glPixelType = i.UNSIGNED_INT_24_8;
                break;
            case 18:
                t._glFormat = i.RGB,
                t._glInternalFormat = i.R11F_G11F_B10F,
                t._glPixelType = i.UNSIGNED_INT_10F_11F_11F_REV;
                break;
            case 19:
                t._glFormat = i.RGB,
                t._glInternalFormat = i.SRGB8,
                t._glPixelType = i.UNSIGNED_BYTE;
                break;
            case 20:
                t._glFormat = i.RGBA,
                t._glInternalFormat = i.SRGB8_ALPHA8,
                t._glPixelType = i.UNSIGNED_BYTE
            }
            this.textures.push(t)
        }
        ,
        i.destroyTexture = function(t) {
            if (t._glTexture) {
                var e = this.textures.indexOf(t);
                -1 !== e && this.textures.splice(e, 1),
                this.scope.removeValue(t);
                for (var i = 0; i < this.textureUnits.length; i++)
                    for (var n = this.textureUnits[i], s = 0; s < n.length; s++)
                        n[s] === t._glTexture && (n[s] = null);
                this.gl.deleteTexture(t._glTexture),
                delete t._glTexture,
                delete t._glTarget,
                delete t._glFormat,
                delete t._glInternalFormat,
                delete t._glPixelType,
                this._vram.tex -= t._gpuSize
            }
        }
        ,
        i.setUnpackFlipY = function(t) {
            if (this.unpackFlipY !== t) {
                this.unpackFlipY = t;
                var e = this.gl;
                e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL, t)
            }
        }
        ,
        i.setUnpackPremultiplyAlpha = function(t) {
            if (this.unpackPremultiplyAlpha !== t) {
                this.unpackPremultiplyAlpha = t;
                var e = this.gl;
                e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL, t)
            }
        }
        ,
        i._isBrowserInterface = function(t) {
            return "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLVideoElement && t instanceof HTMLVideoElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap
        }
        ,
        i.uploadTexture = function(t) {
            var e = this.gl;
            if (t._needsUpload || !(t._needsMipmapsUpload && t._mipmapsUploaded || !t.pot)) {
                for (var i, n, s = 0, a = Math.log2(Math.max(t._width, t._height)) + 1; t._levels[s] || 0 === s; )
                    if (t._needsUpload || 0 !== s) {
                        if (s && (!t._needsMipmapsUpload || !t._mipmaps))
                            break;
                        if (i = t._levels[s],
                        1 === s && !t._compressed && t._levels.length < a && (e.generateMipmap(t._glTarget),
                        t._mipmapsUploaded = !0),
                        t._cubemap) {
                            var r = void 0;
                            if (this._isBrowserInterface(i[0])) {
                                for (r = 0; r < 6; r++)
                                    if (t._levelsUpdated[0][r]) {
                                        var o = i[r];
                                        o instanceof HTMLImageElement && (o.width > this.maxCubeMapSize || o.height > this.maxCubeMapSize) && (o = us(o, this.maxCubeMapSize),
                                        0 === s && (t._width = o.width,
                                        t._height = o.height)),
                                        this.setUnpackFlipY(!1),
                                        this.setUnpackPremultiplyAlpha(t._premultiplyAlpha),
                                        e.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X + r, s, t._glInternalFormat, t._glFormat, t._glPixelType, o)
                                    }
                            } else
                                for (n = 1 / Math.pow(2, s),
                                r = 0; r < 6; r++)
                                    if (t._levelsUpdated[0][r]) {
                                        var h = i[r];
                                        t._compressed ? e.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X + r, s, t._glInternalFormat, Math.max(t._width * n, 1), Math.max(t._height * n, 1), 0, h) : (this.setUnpackFlipY(!1),
                                        this.setUnpackPremultiplyAlpha(t._premultiplyAlpha),
                                        e.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X + r, s, t._glInternalFormat, Math.max(t._width * n, 1), Math.max(t._height * n, 1), 0, t._glFormat, t._glPixelType, h))
                                    }
                        } else
                            t._volume ? (n = 1 / Math.pow(2, s),
                            t._compressed ? e.compressedTexImage3D(e.TEXTURE_3D, s, t._glInternalFormat, Math.max(t._width * n, 1), Math.max(t._height * n, 1), Math.max(t._depth * n, 1), 0, i) : (this.setUnpackFlipY(!1),
                            this.setUnpackPremultiplyAlpha(t._premultiplyAlpha),
                            e.texImage3D(e.TEXTURE_3D, s, t._glInternalFormat, Math.max(t._width * n, 1), Math.max(t._height * n, 1), Math.max(t._depth * n, 1), 0, t._glFormat, t._glPixelType, i))) : (this._isBrowserInterface(i) ? (i instanceof HTMLImageElement && (i.width > this.maxTextureSize || i.height > this.maxTextureSize) && (i = us(i, this.maxTextureSize),
                            0 === s && (t._width = i.width,
                            t._height = i.height)),
                            this.setUnpackFlipY(t._flipY),
                            this.setUnpackPremultiplyAlpha(t._premultiplyAlpha),
                            e.texImage2D(e.TEXTURE_2D, s, t._glInternalFormat, t._glFormat, t._glPixelType, i)) : (n = 1 / Math.pow(2, s),
                            t._compressed ? e.compressedTexImage2D(e.TEXTURE_2D, s, t._glInternalFormat, Math.max(Math.floor(t._width * n), 1), Math.max(Math.floor(t._height * n), 1), 0, i) : (this.setUnpackFlipY(!1),
                            this.setUnpackPremultiplyAlpha(t._premultiplyAlpha),
                            e.texImage2D(e.TEXTURE_2D, s, t._glInternalFormat, Math.max(t._width * n, 1), Math.max(t._height * n, 1), 0, t._glFormat, t._glPixelType, i))),
                            t._mipmapsUploaded = 0 !== s);
                        s++
                    } else
                        s++;
                if (t._needsUpload)
                    if (t._cubemap)
                        for (var l = 0; l < 6; l++)
                            t._levelsUpdated[0][l] = !1;
                    else
                        t._levelsUpdated[0] = !1;
                !t._compressed && t._mipmaps && t._needsMipmapsUpload && (t.pot || this.webgl2) && 1 === t._levels.length && (e.generateMipmap(t._glTarget),
                t._mipmapsUploaded = !0),
                t._gpuSize && (this._vram.tex -= t._gpuSize),
                t._gpuSize = t.gpuSize,
                this._vram.tex += t._gpuSize
            }
        }
        ,
        i.activeTexture = function(t) {
            this.textureUnit !== t && (this.gl.activeTexture(this.gl.TEXTURE0 + t),
            this.textureUnit = t)
        }
        ,
        i.bindTexture = function(t) {
            var e = t._glTarget
              , i = t._glTexture
              , n = this.textureUnit
              , s = this.targetToSlot[e];
            this.textureUnits[n][s] !== i && (this.gl.bindTexture(e, i),
            this.textureUnits[n][s] = i)
        }
        ,
        i.bindTextureOnUnit = function(t, e) {
            var i = t._glTarget
              , n = t._glTexture
              , s = this.targetToSlot[i];
            this.textureUnits[e][s] !== n && (this.activeTexture(e),
            this.gl.bindTexture(i, n),
            this.textureUnits[e][s] = n)
        }
        ,
        i.setTextureParameters = function(t) {
            var e = this.gl
              , i = t._parameterFlags
              , n = t._glTarget;
            if (1 & i) {
                var s = t._minFilter;
                (!t.pot && !this.webgl2 || !t._mipmaps || t._compressed && 1 === t._levels.length) && (2 === s || 3 === s ? s = 0 : 4 !== s && 5 !== s || (s = 1)),
                e.texParameteri(n, e.TEXTURE_MIN_FILTER, this.glFilter[s])
            }
            if (2 & i && e.texParameteri(n, e.TEXTURE_MAG_FILTER, this.glFilter[t._magFilter]),
            4 & i && (this.webgl2 ? e.texParameteri(n, e.TEXTURE_WRAP_S, this.glAddress[t._addressU]) : e.texParameteri(n, e.TEXTURE_WRAP_S, this.glAddress[t.pot ? t._addressU : 1])),
            8 & i && (this.webgl2 ? e.texParameteri(n, e.TEXTURE_WRAP_T, this.glAddress[t._addressV]) : e.texParameteri(n, e.TEXTURE_WRAP_T, this.glAddress[t.pot ? t._addressV : 1])),
            16 & i && this.webgl2 && e.texParameteri(n, e.TEXTURE_WRAP_R, this.glAddress[t._addressW]),
            32 & i && this.webgl2 && e.texParameteri(n, e.TEXTURE_COMPARE_MODE, t._compareOnRead ? e.COMPARE_REF_TO_TEXTURE : e.NONE),
            64 & i && this.webgl2 && e.texParameteri(n, e.TEXTURE_COMPARE_FUNC, this.glComparison[t._compareFunc]),
            128 & i) {
                var a = this.extTextureFilterAnisotropic;
                a && e.texParameterf(n, a.TEXTURE_MAX_ANISOTROPY_EXT, Math.max(1, Math.min(Math.round(t._anisotropy), this.maxAnisotropy)))
            }
        }
        ,
        i.setTexture = function(t, e) {
            (t._glTexture || this.initializeTexture(t),
            t._parameterFlags > 0 || t._needsUpload || t._needsMipmapsUpload || t === this.grabPass.texture) ? (this.activeTexture(e),
            this.bindTexture(t),
            t._parameterFlags && (this.setTextureParameters(t),
            t._parameterFlags = 0),
            t === this.grabPass.texture && this.grabPass.prepareTexture() || !t._needsUpload && !t._needsMipmapsUpload || (this.uploadTexture(t),
            t._needsUpload = !1,
            t._needsMipmapsUpload = !1)) : this.bindTextureOnUnit(t, e)
        }
        ,
        i.createVertexArray = function(t) {
            var e, i, n = t.length > 1;
            if (n) {
                e = "";
                for (var s = 0; s < t.length; s++) {
                    var a = t[s];
                    e += a.id + a.format.renderingingHash
                }
                i = this._vaoMap.get(e)
            }
            if (!i) {
                var r = this.gl;
                i = r.createVertexArray(),
                r.bindVertexArray(i),
                r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, null);
                for (var o = 0; o < t.length; o++) {
                    var h = t[o];
                    r.bindBuffer(r.ARRAY_BUFFER, h.bufferId);
                    for (var l = h.format.elements, c = 0; c < l.length; c++) {
                        var u = l[c]
                          , d = Ye[u.name];
                        r.vertexAttribPointer(d, u.numComponents, this.glType[u.dataType], u.normalize, u.stride, u.offset),
                        r.enableVertexAttribArray(d),
                        h.instancing && r.vertexAttribDivisor(d, 1)
                    }
                }
                r.bindVertexArray(null),
                r.bindBuffer(r.ARRAY_BUFFER, null),
                n && this._vaoMap.set(e, i)
            }
            return i
        }
        ,
        i.setBuffers = function() {
            var t, e = this.gl;
            if (1 === this.vertexBuffers.length) {
                var i = this.vertexBuffers[0];
                i._vao || (i._vao = this.createVertexArray(this.vertexBuffers)),
                t = i._vao
            } else
                t = this.createVertexArray(this.vertexBuffers);
            this.boundVao !== t && (this.boundVao = t,
            e.bindVertexArray(t)),
            this.vertexBuffers.length = 0;
            var n = this.indexBuffer ? this.indexBuffer.bufferId : null;
            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n)
        }
        ,
        i.draw = function(t, e, i) {
            var n, s, a, r, o, h, l, c, u = this.gl, d = this.shader;
            if (d) {
                var f = d.samplers
                  , p = d.uniforms;
                i || this.setBuffers();
                for (var m = 0, _ = 0, g = f.length; _ < g; _++)
                    if (s = (n = f[_]).scopeId.value)
                        if (s instanceof Mi)
                            a = s,
                            this.setTexture(a, m),
                            n.slot !== m && (u.uniform1i(n.locationId, m),
                            n.slot = m),
                            m++;
                        else {
                            n.array.length = 0,
                            r = s.length;
                            for (var v = 0; v < r; v++)
                                a = s[v],
                                this.setTexture(a, m),
                                n.array[v] = m,
                                m++;
                            u.uniform1iv(n.locationId, n.array)
                        }
                for (var y = 0, x = p.length; y < x; y++)
                    h = (o = p[y]).scopeId,
                    l = o.version,
                    c = h.versionObject.version,
                    l.globalId === c.globalId && l.revision === c.revision || (l.globalId = c.globalId,
                    l.revision = c.revision,
                    null !== h.value && this.commitFunction[o.dataType](o, h.value));
                this.webgl2 && this.transformFeedbackBuffer && (u.bindBufferBase(u.TRANSFORM_FEEDBACK_BUFFER, 0, this.transformFeedbackBuffer.bufferId),
                u.beginTransformFeedback(u.POINTS));
                var b = this.glPrimitive[t.type]
                  , S = t.count;
                if (t.indexed) {
                    var T = this.indexBuffer
                      , w = T.glFormat
                      , M = t.base * T.bytesPerIndex;
                    e > 0 ? u.drawElementsInstanced(b, S, w, M, e) : u.drawElements(b, S, w, M)
                } else {
                    var A = t.base;
                    e > 0 ? u.drawArraysInstanced(b, A, S, e) : u.drawArrays(b, A, S)
                }
                this.webgl2 && this.transformFeedbackBuffer && (u.endTransformFeedback(),
                u.bindBufferBase(u.TRANSFORM_FEEDBACK_BUFFER, 0, null)),
                this._drawCallsPerFrame++
            }
        }
        ,
        i.clear = function(t) {
            var e = this.defaultClearOptions
              , i = null == (t = t || e).flags ? e.flags : t.flags;
            if (0 !== i) {
                var n = this.gl;
                if (1 & i) {
                    var s = null == t.color ? e.color : t.color;
                    this.setClearColor(s[0], s[1], s[2], s[3])
                }
                if (2 & i) {
                    var a = null == t.depth ? e.depth : t.depth;
                    this.setClearDepth(a),
                    this.depthWrite || n.depthMask(!0)
                }
                if (4 & i) {
                    var r = null == t.stencil ? e.stencil : t.stencil;
                    this.setClearStencil(r)
                }
                n.clear(this.glClearFlag[i]),
                2 & i && (this.depthWrite || n.depthMask(!1))
            }
        }
        ,
        i.readPixels = function(t, e, i, n, s) {
            var a = this.gl;
            a.readPixels(t, e, i, n, a.RGBA, a.UNSIGNED_BYTE, s)
        }
        ,
        i.setClearDepth = function(t) {
            t !== this.clearDepth && (this.gl.clearDepth(t),
            this.clearDepth = t)
        }
        ,
        i.setClearColor = function(t, e, i, n) {
            t === this.clearRed && e === this.clearGreen && i === this.clearBlue && n === this.clearAlpha || (this.gl.clearColor(t, e, i, n),
            this.clearRed = t,
            this.clearGreen = e,
            this.clearBlue = i,
            this.clearAlpha = n)
        }
        ,
        i.setClearStencil = function(t) {
            t !== this.clearStencil && (this.gl.clearStencil(t),
            this.clearStencil = t)
        }
        ,
        i.setRenderTarget = function(t) {
            this.renderTarget = t
        }
        ,
        i.getRenderTarget = function() {
            return this.renderTarget
        }
        ,
        i.getDepthTest = function() {
            return this.depthTest
        }
        ,
        i.setDepthTest = function(t) {
            if (this.depthTest !== t) {
                var e = this.gl;
                t ? e.enable(e.DEPTH_TEST) : e.disable(e.DEPTH_TEST),
                this.depthTest = t
            }
        }
        ,
        i.setDepthFunc = function(t) {
            this.depthFunc !== t && (this.gl.depthFunc(this.glComparison[t]),
            this.depthFunc = t)
        }
        ,
        i.getDepthWrite = function() {
            return this.depthWrite
        }
        ,
        i.setDepthWrite = function(t) {
            this.depthWrite !== t && (this.gl.depthMask(t),
            this.depthWrite = t)
        }
        ,
        i.setColorWrite = function(t, e, i, n) {
            this.writeRed === t && this.writeGreen === e && this.writeBlue === i && this.writeAlpha === n || (this.gl.colorMask(t, e, i, n),
            this.writeRed = t,
            this.writeGreen = e,
            this.writeBlue = i,
            this.writeAlpha = n)
        }
        ,
        i.setAlphaToCoverage = function(t) {
            this.webgl2 && this.alphaToCoverage !== t && (this.alphaToCoverage = t,
            t ? this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE) : this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE))
        }
        ,
        i.setTransformFeedbackBuffer = function(t) {
            if (this.transformFeedbackBuffer !== t && (this.transformFeedbackBuffer = t,
            this.webgl2)) {
                var e = this.gl;
                t ? (this.feedback || (this.feedback = e.createTransformFeedback()),
                e.bindTransformFeedback(e.TRANSFORM_FEEDBACK, this.feedback)) : e.bindTransformFeedback(e.TRANSFORM_FEEDBACK, null)
            }
        }
        ,
        i.setRaster = function(t) {
            this.raster !== t && (this.raster = t,
            this.webgl2 && (t ? this.gl.disable(this.gl.RASTERIZER_DISCARD) : this.gl.enable(this.gl.RASTERIZER_DISCARD)))
        }
        ,
        i.setDepthBias = function(t) {
            this.depthBiasEnabled !== t && (this.depthBiasEnabled = t,
            t ? this.gl.enable(this.gl.POLYGON_OFFSET_FILL) : this.gl.disable(this.gl.POLYGON_OFFSET_FILL))
        }
        ,
        i.setDepthBiasValues = function(t, e) {
            this.gl.polygonOffset(e, t)
        }
        ,
        i.getBlending = function() {
            return this.blending
        }
        ,
        i.setBlending = function(t) {
            if (this.blending !== t) {
                var e = this.gl;
                t ? e.enable(e.BLEND) : e.disable(e.BLEND),
                this.blending = t
            }
        }
        ,
        i.setStencilTest = function(t) {
            if (this.stencil !== t) {
                var e = this.gl;
                t ? e.enable(e.STENCIL_TEST) : e.disable(e.STENCIL_TEST),
                this.stencil = t
            }
        }
        ,
        i.setStencilFunc = function(t, e, i) {
            this.stencilFuncFront === t && this.stencilRefFront === e && this.stencilMaskFront === i && this.stencilFuncBack === t && this.stencilRefBack === e && this.stencilMaskBack === i || (this.gl.stencilFunc(this.glComparison[t], e, i),
            this.stencilFuncFront = this.stencilFuncBack = t,
            this.stencilRefFront = this.stencilRefBack = e,
            this.stencilMaskFront = this.stencilMaskBack = i)
        }
        ,
        i.setStencilFuncFront = function(t, e, i) {
            if (this.stencilFuncFront !== t || this.stencilRefFront !== e || this.stencilMaskFront !== i) {
                var n = this.gl;
                n.stencilFuncSeparate(n.FRONT, this.glComparison[t], e, i),
                this.stencilFuncFront = t,
                this.stencilRefFront = e,
                this.stencilMaskFront = i
            }
        }
        ,
        i.setStencilFuncBack = function(t, e, i) {
            if (this.stencilFuncBack !== t || this.stencilRefBack !== e || this.stencilMaskBack !== i) {
                var n = this.gl;
                n.stencilFuncSeparate(n.BACK, this.glComparison[t], e, i),
                this.stencilFuncBack = t,
                this.stencilRefBack = e,
                this.stencilMaskBack = i
            }
        }
        ,
        i.setStencilOperation = function(t, e, i, n) {
            this.stencilFailFront === t && this.stencilZfailFront === e && this.stencilZpassFront === i && this.stencilFailBack === t && this.stencilZfailBack === e && this.stencilZpassBack === i || (this.gl.stencilOp(this.glStencilOp[t], this.glStencilOp[e], this.glStencilOp[i]),
            this.stencilFailFront = this.stencilFailBack = t,
            this.stencilZfailFront = this.stencilZfailBack = e,
            this.stencilZpassFront = this.stencilZpassBack = i),
            this.stencilWriteMaskFront === n && this.stencilWriteMaskBack === n || (this.gl.stencilMask(n),
            this.stencilWriteMaskFront = n,
            this.stencilWriteMaskBack = n)
        }
        ,
        i.setStencilOperationFront = function(t, e, i, n) {
            this.stencilFailFront === t && this.stencilZfailFront === e && this.stencilZpassFront === i || (this.gl.stencilOpSeparate(this.gl.FRONT, this.glStencilOp[t], this.glStencilOp[e], this.glStencilOp[i]),
            this.stencilFailFront = t,
            this.stencilZfailFront = e,
            this.stencilZpassFront = i),
            this.stencilWriteMaskFront !== n && (this.gl.stencilMaskSeparate(this.gl.FRONT, n),
            this.stencilWriteMaskFront = n)
        }
        ,
        i.setStencilOperationBack = function(t, e, i, n) {
            this.stencilFailBack === t && this.stencilZfailBack === e && this.stencilZpassBack === i || (this.gl.stencilOpSeparate(this.gl.BACK, this.glStencilOp[t], this.glStencilOp[e], this.glStencilOp[i]),
            this.stencilFailBack = t,
            this.stencilZfailBack = e,
            this.stencilZpassBack = i),
            this.stencilWriteMaskBack !== n && (this.gl.stencilMaskSeparate(this.gl.BACK, n),
            this.stencilWriteMaskBack = n)
        }
        ,
        i.setBlendFunction = function(t, e) {
            (this.blendSrc !== t || this.blendDst !== e || this.separateAlphaBlend) && (this.gl.blendFunc(this.glBlendFunction[t], this.glBlendFunction[e]),
            this.blendSrc = t,
            this.blendDst = e,
            this.separateAlphaBlend = !1)
        }
        ,
        i.setBlendFunctionSeparate = function(t, e, i, n) {
            this.blendSrc === t && this.blendDst === e && this.blendSrcAlpha === i && this.blendDstAlpha === n && this.separateAlphaBlend || (this.gl.blendFuncSeparate(this.glBlendFunction[t], this.glBlendFunction[e], this.glBlendFunction[i], this.glBlendFunction[n]),
            this.blendSrc = t,
            this.blendDst = e,
            this.blendSrcAlpha = i,
            this.blendDstAlpha = n,
            this.separateAlphaBlend = !0)
        }
        ,
        i.setBlendEquation = function(t) {
            (this.blendEquation !== t || this.separateAlphaEquation) && (this.gl.blendEquation(this.glBlendEquation[t]),
            this.blendEquation = t,
            this.separateAlphaEquation = !1)
        }
        ,
        i.setBlendEquationSeparate = function(t, e) {
            this.blendEquation === t && this.blendAlphaEquation === e && this.separateAlphaEquation || (this.gl.blendEquationSeparate(this.glBlendEquation[t], this.glBlendEquation[e]),
            this.blendEquation = t,
            this.blendAlphaEquation = e,
            this.separateAlphaEquation = !0)
        }
        ,
        i.setCullMode = function(t) {
            if (this.cullMode !== t) {
                if (0 === t)
                    this.gl.disable(this.gl.CULL_FACE);
                else {
                    0 === this.cullMode && this.gl.enable(this.gl.CULL_FACE);
                    var e = this.glCull[t];
                    this.cullFace !== e && (this.gl.cullFace(e),
                    this.cullFace = e)
                }
                this.cullMode = t
            }
        }
        ,
        i.getCullMode = function() {
            return this.cullMode
        }
        ,
        i.setIndexBuffer = function(t) {
            this.indexBuffer = t
        }
        ,
        i.setVertexBuffer = function(t) {
            t && this.vertexBuffers.push(t)
        }
        ,
        i.compileShaderSource = function(t, e) {
            var i = this.gl
              , n = e ? this.vertexShaderCache[t] : this.fragmentShaderCache[t];
            return n || (n = i.createShader(e ? i.VERTEX_SHADER : i.FRAGMENT_SHADER),
            i.shaderSource(n, t),
            i.compileShader(n),
            e ? this.vertexShaderCache[t] = n : this.fragmentShaderCache[t] = n),
            n
        }
        ,
        i.compileAndLinkShader = function(t) {
            var e = this.gl
              , i = t.definition
              , n = i.attributes
              , s = this.compileShaderSource(i.vshader, !0)
              , a = this.compileShaderSource(i.fshader, !1)
              , r = e.createProgram();
            if (e.attachShader(r, s),
            e.attachShader(r, a),
            this.webgl2 && i.useTransformFeedback) {
                var o = [];
                for (var h in n)
                    n.hasOwnProperty(h) && o.push("out_" + h);
                e.transformFeedbackVaryings(r, o, e.INTERLEAVED_ATTRIBS)
            }
            var l = {};
            for (var c in n)
                if (n.hasOwnProperty(c)) {
                    var u = n[c]
                      , d = Ye[u];
                    l[d] = c,
                    e.bindAttribLocation(r, d, c)
                }
            e.linkProgram(r),
            t._glVertexShader = s,
            t._glFragmentShader = a,
            t._glProgram = r
        }
        ,
        i.createShader = function(t) {
            this.compileAndLinkShader(t),
            this.shaders.push(t)
        }
        ,
        i.destroyShader = function(t) {
            var e = this.shaders.indexOf(t);
            -1 !== e && this.shaders.splice(e, 1),
            t._glProgram && (this.gl.deleteProgram(t._glProgram),
            t._glProgram = null,
            this.removeShaderFromCache(t))
        }
        ,
        i._isShaderCompiled = function(t, e, i, n) {
            var s = this.gl;
            if (!s.getShaderParameter(e, s.COMPILE_STATUS)) {
                var a = s.getShaderInfoLog(e)
                  , r = this._processError(i, a)
                  , o = r[0];
                r[1];
                var h = "Failed to compile " + n + " shader:\n\n" + a + "\n" + o;
                return console.error(h),
                !1
            }
            return !0
        }
        ,
        i._processError = function(t, e) {
            if (!t)
                return "";
            var i = t.split("\n")
              , n = {}
              , s = ""
              , a = 0
              , r = i.length;
            if (e && e.startsWith("ERROR:")) {
                var o = e.match(/^ERROR:\s([0-9]+):([0-9]+):\s*(.+)/);
                o && (n.message = o[3],
                n.line = parseInt(o[2], 10),
                a = Math.max(0, n.line - 6),
                r = Math.min(i.length, n.line + 5))
            }
            for (var h = a; h < r; h++)
                s += h + 1 + ":\t" + i[h] + "\n";
            return n.source = t,
            [s, n]
        }
        ,
        i.postLink = function(t) {
            var e, i, n, s, a = this.gl, r = t._glProgram, o = t.definition;
            if (!this._isShaderCompiled(t, t._glVertexShader, o.vshader, "vertex"))
                return !1;
            if (!this._isShaderCompiled(t, t._glFragmentShader, o.fshader, "fragment"))
                return !1;
            if (!a.getProgramParameter(r, a.LINK_STATUS)) {
                var h = "Failed to link shader program. Error: " + a.getProgramInfoLog(r);
                return console.error(h),
                !1
            }
            e = 0;
            for (var l = a.getProgramParameter(r, a.ACTIVE_ATTRIBUTES); e < l; )
                i = a.getActiveAttrib(r, e++),
                n = a.getAttribLocation(r, i.name),
                void 0 === o.attributes[i.name] && console.error('Vertex shader attribute "' + i.name + '" is not mapped to a semantic in shader definition.'),
                s = new hs(this,o.attributes[i.name],this.pcUniformType[i.type],n),
                t.attributes.push(s);
            e = 0;
            for (var c = a.getProgramParameter(r, a.ACTIVE_UNIFORMS); e < c; )
                i = a.getActiveUniform(r, e++),
                n = a.getUniformLocation(r, i.name),
                s = new hs(this,i.name,this.pcUniformType[i.type],n),
                i.type === a.SAMPLER_2D || i.type === a.SAMPLER_CUBE || this.webgl2 && (i.type === a.SAMPLER_2D_SHADOW || i.type === a.SAMPLER_CUBE_SHADOW || i.type === a.SAMPLER_3D) ? t.samplers.push(s) : t.uniforms.push(s);
            return t.ready = !0,
            !0
        }
        ,
        i.setShader = function(t) {
            if (t !== this.shader) {
                if (!t.ready && !this.postLink(t))
                    return !1;
                this.shader = t,
                this.gl.useProgram(t._glProgram),
                this.attributesInvalidated = !0
            }
            return !0
        }
        ,
        i.getHdrFormat = function() {
            return this.textureHalfFloatRenderable ? Zt : this.textureFloatRenderable ? Qt : 7
        }
        ,
        i.getBoneLimit = function() {
            return this.boneLimit
        }
        ,
        i.setBoneLimit = function(t) {
            this.boneLimit = t
        }
        ,
        i.resizeCanvas = function(t, e) {
            this._width = t,
            this._height = e;
            var i = Math.min(this._maxPixelRatio, E.browser ? window.devicePixelRatio : 1);
            t = Math.floor(t * i),
            e = Math.floor(e * i),
            this.canvas.width === t && this.canvas.height === e || (this.canvas.width = t,
            this.canvas.height = e,
            this.fire(cs, t, e))
        }
        ,
        i.setResolution = function(t, e) {
            this._width = t,
            this._height = e,
            this.canvas.width = t,
            this.canvas.height = e,
            this.fire(cs, t, e)
        }
        ,
        i.clearShaderCache = function() {
            var t = this.gl;
            for (var e in this.fragmentShaderCache)
                t.deleteShader(this.fragmentShaderCache[e]),
                delete this.fragmentShaderCache[e];
            for (var i in this.vertexShaderCache)
                t.deleteShader(this.vertexShaderCache[i]),
                delete this.vertexShaderCache[i];
            this.programLib.clearCache()
        }
        ,
        i.clearVertexArrayObjectCache = function() {
            var t = this.gl;
            this._vaoMap.forEach((function(e, i, n) {
                t.deleteVertexArray(e)
            }
            )),
            this._vaoMap.clear()
        }
        ,
        i.removeShaderFromCache = function(t) {
            this.programLib.removeFromCache(t)
        }
        ,
        G(e, [{
            key: "width",
            get: function() {
                return this.gl.drawingBufferWidth || this.canvas.width
            }
        }, {
            key: "height",
            get: function() {
                return this.gl.drawingBufferHeight || this.canvas.height
            }
        }, {
            key: "fullscreen",
            get: function() {
                return !!document.fullscreenElement
            },
            set: function(t) {
                t ? this.gl.canvas.requestFullscreen() : document.exitFullscreen()
            }
        }, {
            key: "enableAutoInstancing",
            get: function() {
                return this._enableAutoInstancing
            },
            set: function(t) {
                this._enableAutoInstancing = t && this.extInstancing
            }
        }, {
            key: "maxPixelRatio",
            get: function() {
                return this._maxPixelRatio
            },
            set: function(t) {
                this._maxPixelRatio = t,
                this.resizeCanvas(this._width, this._height)
            }
        }, {
            key: "textureFloatHighPrecision",
            get: function() {
                return void 0 === this._textureFloatHighPrecision && (this._textureFloatHighPrecision = function(t) {
                    if (!t.textureFloatRenderable)
                        return !1;
                    var e = mi(t, ni.fullscreenQuadVS, ni.precisionTestPS, "ptest1")
                      , i = mi(t, ni.fullscreenQuadVS, ni.precisionTest2PS, "ptest2")
                      , n = {
                        format: Qt,
                        width: 1,
                        height: 1,
                        mipmaps: !1,
                        minFilter: 0,
                        magFilter: 0
                    }
                      , s = new Mi(t,n);
                    s.name = "testFHP";
                    var a = new ms({
                        colorBuffer: s,
                        depth: !1
                    });
                    ei(t, a, e),
                    n.format = 7;
                    var r = new Mi(t,n);
                    r.name = "testFHP";
                    var o = new ms({
                        colorBuffer: r,
                        depth: !1
                    });
                    t.constantTexSource.setValue(s),
                    ei(t, o, i);
                    var h = t.activeFramebuffer;
                    t.setFramebuffer(o._glFrameBuffer);
                    var l = new Uint8Array(4);
                    t.readPixels(0, 0, 1, 1, l),
                    t.setFramebuffer(h);
                    var c = l[0] / 255 / 16777216 + l[1] / 255 / 65536 + l[2] / 255 / 256 + l[3] / 255;
                    return s.destroy(),
                    a.destroy(),
                    r.destroy(),
                    o.destroy(),
                    0 === c
                }(this)),
                this._textureFloatHighPrecision
            }
        }, {
            key: "textureHalfFloatUpdatable",
            get: function() {
                return void 0 === this._textureHalfFloatUpdatable && (this.webgl2 ? this._textureHalfFloatUpdatable = !0 : this._textureHalfFloatUpdatable = function(t, e) {
                    var i = !0
                      , n = t.createTexture();
                    t.bindTexture(t.TEXTURE_2D, n),
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.NEAREST),
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.NEAREST),
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
                    t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE);
                    var s = new Uint16Array(16);
                    return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, 2, 2, 0, t.RGBA, e, s),
                    t.getError() !== t.NO_ERROR && (i = !1,
                    console.log("Above error related to HALF_FLOAT_OES can be ignored, it was triggered by testing half float texture support")),
                    t.bindTexture(t.TEXTURE_2D, null),
                    t.deleteTexture(n),
                    i
                }(this.gl, this.extTextureHalfFloat.HALF_FLOAT_OES)),
                this._textureHalfFloatUpdatable
            }
        }]),
        e
    }(u)
      , ps = {
        depth: !0,
        face: 0
    }
      , ms = function() {
        function t(t) {
            var e, i, n = arguments[1], s = arguments[2];
            if (t instanceof fs ? (this._colorBuffer = n,
            t = s) : this._colorBuffer = t.colorBuffer,
            this._colorBuffer && (this._colorBuffer._isRenderTarget = !0),
            this._device = null,
            this._glFrameBuffer = null,
            this._glDepthBuffer = null,
            t = void 0 !== t ? t : ps,
            this._depthBuffer = t.depthBuffer,
            this._face = void 0 !== t.face ? t.face : 0,
            this._depthBuffer) {
                var a = this._depthBuffer._format;
                a === Jt ? (this._depth = !0,
                this._stencil = !1) : a === te ? (this._depth = !0,
                this._stencil = !0) : (this._depth = !1,
                this._stencil = !1)
            } else
                this._depth = void 0 === t.depth || t.depth,
                this._stencil = void 0 !== t.stencil && t.stencil;
            (this._samples = void 0 !== t.samples ? t.samples : 1,
            this.autoResolve = void 0 === t.autoResolve || t.autoResolve,
            this._glResolveFrameBuffer = null,
            this._glMsaaColorBuffer = null,
            this._glMsaaDepthBuffer = null,
            this.name = t.name,
            this.name) || (this.name = null == (e = this._colorBuffer) ? void 0 : e.name);
            this.name || (this.name = null == (i = this._depthBuffer) ? void 0 : i.name);
            this.name || (this.name = "Untitled"),
            this.flipY = !!t.flipY
        }
        var e = t.prototype;
        return e.destroy = function() {
            var t = this._device;
            if (t) {
                var e = t.targets.indexOf(this);
                -1 !== e && t.targets.splice(e, 1),
                this.destroyFrameBuffers()
            }
        }
        ,
        e.destroyFrameBuffers = function() {
            var t = this._device;
            if (t) {
                var e = t.gl;
                this._glFrameBuffer && (e.deleteFramebuffer(this._glFrameBuffer),
                this._glFrameBuffer = null),
                this._glDepthBuffer && (e.deleteRenderbuffer(this._glDepthBuffer),
                this._glDepthBuffer = null),
                this._glResolveFrameBuffer && (e.deleteFramebuffer(this._glResolveFrameBuffer),
                this._glResolveFrameBuffer = null),
                this._glMsaaColorBuffer && (e.deleteRenderbuffer(this._glMsaaColorBuffer),
                this._glMsaaColorBuffer = null),
                this._glMsaaDepthBuffer && (e.deleteRenderbuffer(this._glMsaaDepthBuffer),
                this._glMsaaDepthBuffer = null)
            }
        }
        ,
        e.destroyTextureBuffers = function() {
            this._depthBuffer && (this._depthBuffer.destroy(),
            this._depthBuffer = null),
            this._colorBuffer && (this._colorBuffer.destroy(),
            this._colorBuffer = null)
        }
        ,
        e.loseContext = function() {
            this._glFrameBuffer = void 0,
            this._glDepthBuffer = void 0,
            this._glResolveFrameBuffer = void 0,
            this._glMsaaColorBuffer = void 0,
            this._glMsaaDepthBuffer = void 0
        }
        ,
        e.resolve = function(t, e) {
            if (void 0 === t && (t = !0),
            void 0 === e && (e = !!this._depthBuffer),
            this._device && this._device.webgl2) {
                var i = this._device.gl;
                i.bindFramebuffer(i.READ_FRAMEBUFFER, this._glFrameBuffer),
                i.bindFramebuffer(i.DRAW_FRAMEBUFFER, this._glResolveFrameBuffer),
                i.blitFramebuffer(0, 0, this.width, this.height, 0, 0, this.width, this.height, (t ? i.COLOR_BUFFER_BIT : 0) | (e ? i.DEPTH_BUFFER_BIT : 0), i.NEAREST),
                i.bindFramebuffer(i.FRAMEBUFFER, this._glFrameBuffer)
            }
        }
        ,
        e.copy = function(t, e, i) {
            if (!this._device) {
                if (!t._device)
                    return !1;
                this._device = t._device
            }
            return this._device.copyRenderTarget(t, this, e, i)
        }
        ,
        G(t, [{
            key: "colorBuffer",
            get: function() {
                return this._colorBuffer
            }
        }, {
            key: "depthBuffer",
            get: function() {
                return this._depthBuffer
            }
        }, {
            key: "face",
            get: function() {
                return this._face
            }
        }, {
            key: "width",
            get: function() {
                return this._colorBuffer ? this._colorBuffer.width : this._depthBuffer.width
            }
        }, {
            key: "height",
            get: function() {
                return this._colorBuffer ? this._colorBuffer.height : this._depthBuffer.height
            }
        }]),
        t
    }();
    function _s(t, e, i) {
        var n = e._colorBuffer;
        if (7 === n.format) {
            var s = new Uint8Array(n.width * n.height * 4)
              , a = t.gl;
            t.setFramebuffer(e._glFrameBuffer),
            a.readPixels(0, 0, n.width, n.height, a.RGBA, a.UNSIGNED_BYTE, s),
            n._levels || (n._levels = []),
            n._levels[0] || (n._levels[0] = []),
            n._levels[0][i] = s
        }
    }
    function gs(t, e) {
        return Math.atan2(t * e, Math.sqrt(t * t + e * e + 1))
    }
    function vs(t, e, i) {
        var n = 2 * (t + .5) / i - 1
          , s = 2 * (e + .5) / i - 1
          , a = 1 / i
          , r = (n *= 1 - 1 / i) - a
          , o = (s *= 1 - 1 / i) - a
          , h = n + a
          , l = s + a
          , c = gs(r, o) - gs(r, l) - gs(h, o) + gs(h, l);
        return 0 === t && 0 === e || t === i - 1 && 0 === e || 0 === t && e === i - 1 || t === i - 1 && e === i - 1 ? c /= 3 : 0 !== t && 0 !== e && t !== i - 1 && e !== i - 1 || (c *= .5),
        c
    }
    function ys(t, e, i) {
        if (7 !== e.format)
            return null;
        if (!e._levels[0] || !e._levels[0][0])
            return null;
        var n = e.width;
        if (!e._levels[0][0].length) {
            if (!(e._levels[0][0]instanceof HTMLImageElement))
                return null;
            for (var s = mi(t, ni.fullscreenQuadVS, ni.fullscreenQuadPS, "fsQuadSimple"), a = t.scope.resolve("source"), r = 0; r < 6; r++) {
                var o = e._levels[0][r]
                  , h = new Mi(t,{
                    cubemap: !1,
                    type: Fe,
                    format: e.format,
                    width: n,
                    height: n,
                    mipmaps: !1
                });
                h.name = "prefiltered-cube",
                h._levels[0] = o,
                h.upload();
                var l = new Mi(t,{
                    cubemap: !1,
                    type: Fe,
                    format: e.format,
                    width: n,
                    height: n,
                    mipmaps: !1
                });
                l.name = "prefiltered-cube";
                var c = new ms({
                    colorBuffer: l,
                    depth: !1
                });
                a.setValue(h),
                ei(t, c, s);
                var u = t.gl;
                u.bindFramebuffer(u.FRAMEBUFFER, c._glFrameBuffer);
                var d = new Uint8Array(n * n * 4);
                u.readPixels(0, 0, h.width, h.height, u.RGBA, u.UNSIGNED_BYTE, d),
                e._levels[0][r] = d
            }
        }
        for (var f = [], p = 0; p < n; p++)
            for (var m = 0; m < n; m++) {
                var _ = m / (n - 1) * 2 - 1
                  , g = p / (n - 1) * 2 - 1;
                f[p * n + m] = new lt(_,g,1).normalize()
            }
        for (var v = new Float32Array(27), y = 0, x = 0; x < 6; x++)
            for (var b = 0; b < n; b++)
                for (var S = 0; S < n; S++) {
                    var T = b * n + S
                      , w = vs(S, b, n)
                      , M = 4 * w / 17
                      , A = 8 * w / 17
                      , C = 15 * w / 17
                      , E = 5 * w / 68
                      , P = 15 * w / 68
                      , R = f[T]
                      , I = void 0
                      , L = void 0
                      , D = void 0;
                    0 === x ? (I = R.z,
                    L = -R.y,
                    D = -R.x) : 1 === x ? (I = -R.z,
                    L = -R.y,
                    D = R.x) : 2 === x ? (I = R.x,
                    L = R.z,
                    D = R.y) : 3 === x ? (I = R.x,
                    L = -R.z,
                    D = -R.y) : 4 === x ? (I = R.x,
                    L = -R.y,
                    D = R.z) : 5 === x && (I = -R.x,
                    L = -R.y,
                    D = -R.z),
                    i || (I = -I);
                    for (var k = e._levels[0][x][4 * T + 3] / 255, O = 0; O < 3; O++) {
                        var F = e._levels[0][x][4 * T + O] / 255;
                        e.type === Be ? (F *= 8 * k,
                        F *= F) : F = Math.pow(F, 2.2),
                        v[0 + O] += F * M,
                        v[3 + O] += F * A * I,
                        v[6 + O] += F * A * L,
                        v[9 + O] += F * A * D,
                        v[12 + O] += F * C * I * D,
                        v[15 + O] += F * C * D * L,
                        v[18 + O] += F * C * L * I,
                        v[21 + O] += F * E * (3 * D * D - 1),
                        v[24 + O] += F * P * (I * I - L * L),
                        y += w
                    }
                }
        for (var B = 0; B < v.length; B++)
            v[B] *= 4 * Math.PI / y;
        return v
    }
    function xs(t) {
        switch (t.type) {
        case Be:
            return "RGBM";
        case Ne:
            return "RGBE";
        default:
            switch (t.format) {
            case Kt:
            case $t:
            case Zt:
            case Qt:
                return "Linear";
            default:
                return "Gamma"
            }
        }
    }
    function bs(t) {
        switch (t === ze && (t = Ge),
        t) {
        case Ve:
            return "Cubemap";
        case Ge:
            return "Equirect";
        case We:
            return "Octahedral"
        }
    }
    function Ss(t, e, i) {
        void 0 === i && (i = {}),
        t instanceof fs && (t = arguments[1],
        e = arguments[2],
        i = {
            specularPower: void 0 === arguments[3] ? 1 : arguments[3],
            numSamples: void 0 === arguments[4] ? 1024 : arguments[4]
        });
        var n = t.device
          , s = i.hasOwnProperty("specularPower") ? i.specularPower : 1
          , a = i.hasOwnProperty("numSamples") ? i.numSamples : 1024
          , r = i.hasOwnProperty("face") ? i.face : null
          , o = 1 === s ? "reproject" : "prefilter"
          , h = "decode" + xs(t)
          , l = "encode" + xs(e)
          , c = "sample" + bs(t.projection)
          , u = "getDirection" + bs(e.projection)
          , d = mi(n, ni.fullscreenQuadVS, "#define PROCESS_FUNC " + o + "\n#define DECODE_FUNC " + h + "\n#define ENCODE_FUNC " + l + "\n#define SOURCE_FUNC " + c + "\n#define TARGET_FUNC " + u + "\n#define NUM_SAMPLES " + a + "\n#define NUM_SAMPLES_SQRT " + Math.round(Math.sqrt(a)).toFixed(1) + "\n\n" + ni.reprojectPS, o + h + l + c + u, null, n.webgl2 ? "" : "#extension GL_OES_standard_derivatives: enable\n")
          , f = n.scope.resolve(t.cubemap ? "sourceCube" : "sourceTex");
        f.setValue(t);
        for (var p = n.scope.resolve("params"), m = [0, s, 1 - (t.fixCubemapSeams ? 1 / t.width : 0), 1 - (e.fixCubemapSeams ? 1 / e.width : 0)], _ = 0; _ < (e.cubemap ? 6 : 1); _++)
            if (null === r || _ === r) {
                var g = new ms({
                    colorBuffer: e,
                    face: _,
                    depth: !1
                });
                m[0] = _,
                p.setValue(m),
                ei(n, g, d),
                g.destroy()
            }
    }
    var Ts = function() {
        function t() {}
        return t.isValidSkyboxCubemap = function(t) {
            return t && t.cubemap && (t.type === Fe || t.type === Be)
        }
        ,
        t.generateSkyboxCubemap = function(t, e) {
            void 0 === e && (e = 0),
            0 === e && (e = t.cubemap ? t.width : t.width / 4);
            var i = t.device
              , n = new Mi(i,{
                name: "skyboxFaces",
                cubemap: !0,
                width: e,
                height: e,
                type: Be,
                addressU: 1,
                addressV: 1,
                fixCubemapSeams: !1,
                mipmaps: !1
            });
            return Ss(t, n),
            n
        }
        ,
        t.generatePrefilteredCubemaps = function(t, e) {
            void 0 === e && (e = !0);
            var i = t.device
              , n = []
              , s = function(t) {
                return new Mi(i,{
                    name: "skyboxPrefilter" + t,
                    cubemap: !0,
                    width: t,
                    height: t,
                    type: Be,
                    addressU: 1,
                    addressV: 1,
                    fixCubemapSeams: !0,
                    mipmaps: !1
                })
            };
            n[0] = s(128),
            Ss(t, n[0], {
                numSamples: t.mipmaps ? 1 : 1024
            });
            for (var a = [64, 32, 16, 8, 4, 2, 1], r = [512, 128, 32, 8, 2, 1, 1], o = 0; o < a.length; ++o)
                n[o + 1] = s(a[o]),
                Ss(n[0], n[o + 1], {
                    specularPower: r[o],
                    numSamples: 2048
                });
            return e && (i.activeTexture(0),
            n.forEach((function(t) {
                i.bindTexture(t),
                i.gl.generateMipmap(t._glTarget),
                i.gl.texParameteri(t._glTarget, i.gl.TEXTURE_MIN_FILTER, i.gl.LINEAR_MIPMAP_LINEAR)
            }
            ))),
            n
        }
        ,
        t.generatePrefilteredCubemap = function(e) {
            var i = e.device
              , n = i.gl
              , s = t.generatePrefilteredCubemaps(e, !1)
              , a = new Mi(i,{
                name: "skyboxPrefilterSet",
                cubemap: !0,
                width: 128,
                height: 128,
                type: Be,
                addressU: 1,
                addressV: 1,
                fixCubemapSeams: !1,
                mipmaps: !1
            });
            return a._isRenderTarget = !0,
            i.setTexture(a, 0),
            s.forEach((function(t, e) {
                for (var s = 0; s < 6; ++s) {
                    var r = new ms({
                        colorBuffer: t,
                        face: s,
                        depth: !1
                    });
                    i.initRenderTarget(r);
                    var o = 128 >> e;
                    n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + s, e, a._glInternalFormat, o, o, 0, a._glFormat, a._glPixelType, null),
                    n.copyTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + s, e, n.RGBA, 0, 0, o, o, 0),
                    r.destroy()
                }
            }
            )),
            n.texParameteri(a._glTarget, n.TEXTURE_MIN_FILTER, n.LINEAR_MIPMAP_LINEAR),
            s.forEach((function(t) {
                return t.destroy()
            }
            )),
            a
        }
        ,
        t
    }()
      , ws = function() {
        function t(t, e, i, n, s) {
            void 0 === n && (n = 0),
            this.device = t,
            this.format = e,
            this.numIndices = i,
            this.usage = n;
            var a, r = this.device.gl;
            0 === e ? (a = 1,
            this.glFormat = r.UNSIGNED_BYTE) : 1 === e ? (a = 2,
            this.glFormat = r.UNSIGNED_SHORT) : 2 === e && (a = 4,
            this.glFormat = r.UNSIGNED_INT),
            this.bytesPerIndex = a,
            this.numBytes = this.numIndices * a,
            s ? this.setData(s) : this.storage = new ArrayBuffer(this.numBytes),
            t._vram.ib += this.numBytes,
            this.device.buffers.push(this)
        }
        var e = t.prototype;
        return e.destroy = function() {
            var t = this.device
              , e = t.buffers.indexOf(this);
            (-1 !== e && t.buffers.splice(e, 1),
            this.bufferId) && (this.device.gl.deleteBuffer(this.bufferId),
            this.device._vram.ib -= this.storage.byteLength,
            this.bufferId = null,
            this.device.indexBuffer === this && (this.device.indexBuffer = null))
        }
        ,
        e.loseContext = function() {
            this.bufferId = void 0
        }
        ,
        e.getFormat = function() {
            return this.format
        }
        ,
        e.getNumIndices = function() {
            return this.numIndices
        }
        ,
        e.lock = function() {
            return this.storage
        }
        ,
        e.unlock = function() {
            var t, e = this.device.gl;
            switch (this.bufferId || (this.bufferId = e.createBuffer()),
            this.usage) {
            case 0:
                t = e.STATIC_DRAW;
                break;
            case 1:
                t = e.DYNAMIC_DRAW;
                break;
            case 2:
                t = e.STREAM_DRAW;
                break;
            case 3:
                t = this.device.webgl2 ? e.DYNAMIC_COPY : e.STATIC_DRAW
            }
            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.bufferId),
            e.bufferData(e.ELEMENT_ARRAY_BUFFER, this.storage, t)
        }
        ,
        e.setData = function(t) {
            return t.byteLength === this.numBytes && (this.storage = t,
            this.unlock(),
            !0)
        }
        ,
        e._lockTypedArray = function() {
            var t = this.lock();
            return 2 === this.format ? new Uint32Array(t) : 1 === this.format ? new Uint16Array(t) : new Uint8Array(t)
        }
        ,
        e.writeData = function(t, e) {
            var i = this._lockTypedArray();
            if (t.length > e)
                if (ArrayBuffer.isView(t))
                    t = t.subarray(0, e),
                    i.set(t);
                else
                    for (var n = 0; n < e; n++)
                        i[n] = t[n];
            else
                i.set(t);
            this.unlock()
        }
        ,
        e.readData = function(t) {
            var e = this._lockTypedArray()
              , i = this.numIndices;
            if (ArrayBuffer.isView(t))
                t.set(e);
            else {
                t.length = 0;
                for (var n = 0; n < i; n++)
                    t[n] = e[n]
            }
            return i
        }
        ,
        t
    }();
    function Ms(t) {
        this.array[this.index] = t
    }
    function As(t, e) {
        this.array[this.index] = t,
        this.array[this.index + 1] = e
    }
    function Cs(t, e, i) {
        this.array[this.index] = t,
        this.array[this.index + 1] = e,
        this.array[this.index + 2] = i
    }
    function Es(t, e, i, n) {
        this.array[this.index] = t,
        this.array[this.index + 1] = e,
        this.array[this.index + 2] = i,
        this.array[this.index + 3] = n
    }
    function Ps(t, e, i) {
        this.array[t] = e[i]
    }
    function Rs(t, e, i) {
        this.array[t] = e[i],
        this.array[t + 1] = e[i + 1]
    }
    function Is(t, e, i) {
        this.array[t] = e[i],
        this.array[t + 1] = e[i + 1],
        this.array[t + 2] = e[i + 2]
    }
    function Ls(t, e, i) {
        this.array[t] = e[i],
        this.array[t + 1] = e[i + 1],
        this.array[t + 2] = e[i + 2],
        this.array[t + 3] = e[i + 3]
    }
    function Ds(t, e, i) {
        e[i] = this.array[t]
    }
    function ks(t, e, i) {
        e[i] = this.array[t],
        e[i + 1] = this.array[t + 1]
    }
    function Os(t, e, i) {
        e[i] = this.array[t],
        e[i + 1] = this.array[t + 1],
        e[i + 2] = this.array[t + 2]
    }
    function Fs(t, e, i) {
        e[i] = this.array[t],
        e[i + 1] = this.array[t + 1],
        e[i + 2] = this.array[t + 2],
        e[i + 3] = this.array[t + 3]
    }
    var Bs = function() {
        function t(t, e, i) {
            switch (this.index = 0,
            this.numComponents = e.numComponents,
            i.interleaved ? this.array = new He[e.dataType](t,e.offset) : this.array = new He[e.dataType](t,e.offset,i.vertexCount * e.numComponents),
            this.stride = e.stride / this.array.constructor.BYTES_PER_ELEMENT,
            e.numComponents) {
            case 1:
                this.set = Ms,
                this.getToArray = Ds,
                this.setFromArray = Ps;
                break;
            case 2:
                this.set = As,
                this.getToArray = ks,
                this.setFromArray = Rs;
                break;
            case 3:
                this.set = Cs,
                this.getToArray = Os,
                this.setFromArray = Is;
                break;
            case 4:
                this.set = Es,
                this.getToArray = Fs,
                this.setFromArray = Ls
            }
        }
        var e = t.prototype;
        return e.get = function(t) {
            return this.array[this.index + t]
        }
        ,
        e.set = function(t, e, i, n) {}
        ,
        e.getToArray = function(t, e, i) {}
        ,
        e.setFromArray = function(t, e, i) {}
        ,
        t
    }()
      , Ns = function() {
        function t(t) {
            this.vertexBuffer = t,
            this.vertexFormatSize = t.getFormat().size,
            this.buffer = this.vertexBuffer.lock(),
            this.accessors = [],
            this.element = {};
            for (var e = this.vertexBuffer.getFormat(), i = 0; i < e.elements.length; i++) {
                var n = e.elements[i];
                this.accessors[i] = new Bs(this.buffer,n,e),
                this.element[n.name] = this.accessors[i]
            }
        }
        var e = t.prototype;
        return e.next = function(t) {
            void 0 === t && (t = 1);
            for (var e = 0, i = this.accessors, n = this.accessors.length; e < n; ) {
                var s = i[e++];
                s.index += t * s.stride
            }
        }
        ,
        e.end = function() {
            this.vertexBuffer.unlock()
        }
        ,
        e.writeData = function(t, e, i) {
            var n = this.element[t];
            if (n) {
                i > this.vertexBuffer.numVertices && (i = this.vertexBuffer.numVertices);
                var s = n.numComponents;
                if (this.vertexBuffer.getFormat().interleaved)
                    for (var a = 0, r = 0; r < i; r++)
                        n.setFromArray(a, e, r * s),
                        a += n.stride;
                else if (e.length > i * s) {
                    var o = i * s;
                    if (ArrayBuffer.isView(e))
                        e = e.subarray(0, o),
                        n.array.set(e);
                    else
                        for (var h = 0; h < o; h++)
                            n.array[h] = e[h]
                } else
                    n.array.set(e)
            }
        }
        ,
        e.readData = function(t, e) {
            var i = this.element[t]
              , n = 0;
            if (i) {
                var s;
                n = this.vertexBuffer.numVertices;
                var a = i.numComponents;
                if (this.vertexBuffer.getFormat().interleaved) {
                    Array.isArray(e) && (e.length = 0),
                    i.index = 0;
                    var r = 0;
                    for (s = 0; s < n; s++)
                        i.getToArray(r, e, s * a),
                        r += i.stride
                } else if (ArrayBuffer.isView(e))
                    e.set(i.array);
                else {
                    e.length = 0;
                    var o = n * a;
                    for (s = 0; s < o; s++)
                        e[s] = i.array[s]
                }
            }
            return n
        }
        ,
        t
    }()
      , Us = {
        type: 5,
        base: 0,
        count: 4,
        indexed: !1
    }
      , zs = function() {
        function t(t) {
            this.device = t,
            this.shader = null,
            this.depthMap = null,
            this.vertexBuffer = Vs(t),
            this.needsDepthBuffer = !1
        }
        return t.prototype.render = function(t, e, i) {}
        ,
        t
    }();
    function Vs(t) {
        var e = new Qe(t,[{
            semantic: se,
            components: 2,
            type: 6
        }])
          , i = new Ze(t,e,4)
          , n = new Ns(i);
        return n.element.POSITION.set(-1, -1),
        n.next(),
        n.element.POSITION.set(1, -1),
        n.next(),
        n.element.POSITION.set(-1, 1),
        n.next(),
        n.element.POSITION.set(1, 1),
        n.end(),
        i
    }
    function Gs(t, e, i, n, s) {
        var a = t.getRenderTarget();
        t.setRenderTarget(e),
        t.updateBegin();
        var r = e ? e.width : t.width
          , o = e ? e.height : t.height
          , h = 0
          , l = 0;
        s && (h = s.x * r,
        l = s.y * o,
        r *= s.z,
        o *= s.w);
        var c = t.vx
          , u = t.vy
          , d = t.vw
          , f = t.vh;
        t.setViewport(h, l, r, o);
        var p = t.sx
          , m = t.sy
          , _ = t.sw
          , g = t.sh;
        t.setScissor(h, l, r, o);
        var v = t.getBlending()
          , y = t.getDepthTest()
          , x = t.getDepthWrite()
          , b = t.getCullMode()
          , S = t.writeRed
          , T = t.writeGreen
          , w = t.writeBlue
          , M = t.writeAlpha;
        t.setBlending(!1),
        t.setDepthTest(!1),
        t.setDepthWrite(!1),
        t.setCullMode(0),
        t.setColorWrite(!0, !0, !0, !0),
        t.setVertexBuffer(i, 0),
        t.setShader(n),
        t.draw(Us),
        t.setBlending(v),
        t.setDepthTest(y),
        t.setDepthWrite(x),
        t.setCullMode(b),
        t.setColorWrite(S, T, w, M),
        t.updateEnd(),
        t.setRenderTarget(a),
        t.updateBegin(),
        t.setViewport(c, u, d, f),
        t.setScissor(p, m, _, g)
    }
    var Ws = function() {
        function t(t, e) {
            void 0 === e && (e = 3),
            this.device = t.device;
            var i = this.device.gl;
            this._inputBuffer = t,
            3 === e && t.usage !== e && (i.bindBuffer(i.ARRAY_BUFFER, t.bufferId),
            i.bufferData(i.ARRAY_BUFFER, t.storage, i.DYNAMIC_COPY)),
            this._outputBuffer = new Ze(t.device,t.format,t.numVertices,e,t.storage)
        }
        t.createShader = function(t, e, i) {
            return mi(t, e, null, i, !0)
        }
        ;
        var e = t.prototype;
        return e.destroy = function() {
            this._outputBuffer.destroy()
        }
        ,
        e.process = function(t, e) {
            void 0 === e && (e = !0);
            var i = this.device
              , n = i.getRenderTarget();
            if (i.setRenderTarget(null),
            i.updateBegin(),
            i.setVertexBuffer(this._inputBuffer, 0),
            i.setRaster(!1),
            i.setTransformFeedbackBuffer(this._outputBuffer),
            i.setShader(t),
            i.draw({
                type: 0,
                base: 0,
                count: this._inputBuffer.numVertices,
                indexed: !1
            }),
            i.setTransformFeedbackBuffer(null),
            i.setRaster(!0),
            i.updateEnd(),
            i.setRenderTarget(n),
            e) {
                var s = this._inputBuffer.bufferId;
                this._inputBuffer.bufferId = this._outputBuffer.bufferId,
                this._outputBuffer.bufferId = s,
                s = this._inputBuffer._vao,
                this._inputBuffer._vao = this._outputBuffer._vao,
                this._outputBuffer._vao = s
            }
        }
        ,
        G(t, [{
            key: "inputBuffer",
            get: function() {
                return this._inputBuffer
            }
        }, {
            key: "outputBuffer",
            get: function() {
                return this._outputBuffer
            }
        }]),
        t
    }()
      , Hs = function() {
        function t() {
            this._refCount = 0
        }
        var e = t.prototype;
        return e.incRefCount = function() {
            this._refCount++
        }
        ,
        e.decRefCount = function() {
            this._refCount--
        }
        ,
        e.getRefCount = function() {
            return this._refCount
        }
        ,
        t
    }()
      , Xs = 0
      , js = function() {
        function t() {
            this.initDefaults()
        }
        var e = t.prototype;
        return e.initDefaults = function() {
            this.recreate = !1,
            this.verticesUsage = 0,
            this.indicesUsage = 0,
            this.maxVertices = 0,
            this.maxIndices = 0,
            this.vertexCount = 0,
            this.indexCount = 0,
            this.vertexStreamsUpdated = !1,
            this.indexStreamUpdated = !1,
            this.vertexStreamDictionary = {},
            this.indices = null
        }
        ,
        e._validateVertexCount = function(t, e) {}
        ,
        e._changeVertexCount = function(t, e) {
            this.vertexCount ? this._validateVertexCount(t, e) : this.vertexCount = t
        }
        ,
        t
    }();
    js.DEFAULT_COMPONENTS_POSITION = 3,
    js.DEFAULT_COMPONENTS_NORMAL = 3,
    js.DEFAULT_COMPONENTS_UV = 2,
    js.DEFAULT_COMPONENTS_COLORS = 4;
    var qs = function(t, e, i, n) {
        this.data = t,
        this.componentCount = e,
        this.dataType = i,
        this.dataTypeNormalize = n
    }
      , Ys = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).id = Xs++,
            i.device = e || _n().graphicsDevice,
            i.vertexBuffer = null,
            i.indexBuffer = [null],
            i.primitive = [{
                type: 0,
                base: 0,
                count: 0
            }],
            i.skin = null,
            i.morph = null,
            i._geometryData = null,
            i._aabb = new Mt,
            i.boneAabb = null,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this.vertexBuffer && (this.vertexBuffer.destroy(),
            this.vertexBuffer = null);
            for (var t = 0; t < this.indexBuffer.length; t++)
                this._destroyIndexBuffer(t);
            this.indexBuffer.length = 0,
            this._geometryData = null
        }
        ,
        i._destroyIndexBuffer = function(t) {
            this.indexBuffer[t] && (this.indexBuffer[t].destroy(),
            this.indexBuffer[t] = null)
        }
        ,
        i._initBoneAabbs = function(t) {
            var e, i, n, s, a;
            this.boneAabb = [],
            this.boneUsed = [];
            for (var r, o, h, l = [], c = [], u = this.boneUsed, d = this.skin.boneNames.length, f = 0; f < d; f++)
                l[f] = new lt(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),
                c[f] = new lt(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);
            for (var p = new Ns(this.vertexBuffer), m = p.element.POSITION, _ = p.element.BLENDWEIGHT, g = p.element.BLENDINDICES, v = this.vertexBuffer.numVertices, y = 0; y < v; y++) {
                for (var x = 0; x < 4; x++) {
                    if (_.array[_.index + x] > 0) {
                        var b = g.array[g.index + x];
                        if (u[b] = !0,
                        e = m.array[m.index],
                        i = m.array[m.index + 1],
                        n = m.array[m.index + 2],
                        s = c[b],
                        (a = l[b]).x > e && (a.x = e),
                        a.y > i && (a.y = i),
                        a.z > n && (a.z = n),
                        s.x < e && (s.x = e),
                        s.y < i && (s.y = i),
                        s.z < n && (s.z = n),
                        t) {
                            for (var S = r = e, T = o = i, w = h = n, M = 0; M < t.length; M++) {
                                var A = t[M]
                                  , C = A.deltaPositions[3 * y]
                                  , E = A.deltaPositions[3 * y + 1]
                                  , P = A.deltaPositions[3 * y + 2];
                                C < 0 ? S += C : r += C,
                                E < 0 ? T += E : o += E,
                                P < 0 ? w += P : h += P
                            }
                            a.x > S && (a.x = S),
                            a.y > T && (a.y = T),
                            a.z > w && (a.z = w),
                            s.x < r && (s.x = r),
                            s.y < o && (s.y = o),
                            s.z < h && (s.z = h)
                        }
                    }
                }
                p.next()
            }
            var R = this.vertexBuffer.getFormat().elements.find((function(t) {
                return t.name === se
            }
            ));
            if (R && R.normalize)
                for (var I = function() {
                    switch (R.dataType) {
                    case 0:
                        return function(t) {
                            return Math.max(t / 127, -1)
                        }
                        ;
                    case 1:
                        return function(t) {
                            return t / 255
                        }
                        ;
                    case 2:
                        return function(t) {
                            return Math.max(t / 32767, -1)
                        }
                        ;
                    case 3:
                        return function(t) {
                            return t / 65535
                        }
                        ;
                    default:
                        return function(t) {
                            return t
                        }
                    }
                }(), L = 0; L < d; L++)
                    if (u[L]) {
                        var D = l[L]
                          , k = c[L];
                        D.set(I(D.x), I(D.y), I(D.z)),
                        k.set(I(k.x), I(k.y), I(k.z))
                    }
            for (var O = 0; O < d; O++) {
                var F = new Mt;
                F.setMinMax(l[O], c[O]),
                this.boneAabb.push(F)
            }
        }
        ,
        i._initGeometryData = function() {
            this._geometryData || (this._geometryData = new js,
            this.vertexBuffer && (this._geometryData.vertexCount = this.vertexBuffer.numVertices,
            this._geometryData.maxVertices = this.vertexBuffer.numVertices),
            this.indexBuffer.length > 0 && this.indexBuffer[0] && (this._geometryData.indexCount = this.indexBuffer[0].numIndices,
            this._geometryData.maxIndices = this.indexBuffer[0].numIndices))
        }
        ,
        i.clear = function(t, e, i, n) {
            void 0 === i && (i = 0),
            void 0 === n && (n = 0),
            this._initGeometryData(),
            this._geometryData.initDefaults(),
            this._geometryData.recreate = !0,
            this._geometryData.maxVertices = i,
            this._geometryData.maxIndices = n,
            this._geometryData.verticesUsage = t ? 0 : 1,
            this._geometryData.indicesUsage = e ? 0 : 1
        }
        ,
        i.setVertexStream = function(t, e, i, n, s, a) {
            void 0 === s && (s = 6),
            void 0 === a && (a = !1),
            this._initGeometryData();
            var r = n || e.length / i;
            this._geometryData._changeVertexCount(r, t),
            this._geometryData.vertexStreamsUpdated = !0,
            this._geometryData.vertexStreamDictionary[t] = new qs(e,i,s,a)
        }
        ,
        i.getVertexStream = function(t, e) {
            var i = 0
              , n = !1;
            if (this._geometryData) {
                var s = this._geometryData.vertexStreamDictionary[t];
                s && (n = !0,
                i = this._geometryData.vertexCount,
                ArrayBuffer.isView(e) ? e.set(s.data) : (e.length = 0,
                e.push(s.data)))
            }
            n || this.vertexBuffer && (i = new Ns(this.vertexBuffer).readData(t, e));
            return i
        }
        ,
        i.setPositions = function(t, e, i) {
            void 0 === e && (e = js.DEFAULT_COMPONENTS_POSITION),
            this.setVertexStream(se, t, e, i, 6, !1)
        }
        ,
        i.setNormals = function(t, e, i) {
            void 0 === e && (e = js.DEFAULT_COMPONENTS_NORMAL),
            this.setVertexStream(ae, t, e, i, 6, !1)
        }
        ,
        i.setUvs = function(t, e, i, n) {
            void 0 === i && (i = js.DEFAULT_COMPONENTS_UV),
            this.setVertexStream(ce + t, e, i, n, 6, !1)
        }
        ,
        i.setColors = function(t, e, i) {
            void 0 === e && (e = js.DEFAULT_COMPONENTS_COLORS),
            this.setVertexStream(le, t, e, i, 6, !1)
        }
        ,
        i.setColors32 = function(t, e) {
            this.setVertexStream(le, t, js.DEFAULT_COMPONENTS_COLORS, e, 1, !0)
        }
        ,
        i.setIndices = function(t, e) {
            this._initGeometryData(),
            this._geometryData.indexStreamUpdated = !0,
            this._geometryData.indices = t,
            this._geometryData.indexCount = e || t.length
        }
        ,
        i.getPositions = function(t) {
            return this.getVertexStream(se, t)
        }
        ,
        i.getNormals = function(t) {
            return this.getVertexStream(ae, t)
        }
        ,
        i.getUvs = function(t, e) {
            return this.getVertexStream(ce + t, e)
        }
        ,
        i.getColors = function(t) {
            return this.getVertexStream(le, t)
        }
        ,
        i.getIndices = function(t) {
            var e = 0;
            if (this._geometryData && this._geometryData.indices) {
                var i = this._geometryData.indices;
                e = this._geometryData.indexCount,
                ArrayBuffer.isView(t) ? t.set(i) : (t.length = 0,
                t.push(i))
            } else {
                if (this.indexBuffer.length > 0 && this.indexBuffer[0])
                    e = this.indexBuffer[0].readData(t)
            }
            return e
        }
        ,
        i.update = function(t, e) {
            if (void 0 === t && (t = 4),
            void 0 === e && (e = !0),
            this._geometryData) {
                if (e) {
                    var i = this._geometryData.vertexStreamDictionary.POSITION;
                    i && 3 === i.componentCount && this._aabb.compute(i.data, this._geometryData.vertexCount)
                }
                var n = this._geometryData.recreate;
                this._geometryData.vertexCount > this._geometryData.maxVertices && (n = !0,
                this._geometryData.maxVertices = this._geometryData.vertexCount),
                n && this.vertexBuffer && (this.vertexBuffer.destroy(),
                this.vertexBuffer = null);
                var s = this._geometryData.recreate;
                this._geometryData.indexCount > this._geometryData.maxIndices && (s = !0,
                this._geometryData.maxIndices = this._geometryData.indexCount),
                s && this.indexBuffer.length > 0 && this.indexBuffer[0] && (this.indexBuffer[0].destroy(),
                this.indexBuffer[0] = null),
                this._geometryData.vertexStreamsUpdated && this._updateVertexBuffer(),
                this._geometryData.indexStreamUpdated && this._updateIndexBuffer(),
                this.primitive[0].type = t,
                this.indexBuffer.length > 0 && this.indexBuffer[0] ? this._geometryData.indexStreamUpdated && (this.primitive[0].count = this._geometryData.indexCount,
                this.primitive[0].indexed = !0) : this._geometryData.vertexStreamsUpdated && (this.primitive[0].count = this._geometryData.vertexCount,
                this.primitive[0].indexed = !1),
                this._geometryData.vertexCount = 0,
                this._geometryData.indexCount = 0,
                this._geometryData.vertexStreamsUpdated = !1,
                this._geometryData.indexStreamUpdated = !1,
                this._geometryData.recreate = !1,
                this.updateRenderStates()
            }
        }
        ,
        i._buildVertexFormat = function(t) {
            var e = [];
            for (var i in this._geometryData.vertexStreamDictionary) {
                var n = this._geometryData.vertexStreamDictionary[i];
                e.push({
                    semantic: i,
                    components: n.componentCount,
                    type: n.dataType,
                    normalize: n.dataTypeNormalize
                })
            }
            return new Qe(this.device,e,t)
        }
        ,
        i._updateVertexBuffer = function() {
            if (!this.vertexBuffer) {
                var t = this._geometryData.maxVertices
                  , e = this._buildVertexFormat(t);
                this.vertexBuffer = new Ze(this.device,e,t,this._geometryData.verticesUsage)
            }
            var i = new Ns(this.vertexBuffer)
              , n = this._geometryData.vertexCount;
            for (var s in this._geometryData.vertexStreamDictionary) {
                var a = this._geometryData.vertexStreamDictionary[s];
                i.writeData(s, a.data, n),
                delete this._geometryData.vertexStreamDictionary[s]
            }
            i.end()
        }
        ,
        i._updateIndexBuffer = function() {
            if (this.indexBuffer.length <= 0 || !this.indexBuffer[0]) {
                var t = this._geometryData.maxVertices > 65535 ? 2 : 1;
                this.indexBuffer[0] = new ws(this.device,t,this._geometryData.maxIndices,this._geometryData.indicesUsage)
            }
            var e = this._geometryData.indices;
            e && (this.indexBuffer[0].writeData(e, this._geometryData.indexCount),
            this._geometryData.indices = null)
        }
        ,
        i.prepareRenderState = function(t) {
            1 === t ? this.generateWireframe() : 2 === t && (this.primitive[2] = {
                type: 0,
                base: 0,
                count: this.vertexBuffer ? this.vertexBuffer.numVertices : 0,
                indexed: !1
            })
        }
        ,
        i.updateRenderStates = function() {
            this.primitive[2] && this.prepareRenderState(2),
            this.primitive[1] && this.prepareRenderState(1)
        }
        ,
        i.generateWireframe = function() {
            this._destroyIndexBuffer(1);
            var t, e = [];
            if (this.indexBuffer.length > 0 && this.indexBuffer[0]) {
                for (var i = [[0, 1], [1, 2], [2, 0]], n = this.primitive[0].base, s = this.primitive[0].count, a = this.indexBuffer[0], r = new qe[a.format](a.storage), o = {}, h = n; h < n + s; h += 3)
                    for (var l = 0; l < 3; l++) {
                        var c = r[h + i[l][0]]
                          , u = r[h + i[l][1]]
                          , d = c > u ? u << 16 | c : c << 16 | u;
                        void 0 === o[d] && (o[d] = 0,
                        e.push(c, u))
                    }
                t = a.format
            } else {
                for (var f = 0; f < this.vertexBuffer.numVertices; f += 3)
                    e.push(f, f + 1, f + 1, f + 2, f + 2, f);
                t = e.length > 65535 ? 2 : 1
            }
            var p = new ws(this.vertexBuffer.device,t,e.length);
            new qe[p.format](p.storage).set(e),
            p.unlock(),
            this.primitive[1] = {
                type: 1,
                base: 0,
                count: e.length,
                indexed: !0
            },
            this.indexBuffer[1] = p
        }
        ,
        G(e, [{
            key: "aabb",
            get: function() {
                return this._aabb
            },
            set: function(t) {
                this._aabb = t
            }
        }]),
        e
    }(Hs)
      , Ks = 4 / 64
      , Zs = .875
      , $s = [];
    function Qs(t, e) {
        for (var i = e.length / 3, n = t.length / 3, s = new lt, a = new lt, r = new lt, o = new lt, h = new lt, l = new lt, c = [], u = 0; u < t.length; u++)
            c[u] = 0;
        for (var d = 0; d < i; d++) {
            var f = e[3 * d]
              , p = e[3 * d + 1]
              , m = e[3 * d + 2];
            s.set(t[3 * f], t[3 * f + 1], t[3 * f + 2]),
            a.set(t[3 * p], t[3 * p + 1], t[3 * p + 2]),
            r.set(t[3 * m], t[3 * m + 1], t[3 * m + 2]),
            o.sub2(a, s),
            h.sub2(r, s),
            l.cross(o, h).normalize(),
            c[3 * f] += l.x,
            c[3 * f + 1] += l.y,
            c[3 * f + 2] += l.z,
            c[3 * p] += l.x,
            c[3 * p + 1] += l.y,
            c[3 * p + 2] += l.z,
            c[3 * m] += l.x,
            c[3 * m + 1] += l.y,
            c[3 * m + 2] += l.z
        }
        for (var _ = 0; _ < n; _++) {
            var g = c[3 * _]
              , v = c[3 * _ + 1]
              , y = c[3 * _ + 2]
              , x = 1 / Math.sqrt(g * g + v * v + y * y);
            c[3 * _] *= x,
            c[3 * _ + 1] *= x,
            c[3 * _ + 2] *= x
        }
        return c
    }
    function Js(t, e, i, n) {
        for (var s = n.length / 3, a = t.length / 3, r = new lt, o = new lt, h = new lt, l = new ut, c = new ut, u = new ut, d = new lt, f = new lt, p = new Float32Array(3 * a), m = new Float32Array(3 * a), _ = [], g = 0; g < s; g++) {
            var v = n[3 * g]
              , y = n[3 * g + 1]
              , x = n[3 * g + 2];
            r.set(t[3 * v], t[3 * v + 1], t[3 * v + 2]),
            o.set(t[3 * y], t[3 * y + 1], t[3 * y + 2]),
            h.set(t[3 * x], t[3 * x + 1], t[3 * x + 2]),
            l.set(i[2 * v], i[2 * v + 1]),
            c.set(i[2 * y], i[2 * y + 1]),
            u.set(i[2 * x], i[2 * x + 1]);
            var b = o.x - r.x
              , S = h.x - r.x
              , T = o.y - r.y
              , w = h.y - r.y
              , M = o.z - r.z
              , A = h.z - r.z
              , C = c.x - l.x
              , E = u.x - l.x
              , P = c.y - l.y
              , R = u.y - l.y
              , I = C * R - E * P;
            if (0 === I)
                d.set(0, 1, 0),
                f.set(1, 0, 0);
            else {
                var L = 1 / I;
                d.set((R * b - P * S) * L, (R * T - P * w) * L, (R * M - P * A) * L),
                f.set((C * S - E * b) * L, (C * w - E * T) * L, (C * A - E * M) * L)
            }
            p[3 * v + 0] += d.x,
            p[3 * v + 1] += d.y,
            p[3 * v + 2] += d.z,
            p[3 * y + 0] += d.x,
            p[3 * y + 1] += d.y,
            p[3 * y + 2] += d.z,
            p[3 * x + 0] += d.x,
            p[3 * x + 1] += d.y,
            p[3 * x + 2] += d.z,
            m[3 * v + 0] += f.x,
            m[3 * v + 1] += f.y,
            m[3 * v + 2] += f.z,
            m[3 * y + 0] += f.x,
            m[3 * y + 1] += f.y,
            m[3 * y + 2] += f.z,
            m[3 * x + 0] += f.x,
            m[3 * x + 1] += f.y,
            m[3 * x + 2] += f.z
        }
        for (var D = new lt, k = new lt, O = new lt, F = new lt, B = 0; B < a; B++) {
            O.set(e[3 * B], e[3 * B + 1], e[3 * B + 2]),
            D.set(p[3 * B], p[3 * B + 1], p[3 * B + 2]),
            k.set(m[3 * B], m[3 * B + 1], m[3 * B + 2]);
            var N = O.dot(D);
            F.copy(O).mulScalar(N),
            F.sub2(D, F).normalize(),
            _[4 * B] = F.x,
            _[4 * B + 1] = F.y,
            _[4 * B + 2] = F.z,
            F.cross(O, D),
            _[4 * B + 3] = F.dot(k) < 0 ? -1 : 1
        }
        return _
    }
    function ta(t, e, i) {
        var n = new Ys(t);
        return n.setPositions(e),
        i && (i.normals && n.setNormals(i.normals),
        i.tangents && n.setVertexStream(re, i.tangents, 4),
        i.colors && n.setColors32(i.colors),
        i.uvs && n.setUvs(0, i.uvs),
        i.uvs1 && n.setUvs(1, i.uvs1),
        i.blendIndices && n.setVertexStream(he, i.blendIndices, 4, i.blendIndices.length / 4, 1),
        i.blendWeights && n.setVertexStream(oe, i.blendWeights, 4),
        i.indices && n.setIndices(i.indices)),
        n.update(),
        n
    }
    function ea(t, e) {
        for (var i = e && void 0 !== e.tubeRadius ? e.tubeRadius : .2, n = e && void 0 !== e.ringRadius ? e.ringRadius : .3, s = e && void 0 !== e.segments ? e.segments : 30, a = e && void 0 !== e.sides ? e.sides : 20, r = !(!e || void 0 === e.calculateTangents) && e.calculateTangents, o = [], h = [], l = [], c = [], u = 0; u <= a; u++)
            for (var d = 0; d <= s; d++) {
                var f = Math.cos(2 * Math.PI * d / s) * (n + i * Math.cos(2 * Math.PI * u / a))
                  , p = Math.sin(2 * Math.PI * u / a) * i
                  , m = Math.sin(2 * Math.PI * d / s) * (n + i * Math.cos(2 * Math.PI * u / a))
                  , _ = Math.cos(2 * Math.PI * d / s) * Math.cos(2 * Math.PI * u / a)
                  , g = Math.sin(2 * Math.PI * u / a)
                  , v = Math.sin(2 * Math.PI * d / s) * Math.cos(2 * Math.PI * u / a)
                  , y = u / a
                  , x = 1 - d / s;
                if (o.push(f, p, m),
                h.push(_, g, v),
                l.push(y, 1 - x),
                u < a && d < s) {
                    var b = u * (s + 1) + d
                      , S = (u + 1) * (s + 1) + d
                      , T = u * (s + 1) + (d + 1)
                      , w = (u + 1) * (s + 1) + (d + 1);
                    c.push(b, S, T),
                    c.push(S, w, T)
                }
            }
        var M = {
            normals: h,
            uvs: l,
            indices: c
        };
        return r && (M.tangents = Js(o, h, l, c)),
        ta(t, o, M)
    }
    function ia(t, e, i, n, s, a) {
        var r, o = new lt, h = new lt, l = new lt, c = new lt, u = new lt, d = new lt, f = [], p = [], m = [], _ = [], g = [];
        if (i > 0)
            for (var v = 0; v <= n; v++)
                for (var y = 0; y <= s; y++) {
                    var x = y / s * 2 * Math.PI - Math.PI
                      , b = Math.sin(x)
                      , S = Math.cos(x);
                    u.set(b * t, -i / 2, S * t),
                    c.set(b * e, i / 2, S * e),
                    o.lerp(u, c, v / n),
                    h.sub2(c, u).normalize(),
                    d.set(S, 0, -b),
                    l.cross(d, h).normalize(),
                    f.push(o.x, o.y, o.z),
                    p.push(l.x, l.y, l.z);
                    var T = y / s
                      , w = v / n;
                    m.push(T, 1 - w);
                    var M = w;
                    if (w = T,
                    T = (T = M) * Zs + Ks,
                    w = w * Zs + Ks,
                    T /= 3,
                    _.push(T, 1 - w),
                    v < n && y < s) {
                        var A = v * (s + 1) + y
                          , C = v * (s + 1) + (y + 1)
                          , E = (v + 1) * (s + 1) + y
                          , P = (v + 1) * (s + 1) + (y + 1);
                        g.push(A, C, E),
                        g.push(C, P, E)
                    }
                }
        if (a) {
            for (var R = Math.floor(s / 2), I = s, L = i / 2, D = 0; D <= R; D++)
                for (var k = D * Math.PI * .5 / R, O = Math.sin(k), F = Math.cos(k), B = 0; B <= I; B++) {
                    var N = 2 * B * Math.PI / I - Math.PI / 2
                      , U = Math.sin(N)
                      , z = Math.cos(N) * O
                      , V = F
                      , G = U * O
                      , W = 1 - B / I
                      , H = 1 - D / R;
                    f.push(z * e, V * e + L, G * e),
                    p.push(z, V, G),
                    m.push(W, 1 - H),
                    W = W * Zs + Ks,
                    H = H * Zs + Ks,
                    W /= 3,
                    H /= 3,
                    W += 1 / 3,
                    _.push(W, 1 - H)
                }
            r = (n + 1) * (s + 1);
            for (var X = 0; X < R; ++X)
                for (var j = 0; j < I; ++j) {
                    var q = X * (I + 1) + j
                      , Y = q + I + 1;
                    g.push(r + q + 1, r + Y, r + q),
                    g.push(r + q + 1, r + Y + 1, r + Y)
                }
            for (var K = 0; K <= R; K++)
                for (var Z = .5 * Math.PI + K * Math.PI * .5 / R, $ = Math.sin(Z), Q = Math.cos(Z), J = 0; J <= I; J++) {
                    var tt = 2 * J * Math.PI / I - Math.PI / 2
                      , et = Math.sin(tt)
                      , it = Math.cos(tt) * $
                      , nt = Q
                      , st = et * $
                      , at = 1 - J / I
                      , rt = 1 - K / R;
                    f.push(it * e, nt * e - L, st * e),
                    p.push(it, nt, st),
                    m.push(at, 1 - rt),
                    at = at * Zs + Ks,
                    rt = rt * Zs + Ks,
                    at /= 3,
                    rt /= 3,
                    at += 2 / 3,
                    _.push(at, 1 - rt)
                }
            r = (n + 1) * (s + 1) + (I + 1) * (R + 1);
            for (var ot = 0; ot < R; ++ot)
                for (var ht = 0; ht < I; ++ht) {
                    var ct = ot * (I + 1) + ht
                      , ut = ct + I + 1;
                    g.push(r + ct + 1, r + ut, r + ct),
                    g.push(r + ct + 1, r + ut + 1, r + ut)
                }
        } else {
            if (r = (n + 1) * (s + 1),
            t > 0)
                for (var dt = 0; dt < s; dt++) {
                    var ft = dt / s * 2 * Math.PI
                      , pt = Math.sin(ft)
                      , mt = -i / 2
                      , _t = Math.cos(ft)
                      , gt = 1 - (pt + 1) / 2
                      , vt = (_t + 1) / 2;
                    f.push(pt * t, mt, _t * t),
                    p.push(0, -1, 0),
                    m.push(gt, 1 - vt),
                    gt = gt * Zs + Ks,
                    vt = vt * Zs + Ks,
                    gt /= 3,
                    vt /= 3,
                    gt += 1 / 3,
                    _.push(gt, 1 - vt),
                    dt > 1 && g.push(r, r + dt, r + dt - 1)
                }
            if (r += s,
            e > 0)
                for (var yt = 0; yt < s; yt++) {
                    var xt = yt / s * 2 * Math.PI
                      , bt = Math.sin(xt)
                      , St = i / 2
                      , Tt = Math.cos(xt)
                      , wt = 1 - (bt + 1) / 2
                      , Mt = (Tt + 1) / 2;
                    f.push(bt * e, St, Tt * e),
                    p.push(0, 1, 0),
                    m.push(wt, 1 - Mt),
                    wt = wt * Zs + Ks,
                    Mt = Mt * Zs + Ks,
                    wt /= 3,
                    Mt /= 3,
                    wt += 2 / 3,
                    _.push(wt, 1 - Mt),
                    yt > 1 && g.push(r, r + yt - 1, r + yt)
                }
        }
        return {
            positions: f,
            normals: p,
            uvs: m,
            uvs1: _,
            indices: g
        }
    }
    function na(t, e) {
        var i = e && (e.radius || e.baseRadius);
        i = void 0 !== i ? i : .5;
        var n = e && void 0 !== e.height ? e.height : 1
          , s = e && void 0 !== e.heightSegments ? e.heightSegments : 5
          , a = e && void 0 !== e.capSegments ? e.capSegments : 20
          , r = !(!e || void 0 === e.calculateTangents) && e.calculateTangents
          , o = ia(i, i, n, s, a, !1);
        return r && (o.tangents = Js(o.positions, o.normals, o.uvs, o.indices)),
        ta(t, o.positions, o)
    }
    function sa(t, e) {
        var i = e && void 0 !== e.radius ? e.radius : .3
          , n = e && void 0 !== e.height ? e.height : 1
          , s = e && void 0 !== e.heightSegments ? e.heightSegments : 1
          , a = e && void 0 !== e.sides ? e.sides : 20
          , r = !(!e || void 0 === e.calculateTangents) && e.calculateTangents
          , o = ia(i, i, n - 2 * i, s, a, !0);
        return r && (o.tangents = Js(o.positions, o.normals, o.uvs, o.indices)),
        ta(t, o.positions, o)
    }
    function aa(t, e) {
        var i = e && void 0 !== e.baseRadius ? e.baseRadius : .5
          , n = e && void 0 !== e.peakRadius ? e.peakRadius : 0
          , s = e && void 0 !== e.height ? e.height : 1
          , a = e && void 0 !== e.heightSegments ? e.heightSegments : 5
          , r = e && void 0 !== e.capSegments ? e.capSegments : 18
          , o = !(!e || void 0 === e.calculateTangents) && e.calculateTangents
          , h = ia(i, n, s, a, r, !1);
        return o && (h.tangents = Js(h.positions, h.normals, h.uvs, h.indices)),
        ta(t, h.positions, h)
    }
    function ra(t, e) {
        for (var i = e && void 0 !== e.radius ? e.radius : .5, n = e && void 0 !== e.latitudeBands ? e.latitudeBands : 16, s = e && void 0 !== e.longitudeBands ? e.longitudeBands : 16, a = !(!e || void 0 === e.calculateTangents) && e.calculateTangents, r = [], o = [], h = [], l = [], c = 0; c <= n; c++)
            for (var u = c * Math.PI / n, d = Math.sin(u), f = Math.cos(u), p = 0; p <= s; p++) {
                var m = 2 * p * Math.PI / s - Math.PI / 2
                  , _ = Math.sin(m)
                  , g = Math.cos(m) * d
                  , v = f
                  , y = _ * d
                  , x = 1 - p / s
                  , b = 1 - c / n;
                r.push(g * i, v * i, y * i),
                o.push(g, v, y),
                h.push(x, 1 - b)
            }
        for (var S = 0; S < n; ++S)
            for (var T = 0; T < s; ++T) {
                var w = S * (s + 1) + T
                  , M = w + s + 1;
                l.push(w + 1, M, w),
                l.push(w + 1, M + 1, M)
            }
        var A = {
            normals: o,
            uvs: h,
            uvs1: h,
            indices: l
        };
        return a && (A.tangents = Js(r, o, h, l)),
        ta(t, r, A)
    }
    function oa(t, e) {
        for (var i = e && void 0 !== e.halfExtents ? e.halfExtents : new ut(.5,.5), n = e && void 0 !== e.widthSegments ? e.widthSegments : 5, s = e && void 0 !== e.lengthSegments ? e.lengthSegments : 5, a = !(!e || void 0 === e.calculateTangents) && e.calculateTangents, r = [], o = [], h = [], l = [], c = 0, u = 0; u <= n; u++)
            for (var d = 0; d <= s; d++) {
                var f = -i.x + 2 * i.x * u / n
                  , p = -(-i.y + 2 * i.y * d / s)
                  , m = u / n
                  , _ = d / s;
                r.push(f, 0, p),
                o.push(0, 1, 0),
                h.push(m, 1 - _),
                u < n && d < s && (l.push(c + s + 1, c + 1, c),
                l.push(c + s + 1, c + s + 2, c + 1)),
                c++
            }
        var g = {
            normals: o,
            uvs: h,
            uvs1: h,
            indices: l
        };
        return a && (g.tangents = Js(r, o, h, l)),
        ta(t, r, g)
    }
    function ha(t, e) {
        var i = e && void 0 !== e.halfExtents ? e.halfExtents : new lt(.5,.5,.5)
          , n = e && void 0 !== e.widthSegments ? e.widthSegments : 1
          , s = e && void 0 !== e.lengthSegments ? e.lengthSegments : 1
          , a = e && void 0 !== e.heightSegments ? e.heightSegments : 1
          , r = !(!e || void 0 === e.calculateTangents) && e.calculateTangents
          , o = [new lt(-i.x,-i.y,i.z), new lt(i.x,-i.y,i.z), new lt(i.x,i.y,i.z), new lt(-i.x,i.y,i.z), new lt(i.x,-i.y,-i.z), new lt(-i.x,-i.y,-i.z), new lt(-i.x,i.y,-i.z), new lt(i.x,i.y,-i.z)]
          , h = [[0, 1, 3], [4, 5, 7], [3, 2, 6], [1, 0, 4], [1, 4, 2], [5, 0, 6]]
          , l = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]]
          , c = 1
          , u = 2
          , d = 3
          , f = 4
          , p = 5
          , m = []
          , _ = []
          , g = []
          , v = []
          , y = []
          , x = 0
          , b = function(t, e, i) {
            for (var n = new lt, s = new lt, a = new lt, r = new lt, c = 0; c <= e; c++)
                for (var u = 0; u <= i; u++) {
                    n.lerp(o[h[t][0]], o[h[t][1]], c / e),
                    s.lerp(o[h[t][0]], o[h[t][2]], u / i),
                    a.sub2(s, o[h[t][0]]),
                    r.add2(n, a);
                    var d = c / e
                      , f = u / i;
                    m.push(r.x, r.y, r.z),
                    _.push(l[t][0], l[t][1], l[t][2]),
                    g.push(d, 1 - f),
                    d = d * Zs + Ks,
                    f = f * Zs + Ks,
                    d /= 3,
                    f /= 3,
                    d += t % 3 / 3,
                    f += Math.floor(t / 3) / 3,
                    v.push(d, 1 - f),
                    c < e && u < i && (y.push(x + i + 1, x + 1, x),
                    y.push(x + i + 1, x + i + 2, x + 1)),
                    x++
                }
        };
        b(0, n, a),
        b(c, n, a),
        b(u, n, s),
        b(d, n, s),
        b(f, s, a),
        b(p, s, a);
        var S = {
            normals: _,
            uvs: g,
            uvs1: v,
            indices: y
        };
        return r && (S.tangents = Js(m, _, g, y)),
        ta(t, m, S)
    }
    function la(t, e) {
        for (var i = null, n = 0; n < $s.length; n++)
            $s[n].type === e && $s[n].device === t && (i = $s[n].primData);
        if (!i) {
            var s, a;
            switch (e) {
            case "box":
                s = ha(t, {
                    halfExtents: new lt(.5,.5,.5)
                }),
                a = {
                    x: 2,
                    y: 2,
                    z: 2,
                    uv: 2 / 3
                };
                break;
            case "capsule":
                s = sa(t, {
                    radius: .5,
                    height: 2
                }),
                a = {
                    x: 2 * Math.PI,
                    y: Math.PI,
                    z: 2 * Math.PI,
                    uv: 1 / 3 + 1 / 3 / 3 * 2
                };
                break;
            case "cone":
                s = aa(t, {
                    baseRadius: .5,
                    peakRadius: 0,
                    height: 1
                }),
                a = {
                    x: 2.54,
                    y: 2.54,
                    z: 2.54,
                    uv: 1 / 3 + 1 / 3 / 3
                };
                break;
            case "cylinder":
                s = na(t, {
                    radius: .5,
                    height: 1
                }),
                a = {
                    x: Math.PI,
                    y: 1.58,
                    z: Math.PI,
                    uv: 1 / 3 + 1 / 3 / 3 * 2
                };
                break;
            case "plane":
                s = oa(t, {
                    halfExtents: new ut(.5,.5),
                    widthSegments: 1,
                    lengthSegments: 1
                }),
                a = {
                    x: 0,
                    y: 1,
                    z: 0,
                    uv: 1
                };
                break;
            case "sphere":
                s = ra(t, {
                    radius: .5
                }),
                a = {
                    x: Math.PI,
                    y: Math.PI,
                    z: Math.PI,
                    uv: 1
                };
                break;
            default:
                throw new Error("Invalid primitive type: " + e)
            }
            s.incRefCount(),
            i = {
                mesh: s,
                area: a
            },
            $s.push({
                type: e,
                device: t,
                primData: i
            })
        }
        return i
    }
    var ca = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this).color = new at(1,1,1,1),
            e.colorUniform = new Float32Array(4),
            e.colorMap = null,
            e.vertexColors = !1,
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.clone = function() {
            var t = new e;
            return Fn.prototype._cloneInternal.call(this, t),
            t.color.copy(this.color),
            t.colorMap = this.colorMap,
            t.vertexColors = this.vertexColors,
            t
        }
        ,
        i.updateUniforms = function(t, e) {
            this.clearParameters(),
            this.colorUniform[0] = this.color.r,
            this.colorUniform[1] = this.color.g,
            this.colorUniform[2] = this.color.b,
            this.colorUniform[3] = this.color.a,
            this.setParameter("uColor", this.colorUniform),
            this.colorMap && this.setParameter("texture_diffuseMap", this.colorMap)
        }
        ,
        i.updateShader = function(t, e, i, n, s, a) {
            var r = {
                skin: i && 0 != (2 & i),
                screenSpace: i && 0 != (i & Lt),
                useInstancing: i && 0 != (32 & i),
                useMorphPosition: i && 0 != (i & Dt),
                useMorphNormal: i && 0 != (i & kt),
                useMorphTextureBased: i && 0 != (i & Ot),
                vertexColors: this.vertexColors,
                diffuseMap: !!this.colorMap,
                pass: s
            }
              , o = t.getProgramLibrary();
            this.shader = o.getProgram("basic", r)
        }
        ,
        e
    }(Fn)
      , ua = function() {
        function t(t, e, i) {
            this.origMeshInstances = t,
            this._aabb = new Mt,
            this.meshInstance = null,
            this.dynamic = e,
            this.batchGroupId = i
        }
        var e = t.prototype;
        return e.destroy = function(t, e) {
            this.meshInstance && (this.removeFromLayers(t, e),
            this.meshInstance.destroy())
        }
        ,
        e.addToLayers = function(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = t.layers.getLayerById(e[i]);
                n && n.addMeshInstances([this.meshInstance])
            }
        }
        ,
        e.removeFromLayers = function(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = t.layers.getLayerById(e[i]);
                n && n.removeMeshInstances([this.meshInstance])
            }
        }
        ,
        e.updateBoundingBox = function() {
            this._aabb.copy(this.origMeshInstances[0].aabb);
            for (var t = 1; t < this.origMeshInstances.length; t++)
                this._aabb.add(this.origMeshInstances[t].aabb);
            this.meshInstance.aabb = this._aabb,
            this.meshInstance._aabbVer = 0
        }
        ,
        t
    }()
      , da = function(t, e, i, n, s) {
        void 0 === s && (s = [0]),
        this.dynamic = i,
        this.maxAabbSize = n,
        this.id = t,
        this.name = e,
        this.layers = s,
        this._ui = !1,
        this._sprite = !1,
        this._obj = {
            model: [],
            element: [],
            sprite: [],
            render: []
        }
    };
    da.MODEL = "model",
    da.ELEMENT = "element",
    da.SPRITE = "sprite",
    da.RENDER = "render";
    var fa = new vt
      , pa = function() {
        function t(t) {
            this._dirty = !0,
            this._rootBone = null,
            this._skinUpdateIndex = -1,
            this._updateBeforeCull = !0,
            t && this.initSkin(t)
        }
        var e = t.prototype;
        return e.init = function(t, e) {
            if (t.supportsBoneTextures) {
                var i = 3 * e
                  , n = Math.ceil(Math.sqrt(i));
                n = it.roundUp(n, 3);
                var s = Math.ceil(i / n);
                this.boneTexture = new Mi(t,{
                    width: n,
                    height: s,
                    format: Qt,
                    mipmaps: !1,
                    minFilter: 0,
                    magFilter: 0
                }),
                this.boneTexture.name = "skin",
                this.matrixPalette = this.boneTexture.lock()
            } else
                this.matrixPalette = new Float32Array(12 * e)
        }
        ,
        e.destroy = function() {
            this.boneTexture && (this.boneTexture.destroy(),
            this.boneTexture = null)
        }
        ,
        e.resolve = function(t, e) {
            this.rootBone = t;
            for (var i = this.skin, n = [], s = 0; s < i.boneNames.length; s++) {
                var a = i.boneNames[s]
                  , r = t.findByName(a);
                r || (r = e),
                n.push(r)
            }
            this.bones = n
        }
        ,
        e.initSkin = function(t) {
            this.skin = t,
            this.bones = [];
            var e = t.inverseBindPose.length;
            this.init(t.device, e),
            this.matrices = [];
            for (var i = 0; i < e; i++)
                this.matrices[i] = new vt
        }
        ,
        e.uploadBones = function(t) {
            t.supportsBoneTextures && (this.boneTexture.lock(),
            this.boneTexture.unlock())
        }
        ,
        e._updateMatrices = function(t, e) {
            if (this._skinUpdateIndex !== e) {
                this._skinUpdateIndex = e,
                fa.copy(t.getWorldTransform()).invert();
                for (var i = this.bones.length - 1; i >= 0; i--)
                    this.matrices[i].mulAffine2(fa, this.bones[i].getWorldTransform()),
                    this.matrices[i].mulAffine2(this.matrices[i], this.skin.inverseBindPose[i])
            }
        }
        ,
        e.updateMatrices = function(t, e) {
            this._updateBeforeCull && this._updateMatrices(t, e)
        }
        ,
        e.updateMatrixPalette = function(t, e) {
            this._updateMatrices(t, e);
            for (var i = this.matrixPalette, n = this.bones.length, s = 0; s < n; s++) {
                var a = this.matrices[s].data
                  , r = 12 * s;
                i[r] = a[0],
                i[r + 1] = a[4],
                i[r + 2] = a[8],
                i[r + 3] = a[12],
                i[r + 4] = a[1],
                i[r + 5] = a[5],
                i[r + 6] = a[9],
                i[r + 7] = a[13],
                i[r + 8] = a[2],
                i[r + 9] = a[6],
                i[r + 10] = a[10],
                i[r + 11] = a[14]
            }
            this.uploadBones(this.skin.device)
        }
        ,
        G(t, [{
            key: "rootBone",
            get: function() {
                return this._rootBone
            },
            set: function(t) {
                this._rootBone = t
            }
        }]),
        t
    }()
      , ma = function(t) {
        function e(e, i, n) {
            var s;
            s = t.call(this) || this;
            var a = i.length;
            return s.init(e, a),
            s.device = e,
            s.rootNode = n,
            s.bones = i,
            s
        }
        H(e, t);
        var i = e.prototype;
        return i.updateMatrices = function(t, e) {}
        ,
        i.updateMatrixPalette = function(t, e) {
            for (var i = this.matrixPalette, n = this.bones.length, s = 0; s < n; s++) {
                var a = this.bones[s].getWorldTransform().data
                  , r = 12 * s;
                i[r] = a[0],
                i[r + 1] = a[4],
                i[r + 2] = a[8],
                i[r + 3] = a[12],
                i[r + 4] = a[1],
                i[r + 5] = a[5],
                i[r + 6] = a[9],
                i[r + 7] = a[13],
                i[r + 8] = a[2],
                i[r + 9] = a[6],
                i[r + 10] = a[10],
                i[r + 11] = a[14]
            }
            this.uploadBones(this.device)
        }
        ,
        e
    }(pa)
      , _a = function() {
        function t() {
            this.cache = new Map
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.cache.forEach((function(t, e) {
                e.destroy()
            }
            )),
            this.cache.clear()
        }
        ,
        e.incRef = function(t) {
            var e = (this.cache.get(t) || 0) + 1;
            this.cache.set(t, e)
        }
        ,
        e.decRef = function(t) {
            if (t) {
                var e = this.cache.get(t);
                e && (0 === --e ? (this.cache.delete(t),
                t.destroy()) : this.cache.set(t, e))
            }
        }
        ,
        t
    }()
      , ga = function() {
        function t() {}
        return t.incRef = function(t) {
            this.cache.incRef(t)
        }
        ,
        t.decRef = function(t) {
            this.cache.decRef(t)
        }
        ,
        t.destroy = function() {
            this.cache.destroy()
        }
        ,
        t
    }();
    ga.cache = new _a;
    var va = new Mt
      , ya = new Mt
      , xa = new Et
      , ba = new Set
      , Sa = function(t) {
        this.count = t,
        this.vertexBuffer = null
    }
      , Ta = function() {
        function t(t, e, i) {
            this._key = [],
            this._key[0] = Ma(t, e, !0, 0),
            this.command = i
        }
        return G(t, [{
            key: "key",
            get: function() {
                return this._key[0]
            },
            set: function(t) {
                this._key[0] = t
            }
        }]),
        t
    }()
      , wa = function() {
        function t(t, e, i) {
            if (void 0 === i && (i = null),
            t instanceof ji) {
                var n = t;
                t = e,
                e = i,
                i = n
            }
            this._key = [0, 0],
            this._shader = [null, null, null],
            this.isStatic = !1,
            this._staticLightList = null,
            this._staticSource = null,
            this.node = i,
            this._mesh = t,
            t.incRefCount(),
            this.material = e,
            this._shaderDefs = 65536,
            this._shaderDefs |= t.vertexBuffer.format.hasUv0 ? 4 : 0,
            this._shaderDefs |= t.vertexBuffer.format.hasUv1 ? 8 : 0,
            this._shaderDefs |= t.vertexBuffer.format.hasColor ? 16 : 0,
            this._shaderDefs |= t.vertexBuffer.format.hasTangents ? 512 : 0,
            this._lightHash = 0,
            this.visible = !0,
            this.layer = 15,
            this._renderStyle = 0,
            this.castShadow = !1,
            this._receiveShadow = !0,
            this._screenSpace = !1,
            this._noDepthDrawGl1 = !1,
            this.cull = !0,
            this.pick = !0,
            this._updateAabb = !0,
            this._updateAabbFunc = null,
            this._calculateSortDistance = null,
            this.updateKey(),
            this._skinInstance = null,
            this._morphInstance = null,
            this.instancingData = null,
            this._customAabb = null,
            this.aabb = new Mt,
            this._aabbVer = -1,
            this.drawOrder = 0,
            this.visibleThisFrame = 0,
            this.isVisibleFunc = null,
            this.parameters = {},
            this.stencilFront = null,
            this.stencilBack = null,
            this.flipFaces = !1
        }
        var e = t.prototype;
        return e.destroy = function() {
            var e = this.mesh;
            e && (this.mesh = null,
            e.getRefCount() < 1 && e.destroy()),
            this.setRealtimeLightmap(t.lightmapParamNames[0], null),
            this.setRealtimeLightmap(t.lightmapParamNames[1], null),
            this._skinInstance && (this._skinInstance.destroy(),
            this._skinInstance = null),
            this.morphInstance && (this.morphInstance.destroy(),
            this.morphInstance = null),
            this.material = null
        }
        ,
        t._prepareRenderStyleForArray = function(t, e) {
            if (t) {
                for (var i = 0; i < t.length; i++) {
                    t[i]._renderStyle = e;
                    var n = t[i].mesh;
                    ba.has(n) || (ba.add(n),
                    n.prepareRenderState(e))
                }
                ba.clear()
            }
        }
        ,
        e.syncAabb = function() {}
        ,
        e._isVisible = function(t) {
            return !!this.visible && (this.isVisibleFunc ? this.isVisibleFunc(t) : (xa.center = this.aabb.center,
            xa.radius = this._aabb.halfExtents.length(),
            t.frustum.containsSphere(xa)))
        }
        ,
        e.updateKey = function() {
            var t = this.material;
            this._key[0] = Ma(this.layer, t.alphaToCoverage || t.alphaTest ? 2 : t.blendType, !1, t.id)
        }
        ,
        e.setInstancing = function(t) {
            t ? (this.instancingData = new Sa(t.numVertices),
            this.instancingData.vertexBuffer = t,
            t.instancing = !0,
            this.cull = !1) : (this.instancingData = null,
            this.cull = !0)
        }
        ,
        e.clearParameters = function() {
            this.parameters = {}
        }
        ,
        e.getParameters = function() {
            return this.parameters
        }
        ,
        e.getParameter = function(t) {
            return this.parameters[t]
        }
        ,
        e.setParameter = function(t, e, i) {
            if (void 0 === i && (i = -262141),
            void 0 === e && "object" == typeof t) {
                var n = t;
                if (n.length) {
                    for (var s = 0; s < n.length; s++)
                        this.setParameter(n[s]);
                    return
                }
                t = n.name,
                e = n.value
            }
            var a = this.parameters[t];
            a ? (a.data = e,
            a.passFlags = i) : this.parameters[t] = {
                scopeId: null,
                data: e,
                passFlags: i
            }
        }
        ,
        e.setRealtimeLightmap = function(t, e) {
            var i = this.getParameter(t);
            i !== e && (i && ga.decRef(i.data),
            e ? (ga.incRef(e),
            this.setParameter(t, e)) : this.deleteParameter(t))
        }
        ,
        e.deleteParameter = function(t) {
            this.parameters[t] && delete this.parameters[t]
        }
        ,
        e.setParameters = function(t, e) {
            var i = this.parameters;
            for (var n in i) {
                var s = i[n];
                s.passFlags & e && (s.scopeId || (s.scopeId = t.scope.resolve(n)),
                s.scopeId.setValue(s.data))
            }
        }
        ,
        e.setLightmapped = function(e) {
            e ? this.mask = -6 & (2 | this.mask) : (this.setRealtimeLightmap(t.lightmapParamNames[0], null),
            this.setRealtimeLightmap(t.lightmapParamNames[1], null),
            this._shaderDefs &= -8385,
            this.mask = -7 & (1 | this.mask))
        }
        ,
        e.setCustomAabb = function(t) {
            t ? this._customAabb ? this._customAabb.copy(t) : this._customAabb = t.clone() : (this._customAabb = null,
            this._aabbVer = -1),
            this._setupSkinUpdate()
        }
        ,
        e._setupSkinUpdate = function() {
            this._skinInstance && (this._skinInstance._updateBeforeCull = !this._customAabb)
        }
        ,
        G(t, [{
            key: "renderStyle",
            get: function() {
                return this._renderStyle
            },
            set: function(t) {
                this._renderStyle = t,
                this.mesh.prepareRenderState(t)
            }
        }, {
            key: "mesh",
            get: function() {
                return this._mesh
            },
            set: function(t) {
                t !== this._mesh && (this._mesh && this._mesh.decRefCount(),
                this._mesh = t,
                t && t.incRefCount())
            }
        }, {
            key: "aabb",
            get: function() {
                if (!this._updateAabb)
                    return this._aabb;
                if (this._updateAabbFunc)
                    return this._updateAabbFunc(this._aabb);
                var t = this._customAabb
                  , e = !!t;
                if (!t)
                    if (t = va,
                    this.skinInstance) {
                        if (!this.mesh.boneAabb) {
                            var i = this._morphInstance ? this._morphInstance.morph._targets : null;
                            this.mesh._initBoneAabbs(i)
                        }
                        for (var n = this.mesh.boneUsed, s = !0, a = 0; a < this.mesh.boneAabb.length; a++)
                            n[a] && (ya.setFromTransformedAabb(this.mesh.boneAabb[a], this.skinInstance.matrices[a]),
                            s ? (s = !1,
                            t.center.copy(ya.center),
                            t.halfExtents.copy(ya.halfExtents)) : t.add(ya));
                        e = !0
                    } else
                        this.node._aabbVer !== this._aabbVer && (this.mesh ? (t.center.copy(this.mesh.aabb.center),
                        t.halfExtents.copy(this.mesh.aabb.halfExtents)) : (t.center.set(0, 0, 0),
                        t.halfExtents.set(0, 0, 0)),
                        this.mesh && this.mesh.morph && t._expand(this.mesh.morph.aabb.getMin(), this.mesh.morph.aabb.getMax()),
                        e = !0,
                        this._aabbVer = this.node._aabbVer);
                return e && this._aabb.setFromTransformedAabb(t, this.node.getWorldTransform()),
                this._aabb
            },
            set: function(t) {
                this._aabb = t
            }
        }, {
            key: "material",
            get: function() {
                return this._material
            },
            set: function(t) {
                for (var e = 0; e < this._shader.length; e++)
                    this._shader[e] = null;
                var i = this._material;
                if ((i && i.removeMeshInstanceRef(this),
                this._material = t,
                this._material) && (this._material.addMeshInstanceRef(this),
                this.updateKey(),
                (i && 3 !== i.blendType) !== (3 !== this._material.blendType))) {
                    var n = this._material._scene;
                    !n && i && i._scene && (n = i._scene),
                    n ? n.layers._dirtyBlend = !0 : this._material._dirtyBlend = !0
                }
            }
        }, {
            key: "layer",
            get: function() {
                return this._layer
            },
            set: function(t) {
                this._layer = t,
                this.updateKey()
            }
        }, {
            key: "calculateSortDistance",
            get: function() {
                return this._calculateSortDistance
            },
            set: function(t) {
                this._calculateSortDistance = t
            }
        }, {
            key: "receiveShadow",
            get: function() {
                return this._receiveShadow
            },
            set: function(t) {
                this._receiveShadow = t,
                this._shaderDefs = t ? -2 & this._shaderDefs : 1 | this._shaderDefs,
                this._shader[0] = null,
                this._shader[1] = null
            }
        }, {
            key: "skinInstance",
            get: function() {
                return this._skinInstance
            },
            set: function(t) {
                this._skinInstance = t,
                this._shaderDefs = t ? 2 | this._shaderDefs : -3 & this._shaderDefs;
                for (var e = 0; e < this._shader.length; e++)
                    this._shader[e] = null;
                this._setupSkinUpdate()
            }
        }, {
            key: "morphInstance",
            get: function() {
                return this._morphInstance
            },
            set: function(t) {
                this._morphInstance = t,
                this._morphInstance && (this._morphInstance.meshInstance = this),
                this._shaderDefs = t && t.morph.useTextureMorph ? this._shaderDefs | Ot : -4097 & this._shaderDefs,
                this._shaderDefs = t && t.morph.morphPositions ? this._shaderDefs | Dt : -1025 & this._shaderDefs,
                this._shaderDefs = t && t.morph.morphNormals ? this._shaderDefs | kt : -2049 & this._shaderDefs;
                for (var e = 0; e < this._shader.length; e++)
                    this._shader[e] = null
            }
        }, {
            key: "screenSpace",
            get: function() {
                return this._screenSpace
            },
            set: function(t) {
                this._screenSpace = t,
                this._shaderDefs = t ? this._shaderDefs | Lt : -257 & this._shaderDefs,
                this._shader[0] = null
            }
        }, {
            key: "key",
            get: function() {
                return this._key[0]
            },
            set: function(t) {
                this._key[0] = t
            }
        }, {
            key: "mask",
            get: function() {
                return this._shaderDefs >> 16
            },
            set: function(t) {
                var e = 65535 & this._shaderDefs;
                this._shaderDefs = e | t << 16,
                this._shader[0] = null,
                this._shader[1] = null
            }
        }, {
            key: "instancingCount",
            get: function() {
                return this.instancingData ? this.instancingData.count : 0
            },
            set: function(t) {
                this.instancingData && (this.instancingData.count = t)
            }
        }]),
        t
    }();
    function Ma(t, e, i, n) {
        return (15 & t) << 27 | (3 === e ? 1 : 0) << 26 | (i ? 1 : 0) << 25 | (33554431 & n) << 0
    }
    function Aa(t, e) {
        if (t && !e)
            return !1;
        if (!t && e)
            return !1;
        if ((t = t.data) === (e = e.data))
            return !0;
        if (t instanceof Float32Array && e instanceof Float32Array) {
            if (t.length !== e.length)
                return !1;
            for (var i = 0; i < t.length; i++)
                if (t[i] !== e[i])
                    return !1;
            return !0
        }
        return !1
    }
    function Ca(t, e) {
        for (var i in t)
            if (t.hasOwnProperty(i) && !Aa(t[i], e[i]))
                return !1;
        for (var n in e)
            if (e.hasOwnProperty(n) && !Aa(e[n], t[n]))
                return !1;
        return !0
    }
    function Ea(t, e) {
        for (var i = 0; i < t.length; i++)
            if (e.indexOf(t[i]) < 0)
                return !1;
        for (var n = 0; n < e.length; n++)
            if (t.indexOf(e[n]) < 0)
                return !1;
        return !0
    }
    wa.lightmapParamNames = ["texture_lightMap", "texture_dirLightMap"];
    var Pa = new ct
      , Ra = new lt
      , Ia = new lt
      , La = new lt;
    function Da(t) {
        var e = t.node.worldTransform;
        return e.getX(Ra),
        e.getY(Ia),
        e.getZ(La),
        Ra.cross(Ra, Ia),
        Ra.dot(La) >= 0 ? 1 : -1
    }
    var ka = function() {
        function t(t, e, i) {
            this.device = t,
            this.rootNode = e,
            this.scene = i,
            this._init = !1,
            this._batchGroups = {},
            this._batchGroupCounter = 0,
            this._batchList = [],
            this._dirtyGroups = []
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.device = null,
            this.rootNode = null,
            this.scene = null,
            this._batchGroups = {},
            this._batchList = [],
            this._dirtyGroups = []
        }
        ,
        e.addGroup = function(t, e, i, n, s) {
            if (void 0 === n && (n = this._batchGroupCounter,
            this._batchGroupCounter++),
            !this._batchGroups[n]) {
                var a = new da(n,t,e,i,s);
                return this._batchGroups[n] = a,
                a
            }
        }
        ,
        e.removeGroup = function(t) {
            if (this._batchGroups[t]) {
                for (var e = [], i = 0; i < this._batchList.length; i++)
                    this._batchList[i].batchGroupId === t ? this.destroyBatch(this._batchList[i]) : e.push(this._batchList[i]);
                this._batchList = e,
                this._removeModelsFromBatchGroup(this.rootNode, t),
                delete this._batchGroups[t]
            }
        }
        ,
        e.markGroupDirty = function(t) {
            this._dirtyGroups.indexOf(t) < 0 && this._dirtyGroups.push(t)
        }
        ,
        e.getGroupByName = function(t) {
            var e = this._batchGroups;
            for (var i in e)
                if (e.hasOwnProperty(i) && e[i].name === t)
                    return e[i];
            return null
        }
        ,
        e.getBatches = function(t) {
            for (var e = [], i = this._batchList.length, n = 0; n < i; n++) {
                var s = this._batchList[n];
                s.batchGroupId === t && e.push(s)
            }
            return e
        }
        ,
        e._removeModelsFromBatchGroup = function(t, e) {
            if (t.enabled) {
                t.model && t.model.batchGroupId === e && (t.model.batchGroupId = -1),
                t.render && t.render.batchGroupId === e && (t.render.batchGroupId = -1),
                t.element && t.element.batchGroupId === e && (t.element.batchGroupId = -1),
                t.sprite && t.sprite.batchGroupId === e && (t.sprite.batchGroupId = -1);
                for (var i = 0; i < t._children.length; i++)
                    this._removeModelsFromBatchGroup(t._children[i], e)
            }
        }
        ,
        e.insert = function(t, e, i) {
            var n = this._batchGroups[e];
            n && n._obj[t].indexOf(i) < 0 && (n._obj[t].push(i),
            this.markGroupDirty(e))
        }
        ,
        e.remove = function(t, e, i) {
            var n = this._batchGroups[e];
            if (n) {
                var s = n._obj[t].indexOf(i);
                s >= 0 && (n._obj[t].splice(s, 1),
                this.markGroupDirty(e))
            }
        }
        ,
        e._extractRender = function(t, e, i, n) {
            if (t.render) {
                if (t.render.isStatic) {
                    for (var s = this.scene.drawCalls, a = t.render.meshInstances, r = 0; r < s.length; r++)
                        s[r]._staticSource && (a.indexOf(s[r]._staticSource) < 0 || e.push(s[r]));
                    for (var o = 0; o < a.length; o++)
                        s.indexOf(a[o]) >= 0 && e.push(a[o])
                } else
                    e = n[t.render.batchGroupId] = e.concat(t.render.meshInstances);
                t.render.removeFromLayers()
            }
            return e
        }
        ,
        e._extractModel = function(t, e, i, n) {
            if (t.model && t.model.model) {
                if (t.model.isStatic) {
                    for (var s = this.scene.drawCalls, a = t.model.meshInstances, r = 0; r < s.length; r++)
                        s[r]._staticSource && (a.indexOf(s[r]._staticSource) < 0 || e.push(s[r]));
                    for (var o = 0; o < a.length; o++)
                        s.indexOf(a[o]) >= 0 && e.push(a[o])
                } else
                    e = n[t.model.batchGroupId] = e.concat(t.model.meshInstances);
                t.model.removeModelFromLayers()
            }
            return e
        }
        ,
        e._extractElement = function(t, e, i) {
            if (t.element) {
                var n = !1;
                t.element._text && t.element._text._model.meshInstances.length > 0 ? (e.push(t.element._text._model.meshInstances[0]),
                t.element.removeModelFromLayers(t.element._text._model),
                n = !0) : t.element._image && (e.push(t.element._image._renderable.meshInstance),
                t.element.removeModelFromLayers(t.element._image._renderable.model),
                t.element._image._renderable.unmaskMeshInstance && (e.push(t.element._image._renderable.unmaskMeshInstance),
                t.element._image._renderable.unmaskMeshInstance.stencilFront && t.element._image._renderable.unmaskMeshInstance.stencilBack || (t.element._dirtifyMask(),
                t.element._onPrerender())),
                n = !0),
                n && (i._ui = !0)
            }
        }
        ,
        e._collectAndRemoveMeshInstances = function(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = e[i]
                  , s = this._batchGroups[n];
                if (s) {
                    var a = t[n];
                    a || (a = t[n] = []);
                    for (var r = 0; r < s._obj.model.length; r++)
                        a = this._extractModel(s._obj.model[r], a, s, t);
                    for (var o = 0; o < s._obj.render.length; o++)
                        a = this._extractRender(s._obj.render[o], a, s, t);
                    for (var h = 0; h < s._obj.element.length; h++)
                        this._extractElement(s._obj.element[h], a, s);
                    for (var l = 0; l < s._obj.sprite.length; l++) {
                        var c = s._obj.sprite[l];
                        c.sprite && c.sprite._meshInstance && (s.dynamic || 0 === c.sprite.sprite._renderMode) && (a.push(c.sprite._meshInstance),
                        c.sprite.removeModelFromLayers(),
                        s._sprite = !0,
                        c.sprite._batchGroup = s)
                    }
                }
            }
        }
        ,
        e.generate = function(t) {
            var e = {};
            t || (t = Object.keys(this._batchGroups));
            for (var i, n, s, a, r = [], o = 0; o < this._batchList.length; o++)
                t.indexOf(this._batchList[o].batchGroupId) < 0 ? r.push(this._batchList[o]) : this.destroyBatch(this._batchList[o]);
            if (this._batchList = r,
            this._collectAndRemoveMeshInstances(e, t),
            t === this._dirtyGroups)
                this._dirtyGroups.length = 0;
            else {
                for (var h = [], l = 0; l < this._dirtyGroups.length; l++)
                    t.indexOf(this._dirtyGroups[l]) < 0 && h.push(this._dirtyGroups[l]);
                this._dirtyGroups = h
            }
            for (var c in e)
                if (e.hasOwnProperty(c) && (i = e[c],
                s = this._batchGroups[c])) {
                    n = this.prepare(i, s.dynamic, s.maxAabbSize, s._ui || s._sprite);
                    for (var u = 0; u < n.length; u++)
                        (a = this.create(n[u], s.dynamic, parseInt(c, 10))) && a.addToLayers(this.scene, s.layers)
                }
        }
        ,
        e.prepare = function(t, e, i, n) {
            if (void 0 === i && (i = Number.POSITIVE_INFINITY),
            0 === t.length)
                return [];
            var s, a = .5 * i, r = this.device.supportsBoneTextures ? 1024 : this.device.boneLimit, o = this.device.extUintElement ? 4294967295 : 65535, h = new Mt, l = new Mt, c = null, u = [], d = 0;
            n && t.sort((function(t, e) {
                return t.drawOrder - e.drawOrder
            }
            ));
            for (var f, p = t, m = n ? function(t) {
                c ? c.add(t.aabb) : c = t.aabb.clone(),
                f.push(t)
            }
            : function(t) {
                f.push(t)
            }
            ; p.length > 0; ) {
                u[d] = [p[0]],
                f = [];
                var _ = p[0].material
                  , g = p[0].layer
                  , v = p[0]._shaderDefs
                  , y = p[0].parameters
                  , x = p[0].stencilFront
                  , b = p[0]._staticLightList
                  , S = p[0].mesh.vertexBuffer.getNumVertices()
                  , T = p[0].drawOrder;
                h.copy(p[0].aabb);
                var w = Da(p[0])
                  , M = p[0].mesh.vertexBuffer.format.batchingHash
                  , A = p[0].mesh.primitive[0].indexed;
                c = null;
                for (var C = 1; C < p.length; C++) {
                    var E = p[C];
                    if (e && u[d].length >= r) {
                        f = f.concat(p.slice(C));
                        break
                    }
                    if (_ !== E.material || g !== E.layer || M !== E.mesh.vertexBuffer.format.batchingHash || A !== E.mesh.primitive[0].indexed || v !== E._shaderDefs || S + E.mesh.vertexBuffer.getNumVertices() > o)
                        m(E);
                    else if (l.copy(h),
                    l.add(E.aabb),
                    l.halfExtents.x > a || l.halfExtents.y > a || l.halfExtents.z > a)
                        m(E);
                    else if (!x || (s = E.stencilFront) && x.func === s.func && x.zpass === s.zpass)
                        if (w === Da(E))
                            if (Ca(y, E.parameters)) {
                                var P = E._staticLightList;
                                if (b && P) {
                                    if (!Ea(b, P)) {
                                        m(E);
                                        continue
                                    }
                                } else if (b || P) {
                                    m(E);
                                    continue
                                }
                                n && c && c.intersects(E.aabb) && E.drawOrder !== T ? m(E) : (h.add(E.aabb),
                                S += E.mesh.vertexBuffer.getNumVertices(),
                                u[d].push(E))
                            } else
                                m(E);
                        else
                            m(E);
                    else
                        m(E)
                }
                d++,
                p = f
            }
            return u
        }
        ,
        e.collectBatchedMeshData = function(t, e) {
            for (var i = null, n = 0, s = 0, a = null, r = 0; r < t.length; r++)
                if (t[r].visible) {
                    var o = t[r].mesh;
                    if (n += o.vertexBuffer.numVertices,
                    s += o.primitive[0].indexed ? o.primitive[0].count : 6 === o.primitive[0].type && 4 === o.primitive[0].count ? 6 : 0,
                    !i) {
                        a = t[r].material,
                        i = {};
                        for (var h = o.vertexBuffer.format.elements, l = 0; l < h.length; l++) {
                            i[h[l].name] = {
                                numComponents: h[l].numComponents,
                                dataType: h[l].dataType,
                                normalize: h[l].normalize,
                                count: 0
                            }
                        }
                        e && (i.BLENDINDICES = {
                            numComponents: 1,
                            dataType: 6,
                            normalize: !1,
                            count: 0
                        })
                    }
                }
            return {
                streams: i,
                batchNumVerts: n,
                batchNumIndices: s,
                material: a
            }
        }
        ,
        e.create = function(t, e, i) {
            if (!this._init) {
                var n = "#define BONE_LIMIT " + this.device.getBoneLimit() + "\n";
                this.transformVS = n + "#define DYNAMICBATCH\n" + ni.transformVS,
                this.skinTexVS = ni.skinBatchTexVS,
                this.skinConstVS = ni.skinBatchConstVS,
                this.vertexFormats = {},
                this._init = !0
            }
            var s, a, r, o = null, h = null, l = this.collectBatchedMeshData(t, e);
            if (l.streams) {
                var c, u, d, f = l.streams, p = l.material, m = l.batchNumVerts, _ = l.batchNumIndices;
                h = new ua(t,e,i),
                this._batchList.push(h);
                var g, v = 0, y = 0, x = new lt, b = new (m <= 65535 ? Uint16Array : Uint32Array)(_);
                for (s in f)
                    (o = f[s]).typeArrayType = He[o.dataType],
                    o.elementByteSize = Xe[o.dataType],
                    o.buffer = new o.typeArrayType(m * o.numComponents);
                for (var S = 0; S < t.length; S++)
                    if (t[S].visible) {
                        for (s in r = (a = t[S].mesh).vertexBuffer.numVertices,
                        e || (g = t[S].node.getWorldTransform()),
                        f)
                            if (s !== he) {
                                var T = new (o = f[s]).typeArrayType(o.buffer.buffer,o.elementByteSize * o.count)
                                  , w = a.getVertexStream(s, T) * o.numComponents;
                                if (o.count += w,
                                !e && o.numComponents >= 3)
                                    if (s === se)
                                        for (var M = 0; M < w; M += o.numComponents)
                                            x.set(T[M], T[M + 1], T[M + 2]),
                                            g.transformPoint(x, x),
                                            T[M] = x.x,
                                            T[M + 1] = x.y,
                                            T[M + 2] = x.z;
                                    else if (s === ae || s === re) {
                                        g.invertTo3x3(Pa),
                                        Pa.transpose();
                                        for (var A = 0; A < w; A += o.numComponents)
                                            x.set(T[A], T[A + 1], T[A + 2]),
                                            Pa.transformVector(x, x),
                                            T[A] = x.x,
                                            T[A + 1] = x.y,
                                            T[A + 2] = x.z
                                    }
                            }
                        if (e) {
                            o = f.BLENDINDICES;
                            for (var C = 0; C < r; C++)
                                o.buffer[o.count++] = S
                        }
                        if (a.primitive[0].indexed) {
                            c = a.primitive[0].base,
                            u = a.primitive[0].count;
                            var E = a.indexBuffer[0].getFormat();
                            d = new qe[E](a.indexBuffer[0].storage)
                        } else {
                            if (6 !== a.primitive[0].type || 4 !== a.primitive[0].count) {
                                u = 0;
                                continue
                            }
                            c = 0,
                            u = 6,
                            d = [0, 1, 3, 2, 3, 1]
                        }
                        for (var P = 0; P < u; P++)
                            b[P + y] = d[c + P] + v;
                        y += u,
                        v += r
                    }
                for (s in a = new Ys(this.device),
                f)
                    o = f[s],
                    a.setVertexStream(s, o.buffer, o.numComponents, void 0, o.dataType, o.normalize);
                b.length > 0 && a.setIndices(b),
                a.update(4, !1),
                e && ((p = p.clone()).chunks.transformVS = this.transformVS,
                p.chunks.skinTexVS = this.skinTexVS,
                p.chunks.skinConstVS = this.skinConstVS,
                p.update());
                var R = new wa(a,p,this.rootNode);
                R.castShadow = h.origMeshInstances[0].castShadow,
                R.parameters = h.origMeshInstances[0].parameters,
                R.isStatic = h.origMeshInstances[0].isStatic,
                R.layer = h.origMeshInstances[0].layer,
                R._staticLightList = h.origMeshInstances[0]._staticLightList,
                R._shaderDefs = h.origMeshInstances[0]._shaderDefs,
                R.cull = h.origMeshInstances[0].cull;
                var I = this._batchGroups[i];
                if (I && I._ui && (R.cull = !1),
                e) {
                    for (var L = [], D = 0; D < h.origMeshInstances.length; D++)
                        L.push(h.origMeshInstances[D].node);
                    R.skinInstance = new ma(this.device,L,this.rootNode)
                }
                R._updateAabb = !1,
                R.drawOrder = h.origMeshInstances[0].drawOrder,
                R.stencilFront = h.origMeshInstances[0].stencilFront,
                R.stencilBack = h.origMeshInstances[0].stencilBack,
                R.flipFaces = Da(h.origMeshInstances[0]) < 0,
                R.castShadow = h.origMeshInstances[0].castShadow,
                h.meshInstance = R,
                h.updateBoundingBox()
            }
            return h
        }
        ,
        e.updateAll = function() {
            this._dirtyGroups.length > 0 && this.generate(this._dirtyGroups);
            for (var t = 0; t < this._batchList.length; t++)
                this._batchList[t].dynamic && this._batchList[t].updateBoundingBox()
        }
        ,
        e.clone = function(t, e) {
            var i = new ua(e,t.dynamic,t.batchGroupId);
            this._batchList.push(i);
            for (var n = [], s = 0; s < e.length; s++)
                n.push(e[s].node);
            return i.meshInstance = new wa(t.meshInstance.mesh,t.meshInstance.material,t.meshInstance.node),
            i.meshInstance._updateAabb = !1,
            i.meshInstance.parameters = e[0].parameters,
            i.meshInstance.isStatic = e[0].isStatic,
            i.meshInstance.cull = e[0].cull,
            i.meshInstance.layer = e[0].layer,
            i.meshInstance._staticLightList = e[0]._staticLightList,
            t.dynamic && (i.meshInstance.skinInstance = new ma(this.device,n,this.rootNode)),
            i.meshInstance.castShadow = t.meshInstance.castShadow,
            i.meshInstance._shader = t.meshInstance._shader,
            i.meshInstance.castShadow = t.meshInstance.castShadow,
            i
        }
        ,
        e.destroyBatch = function(t) {
            t.destroy(this.scene, this._batchGroups[t.batchGroupId].layers)
        }
        ,
        t
    }()
      , Oa = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.clone = function() {
            var t = new e;
            return Fn.prototype._cloneInternal.call(this, t),
            t
        }
        ,
        i.updateShader = function(t) {
            var e = {
                skin: !!this.meshInstances[0].skinInstance
            }
              , i = t.getProgramLibrary();
            this.shader = i.getProgram("depth", e)
        }
        ,
        e
    }(Fn)
      , Fa = new dt
      , Ba = function() {
        function t(t, e) {
            this.device = t,
            this.lightTextureAtlas = e,
            this.blitShader2d = null,
            this.blitShaderCube = null,
            this.blitTextureId = null,
            this.invViewProjId = null
        }
        var e = t.prototype;
        return e.destroy = function() {}
        ,
        e.getShader = function(t, e) {
            return this[t] || (this[t] = mi(this.device, "\n    attribute vec2 vertex_position;\n    varying vec2 uv0;\n    void main(void) {\n        gl_Position = vec4(vertex_position, 0.5, 1.0);\n        uv0 = vertex_position.xy * 0.5 + 0.5;\n    }", e, "cookie_renderer_" + t)),
            this.blitTextureId || (this.blitTextureId = this.device.scope.resolve("blitTexture")),
            this.invViewProjId || (this.invViewProjId = this.device.scope.resolve("invViewProj")),
            this[t]
        }
        ,
        t.createTexture = function(t, e) {
            var i = new Mi(t,{
                width: e,
                height: e,
                format: 7,
                cubemap: !1,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            return i.name = "CookieAtlas",
            i
        }
        ,
        e.initInvViewProjMatrices = function() {
            if (!t._invViewProjMatrices) {
                t._invViewProjMatrices = [];
                for (var e = 0; e < 6; e++) {
                    var i = Zi.create(null, 1, e)
                      , n = i.projectionMatrix
                      , s = i.node.getLocalTransform().clone().invert();
                    t._invViewProjMatrices[e] = (new vt).mul2(n, s).invert()
                }
            }
        }
        ,
        e.render = function(e, i) {
            if (e.enabled && e.cookie && e.visibleThisFrame) {
                var n = e.numShadowFaces
                  , s = n > 1 ? this.shaderCube : this.shader2d
                  , a = this.device;
                n > 1 && this.initInvViewProjMatrices(),
                this.blitTextureId.setValue(e.cookie);
                for (var r = 0; r < n; r++) {
                    if (Fa.copy(e.atlasViewport),
                    n > 1) {
                        var o = Fa.z / 3
                          , h = this.lightTextureAtlas.cubeSlotsOffsets[r];
                        Fa.x += o * h.x,
                        Fa.y += o * h.y,
                        Fa.z = o,
                        Fa.w = o,
                        this.invViewProjId.setValue(t._invViewProjMatrices[r].data)
                    }
                    Fa.mulScalar(i.colorBuffer.width),
                    ei(a, i, s, Fa)
                }
            }
        }
        ,
        G(t, [{
            key: "shader2d",
            get: function() {
                return this.getShader("blitShader2d", "\n    varying vec2 uv0;\n    uniform sampler2D blitTexture;\n    void main(void) {\n        gl_FragColor = texture2D(blitTexture, uv0);\n    }")
            }
        }, {
            key: "shaderCube",
            get: function() {
                return this.getShader("blitShaderCube", "\n    varying vec2 uv0;\n    uniform samplerCube blitTexture;\n    uniform mat4 invViewProj;\n    void main(void) {\n        vec4 projPos = vec4(uv0 * 2.0 - 1.0, 0.5, 1.0);\n        vec4 worldPos = invViewProj * projPos;\n        gl_FragColor = textureCube(blitTexture, worldPos.xyz);\n    }")
            }
        }]),
        t
    }();
    Ba._invViewProjMatrices = null;
    var Na = function() {
        function t(t, e) {
            this.texture = t,
            this.cached = !1,
            this.renderTargets = e
        }
        return t.prototype.destroy = function() {
            this.texture && (this.texture.destroy(),
            this.texture = null);
            for (var t = this.renderTargets, e = 0; e < t.length; e++)
                t[e].destroy();
            this.renderTargets.length = 0
        }
        ,
        t.getShadowFormat = function(t, e) {
            return 3 === e ? Qt : 2 === e ? Zt : 4 === e || 0 === e && t.webgl2 ? Jt : 7
        }
        ,
        t.getShadowFiltering = function(t, e) {
            return 0 !== e || t.webgl2 ? 3 === e ? t.extTextureFloatLinear ? 1 : 0 : 2 === e ? t.extTextureHalfFloatLinear ? 1 : 0 : 1 : 0
        }
        ,
        t.create = function(t, e) {
            return 1 === e._type ? this.createCubemap(t, e._shadowResolution) : this.create2dMap(t, e._shadowResolution, e._shadowType)
        }
        ,
        t.createAtlas = function(t, e, i) {
            for (var n = this.create2dMap(t, e, i), s = n.renderTargets, a = s[0], r = 0; r < 5; r++)
                s.push(a);
            return n
        }
        ,
        t.create2dMap = function(e, i, n) {
            var s = this.getShadowFormat(e, n)
              , a = this.getShadowFiltering(e, n)
              , r = new Mi(e,{
                format: s,
                width: i,
                height: i,
                mipmaps: !1,
                minFilter: a,
                magFilter: a,
                addressU: 1,
                addressV: 1
            });
            r.name = "ShadowMap2D";
            var o = null;
            return 4 === n || 0 === n && e.webgl2 ? (r.compareOnRead = !0,
            r.compareFunc = 1,
            o = new ms({
                depthBuffer: r
            })) : o = new ms({
                colorBuffer: r,
                depth: !0
            }),
            new t(r,[o])
        }
        ,
        t.createCubemap = function(e, i) {
            var n = new Mi(e,{
                format: 7,
                width: i,
                height: i,
                cubemap: !0,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            n.name = "ShadowMapCube";
            for (var s = [], a = 0; a < 6; a++) {
                var r = new ms({
                    colorBuffer: n,
                    face: a,
                    depth: !0
                });
                s.push(r)
            }
            return new t(n,s)
        }
        ,
        t
    }()
      , Ua = []
      , za = new dt
      , Va = new dt
      , Ga = function() {
        function t(t) {
            this.device = t,
            this.subdivision = 0,
            this.shadowMapResolution = 2048,
            this.shadowMap = null,
            this.shadowEdgePixels = 3,
            this.cookieMapResolution = 2048,
            this.cookieMap = null,
            this.cookieRenderTarget = null,
            this.slots = [],
            this.cubeSlotsOffsets = [new ut(0,0), new ut(0,1), new ut(1,0), new ut(1,1), new ut(2,0), new ut(2,1)],
            this.allocateShadowMap(1),
            this.allocateCookieMap(1),
            this.allocateUniforms()
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.destroyShadowMap(),
            this.destroyCookieMap()
        }
        ,
        e.destroyShadowMap = function() {
            this.shadowMap && (this.shadowMap.destroy(),
            this.shadowMap = null)
        }
        ,
        e.destroyCookieMap = function() {
            this.cookieMap && (this.cookieMap.destroy(),
            this.cookieMap = null),
            this.cookieRenderTarget && (this.cookieRenderTarget.destroy(),
            this.cookieRenderTarget = null)
        }
        ,
        e.allocateShadowMap = function(t) {
            this.shadowMap && this.shadowMap.texture.width === t || (this.destroyShadowMap(),
            this.shadowMap = Na.createAtlas(this.device, t, 0),
            this.shadowMap.cached = !0)
        }
        ,
        e.allocateCookieMap = function(t) {
            this.cookieMap && this.cookieMap.width === t || (this.destroyCookieMap(),
            this.cookieMap = Ba.createTexture(this.device, t),
            this.cookieRenderTarget = new ms({
                colorBuffer: this.cookieMap,
                depth: !1,
                flipY: !0
            }))
        }
        ,
        e.allocateUniforms = function() {
            this._shadowAtlasTextureId = this.device.scope.resolve("shadowAtlasTexture"),
            this._shadowAtlasParamsId = this.device.scope.resolve("shadowAtlasParams"),
            this._shadowAtlasParams = new Float32Array(2),
            this._cookieAtlasTextureId = this.device.scope.resolve("cookieAtlasTexture")
        }
        ,
        e.updateUniforms = function() {
            var t = this.shadowMap.renderTargets[0]
              , e = this.device.webgl2 ? t.depthBuffer : t.colorBuffer;
            this._shadowAtlasTextureId.setValue(e),
            this._shadowAtlasParams[0] = this.shadowMapResolution,
            this._shadowAtlasParams[1] = this.shadowEdgePixels,
            this._shadowAtlasParamsId.setValue(this._shadowAtlasParams),
            this._cookieAtlasTextureId.setValue(this.cookieMap)
        }
        ,
        e.subdivide = function(t) {
            var e = Math.ceil(Math.sqrt(t));
            if (this.subdivision !== e) {
                this.subdivision = e,
                this.slots.length = 0;
                for (var i = 1 / e, n = 0; n < e; n++)
                    for (var s = 0; s < e; s++)
                        this.slots.push(new dt(n * i,s * i,i,i))
            }
        }
        ,
        e.collectLights = function(t, e, i, n) {
            var s = !1
              , a = !1
              , r = Ua;
            r.length = 0;
            var o = function(t) {
                for (var e = 0; e < t.length; e++) {
                    var o = t[e];
                    o.visibleThisFrame && (s || (s = n && o.castShadows),
                    a || (a = i && !!o.cookie),
                    (s || a) && r.push(o))
                }
            };
            return (i || n) && (o(t),
            o(e)),
            s && this.allocateShadowMap(this.shadowMapResolution),
            a && this.allocateCookieMap(this.cookieMapResolution),
            (s || a) && this.subdivide(r.length),
            r
        }
        ,
        e.update = function(t, e, i, n) {
            var s = this.collectLights(t, e, i, n);
            if (s.length > 0)
                for (var a = 4 / this.shadowMapResolution, r = new dt(a,a,-2 * a,-2 * a), o = 0, h = 0; h < s.length; h++) {
                    var l = s[h];
                    l.castShadows && (l._shadowMap = this.shadowMap);
                    var c = this.slots[o];
                    o++,
                    l.atlasViewport.copy(c);
                    for (var u = l.numShadowFaces, d = 0; d < u; d++)
                        if (l.castShadows || l._cookie) {
                            if (za.copy(c),
                            Va.copy(c),
                            2 === l._type && za.add(r),
                            1 === l._type) {
                                var f = za.z / 3
                                  , p = this.cubeSlotsOffsets[d];
                                za.x += f * p.x,
                                za.y += f * p.y,
                                za.z = f,
                                za.w = f,
                                Va.copy(za)
                            }
                            if (l.castShadows) {
                                var m = l.getRenderData(null, d);
                                m.shadowViewport.copy(za),
                                m.shadowScissor.copy(Va)
                            }
                        }
                }
            this.updateUniforms()
        }
        ,
        t
    }()
      , Wa = function() {
        function t() {
            this.shadowMapCache = new Map
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.clear(),
            this.shadowMapCache = null
        }
        ,
        e.clear = function() {
            this.shadowMapCache.forEach((function(t) {
                t.forEach((function(t) {
                    t.destroy()
                }
                ))
            }
            )),
            this.shadowMapCache.clear()
        }
        ,
        e.getKey = function(t) {
            return (1 === t._type) + "-" + t._shadowType + "-" + t._shadowResolution
        }
        ,
        e.get = function(t, e) {
            var i = this.getKey(e)
              , n = this.shadowMapCache.get(i);
            if (n && n.length)
                return n.pop();
            var s = Na.create(t, e);
            return s.cached = !0,
            s
        }
        ,
        e.add = function(t, e) {
            var i = this.getKey(t)
              , n = this.shadowMapCache.get(i);
            n ? n.push(e) : this.shadowMapCache.set(i, [e])
        }
        ,
        t
    }()
      , Ha = [new lt, new lt, new lt, new lt, new lt, new lt, new lt, new lt]
      , Xa = {
        min: 0,
        max: 0
    };
    function ja(t, e, i) {
        Ha[0].x = Ha[1].x = Ha[2].x = Ha[3].x = e.x,
        Ha[1].y = Ha[3].y = Ha[7].y = Ha[5].y = e.y,
        Ha[2].z = Ha[3].z = Ha[6].z = Ha[7].z = e.z,
        Ha[4].x = Ha[5].x = Ha[6].x = Ha[7].x = i.x,
        Ha[0].y = Ha[2].y = Ha[4].y = Ha[6].y = i.y,
        Ha[0].z = Ha[1].z = Ha[4].z = Ha[5].z = i.z;
        for (var n = 9999999999, s = -9999999999, a = 0; a < 8; ++a) {
            t.transformPoint(Ha[a], Ha[a]);
            var r = Ha[a].z;
            r < n && (n = r),
            r > s && (s = r)
        }
        return Xa.min = n,
        Xa.max = s,
        Xa
    }
    function qa(t, e) {
        return Math.exp(-t * t / (2 * e * e))
    }
    var Ya = new Mt
      , Ka = new vt
      , Za = new vt
      , $a = new Float32Array(2)
      , Qa = {
        x: 1,
        y: 1,
        z: 0,
        w: 0
    }
      , Ja = {
        r: 1,
        g: 2,
        b: 3,
        a: 4
    }
      , tr = new lt
      , er = new vt;
    function ir(t) {
        var e = t.material
          , i = t.skinInstance ? 10 : 0
          , n = 0;
        if (e.opacityMap) {
            var s = e.opacityMapChannel;
            s && (n = Ja[s])
        }
        return i + n
    }
    var nr, sr, ar, rr, or, hr, lr, cr, ur, dr, fr, pr, mr, _r = function() {
        function t(t, e) {
            this.device = t.device,
            this.forwardRenderer = t,
            this.lightTextureAtlas = e;
            var i = this.device.scope;
            this.polygonOffsetId = i.resolve("polygonOffset"),
            this.polygonOffset = new Float32Array(2),
            this.sourceId = i.resolve("source"),
            this.pixelOffsetId = i.resolve("pixelOffset"),
            this.weightId = i.resolve("weight[0]"),
            this.blurVsmShaderCode = [ni.blurVSMPS, "#define GAUSS\n" + ni.blurVSMPS];
            var n = "#define PACKED\n";
            this.blurPackedVsmShaderCode = [n + this.blurVsmShaderCode[0], n + this.blurVsmShaderCode[1]],
            this.blurVsmShader = [{}, {}],
            this.blurPackedVsmShader = [{}, {}],
            this.blurVsmWeights = {},
            this.shadowMapLightRadiusId = i.resolve("light_radius"),
            this.shadowMapCache = new Wa
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.shadowMapCache.destroy(),
            this.shadowMapCache = null
        }
        ,
        t.createShadowCamera = function(t, e, i, n) {
            var s = Zi.create("ShadowCamera", i, n)
              , a = 4 === e || 0 === e && t.webgl2;
            return 1 !== i || xn.clusteredLightingEnabled || (a = !1),
            s.clearColor = e >= 1 && e <= 3 ? new at(0,0,0,0) : new at(1,1,1,1),
            s.clearColorBuffer = !a,
            s.clearDepthBuffer = !0,
            s.clearStencilBuffer = !1,
            s
        }
        ,
        e.cullShadowCasters = function(t, e, i) {
            for (var n = 0, s = t.length, a = 0; a < s; a++) {
                var r = t[a];
                r.cull && !r._isVisible(i) || (r.visibleThisFrame = !0,
                e[n] = r,
                n++)
            }
            e.length = n,
            e.sort(this.forwardRenderer.depthSortCompare)
        }
        ,
        e.cullLocal = function(t, e) {
            t.visibleThisFrame = !0,
            xn.clusteredLightingEnabled || t._shadowMap || (t._shadowMap = Na.create(this.device, t));
            for (var i = t._type, n = 2 === i ? 1 : 6, s = 0; s < n; s++) {
                var a = t.getRenderData(null, s)
                  , r = a.shadowCamera;
                r.nearClip = t.attenuationEnd / 1e3,
                r.farClip = t.attenuationEnd;
                var o = r._node
                  , h = t._node;
                if (o.setPosition(h.getPosition()),
                2 === i)
                    r.fov = 2 * t._outerConeAngle,
                    o.setRotation(h.getRotation()),
                    o.rotateLocal(-90, 0, 0);
                else if (1 === i)
                    if (xn.clusteredLightingEnabled) {
                        var l = 2 / (this.lightTextureAtlas.shadowMapResolution * t.atlasViewport.z / 3) * this.lightTextureAtlas.shadowEdgePixels;
                        r.fov = Math.atan(1 + l) * it.RAD_TO_DEG * 2
                    } else
                        r.fov = 90;
                this.forwardRenderer.updateCameraFrustum(r),
                this.cullShadowCasters(e, a.visibleCasters, r)
            }
        }
        ,
        e.generateSplitDistances = function(t, e, i) {
            t._shadowCascadeDistances.fill(i);
            for (var n = 1; n < t.numCascades; n++) {
                var s = n / t.numCascades
                  , a = e + (i - e) * s
                  , r = e * Math.pow(i / e, s)
                  , o = it.lerp(a, r, t.cascadeDistribution);
                t._shadowCascadeDistances[n - 1] = o
            }
        }
        ,
        e.cullDirectional = function(t, e, i) {
            t.visibleThisFrame = !0,
            t._shadowMap || (t._shadowMap = Na.create(this.device, t));
            var n = i._nearClip;
            this.generateSplitDistances(t, n, t.shadowDistance);
            for (var s = 0; s < t.numCascades; s++) {
                var a = t.getRenderData(i, s)
                  , r = a.shadowCamera;
                r.renderTarget = t._shadowMap.renderTargets[0],
                a.shadowViewport.copy(t.cascades[s]),
                a.shadowScissor.copy(t.cascades[s]);
                var o = r._node
                  , h = t._node;
                o.setPosition(h.getPosition()),
                o.setRotation(h.getRotation()),
                o.rotateLocal(-90, 0, 0);
                var l = 0 === s ? n : t._shadowCascadeDistances[s - 1]
                  , c = t._shadowCascadeDistances[s]
                  , u = Ut.getPoints(i, l, c);
                tr.set(0, 0, 0);
                for (var d = i.node.getWorldTransform(), f = 0; f < 8; f++)
                    d.transformPoint(u[f], u[f]),
                    tr.add(u[f]);
                tr.mulScalar(1 / 8);
                for (var p = 0, m = 0; m < 8; m++) {
                    var _ = u[m].sub(tr).length();
                    _ > p && (p = _)
                }
                var g = o.right
                  , v = o.up
                  , y = o.forward
                  , x = .25 * t._shadowResolution / p
                  , b = Math.ceil(tr.dot(v) * x) / x
                  , S = Math.ceil(tr.dot(g) * x) / x
                  , T = v.mulScalar(b)
                  , w = g.mulScalar(S)
                  , M = tr.dot(y)
                  , A = y.mulScalar(M);
                tr.add2(T, w).add(A),
                o.setPosition(tr),
                o.translateLocal(0, 0, 1e6),
                r.nearClip = 0,
                r.farClip = 2e6,
                r.orthoHeight = p,
                this.forwardRenderer.updateCameraFrustum(r),
                this.cullShadowCasters(e, a.visibleCasters, r);
                for (var C = !0, E = a.visibleCasters, P = 0; P < E.length; P++) {
                    var R = E[P];
                    C ? (C = !1,
                    Ya.copy(R.aabb)) : Ya.add(R.aabb)
                }
                Ka.copy(o.getWorldTransform()).invert();
                var I = ja(Ka, Ya.getMin(), Ya.getMax());
                o.translateLocal(0, 0, I.max + .1),
                r.farClip = I.max - I.min + .2
            }
        }
        ,
        e.setupRenderState = function(t, e) {
            var i = xn.clusteredLightingEnabled;
            t.webgl2 ? 1 !== e._type || i ? (t.setDepthBias(!0),
            t.setDepthBiasValues(-1e3 * e.shadowBias, -1e3 * e.shadowBias)) : t.setDepthBias(!1) : t.extStandardDerivatives && (1 === e._type ? (this.polygonOffset[0] = 0,
            this.polygonOffset[1] = 0,
            this.polygonOffsetId.setValue(this.polygonOffset)) : (this.polygonOffset[0] = -1e3 * e.shadowBias,
            this.polygonOffset[1] = -1e3 * e.shadowBias,
            this.polygonOffsetId.setValue(this.polygonOffset))),
            t.setBlending(!1),
            t.setDepthWrite(!0),
            t.setDepthTest(!0),
            t.setDepthFunc(3),
            (i ? e._isPcf && t.webgl2 : e._isPcf && t.webgl2 && 1 !== e._type) ? t.setColorWrite(!1, !1, !1, !1) : t.setColorWrite(!0, !0, !0, !0)
        }
        ,
        e.restoreRenderState = function(t) {
            t.webgl2 ? t.setDepthBias(!1) : t.extStandardDerivatives && (this.polygonOffset[0] = 0,
            this.polygonOffset[1] = 0,
            this.polygonOffsetId.setValue(this.polygonOffset))
        }
        ,
        e.dispatchUniforms = function(t, e, i, n) {
            var s = e._node;
            0 !== t._type && (this.forwardRenderer.dispatchViewPos(s.getPosition()),
            this.shadowMapLightRadiusId.setValue(t.attenuationEnd)),
            Ka.setTRS(s.getPosition(), s.getRotation(), lt.ONE).invert(),
            Za.mul2(e.projectionMatrix, Ka);
            var a = i.shadowViewport;
            e.rect = a,
            e.scissorRect = i.shadowScissor,
            er.setViewport(a.x, a.y, a.z, a.w),
            i.shadowMatrix.mul2(er, Za),
            0 === t._type && t._shadowMatrixPalette.set(i.shadowMatrix.data, 16 * n)
        }
        ,
        e.submitCasters = function(t, e) {
            for (var i = this.device, n = this.forwardRenderer, s = e._shadowType + 5 * e._type, a = t.length, r = 0; r < a; r++) {
                var o = t[r]
                  , h = o.mesh
                  , l = o.material;
                n.setBaseConstants(i, l),
                n.setSkinning(i, o, l),
                l.dirty && (l.updateUniforms(i, n.scene),
                l.dirty = !1),
                l.chunks && (n.setCullMode(!0, !1, o),
                l.setParameters(i),
                o.setParameters(i, 8));
                var c = o._shader[3 + s];
                c || (n.updateShader(o, o._shaderDefs, null, 3 + s),
                c = o._shader[3 + s],
                o._key[1] = ir(o)),
                i.setShader(c),
                n.setVertexBuffers(i, h),
                n.setMorphing(i, o.morphInstance);
                var u = o.renderStyle;
                i.setIndexBuffer(h.indexBuffer[u]),
                r += n.drawInstance(i, o, h, u),
                n._shadowDrawCalls++
            }
        }
        ,
        e.render = function(t, e) {
            if (t.enabled && t.castShadows && 0 !== t.shadowUpdateMode && t.visibleThisFrame) {
                var i = this.device;
                1 === t.shadowUpdateMode && (t.shadowUpdateMode = 0);
                var n = t._type
                  , s = t.numShadowFaces
                  , a = this.forwardRenderer;
                a._shadowMapUpdates += s,
                this.setupRenderState(i, t);
                for (var r = 0; r < s; r++) {
                    var o = t.getRenderData(0 === n ? e : null, r)
                      , h = o.shadowCamera
                      , l = 0 === n ? 0 : r;
                    h.renderTarget = t._shadowMap.renderTargets[l],
                    this.dispatchUniforms(t, h, o, r),
                    a.setCamera(h, h.renderTarget, !0),
                    this.submitCasters(o.visibleCasters, t)
                }
                t._isVsm && t._vsmBlurSize > 1 && this.applyVsmBlur(t, e),
                this.restoreRenderState(i)
            }
        }
        ,
        e.getVsmBlurShader = function(t, e, i) {
            var n = (t ? this.blurPackedVsmShader : this.blurVsmShader)[e][i];
            if (!n) {
                this.blurVsmWeights[i] = function(t) {
                    t > 25 && (t = 25);
                    for (var e = (t - 1) / 6, i = .5 * (t - 1), n = new Array(t), s = 0, a = 0; a < t; ++a)
                        n[a] = qa(a - i, e),
                        s += n[a];
                    for (var r = 0; r < t; ++r)
                        n[r] /= s;
                    return n
                }(i);
                var s = ni.fullscreenQuadVS
                  , a = "#define SAMPLES " + i + "\n";
                a += t ? this.blurPackedVsmShaderCode[e] : this.blurVsmShaderCode[e];
                var r = "blurVsm" + e + i + t;
                n = mi(this.device, s, a, r),
                t ? this.blurPackedVsmShader[e][i] = n : this.blurVsmShader[e][i] = n
            }
            return n
        }
        ,
        e.applyVsmBlur = function(t, e) {
            var i = this.device
              , n = t.getRenderData(0 === t._type ? e : null, 0).shadowCamera.renderTarget
              , s = this.shadowMapCache.get(i, t)
              , a = s.renderTargets[0]
              , r = 1 === t._shadowType
              , o = t.vsmBlurMode
              , h = t._vsmBlurSize
              , l = this.getVsmBlurShader(r, o, h);
            Qa.z = t._shadowResolution - 2,
            Qa.w = Qa.z,
            this.sourceId.setValue(n.colorBuffer),
            $a[0] = 1 / t._shadowResolution,
            $a[1] = 0,
            this.pixelOffsetId.setValue($a),
            1 === o && this.weightId.setValue(this.blurVsmWeights[h]),
            ei(i, a, l, null, Qa),
            this.sourceId.setValue(a.colorBuffer),
            $a[1] = $a[0],
            $a[0] = 0,
            this.pixelOffsetId.setValue($a),
            ei(i, n, l, null, Qa),
            this.shadowMapCache.add(t, s)
        }
        ,
        t
    }(), gr = new Et, vr = function() {
        function t() {}
        return t.lightCompare = function(t, e) {
            return t.key - e.key
        }
        ,
        t.prepare = function(e, i, n, s) {
            var a, r, o, h, l, c, u, d, f, p, m, _, g, v, y, x, b, S, T, w, M, A, C, E, P, R, I, L, D, k, O, F, B, N, U, z, V, G = n, W = G.length, H = [], X = new lt, j = new lt, q = new Mt, Y = new vt, K = [], Z = [], $ = [], Q = [];
            for (a = 0; a < W; a++)
                if ((u = G[a]).isStatic) {
                    for (U = u.aabb,
                    Q.length = 0,
                    N = 1; N <= 2; N++)
                        for (r = 0; r < s.length; r++)
                            if ((d = s[r])._type === N && d.enabled && d.mask & u.mask && d.isStatic) {
                                if (Z[r] || (Z[r] = new Mt,
                                d._node.getWorldTransform(),
                                d.getBoundingSphere(gr),
                                Z[r].center.copy(gr.center),
                                Z[r].halfExtents.x = gr.radius,
                                Z[r].halfExtents.y = gr.radius,
                                Z[r].halfExtents.z = gr.radius),
                                !Z[r].intersects(U))
                                    continue;
                                Q.push(r)
                            }
                    if (0 === Q.length) {
                        H.push(u);
                        continue
                    }
                    for (k = (f = u.mesh).vertexBuffer,
                    p = 2 === (D = f.indexBuffer[u.renderStyle]).bytesPerIndex ? new Uint16Array(D.lock()) : new Uint32Array(D.lock()),
                    _ = f.primitive[u.renderStyle].count / 3,
                    x = f.primitive[u.renderStyle].base,
                    g = k.format.elements,
                    v = k.format.size / 4,
                    m = new Float32Array(k.storage),
                    o = 0; o < g.length; o++)
                        g[o].name === se && (y = g[o].offset / 4);
                    for (K.length = _,
                    o = 0; o < _; o++)
                        K[o] = 0;
                    for (L = !1,
                    $.length = 6 * _,
                    o = 0; o < _; o++) {
                        for (w = Number.MAX_VALUE,
                        M = Number.MAX_VALUE,
                        A = Number.MAX_VALUE,
                        C = -Number.MAX_VALUE,
                        E = -Number.MAX_VALUE,
                        P = -Number.MAX_VALUE,
                        h = 0; h < 3; h++)
                            (b = m[c = (c = p[3 * o + h + x]) * v + y]) < w && (w = b),
                            (S = m[c + 1]) < M && (M = S),
                            (T = m[c + 2]) < A && (A = T),
                            b > C && (C = b),
                            S > E && (E = S),
                            T > P && (P = T);
                        $[c = 6 * o] = w,
                        $[c + 1] = M,
                        $[c + 2] = A,
                        $[c + 3] = C,
                        $[c + 4] = E,
                        $[c + 5] = P
                    }
                    for (l = 0; l < Q.length; l++)
                        for (d = s[r = Q[l]],
                        Y.copy(u.node.worldTransform).invert(),
                        q.setFromTransformedAabb(Z[r], Y),
                        R = q.getMin(),
                        I = q.getMax(),
                        z = 1 << l,
                        o = 0; o < _; o++)
                            $[c = 6 * o] <= I.x && $[c + 3] >= R.x && $[c + 1] <= I.y && $[c + 4] >= R.y && $[c + 2] <= I.z && $[c + 5] >= R.z && (K[o] |= z,
                            L = !0);
                    if (L) {
                        for (O = {},
                        o = 0; o < _; o++)
                            r = 3 * o + x,
                            O[F = K[o]] || (O[F] = []),
                            (B = O[F]).push(p[r]),
                            B.push(p[r + 1]),
                            B.push(p[r + 2]);
                        for (F in O) {
                            B = O[F];
                            var J = new ws(e,D.format,B.length,D.usage);
                            for ((2 === J.bytesPerIndex ? new Uint16Array(J.lock()) : new Uint32Array(J.lock())).set(B),
                            J.unlock(),
                            w = Number.MAX_VALUE,
                            M = Number.MAX_VALUE,
                            A = Number.MAX_VALUE,
                            C = -Number.MAX_VALUE,
                            E = -Number.MAX_VALUE,
                            P = -Number.MAX_VALUE,
                            o = 0; o < B.length; o++)
                                (b = m[(c = B[o]) * v + y]) < w && (w = b),
                                (S = m[c * v + y + 1]) < M && (M = S),
                                (T = m[c * v + y + 2]) < A && (A = T),
                                b > C && (C = b),
                                S > E && (E = S),
                                T > P && (P = T);
                            X.set(w, M, A),
                            j.set(C, E, P);
                            var tt = new Mt;
                            tt.setMinMax(X, j);
                            var et = new Ys(e);
                            et.vertexBuffer = k,
                            et.indexBuffer[0] = J,
                            et.primitive[0].type = 4,
                            et.primitive[0].base = 0,
                            et.primitive[0].count = B.length,
                            et.primitive[0].indexed = !0,
                            et.aabb = tt;
                            var it = new wa(et,u.material,u.node);
                            for (it.isStatic = u.isStatic,
                            it.visible = u.visible,
                            it.layer = u.layer,
                            it.castShadow = u.castShadow,
                            it._receiveShadow = u._receiveShadow,
                            it.cull = u.cull,
                            it.pick = u.pick,
                            it.mask = u.mask,
                            it.parameters = u.parameters,
                            it._shaderDefs = u._shaderDefs,
                            it._staticSource = u,
                            u._staticLightList ? it._staticLightList = u._staticLightList : it._staticLightList = [],
                            o = 0; o < Q.length; o++)
                                F & (z = 1 << o) && (V = s[Q[o]],
                                it._staticLightList.indexOf(V) < 0 && it._staticLightList.push(V));
                            it._staticLightList.sort(t.lightCompare),
                            H.push(it)
                        }
                    } else
                        H.push(u)
                } else
                    H.push(u);
            for (n.length = H.length,
            a = 0; a < H.length; a++)
                n[a] = H[a]
        }
        ,
        t.revert = function(t) {
            for (var e, i = t, n = i.length, s = [], a = 0; a < n; a++) {
                var r = i[a];
                r._staticSource ? r._staticSource !== e && (s.push(r._staticSource),
                e = r._staticSource) : s.push(r)
            }
            t.length = s.length;
            for (var o = 0; o < s.length; o++)
                t[o] = s[o]
        }
        ,
        t
    }(), yr = new vt, xr = new vt, br = new ct, Sr = new vt, Tr = (new vt).setScale(1, -1, 1), wr = new vt, Mr = new vt, Ar = new vt, Cr = new vt, Er = new vt, Pr = new vt, Rr = new lt, Ir = new lt, Lr = new ct, Dr = new ct, kr = new vt, Or = new vt, Fr = new lt, Br = new lt, Nr = new lt, Ur = new Et, zr = [0, 0, 0, 0], Vr = null, Gr = 0, Wr = {
        drawCalls: [],
        isNewMaterial: [],
        lightMaskChanged: []
    }, Hr = new Set, Xr = function() {
        function t(t) {
            this.device = t,
            this.scene = null,
            this._shadowDrawCalls = 0,
            this._forwardDrawCalls = 0,
            this._skinDrawCalls = 0,
            this._numDrawCallsCulled = 0,
            this._instancedDrawCalls = 0,
            this._camerasRendered = 0,
            this._materialSwitches = 0,
            this._shadowMapUpdates = 0,
            this._shadowMapTime = 0,
            this._depthMapTime = 0,
            this._forwardTime = 0,
            this._cullTime = 0,
            this._sortTime = 0,
            this._skinTime = 0,
            this._morphTime = 0,
            this._instancingTime = 0,
            this._removedByInstancing = 0,
            this._layerCompositionUpdateTime = 0,
            this._lightClustersTime = 0,
            this._lightClusters = 0;
            var e = this.device
              , i = e.getProgramLibrary();
            this.library = i,
            this.lightTextureAtlas = new Ga(e),
            this._shadowRenderer = new _r(this,this.lightTextureAtlas),
            this._cookieRenderer = new Ba(e,this.lightTextureAtlas);
            var n = e.scope;
            this.projId = n.resolve("matrix_projection"),
            this.projSkyboxId = n.resolve("matrix_projectionSkybox"),
            this.viewId = n.resolve("matrix_view"),
            this.viewId3 = n.resolve("matrix_view3"),
            this.viewInvId = n.resolve("matrix_viewInverse"),
            this.viewProjId = n.resolve("matrix_viewProjection"),
            this.viewPos = new Float32Array(3),
            this.viewPosId = n.resolve("view_position"),
            this.nearClipId = n.resolve("camera_near"),
            this.farClipId = n.resolve("camera_far"),
            this.cameraParamsId = n.resolve("camera_params"),
            this.tbnBasis = n.resolve("tbnBasis"),
            this.fogColorId = n.resolve("fog_color"),
            this.fogStartId = n.resolve("fog_start"),
            this.fogEndId = n.resolve("fog_end"),
            this.fogDensityId = n.resolve("fog_density"),
            this.modelMatrixId = n.resolve("matrix_model"),
            this.normalMatrixId = n.resolve("matrix_normal"),
            this.poseMatrixId = n.resolve("matrix_pose[0]"),
            this.boneTextureId = n.resolve("texture_poseMap"),
            this.boneTextureSizeId = n.resolve("texture_poseMapSize"),
            this.morphWeightsA = n.resolve("morph_weights_a"),
            this.morphWeightsB = n.resolve("morph_weights_b"),
            this.morphPositionTex = n.resolve("morphPositionTex"),
            this.morphNormalTex = n.resolve("morphNormalTex"),
            this.morphTexParams = n.resolve("morph_tex_params"),
            this.alphaTestId = n.resolve("alpha_ref"),
            this.opacityMapId = n.resolve("texture_opacityMap"),
            this.ambientId = n.resolve("light_globalAmbient"),
            this.exposureId = n.resolve("exposure"),
            this.skyboxIntensityId = n.resolve("skyboxIntensity"),
            this.lightColorId = [],
            this.lightDir = [],
            this.lightDirId = [],
            this.lightShadowMapId = [],
            this.lightShadowMatrixId = [],
            this.lightShadowParamsId = [],
            this.lightRadiusId = [],
            this.lightPos = [],
            this.lightPosId = [],
            this.lightWidth = [],
            this.lightWidthId = [],
            this.lightHeight = [],
            this.lightHeightId = [],
            this.lightInAngleId = [],
            this.lightOutAngleId = [],
            this.lightCookieId = [],
            this.lightCookieIntId = [],
            this.lightCookieMatrixId = [],
            this.lightCookieOffsetId = [],
            this.shadowMatrixPaletteId = [],
            this.shadowCascadeDistancesId = [],
            this.shadowCascadeCountId = [],
            this.depthMapId = n.resolve("uDepthMap"),
            this.screenSizeId = n.resolve("uScreenSize"),
            this._screenSize = new Float32Array(4),
            this.twoSidedLightingNegScaleFactorId = n.resolve("twoSidedLightingNegScaleFactor"),
            this.fogColor = new Float32Array(3),
            this.ambientColor = new Float32Array(3),
            this.cameraParams = new Float32Array(4)
        }
        var e = t.prototype;
        return e.destroy = function() {
            this._shadowRenderer.destroy(),
            this._shadowRenderer = null,
            this._cookieRenderer.destroy(),
            this._cookieRenderer = null,
            this.lightTextureAtlas.destroy(),
            this.lightTextureAtlas = null
        }
        ,
        e.sortCompare = function(t, e) {
            if (t.layer === e.layer) {
                if (t.drawOrder && e.drawOrder)
                    return t.drawOrder - e.drawOrder;
                if (t.zdist && e.zdist)
                    return e.zdist - t.zdist;
                if (t.zdist2 && e.zdist2)
                    return t.zdist2 - e.zdist2
            }
            return e._key[0] - t._key[0]
        }
        ,
        e.sortCompareMesh = function(t, e) {
            if (t.layer === e.layer) {
                if (t.drawOrder && e.drawOrder)
                    return t.drawOrder - e.drawOrder;
                if (t.zdist && e.zdist)
                    return e.zdist - t.zdist
            }
            return cr = t._key[0],
            ur = e._key[0],
            cr === ur && t.mesh && e.mesh ? e.mesh.id - t.mesh.id : ur - cr
        }
        ,
        e.depthSortCompare = function(t, e) {
            return cr = t._key[1],
            ur = e._key[1],
            cr === ur && t.mesh && e.mesh ? e.mesh.id - t.mesh.id : ur - cr
        }
        ,
        e.updateCameraFrustum = function(t) {
            if (t.vrDisplay && t.vrDisplay.presenting) {
                nr = t.vrDisplay.combinedProj;
                var e = t._node.parent;
                e ? xr.copy(e.getWorldTransform()).mul(t.vrDisplay.combinedViewInv).invert() : xr.copy(t.vrDisplay.combinedView),
                yr.copy(xr).invert(),
                this.viewInvId.setValue(yr.data),
                Sr.mul2(nr, xr),
                t.frustum.setFromMat4(Sr)
            } else if (t.xr && t.xr.views.length) {
                var i = t.xr.views[0];
                return Sr.mul2(i.projMat, i.viewOffMat),
                void t.frustum.setFromMat4(Sr)
            }
            if (nr = t.projectionMatrix,
            t.calculateProjection && t.calculateProjection(nr, 0),
            t.calculateTransform)
                t.calculateTransform(yr, 0);
            else {
                var n = t._node.getPosition()
                  , s = t._node.getRotation();
                yr.setTRS(n, s, lt.ONE),
                this.viewInvId.setValue(yr.data)
            }
            xr.copy(yr).invert(),
            Sr.mul2(nr, xr),
            t.frustum.setFromMat4(Sr)
        }
        ,
        e.setCamera = function(t, e, i) {
            var n, s = t.vrDisplay;
            if (s && s.presenting) {
                if (sr = s.leftProj,
                ar = s.rightProj,
                nr = s.combinedProj,
                t.calculateProjection && (t.calculateProjection(sr, 1),
                t.calculateProjection(ar, 2),
                t.calculateProjection(nr, 0)),
                t.calculateTransform)
                    t.calculateTransform(Ar, 1),
                    t.calculateTransform(Cr, 2),
                    t.calculateTransform(yr, 0),
                    Er.copy(Ar).invert(),
                    Pr.copy(Cr).invert(),
                    xr.copy(yr).invert();
                else {
                    var a = t._node.parent;
                    a ? (n = a.getWorldTransform(),
                    Ar.mul2(n, s.leftViewInv),
                    Cr.mul2(n, s.rightViewInv),
                    Er.copy(Ar).invert(),
                    Pr.copy(Cr).invert(),
                    xr.copy(a.getWorldTransform()).mul(s.combinedViewInv).invert()) : (Ar.copy(s.leftViewInv),
                    Cr.copy(s.rightViewInv),
                    Er.copy(s.leftView),
                    Pr.copy(s.rightView),
                    xr.copy(s.combinedView))
                }
                Lr.setFromMat4(Er),
                Dr.setFromMat4(Pr),
                kr.mul2(sr, Er),
                Or.mul2(ar, Pr),
                Rr.x = Ar.data[12],
                Rr.y = Ar.data[13],
                Rr.z = Ar.data[14],
                Ir.x = Cr.data[12],
                Ir.y = Cr.data[13],
                Ir.z = Cr.data[14],
                Sr.mul2(nr, xr),
                t.frustum.setFromMat4(Sr)
            } else if (t.xr && t.xr.session) {
                var r = t._node.parent;
                r && (n = r.getWorldTransform());
                for (var o = t.xr.views, h = 0; h < o.length; h++) {
                    var l = o[h];
                    r ? (l.viewInvOffMat.mul2(n, l.viewInvMat),
                    l.viewOffMat.copy(l.viewInvOffMat).invert()) : (l.viewInvOffMat.copy(l.viewInvMat),
                    l.viewOffMat.copy(l.viewMat)),
                    l.viewMat3.setFromMat4(l.viewOffMat),
                    l.projViewOffMat.mul2(l.projMat, l.viewOffMat),
                    l.position[0] = l.viewInvOffMat.data[12],
                    l.position[1] = l.viewInvOffMat.data[13],
                    l.position[2] = l.viewInvOffMat.data[14],
                    t.frustum.setFromMat4(l.projViewOffMat)
                }
            } else {
                if (nr = t.projectionMatrix,
                t.calculateProjection && t.calculateProjection(nr, 0),
                this.projId.setValue(nr.data),
                this.projSkyboxId.setValue(t.getProjectionMatrixSkybox().data),
                t.calculateTransform)
                    t.calculateTransform(yr, 0);
                else {
                    var c = t._node.getPosition()
                      , u = t._node.getRotation();
                    yr.setTRS(c, u, lt.ONE)
                }
                this.viewInvId.setValue(yr.data),
                xr.copy(yr).invert(),
                this.viewId.setValue(xr.data),
                br.setFromMat4(xr),
                this.viewId3.setValue(br.data),
                Sr.mul2(nr, xr),
                e && e.flipY ? (wr.mul2(Tr, Sr),
                Mr.mul2(Tr, t.getProjectionMatrixSkybox()),
                this.viewProjId.setValue(wr.data),
                this.projSkyboxId.setValue(Mr.data)) : (this.viewProjId.setValue(Sr.data),
                this.projSkyboxId.setValue(t.getProjectionMatrixSkybox().data)),
                this.dispatchViewPos(t._node.getPosition()),
                t.frustum.setFromMat4(Sr)
            }
            this.tbnBasis.setValue(e && e.flipY ? -1 : 1),
            this.nearClipId.setValue(t._nearClip),
            this.farClipId.setValue(t._farClip);
            var d = t._nearClip
              , f = t._farClip;
            this.cameraParams[0] = 1 / f,
            this.cameraParams[1] = f,
            this.cameraParams[2] = .5 * (1 - f / d),
            this.cameraParams[3] = .5 * (1 + f / d),
            this.cameraParamsId.setValue(this.cameraParams),
            this.clearView(t, e, i, !1)
        }
        ,
        e.clearView = function(t, e, i, n, s) {
            var a = this.device;
            a.setRenderTarget(e),
            a.updateBegin(),
            n && (a.setColorWrite(!0, !0, !0, !0),
            a.setDepthWrite(!0));
            var r = e ? e.width : a.width
              , o = e ? e.height : a.height
              , h = t.rect
              , l = Math.floor(h.x * r)
              , c = Math.floor(h.y * o)
              , u = Math.floor(h.z * r)
              , d = Math.floor(h.w * o);
            if (a.setViewport(l, c, u, d),
            t._scissorRectClear) {
                var f = t.scissorRect;
                l = Math.floor(f.x * r),
                c = Math.floor(f.y * o),
                u = Math.floor(f.z * r),
                d = Math.floor(f.w * o)
            }
            a.setScissor(l, c, u, d),
            i && (s || (s = t._clearOptions),
            a.clear(s || {
                color: [t._clearColor.r, t._clearColor.g, t._clearColor.b, t._clearColor.a],
                depth: t._clearDepth,
                flags: (t._clearColorBuffer ? 1 : 0) | (t._clearDepthBuffer ? 2 : 0) | (t._clearStencilBuffer ? 4 : 0),
                stencil: t._clearStencil
            }))
        }
        ,
        e.dispatchGlobalLights = function(t) {
            if (this.ambientColor[0] = t.ambientLight.r,
            this.ambientColor[1] = t.ambientLight.g,
            this.ambientColor[2] = t.ambientLight.b,
            t.gammaCorrection)
                for (var e = 0; e < 3; e++)
                    this.ambientColor[e] = Math.pow(this.ambientColor[e], 2.2);
            this.ambientId.setValue(this.ambientColor),
            this.exposureId.setValue(t.exposure),
            t.skyboxModel && this.skyboxIntensityId.setValue(t.skyboxIntensity)
        }
        ,
        e._resolveLight = function(t, e) {
            var i = "light" + e;
            this.lightColorId[e] = t.resolve(i + "_color"),
            this.lightDir[e] = new Float32Array(3),
            this.lightDirId[e] = t.resolve(i + "_direction"),
            this.lightShadowMapId[e] = t.resolve(i + "_shadowMap"),
            this.lightShadowMatrixId[e] = t.resolve(i + "_shadowMatrix"),
            this.lightShadowParamsId[e] = t.resolve(i + "_shadowParams"),
            this.lightRadiusId[e] = t.resolve(i + "_radius"),
            this.lightPos[e] = new Float32Array(3),
            this.lightPosId[e] = t.resolve(i + "_position"),
            this.lightWidth[e] = new Float32Array(3),
            this.lightWidthId[e] = t.resolve(i + "_halfWidth"),
            this.lightHeight[e] = new Float32Array(3),
            this.lightHeightId[e] = t.resolve(i + "_halfHeight"),
            this.lightInAngleId[e] = t.resolve(i + "_innerConeAngle"),
            this.lightOutAngleId[e] = t.resolve(i + "_outerConeAngle"),
            this.lightCookieId[e] = t.resolve(i + "_cookie"),
            this.lightCookieIntId[e] = t.resolve(i + "_cookieIntensity"),
            this.lightCookieMatrixId[e] = t.resolve(i + "_cookieMatrix"),
            this.lightCookieOffsetId[e] = t.resolve(i + "_cookieOffset"),
            this.shadowMatrixPaletteId[e] = t.resolve(i + "_shadowMatrixPalette[0]"),
            this.shadowCascadeDistancesId[e] = t.resolve(i + "_shadowCascadeDistances[0]"),
            this.shadowCascadeCountId[e] = t.resolve(i + "_shadowCascadeCount")
        }
        ,
        e.setLTCDirectionallLight = function(t, e, i, n, s) {
            this.lightPos[e][0] = n.x - i.x * s,
            this.lightPos[e][1] = n.y - i.y * s,
            this.lightPos[e][2] = n.z - i.z * s,
            this.lightPosId[e].setValue(this.lightPos[e]);
            var a = t.transformVector(new lt(-.5,0,0));
            this.lightWidth[e][0] = a.x * s,
            this.lightWidth[e][1] = a.y * s,
            this.lightWidth[e][2] = a.z * s,
            this.lightWidthId[e].setValue(this.lightWidth[e]);
            var r = t.transformVector(new lt(0,0,.5));
            this.lightHeight[e][0] = r.x * s,
            this.lightHeight[e][1] = r.y * s,
            this.lightHeight[e][2] = r.z * s,
            this.lightHeightId[e].setValue(this.lightHeight[e])
        }
        ,
        e.dispatchDirectLights = function(t, e, i, n) {
            for (var s = 0, a = this.device.scope, r = 0; r < t.length; r++)
                if (t[r].mask & i) {
                    var o = t[r]
                      , h = o._node.getWorldTransform();
                    if (this.lightColorId[s] || this._resolveLight(a, s),
                    this.lightColorId[s].setValue(e.gammaCorrection ? o._linearFinalColor : o._finalColor),
                    h.getY(o._direction).mulScalar(-1),
                    o._direction.normalize(),
                    this.lightDir[s][0] = o._direction.x,
                    this.lightDir[s][1] = o._direction.y,
                    this.lightDir[s][2] = o._direction.z,
                    this.lightDirId[s].setValue(this.lightDir[s]),
                    0 !== o.shape && this.setLTCDirectionallLight(h, s, o._direction, n._node.getPosition(), n.farClip),
                    o.castShadows) {
                        var l = o.getRenderData(n, 0)
                          , c = o._getUniformBiasValues(l);
                        this.lightShadowMapId[s].setValue(l.shadowBuffer),
                        this.lightShadowMatrixId[s].setValue(l.shadowMatrix.data),
                        this.shadowMatrixPaletteId[s].setValue(o._shadowMatrixPalette),
                        this.shadowCascadeDistancesId[s].setValue(o._shadowCascadeDistances),
                        this.shadowCascadeCountId[s].setValue(o.numCascades);
                        var u = o._shadowRenderParams;
                        u.length = 3,
                        u[0] = o._shadowResolution,
                        u[1] = c.normalBias,
                        u[2] = c.bias,
                        this.lightShadowParamsId[s].setValue(u)
                    }
                    s++
                }
            return s
        }
        ,
        e.setLTCPositionalLight = function(t, e) {
            var i = t.transformVector(new lt(-.5,0,0));
            this.lightWidth[e][0] = i.x,
            this.lightWidth[e][1] = i.y,
            this.lightWidth[e][2] = i.z,
            this.lightWidthId[e].setValue(this.lightWidth[e]);
            var n = t.transformVector(new lt(0,0,.5));
            this.lightHeight[e][0] = n.x,
            this.lightHeight[e][1] = n.y,
            this.lightHeight[e][2] = n.z,
            this.lightHeightId[e].setValue(this.lightHeight[e])
        }
        ,
        e.dispatchOmniLight = function(t, e, i, n) {
            var s = i._node.getWorldTransform();
            if (this.lightColorId[n] || this._resolveLight(e, n),
            this.lightRadiusId[n].setValue(i.attenuationEnd),
            this.lightColorId[n].setValue(t.gammaCorrection ? i._linearFinalColor : i._finalColor),
            s.getTranslation(i._position),
            this.lightPos[n][0] = i._position.x,
            this.lightPos[n][1] = i._position.y,
            this.lightPos[n][2] = i._position.z,
            this.lightPosId[n].setValue(this.lightPos[n]),
            0 !== i.shape && this.setLTCPositionalLight(s, n),
            i.castShadows) {
                var a = i.getRenderData(null, 0);
                this.lightShadowMapId[n].setValue(a.shadowBuffer);
                var r = i._getUniformBiasValues(a)
                  , o = i._shadowRenderParams;
                o.length = 4,
                o[0] = i._shadowResolution,
                o[1] = r.normalBias,
                o[2] = r.bias,
                o[3] = 1 / i.attenuationEnd,
                this.lightShadowParamsId[n].setValue(o)
            }
            i._cookie && (this.lightCookieId[n].setValue(i._cookie),
            this.lightShadowMatrixId[n].setValue(s.data),
            this.lightCookieIntId[n].setValue(i.cookieIntensity))
        }
        ,
        e.dispatchSpotLight = function(t, e, i, n) {
            var s = i._node.getWorldTransform();
            if (this.lightColorId[n] || this._resolveLight(e, n),
            this.lightInAngleId[n].setValue(i._innerConeAngleCos),
            this.lightOutAngleId[n].setValue(i._outerConeAngleCos),
            this.lightRadiusId[n].setValue(i.attenuationEnd),
            this.lightColorId[n].setValue(t.gammaCorrection ? i._linearFinalColor : i._finalColor),
            s.getTranslation(i._position),
            this.lightPos[n][0] = i._position.x,
            this.lightPos[n][1] = i._position.y,
            this.lightPos[n][2] = i._position.z,
            this.lightPosId[n].setValue(this.lightPos[n]),
            0 !== i.shape && this.setLTCPositionalLight(s, n),
            s.getY(i._direction).mulScalar(-1),
            i._direction.normalize(),
            this.lightDir[n][0] = i._direction.x,
            this.lightDir[n][1] = i._direction.y,
            this.lightDir[n][2] = i._direction.z,
            this.lightDirId[n].setValue(this.lightDir[n]),
            i.castShadows) {
                var a = i.getRenderData(null, 0);
                this.lightShadowMapId[n].setValue(a.shadowBuffer),
                this.lightShadowMatrixId[n].setValue(a.shadowMatrix.data);
                var r = i._getUniformBiasValues(a)
                  , o = i._shadowRenderParams;
                o.length = 4,
                o[0] = i._shadowResolution,
                o[1] = r.normalBias,
                o[2] = r.bias,
                o[3] = 1 / i.attenuationEnd,
                this.lightShadowParamsId[n].setValue(o)
            }
            if (i._cookie) {
                if (!i.castShadows) {
                    var h = Zi.evalSpotCookieMatrix(i);
                    this.lightShadowMatrixId[n].setValue(h.data)
                }
                this.lightCookieId[n].setValue(i._cookie),
                this.lightCookieIntId[n].setValue(i.cookieIntensity),
                i._cookieTransform && (i._cookieTransformUniform[0] = i._cookieTransform.x,
                i._cookieTransformUniform[1] = i._cookieTransform.y,
                i._cookieTransformUniform[2] = i._cookieTransform.z,
                i._cookieTransformUniform[3] = i._cookieTransform.w,
                this.lightCookieMatrixId[n].setValue(i._cookieTransformUniform),
                i._cookieOffsetUniform[0] = i._cookieOffset.x,
                i._cookieOffsetUniform[1] = i._cookieOffset.y,
                this.lightCookieOffsetId[n].setValue(i._cookieOffsetUniform))
            }
        }
        ,
        e.dispatchLocalLights = function(t, e, i, n, s) {
            for (var a = n, r = this.device.scope, o = t[1], h = o.length, l = 0; l < h; l++) {
                var c = o[l];
                c.mask & i && (c.isStatic || (this.dispatchOmniLight(e, r, c, a),
                a++))
            }
            var u = 0;
            if (s)
                for (var d = s[u]; d && 1 === d._type; )
                    this.dispatchOmniLight(e, r, d, a),
                    a++,
                    d = s[++u];
            for (var f = t[2], p = f.length, m = 0; m < p; m++) {
                var _ = f[m];
                _.mask & i && (_.isStatic || (this.dispatchSpotLight(e, r, _, a),
                a++))
            }
            if (s)
                for (var g = s[u]; g && 2 === g._type; )
                    this.dispatchSpotLight(e, r, g, a),
                    a++,
                    g = s[++u]
        }
        ,
        e.cull = function(t, e, i) {
            var n = 0
              , s = e.length
              , a = t.cullingMask || 4294967295;
            if (!t.frustumCulling) {
                for (var r = 0; r < s; r++) {
                    var o = e[r];
                    (o.visible || o.command) && (o.mask && 0 == (o.mask & a) || (i[n] = o,
                    n++,
                    o.visibleThisFrame = !0))
                }
                return n
            }
            for (var h = 0; h < s; h++) {
                var l = e[h];
                if (l.command)
                    i[n] = l,
                    n++,
                    l.visibleThisFrame = !0;
                else {
                    if (!l.visible)
                        continue;
                    var c = !0;
                    if (l.mask && 0 == (l.mask & a))
                        continue;
                    l.cull && (c = l._isVisible(t)),
                    c && (i[n] = l,
                    n++,
                    l.visibleThisFrame = !0)
                }
            }
            return n
        }
        ,
        e.cullLights = function(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = e[i];
                !n.visibleThisFrame && n.enabled && (0 === n._type ? n.visibleThisFrame = !0 : (n.getBoundingSphere(Ur),
                (t.frustum.containsSphere(Ur) || n.castShadows && !n.shadowMap) && (n.visibleThisFrame = !0)))
            }
        }
        ,
        e.updateCpuSkinMatrices = function(t) {
            Gr++;
            var e = t.length;
            if (0 !== e)
                for (var i = 0; i < e; i++) {
                    var n = t[i].skinInstance;
                    n && (n.updateMatrices(t[i].node, Gr),
                    n._dirty = !0)
                }
        }
        ,
        e.updateGpuSkinMatrices = function(t) {
            for (var e = t.length, i = 0; i < e; i++)
                if (t[i].visibleThisFrame) {
                    var n = t[i].skinInstance;
                    n && n._dirty && (n.updateMatrixPalette(t[i].node, Gr),
                    n._dirty = !1)
                }
        }
        ,
        e.updateMorphing = function(t) {
            for (var e = t.length, i = 0; i < e; i++) {
                var n = t[i].morphInstance;
                n && n._dirty && t[i].visibleThisFrame && n.update()
            }
        }
        ,
        e.setBaseConstants = function(t, e) {
            t.setCullMode(e.cull),
            e.opacityMap && (this.opacityMapId.setValue(e.opacityMap),
            this.alphaTestId.setValue(e.alphaTest))
        }
        ,
        e.setSkinning = function(t, e, i) {
            e.skinInstance && (this._skinDrawCalls++,
            t.supportsBoneTextures ? (rr = e.skinInstance.boneTexture,
            this.boneTextureId.setValue(rr),
            zr[0] = rr.width,
            zr[1] = rr.height,
            zr[2] = 1 / rr.width,
            zr[3] = 1 / rr.height,
            this.boneTextureSizeId.setValue(zr)) : this.poseMatrixId.setValue(e.skinInstance.matrixPalette))
        }
        ,
        e.drawInstance = function(t, e, i, n, s) {
            if (or = e.instancingData) {
                if (or.count > 0 && (this._instancedDrawCalls++,
                t.setVertexBuffer(or.vertexBuffer),
                t.draw(i.primitive[n], or.count),
                or.vertexBuffer === Vr))
                    return this._removedByInstancing += or.count,
                    e.instancingData = null,
                    or.count - 1
            } else
                hr = e.node.worldTransform,
                this.modelMatrixId.setValue(hr.data),
                s && (lr = e.node.normalMatrix,
                e.node._dirtyNormal && (hr.invertTo3x3(lr),
                lr.transpose(),
                e.node._dirtyNormal = !1),
                this.normalMatrixId.setValue(lr.data)),
                t.draw(i.primitive[n]);
            return 0
        }
        ,
        e.drawInstance2 = function(t, e, i, n) {
            if (or = e.instancingData) {
                if (or.count > 0 && (this._instancedDrawCalls++,
                t.draw(i.primitive[n], or.count, !0),
                or.vertexBuffer === Vr))
                    return this._removedByInstancing += or.count,
                    e.instancingData = null,
                    or.count - 1
            } else
                t.draw(i.primitive[n], void 0, !0);
            return 0
        }
        ,
        e.renderShadows = function(t, e) {
            var i = this.device;
            i.grabPassAvailable = !1;
            for (var n = 0; n < t.length; n++)
                this._shadowRenderer.render(t[n], e);
            i.grabPassAvailable = !0
        }
        ,
        e.renderCookies = function(t) {
            for (var e = this.lightTextureAtlas.cookieRenderTarget, i = 0; i < t.length; i++)
                this._cookieRenderer.render(t[i], e)
        }
        ,
        e.updateShader = function(t, e, i, n, s) {
            t.material._scene = this.scene,
            t.material._dirtyBlend && (this.scene.layers._dirtyBlend = !0),
            t.material.updateShader(this.device, this.scene, e, i, n, s),
            t._shader[n] = t.material.shader
        }
        ,
        e.setCullMode = function(t, e, i) {
            var n = i.material
              , s = 0;
            if (t) {
                var a = 1;
                if (n.cull > 0 && n.cull < 3) {
                    i.flipFaces && (a *= -1),
                    e && (a *= -1);
                    var r = i.node.worldTransform;
                    r.getX(Fr),
                    r.getY(Br),
                    r.getZ(Nr),
                    Fr.cross(Fr, Br),
                    Fr.dot(Nr) < 0 && (a *= -1)
                }
                s = a < 0 ? 2 === n.cull ? 1 : 2 : n.cull
            }
            if (this.device.setCullMode(s),
            0 === s && 0 === n.cull) {
                var o = i.node.worldTransform;
                o.getX(Fr),
                o.getY(Br),
                o.getZ(Nr),
                Fr.cross(Fr, Br),
                Fr.dot(Nr) < 0 ? this.twoSidedLightingNegScaleFactorId.setValue(-1) : this.twoSidedLightingNegScaleFactorId.setValue(1)
            }
        }
        ,
        e.setVertexBuffers = function(t, e) {
            t.setVertexBuffer(e.vertexBuffer)
        }
        ,
        e.setMorphing = function(t, e) {
            if (e)
                if (e.morph.useTextureMorph)
                    t.setVertexBuffer(e.morph.vertexBufferIds),
                    this.morphPositionTex.setValue(e.texturePositions),
                    this.morphNormalTex.setValue(e.textureNormals),
                    this.morphTexParams.setValue(e._textureParams);
                else {
                    for (var i = 0; i < e._activeVertexBuffers.length; i++) {
                        var n = e._activeVertexBuffers[i];
                        if (n) {
                            var s = ye + (i + 8);
                            n.format.elements[0].name = s,
                            n.format.elements[0].scopeId = t.scope.resolve(s),
                            n.format.update(),
                            t.setVertexBuffer(n)
                        }
                    }
                    this.morphWeightsA.setValue(e._shaderMorphWeightsA),
                    this.morphWeightsB.setValue(e._shaderMorphWeightsB)
                }
        }
        ,
        e.dispatchViewPos = function(t) {
            var e = this.viewPos;
            e[0] = t.x,
            e[1] = t.y,
            e[2] = t.z,
            this.viewPosId.setValue(e)
        }
        ,
        e.renderForwardPrepareMaterials = function(t, e, i, n, s, a, r) {
            var o = function(t, e, i) {
                Wr.drawCalls.push(t),
                Wr.isNewMaterial.push(e),
                Wr.lightMaskChanged.push(i)
            };
            Wr.drawCalls.length = 0,
            Wr.isNewMaterial.length = 0,
            Wr.lightMaskChanged.length = 0;
            for (var h, l, c, u = this.device, d = this.scene, f = a ? a._lightHash : 0, p = null, m = 0; m < i; m++) {
                var _ = e[m];
                if (!s || !_.mask || s & _.mask)
                    if (_.command)
                        o(_, !1, !1);
                    else {
                        _.material || (_.material = kn.get(u));
                        var g = _.material
                          , v = _._shaderDefs
                          , y = _.mask;
                        if (g && g === p && v !== h && (p = null),
                        (_.isStatic || l) && (p = null),
                        g !== p && (this._materialSwitches++,
                        g.dirty && (g.updateUniforms(u, d),
                        g.dirty = !1),
                        !_._shader[r] || _._shaderDefs !== v || _._lightHash !== f)) {
                            if (_.isStatic)
                                this.updateShader(_, v, _._staticLightList, r, n);
                            else {
                                var x = r + "_" + v + "_" + f;
                                _._shader[r] = g.variants[x],
                                _._shader[r] || (this.updateShader(_, v, null, r, n),
                                g.variants[x] = _._shader[r])
                            }
                            _._shaderDefs = v,
                            _._lightHash = f
                        }
                        o(_, g !== p, !p || y !== c),
                        p = g,
                        h = v,
                        c = y,
                        l = _.isStatic
                    }
            }
            return Wr
        }
        ,
        e.renderForward = function(t, e, i, n, s, a, r, o, h) {
            for (var l = this.device, c = this.scene, u = t.vrDisplay, d = 1 << s, f = .5 * l.width, p = this.renderForwardPrepareMaterials(t, e, i, n, a, o, s), m = p.drawCalls.length, _ = 0; _ < m; _++) {
                var g = p.drawCalls[_];
                if (g.command)
                    g.command();
                else {
                    var v = p.isNewMaterial[_]
                      , y = p.lightMaskChanged[_]
                      , x = g.material;
                    g._shaderDefs;
                    var b = g.mask;
                    if (v) {
                        if (g._shader[s].failed || l.setShader(g._shader[s]) || (g._shader[s].failed = !0),
                        x.setParameters(l),
                        y) {
                            var S = this.dispatchDirectLights(n[0], c, b, t);
                            this.dispatchLocalLights(n, c, b, S, g._staticLightList)
                        }
                        this.alphaTestId.setValue(x.alphaTest),
                        l.setBlending(x.blend),
                        x.blend && (x.separateAlphaBlend ? (l.setBlendFunctionSeparate(x.blendSrc, x.blendDst, x.blendSrcAlpha, x.blendDstAlpha),
                        l.setBlendEquationSeparate(x.blendEquation, x.blendAlphaEquation)) : (l.setBlendFunction(x.blendSrc, x.blendDst),
                        l.setBlendEquation(x.blendEquation))),
                        l.setColorWrite(x.redWrite, x.greenWrite, x.blueWrite, x.alphaWrite),
                        l.setDepthWrite(x.depthWrite),
                        x.depthWrite && !x.depthTest ? (l.setDepthFunc(7),
                        l.setDepthTest(!0)) : (l.setDepthFunc(3),
                        l.setDepthTest(x.depthTest)),
                        l.setAlphaToCoverage(x.alphaToCoverage),
                        x.depthBias || x.slopeDepthBias ? (l.setDepthBias(!0),
                        l.setDepthBiasValues(x.depthBias, x.slopeDepthBias)) : l.setDepthBias(!1)
                    }
                    this.setCullMode(t._cullFaces, h, g);
                    var T = g.stencilFront || x.stencilFront
                      , w = g.stencilBack || x.stencilBack;
                    T || w ? (l.setStencilTest(!0),
                    T === w ? (l.setStencilFunc(T.func, T.ref, T.readMask),
                    l.setStencilOperation(T.fail, T.zfail, T.zpass, T.writeMask)) : (T ? (l.setStencilFuncFront(T.func, T.ref, T.readMask),
                    l.setStencilOperationFront(T.fail, T.zfail, T.zpass, T.writeMask)) : (l.setStencilFuncFront(7, 0, 255),
                    l.setStencilOperationFront(0, 0, 0, 255)),
                    w ? (l.setStencilFuncBack(w.func, w.ref, w.readMask),
                    l.setStencilOperationBack(w.fail, w.zfail, w.zpass, w.writeMask)) : (l.setStencilFuncBack(7, 0, 255),
                    l.setStencilOperationBack(0, 0, 0, 255)))) : l.setStencilTest(!1);
                    var M = g.mesh;
                    g.setParameters(l, d),
                    this.setVertexBuffers(l, M),
                    this.setMorphing(l, g.morphInstance),
                    this.setSkinning(l, g, x);
                    var A = g.renderStyle;
                    if (l.setIndexBuffer(M.indexBuffer[A]),
                    r && r(g, _),
                    u && u.presenting)
                        l.setViewport(0, 0, f, l.height),
                        this.projId.setValue(sr.data),
                        this.projSkyboxId.setValue(sr.data),
                        this.viewInvId.setValue(Ar.data),
                        this.viewId.setValue(Er.data),
                        this.viewId3.setValue(Lr.data),
                        this.viewProjId.setValue(kr.data),
                        this.dispatchViewPos(Rr),
                        _ += this.drawInstance(l, g, M, A, !0),
                        this._forwardDrawCalls++,
                        l.setViewport(f, 0, f, l.height),
                        this.projId.setValue(ar.data),
                        this.projSkyboxId.setValue(ar.data),
                        this.viewInvId.setValue(Cr.data),
                        this.viewId.setValue(Pr.data),
                        this.viewId3.setValue(Dr.data),
                        this.viewProjId.setValue(Or.data),
                        this.dispatchViewPos(Ir),
                        _ += this.drawInstance2(l, g, M, A),
                        this._forwardDrawCalls++;
                    else if (t.xr && t.xr.session && t.xr.views.length)
                        for (var C = t.xr.views, E = 0; E < C.length; E++) {
                            var P = C[E];
                            l.setViewport(P.viewport.x, P.viewport.y, P.viewport.z, P.viewport.w),
                            this.projId.setValue(P.projMat.data),
                            this.projSkyboxId.setValue(P.projMat.data),
                            this.viewId.setValue(P.viewOffMat.data),
                            this.viewInvId.setValue(P.viewInvOffMat.data),
                            this.viewId3.setValue(P.viewMat3.data),
                            this.viewProjId.setValue(P.projViewOffMat.data),
                            this.viewPosId.setValue(P.position),
                            _ += 0 === E ? this.drawInstance(l, g, M, A, !0) : this.drawInstance2(l, g, M, A),
                            this._forwardDrawCalls++
                        }
                    else
                        _ += this.drawInstance(l, g, M, A, !0),
                        this._forwardDrawCalls++;
                    _ < m - 1 && !p.isNewMaterial[_ + 1] && x.setParameters(l, g.parameters)
                }
            }
            l.updateEnd(),
            Wr.length = 0
        }
        ,
        e.setupInstancing = function(t) {
            t.enableAutoInstancing && (Vr || (Vr = new Ze(t,Qe.defaultInstancingFormat,t.autoInstancingMaxObjects,1)))
        }
        ,
        e.updateShaders = function(t) {
            for (var e = t.length, i = 0; i < e; i++) {
                var n = t[i].material;
                n && (Hr.has(n) || (Hr.add(n),
                n.updateShader !== Fn.prototype.updateShader && (n.clearVariants(),
                n.shader = null)))
            }
            Hr.clear()
        }
        ,
        e.updateLitShaders = function(t) {
            for (var e = t.length, i = 0; i < e; i++) {
                var n = t[i].material;
                n && (Hr.has(n) || (Hr.add(n),
                n.updateShader !== Fn.prototype.updateShader && (!n.useLighting || n.emitter && !n.emitter.lighting || (n.clearVariants(),
                n.shader = null))))
            }
            Hr.clear()
        }
        ,
        e.beginFrame = function(t) {
            var e = this.scene
              , i = t._meshInstances
              , n = t._lights;
            e.updateShaders ? (this.updateShaders(i),
            e.updateShaders = !1,
            e.updateLitShaders = !1,
            e._shaderVersion++) : e.updateLitShaders && (this.updateLitShaders(i),
            e.updateLitShaders = !1,
            e._shaderVersion++),
            this.updateCpuSkinMatrices(i);
            for (var s = i.length, a = 0; a < s; a++)
                i[a].visibleThisFrame = !1;
            for (var r = n.length, o = 0; o < r; o++)
                n[o].visibleThisFrame = 0 === n[o]._type
        }
        ,
        e.beginLayers = function(t) {
            for (var e = t.layerList.length, i = 0; i < e; i++)
                t.layerList[i]._postRenderCounter = 0;
            for (var n = this.scene, s = n._shaderVersion, a = 0; a < e; a++) {
                var r = t.layerList[a];
                r._shaderVersion = s,
                r._preRenderCalledForCameras = 0,
                r._postRenderCalledForCameras = 0;
                var o = t.subLayerList[a];
                r._postRenderCounter |= o ? 2 : 1,
                r._postRenderCounterMax = r._postRenderCounter;
                for (var h = 0; h < r.cameras.length; h++)
                    r.instances.prepare(h);
                r._needsStaticPrepare && r._staticLightHash && (r._staticPrepareDone && (vr.revert(r.opaqueMeshInstances),
                vr.revert(r.transparentMeshInstances)),
                vr.prepare(this.device, n, r.opaqueMeshInstances, r._lights),
                vr.prepare(this.device, n, r.transparentMeshInstances, r._lights),
                t._dirty = !0,
                n.updateShaders = !0,
                r._needsStaticPrepare = !1,
                r._staticPrepareDone = !0)
            }
        }
        ,
        e.gpuUpdate = function(t) {
            this.updateGpuSkinMatrices(t),
            this.updateMorphing(t)
        }
        ,
        e.setSceneConstants = function() {
            var t = this.scene;
            if (this.dispatchGlobalLights(t),
            t.fog !== Pt) {
                if (this.fogColor[0] = t.fogColor.r,
                this.fogColor[1] = t.fogColor.g,
                this.fogColor[2] = t.fogColor.b,
                t.gammaCorrection)
                    for (var e = 0; e < 3; e++)
                        this.fogColor[e] = Math.pow(this.fogColor[e], 2.2);
                this.fogColorId.setValue(this.fogColor),
                t.fog === Rt ? (this.fogStartId.setValue(t.fogStart),
                this.fogEndId.setValue(t.fogEnd)) : this.fogDensityId.setValue(t.fogDensity)
            }
            var i = this.device;
            this._screenSize[0] = i.width,
            this._screenSize[1] = i.height,
            this._screenSize[2] = 1 / i.width,
            this._screenSize[3] = 1 / i.height,
            this.screenSizeId.setValue(this._screenSize)
        }
        ,
        e.updateLightStats = function(t, e) {}
        ,
        e.cullShadowmaps = function(t) {
            for (var e = 0; e < t._lights.length; e++) {
                var i = t._lights[e];
                if (0 !== i._type && i.visibleThisFrame && i.castShadows && 0 !== i.shadowUpdateMode) {
                    var n = t._lightCompositionData[e].shadowCastersList;
                    this._shadowRenderer.cullLocal(i, n)
                }
            }
            for (var s = t._renderActions, a = 0; a < s.length; a++)
                for (var r = s[a], o = r.directionalLightsIndices.length, h = 0; h < o; h++) {
                    var l = r.directionalLightsIndices[h]
                      , c = t._lights[l]
                      , u = t._lightCompositionData[l].shadowCastersList;
                    this._shadowRenderer.cullDirectional(c, u, r.camera.camera)
                }
        }
        ,
        e.cullComposition = function(t) {
            for (var e = t._renderActions, i = 0; i < e.length; i++) {
                var n = e[i]
                  , s = n.layerIndex
                  , a = t.layerList[s];
                if (a.enabled && t.subLayerEnabled[s]) {
                    var r = t.subLayerList[s]
                      , o = n.cameraIndex
                      , h = a.cameras[o];
                    if (h) {
                        h.frameBegin(n.renderTarget),
                        n.firstCameraUse && (this.updateCameraFrustum(h.camera),
                        this._camerasRendered++),
                        this.cullLights(h.camera, a._lights);
                        var l = a.instances
                          , c = r ? l.visibleTransparent[o] : l.visibleOpaque[o];
                        if (!c.done) {
                            a.onPreCull && a.onPreCull(o);
                            var u = r ? a.transparentMeshInstances : a.opaqueMeshInstances;
                            c.length = this.cull(h.camera, u, c.list),
                            c.done = !0,
                            a.onPostCull && a.onPostCull(o)
                        }
                        h.frameEnd()
                    }
                }
            }
            this.cullShadowmaps(t)
        }
        ,
        e.updateLightTextureAtlas = function(t) {
            this.lightTextureAtlas.update(t._splitLights[2], t._splitLights[1], t.clusteredLightingCookiesEnabled, t.clusteredLightingShadowsEnabled)
        }
        ,
        e.updateClusters = function(t) {
            for (var e = 0; e < t._worldClusters.length; e++) {
                t._worldClusters[e].update(t._lights, this.scene.gammaCorrection)
            }
        }
        ,
        e.renderComposition = function(t) {
            var e = this.device;
            this.scene._updateSkybox(e),
            this.beginLayers(t);
            var i = t._update();
            2 & i && (this.scene.updateLitShaders = !0),
            this.updateLightStats(t, i),
            this.beginFrame(t),
            this.setSceneConstants(),
            this.cullComposition(t),
            this.gpuUpdate(t._meshInstances),
            xn.clusteredLightingEnabled && (this.updateLightTextureAtlas(t),
            t.clusteredLightingCookiesEnabled && (this.renderCookies(t._splitLights[2]),
            this.renderCookies(t._splitLights[1]))),
            (!xn.clusteredLightingEnabled || xn.clusteredLightingEnabled && t.clusteredLightingShadowsEnabled) && (this.renderShadows(t._splitLights[2]),
            this.renderShadows(t._splitLights[1])),
            xn.clusteredLightingEnabled && this.updateClusters(t);
            for (var n = t._renderActions, s = 0; s < n.length; s++) {
                var a = n[s]
                  , r = a.layerIndex
                  , o = t.layerList[r]
                  , h = t.subLayerList[r]
                  , l = a.cameraIndex
                  , c = o.cameras[l];
                if (a.directionalLights.length > 0 && this.renderShadows(a.directionalLights, c.camera),
                o.enabled && t.subLayerEnabled[r]) {
                    if (c && c.frameBegin(a.renderTarget),
                    !h && o.onPreRenderOpaque ? o.onPreRenderOpaque(l) : h && o.onPreRenderTransparent && o.onPreRenderTransparent(l),
                    o._preRenderCalledForCameras & 1 << l || (o.onPreRender && o.onPreRender(l),
                    o._preRenderCalledForCameras |= 1 << l),
                    c) {
                        var u;
                        if (a.clearColor || a.clearDepth || a.clearStencil) {
                            var d = c.camera._clearColorBuffer
                              , f = c.camera._clearDepthBuffer
                              , p = c.camera._clearStencilBuffer;
                            c.camera._clearColorBuffer = a.clearColor,
                            c.camera._clearDepthBuffer = a.clearDepth,
                            c.camera._clearStencilBuffer = a.clearStencil,
                            this.clearView(c.camera, a.renderTarget, !0, !0),
                            c.camera._clearColorBuffer = d,
                            c.camera._clearDepthBuffer = f,
                            c.camera._clearStencilBuffer = p
                        }
                        o._sortVisible(h, c.camera.node, l);
                        var m = o.instances
                          , _ = h ? m.visibleTransparent[l] : m.visibleOpaque[l];
                        this.scene._activeCamera = c.camera,
                        this.setCamera(c.camera, a.renderTarget),
                        xn.clusteredLightingEnabled && a.lightClusters && a.lightClusters.activate(this.lightTextureAtlas);
                        var g = !!(c.camera._flipFaces ^ (null == a || null == (u = a.renderTarget) ? void 0 : u.flipY))
                          , v = this._forwardDrawCalls;
                        this.renderForward(c.camera, _.list, _.length, o._splitLights, o.shaderPass, o.cullingMask, o.onDrawCall, o, g),
                        o._forwardDrawCalls += this._forwardDrawCalls - v,
                        e.setColorWrite(!0, !0, !0, !0),
                        e.setStencilTest(!1),
                        e.setAlphaToCoverage(!1),
                        e.setDepthBias(!1),
                        c.frameEnd(),
                        a.triggerPostprocess && c.onPostprocessing && c.onPostprocessing(c)
                    }
                    !h && o.onPostRenderOpaque ? o.onPostRenderOpaque(l) : h && o.onPostRenderTransparent && o.onPostRenderTransparent(l),
                    !o.onPostRender || o._postRenderCalledForCameras & 1 << l || (o._postRenderCounter &= ~(h ? 2 : 1),
                    0 === o._postRenderCounter && (o.onPostRender(l),
                    o._postRenderCalledForCameras |= 1 << l,
                    o._postRenderCounter = o._postRenderCounterMax))
                }
            }
        }
        ,
        t
    }();
    var jr = [null, function(t, e) {
        return t.drawOrder - e.drawOrder
    }
    , function(t, e) {
        return dr = t._key[0],
        fr = e._key[0],
        dr === fr && t.mesh && e.mesh ? e.mesh.id - t.mesh.id : fr - dr
    }
    , function(t, e) {
        return e.zdist - t.zdist
    }
    , function(t, e) {
        return t.zdist - e.zdist
    }
    ];
    function qr(t, e) {
        return e.key - t.key
    }
    var Yr, Kr = 0, Zr = function() {
        this.list = [],
        this.length = 0,
        this.done = !1
    }, $r = function() {
        function t() {
            this.opaqueMeshInstances = [],
            this.transparentMeshInstances = [],
            this.shadowCasters = [],
            this.visibleOpaque = [],
            this.visibleTransparent = []
        }
        var e = t.prototype;
        return e.prepare = function(t) {
            this.visibleOpaque[t] || (this.visibleOpaque[t] = new Zr),
            this.visibleTransparent[t] || (this.visibleTransparent[t] = new Zr),
            this.visibleOpaque[t].done = !1,
            this.visibleTransparent[t].done = !1
        }
        ,
        e.delete = function(t) {
            t < this.visibleOpaque.length && this.visibleOpaque.splice(t, 1),
            t < this.visibleTransparent.length && this.visibleTransparent.splice(t, 1)
        }
        ,
        t
    }(), Qr = function() {
        function t(t) {
            void 0 === t && (t = {}),
            void 0 !== t.id ? (this.id = t.id,
            Kr = Math.max(this.id + 1, Kr)) : this.id = Kr++,
            this.name = t.name,
            this._enabled = void 0 === t.enabled || t.enabled,
            this._refCounter = this._enabled ? 1 : 0,
            this.opaqueSortMode = void 0 === t.opaqueSortMode ? 2 : t.opaqueSortMode,
            this.transparentSortMode = void 0 === t.transparentSortMode ? 3 : t.transparentSortMode,
            this.renderTarget = t.renderTarget,
            this.shaderPass = void 0 === t.shaderPass ? 0 : t.shaderPass,
            this.passThrough = void 0 !== t.passThrough && t.passThrough,
            this._clearColorBuffer = !!t.clearColorBuffer && t.clearColorBuffer,
            this._clearDepthBuffer = !!t.clearDepthBuffer && t.clearDepthBuffer,
            this._clearStencilBuffer = !!t.clearStencilBuffer && t.clearStencilBuffer,
            this.onPreCull = t.onPreCull,
            this.onPreRender = t.onPreRender,
            this.onPreRenderOpaque = t.onPreRenderOpaque,
            this.onPreRenderTransparent = t.onPreRenderTransparent,
            this.onPostCull = t.onPostCull,
            this.onPostRender = t.onPostRender,
            this.onPostRenderOpaque = t.onPostRenderOpaque,
            this.onPostRenderTransparent = t.onPostRenderTransparent,
            this.onDrawCall = t.onDrawCall,
            this.onEnable = t.onEnable,
            this.onDisable = t.onDisable,
            this._enabled && this.onEnable && this.onEnable(),
            this.layerReference = t.layerReference,
            this.instances = t.layerReference ? t.layerReference.instances : new $r,
            this.cullingMask = t.cullingMask ? t.cullingMask : 4294967295,
            this.opaqueMeshInstances = this.instances.opaqueMeshInstances,
            this.transparentMeshInstances = this.instances.transparentMeshInstances,
            this.shadowCasters = this.instances.shadowCasters,
            this.customSortCallback = null,
            this.customCalculateSortValues = null,
            this._lights = [],
            this._lightsSet = new Set,
            this._clusteredLightsSet = new Set,
            this._splitLights = [[], [], []],
            this.cameras = [],
            this._dirty = !1,
            this._dirtyLights = !1,
            this._dirtyCameras = !1,
            this._lightHash = 0,
            this._staticLightHash = 0,
            this._needsStaticPrepare = !0,
            this._staticPrepareDone = !1,
            this._shaderVersion = -1,
            this._lightCube = null
        }
        var e = t.prototype;
        return e.incrementCounter = function() {
            0 === this._refCounter && (this._enabled = !0,
            this.onEnable && this.onEnable()),
            this._refCounter++
        }
        ,
        e.decrementCounter = function() {
            if (1 === this._refCounter)
                this._enabled = !1,
                this.onDisable && this.onDisable();
            else if (0 === this._refCounter)
                return;
            this._refCounter--
        }
        ,
        e.addMeshInstances = function(t, e) {
            for (var i = this._shaderVersion, n = this.shadowCasters, s = 0; s < t.length; s++) {
                var a = t[s]
                  , r = a.material
                  , o = 3 === r.blendType ? this.opaqueMeshInstances : this.transparentMeshInstances;
                this.opaqueMeshInstances.indexOf(a) < 0 && this.transparentMeshInstances.indexOf(a) < 0 && o.push(a),
                !e && a.castShadow && n.indexOf(a) < 0 && n.push(a),
                !this.passThrough && i >= 0 && r._shaderVersion !== i && (r.updateShader !== Fn.prototype.updateShader && (r.clearVariants(),
                r.shader = null),
                r._shaderVersion = i)
            }
            this.passThrough || (this._dirty = !0)
        }
        ,
        e.removeMeshInstanceFromArray = function(t, e) {
            for (var i = -1, n = 0, s = e.length, a = 0; a < s; a++) {
                var r = e[a];
                if (r === t) {
                    i = a,
                    n = 1;
                    break
                }
                if (r._staticSource === t)
                    i < 0 && (i = a),
                    n++;
                else if (i >= 0)
                    break
            }
            i >= 0 && e.splice(i, n)
        }
        ,
        e.removeMeshInstances = function(t, e) {
            for (var i = this.opaqueMeshInstances, n = this.transparentMeshInstances, s = this.shadowCasters, a = 0; a < t.length; a++) {
                var r = t[a];
                if (this.removeMeshInstanceFromArray(r, i),
                this.removeMeshInstanceFromArray(r, n),
                !e) {
                    var o = s.indexOf(r);
                    o >= 0 && s.splice(o, 1)
                }
            }
            this._dirty = !0
        }
        ,
        e.clearMeshInstances = function(t) {
            (0 !== this.opaqueMeshInstances.length || 0 !== this.transparentMeshInstances.length || !t && 0 !== this.shadowCasters.length) && (this.opaqueMeshInstances.length = 0,
            this.transparentMeshInstances.length = 0,
            t || (this.shadowCasters.length = 0),
            this.passThrough || (this._dirty = !0))
        }
        ,
        e.addLight = function(t) {
            var e = t.light;
            this._lightsSet.has(e) || (this._lightsSet.add(e),
            0 !== e.type && this._clusteredLightsSet.add(e),
            this._lights.push(e),
            this._dirtyLights = !0,
            this._generateLightHash())
        }
        ,
        e.removeLight = function(t) {
            var e = t.light;
            this._lightsSet.has(e) && (this._lightsSet.delete(e),
            0 !== e.type && this._clusteredLightsSet.delete(e),
            this._lights.splice(this._lights.indexOf(e), 1),
            this._dirtyLights = !0,
            this._generateLightHash())
        }
        ,
        e.clearLights = function() {
            this._lightsSet.clear(),
            this._clusteredLightsSet.clear(),
            this._lights.length = 0,
            this._dirtyLights = !0
        }
        ,
        e.addShadowCasters = function(t) {
            for (var e = this.shadowCasters, i = 0; i < t.length; i++) {
                var n = t[i];
                n.castShadow && (e.indexOf(n) < 0 && e.push(n))
            }
            this._dirtyLights = !0
        }
        ,
        e.removeShadowCasters = function(t) {
            for (var e = this.shadowCasters, i = 0; i < t.length; i++) {
                var n = e.indexOf(t[i]);
                n >= 0 && e.splice(n, 1)
            }
            this._dirtyLights = !0
        }
        ,
        e._generateLightHash = function() {
            if (this._lights.length > 0) {
                this._lights.sort(qr);
                for (var t = "", e = "", i = 0; i < this._lights.length; i++)
                    this._lights[i].isStatic ? e += this._lights[i].key : t += this._lights[i].key;
                0 === t.length ? this._lightHash = 0 : this._lightHash = $e(t),
                0 === e.length ? this._staticLightHash = 0 : this._staticLightHash = $e(e)
            } else
                this._lightHash = 0,
                this._staticLightHash = 0
        }
        ,
        e.addCamera = function(t) {
            this.cameras.indexOf(t) >= 0 || (this.cameras.push(t),
            this._dirtyCameras = !0)
        }
        ,
        e.removeCamera = function(t) {
            var e = this.cameras.indexOf(t);
            e >= 0 && (this.cameras.splice(e, 1),
            this._dirtyCameras = !0,
            this.instances.delete(e))
        }
        ,
        e.clearCameras = function() {
            this.cameras.length = 0,
            this._dirtyCameras = !0
        }
        ,
        e._calculateSortDistances = function(t, e, i, n) {
            for (var s = 0; s < e; s++) {
                var a = t[s];
                if (!a.command && !(a.layer <= 2))
                    if (a.calculateSortDistance)
                        a.zdist = a.calculateSortDistance(a, i, n);
                    else {
                        var r = a.aabb.center
                          , o = r.x - i.x
                          , h = r.y - i.y
                          , l = r.z - i.z;
                        a.zdist = o * n.x + h * n.y + l * n.z
                    }
            }
        }
        ,
        e._sortVisible = function(t, e, i) {
            var n = this.instances
              , s = t ? this.transparentSortMode : this.opaqueSortMode;
            if (0 !== s) {
                var a = t ? n.visibleTransparent[i] : n.visibleOpaque[i];
                5 === s ? (pr = e.getPosition(),
                mr = e.forward,
                this.customCalculateSortValues && this.customCalculateSortValues(a.list, a.length, pr, mr),
                a.list.length !== a.length && (a.list.length = a.length),
                this.customSortCallback && a.list.sort(this.customSortCallback)) : (3 !== s && 4 !== s || (pr = e.getPosition(),
                mr = e.forward,
                this._calculateSortDistances(a.list, a.length, pr, mr)),
                a.list.length !== a.length && (a.list.length = a.length),
                a.list.sort(jr[s]))
            }
        }
        ,
        G(t, [{
            key: "renderTarget",
            get: function() {
                return this._renderTarget
            },
            set: function(t) {
                this._renderTarget = t,
                this._dirtyCameras = !0
            }
        }, {
            key: "enabled",
            get: function() {
                return this._enabled
            },
            set: function(t) {
                t !== this._enabled && (this._enabled = t,
                t ? (this.incrementCounter(),
                this.onEnable && this.onEnable()) : (this.decrementCounter(),
                this.onDisable && this.onDisable()))
            }
        }, {
            key: "clearColor",
            get: function() {
                return this._clearColor
            },
            set: function(t) {
                this._clearColor.copy(t)
            }
        }, {
            key: "clearColorBuffer",
            get: function() {
                return this._clearColorBuffer
            },
            set: function(t) {
                this._clearColorBuffer = t,
                this._dirtyCameras = !0
            }
        }, {
            key: "clearDepthBuffer",
            get: function() {
                return this._clearDepthBuffer
            },
            set: function(t) {
                this._clearDepthBuffer = t,
                this._dirtyCameras = !0
            }
        }, {
            key: "clearStencilBuffer",
            get: function() {
                return this._clearStencilBuffer
            },
            set: function(t) {
                this._clearStencilBuffer = t,
                this._dirtyCameras = !0
            }
        }, {
            key: "clusteredLightsSet",
            get: function() {
                return this._clusteredLightsSet
            }
        }]),
        t
    }(), Jr = new lt, to = new lt, eo = new lt, io = {
        bias: 0,
        normalBias: 0
    }, no = {
        r: 0,
        g: 1,
        b: 2,
        a: 3
    }, so = [[new dt(0,0,1,1)], [new dt(0,0,.5,.5), new dt(0,.5,.5,.5)], [new dt(0,0,.5,.5), new dt(0,.5,.5,.5), new dt(.5,0,.5,.5)], [new dt(0,0,.5,.5), new dt(0,.5,.5,.5), new dt(.5,0,.5,.5), new dt(.5,.5,.5,.5)]], ao = function() {
        function t(t, e, i, n) {
            this.light = n,
            this.camera = e,
            this.shadowCamera = _r.createShadowCamera(t, n._shadowType, n._type, i),
            this.shadowMatrix = new vt,
            this.shadowViewport = new dt(0,0,1,1),
            this.shadowScissor = new dt(0,0,1,1),
            this.face = i,
            this.visibleCasters = []
        }
        return G(t, [{
            key: "shadowBuffer",
            get: function() {
                var t = this.shadowCamera.renderTarget;
                if (t) {
                    var e = this.light;
                    return 1 === e._type ? t.colorBuffer : e._isPcf && e.device.webgl2 ? t.depthBuffer : t.colorBuffer
                }
                return null
            }
        }]),
        t
    }(), ro = function() {
        function t(t) {
            this.device = t,
            this._type = 0,
            this._color = new at(.8,.8,.8),
            this._intensity = 1,
            this._castShadows = !1,
            this._enabled = !1,
            this.mask = 1,
            this.isStatic = !1,
            this.key = 0,
            this.bakeDir = !0,
            this.bakeNumSamples = 1,
            this.bakeArea = 0,
            this.attenuationStart = 10,
            this.attenuationEnd = 10,
            this._falloffMode = 0,
            this._shadowType = 0,
            this._vsmBlurSize = 11,
            this.vsmBlurMode = 1,
            this.vsmBias = .0025,
            this._cookie = null,
            this.cookieIntensity = 1,
            this._cookieFalloff = !0,
            this._cookieChannel = "rgb",
            this._cookieTransform = null,
            this._cookieTransformUniform = new Float32Array(4),
            this._cookieOffset = null,
            this._cookieOffsetUniform = new Float32Array(2),
            this._cookieTransformSet = !1,
            this._cookieOffsetSet = !1,
            this._innerConeAngle = 40,
            this._outerConeAngle = 45,
            this.cascades = null,
            this._shadowMatrixPalette = null,
            this._shadowCascadeDistances = null,
            this.numCascades = 1,
            this.cascadeDistribution = .5,
            this._shape = 0,
            this._finalColor = new Float32Array([.8, .8, .8]);
            var e = Math.pow(this._finalColor[0], 2.2);
            this._linearFinalColor = new Float32Array([e, e, e]),
            this._position = new lt(0,0,0),
            this._direction = new lt(0,0,0),
            this._innerConeAngleCos = Math.cos(this._innerConeAngle * Math.PI / 180),
            this._outerConeAngleCos = Math.cos(this._outerConeAngle * Math.PI / 180),
            this._shadowMap = null,
            this._shadowRenderParams = [],
            this.shadowDistance = 40,
            this._shadowResolution = 1024,
            this.shadowBias = -5e-4,
            this._normalOffsetBias = 0,
            this.shadowUpdateMode = 2,
            this._isVsm = !1,
            this._isPcf = !0,
            this._cookieMatrix = null,
            this._atlasViewport = null,
            this._scene = null,
            this._node = null,
            this._renderData = [],
            this.visibleThisFrame = !1
        }
        var e = t.prototype;
        return e.destroy = function() {
            this._destroyShadowMap(),
            this._renderData = null
        }
        ,
        e._destroyShadowMap = function() {
            this._renderData && (this._renderData.length = 0),
            this._shadowMap && (this._shadowMap.cached || this._shadowMap.destroy(),
            this._shadowMap = null),
            0 === this.shadowUpdateMode && (this.shadowUpdateMode = 1)
        }
        ,
        e.getRenderData = function(t, e) {
            for (var i = 0; i < this._renderData.length; i++) {
                var n = this._renderData[i];
                if (n.camera === t && n.face === e)
                    return n
            }
            var s = new ao(this.device,t,e,this);
            return this._renderData.push(s),
            s
        }
        ,
        e.clone = function() {
            var e = new t(this.device);
            return e.type = this._type,
            e.setColor(this._color),
            e.intensity = this._intensity,
            e.castShadows = this.castShadows,
            e._enabled = this._enabled,
            e.attenuationStart = this.attenuationStart,
            e.attenuationEnd = this.attenuationEnd,
            e.falloffMode = this._falloffMode,
            e.shadowType = this._shadowType,
            e.vsmBlurSize = this._vsmBlurSize,
            e.vsmBlurMode = this.vsmBlurMode,
            e.vsmBias = this.vsmBias,
            e.shadowUpdateMode = this.shadowUpdateMode,
            e.mask = this.mask,
            e.innerConeAngle = this._innerConeAngle,
            e.outerConeAngle = this._outerConeAngle,
            e.numCascades = this.numCascades,
            e.cascadeDistribution = this.cascadeDistribution,
            e.shape = this._shape,
            e.shadowBias = this.shadowBias,
            e.normalOffsetBias = this._normalOffsetBias,
            e.shadowResolution = this._shadowResolution,
            e.shadowDistance = this.shadowDistance,
            e
        }
        ,
        e._getUniformBiasValues = function(t) {
            var e = t.shadowCamera._farClip;
            switch (this._type) {
            case 1:
                io.bias = this.shadowBias,
                io.normalBias = this._normalOffsetBias;
                break;
            case 2:
                this._isVsm ? io.bias = -2e-4 : (io.bias = 20 * this.shadowBias,
                !this.device.webgl2 && this.device.extStandardDerivatives && (io.bias *= -100)),
                io.normalBias = this._isVsm ? this.vsmBias / (this.attenuationEnd / 7) : this._normalOffsetBias;
                break;
            case 0:
                this._isVsm ? io.bias = -2e-4 : (io.bias = this.shadowBias / e * 100,
                !this.device.webgl2 && this.device.extStandardDerivatives && (io.bias *= -100)),
                io.normalBias = this._isVsm ? this.vsmBias / (e / 7) : this._normalOffsetBias
            }
            return io
        }
        ,
        e.getColor = function() {
            return this._color
        }
        ,
        e.getBoundingSphere = function(t) {
            if (2 === this._type) {
                var e = this.attenuationEnd
                  , i = this._outerConeAngle
                  , n = Math.cos(i * it.DEG_TO_RAD)
                  , s = this._node;
                Jr.copy(s.up),
                Jr.mulScalar(.5 * -e * n),
                Jr.add(s.getPosition()),
                t.center = Jr,
                to.copy(s.up),
                to.mulScalar(-e),
                eo.copy(s.right),
                eo.mulScalar(Math.sin(i * it.DEG_TO_RAD) * e),
                to.add(eo),
                t.radius = .5 * to.length()
            } else
                1 === this._type && (t.center = this._node.getPosition(),
                t.radius = this.attenuationEnd)
        }
        ,
        e.getBoundingBox = function(t) {
            if (2 === this._type) {
                var e = this.attenuationEnd
                  , i = this._outerConeAngle
                  , n = this._node
                  , s = Math.abs(Math.sin(i * it.DEG_TO_RAD) * e);
                t.center.set(0, .5 * -e, 0),
                t.halfExtents.set(s, .5 * e, s),
                t.setFromTransformedAabb(t, n.getWorldTransform())
            } else
                1 === this._type && (t.center.copy(this._node.getPosition()),
                t.halfExtents.set(this.attenuationEnd, this.attenuationEnd, this.attenuationEnd))
        }
        ,
        e._updateFinalColor = function() {
            var t = this._color
              , e = t.r
              , i = t.g
              , n = t.b
              , s = this._intensity
              , a = this._finalColor
              , r = this._linearFinalColor;
            a[0] = e * s,
            a[1] = i * s,
            a[2] = n * s,
            s >= 1 ? (r[0] = Math.pow(e, 2.2) * s,
            r[1] = Math.pow(i, 2.2) * s,
            r[2] = Math.pow(n, 2.2) * s) : (r[0] = Math.pow(a[0], 2.2),
            r[1] = Math.pow(a[1], 2.2),
            r[2] = Math.pow(a[2], 2.2))
        }
        ,
        e.setColor = function() {
            1 === arguments.length ? this._color.set(arguments[0].r, arguments[0].g, arguments[0].b) : 3 === arguments.length && this._color.set(arguments[0], arguments[1], arguments[2]),
            this._updateFinalColor()
        }
        ,
        e.updateShadow = function() {
            2 !== this.shadowUpdateMode && (this.shadowUpdateMode = 1)
        }
        ,
        e.layersDirty = function() {
            var t;
            null != (t = this._scene) && t.layers && (this._scene.layers._dirtyLights = !0)
        }
        ,
        e.updateKey = function() {
            var t = this._type << 29 | (this._castShadows ? 1 : 0) << 28 | this._shadowType << 25 | this._falloffMode << 23 | (0 !== this._normalOffsetBias ? 1 : 0) << 22 | (this._cookie ? 1 : 0) << 21 | (this._cookieFalloff ? 1 : 0) << 20 | no[this._cookieChannel.charAt(0)] << 18 | (this._cookieTransform ? 1 : 0) << 12 | this._shape << 10 | this.numCascades - 1 << 8;
            3 === this._cookieChannel.length && (t |= no[this._cookieChannel.charAt(1)] << 16,
            t |= no[this._cookieChannel.charAt(2)] << 14),
            t !== this.key && null !== this._scene && this.layersDirty(),
            this.key = t
        }
        ,
        G(t, [{
            key: "numCascades",
            get: function() {
                return this.cascades.length
            },
            set: function(t) {
                this.cascades && this.numCascades == t || (this.cascades = so[t - 1],
                this._shadowMatrixPalette = new Float32Array(64),
                this._shadowCascadeDistances = new Float32Array(4),
                this._destroyShadowMap(),
                this.updateKey())
            }
        }, {
            key: "shadowMap",
            get: function() {
                return this._shadowMap
            },
            set: function(t) {
                this._shadowMap !== t && (this._destroyShadowMap(),
                this._shadowMap = t)
            }
        }, {
            key: "numShadowFaces",
            get: function() {
                var t = this._type;
                return 0 === t ? this.numCascades : 1 === t ? 6 : 1
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                if (this._type !== t) {
                    this._type = t,
                    this._destroyShadowMap(),
                    this.updateKey();
                    var e = this._shadowType;
                    this._shadowType = null,
                    this.shadowType = e
                }
            }
        }, {
            key: "shape",
            get: function() {
                return this._shape
            },
            set: function(t) {
                if (this._shape !== t) {
                    this._shape = t,
                    this._destroyShadowMap(),
                    this.updateKey();
                    var e = this._shadowType;
                    this._shadowType = null,
                    this.shadowType = e
                }
            }
        }, {
            key: "shadowType",
            get: function() {
                return this._shadowType
            },
            set: function(t) {
                if (this._shadowType !== t) {
                    var e = this.device;
                    1 === this._type && (t = 0),
                    4 !== t || e.webgl2 || (t = 0),
                    3 !== t || e.textureFloatRenderable || (t = 2),
                    2 !== t || e.textureHalfFloatRenderable || (t = 1),
                    this._isVsm = t >= 1 && t <= 3,
                    this._isPcf = 4 === t || 0 === t,
                    this._shadowType = t,
                    this._destroyShadowMap(),
                    this.updateKey()
                }
            }
        }, {
            key: "enabled",
            get: function() {
                return this._enabled
            },
            set: function(t) {
                this._enabled !== t && (this._enabled = t,
                this.layersDirty())
            }
        }, {
            key: "castShadows",
            get: function() {
                return this._castShadows && 4 !== this.mask && 0 !== this.mask
            },
            set: function(t) {
                this._castShadows !== t && (this._castShadows = t,
                this._destroyShadowMap(),
                this.layersDirty(),
                this.updateKey())
            }
        }, {
            key: "shadowResolution",
            get: function() {
                return this._shadowResolution
            },
            set: function(t) {
                this._shadowResolution !== t && (t = 1 === this._type ? Math.min(t, this.device.maxCubeMapSize) : Math.min(t, this.device.maxTextureSize),
                this._shadowResolution = t,
                this._destroyShadowMap())
            }
        }, {
            key: "vsmBlurSize",
            get: function() {
                return this._vsmBlurSize
            },
            set: function(t) {
                this._vsmBlurSize !== t && (t % 2 == 0 && t++,
                this._vsmBlurSize = t)
            }
        }, {
            key: "normalOffsetBias",
            get: function() {
                return this._normalOffsetBias
            },
            set: function(t) {
                this._normalOffsetBias !== t && ((!this._normalOffsetBias && t || this._normalOffsetBias && !t) && this.updateKey(),
                this._normalOffsetBias = t)
            }
        }, {
            key: "falloffMode",
            get: function() {
                return this._falloffMode
            },
            set: function(t) {
                this._falloffMode !== t && (this._falloffMode = t,
                this.updateKey())
            }
        }, {
            key: "innerConeAngle",
            get: function() {
                return this._innerConeAngle
            },
            set: function(t) {
                this._innerConeAngle !== t && (this._innerConeAngle = t,
                this._innerConeAngleCos = Math.cos(t * Math.PI / 180))
            }
        }, {
            key: "outerConeAngle",
            get: function() {
                return this._outerConeAngle
            },
            set: function(t) {
                this._outerConeAngle !== t && (this._outerConeAngle = t,
                this._outerConeAngleCos = Math.cos(t * Math.PI / 180))
            }
        }, {
            key: "intensity",
            get: function() {
                return this._intensity
            },
            set: function(t) {
                this._intensity !== t && (this._intensity = t,
                this._updateFinalColor())
            }
        }, {
            key: "cookieMatrix",
            get: function() {
                return this._cookieMatrix || (this._cookieMatrix = new vt),
                this._cookieMatrix
            }
        }, {
            key: "atlasViewport",
            get: function() {
                return this._atlasViewport || (this._atlasViewport = new dt(0,0,1,1)),
                this._atlasViewport
            }
        }, {
            key: "cookie",
            get: function() {
                return this._cookie
            },
            set: function(t) {
                this._cookie !== t && (this._cookie = t,
                this.updateKey())
            }
        }, {
            key: "cookieFalloff",
            get: function() {
                return this._cookieFalloff
            },
            set: function(t) {
                this._cookieFalloff !== t && (this._cookieFalloff = t,
                this.updateKey())
            }
        }, {
            key: "cookieChannel",
            get: function() {
                return this._cookieChannel
            },
            set: function(t) {
                if (this._cookieChannel !== t) {
                    if (t.length < 3)
                        for (var e = t.charAt(t.length - 1), i = 3 - t.length, n = 0; n < i; n++)
                            t += e;
                    this._cookieChannel = t,
                    this.updateKey()
                }
            }
        }, {
            key: "cookieTransform",
            get: function() {
                return this._cookieTransform
            },
            set: function(t) {
                this._cookieTransform !== t && (this._cookieTransform = t,
                this._cookieTransformSet = !!t,
                t && !this._cookieOffset && (this.cookieOffset = new ut,
                this._cookieOffsetSet = !1),
                this.updateKey())
            }
        }, {
            key: "cookieOffset",
            get: function() {
                return this._cookieOffset
            },
            set: function(t) {
                this._cookieOffset !== t && (!(!this._cookieTransformSet && !t) && !t && this._cookieOffset ? this._cookieOffset.set(0, 0) : this._cookieOffset = t,
                this._cookieOffsetSet = !!t,
                t && !this._cookieTransform && (this.cookieTransform = new dt(1,1,0,0),
                this._cookieTransformSet = !1),
                this.updateKey())
            }
        }]),
        t
    }(), oo = 2.399963229728653, ho = function(t, e, i) {
        var n = e * oo
          , s = Math.sqrt(e) / Math.sqrt(i);
        t.x = s * Math.cos(n),
        t.y = s * Math.sin(n)
    }, lo = function(t, e, i, n, s) {
        void 0 === n && (n = 0),
        void 0 === s && (s = 1),
        n = 1 - 2 * n,
        s = 1 - 2 * s;
        var a = it.lerp(n, s, e / i)
          , r = Math.sqrt(1 - a * a)
          , o = oo * e;
        t.x = Math.cos(o) * r,
        t.y = a,
        t.z = Math.sin(o) * r
    }, co = new Et, uo = function() {
        function t(t, e) {
            this.scene = t,
            this.light = e,
            this.store(),
            e.numCascades = 1,
            0 !== e.type && (e._node.getWorldTransform(),
            e.getBoundingSphere(co),
            this.lightBounds = new Mt,
            this.lightBounds.center.copy(co.center),
            this.lightBounds.halfExtents.set(co.radius, co.radius, co.radius))
        }
        var e = t.prototype;
        return e.store = function() {
            this.mask = this.light.mask,
            this.shadowUpdateMode = this.light.shadowUpdateMode,
            this.enabled = this.light.enabled,
            this.intensity = this.light.intensity,
            this.rotation = this.light._node.getLocalRotation().clone(),
            this.numCascades = this.light.numCascades
        }
        ,
        e.restore = function() {
            var t = this.light;
            t.mask = this.mask,
            t.shadowUpdateMode = this.shadowUpdateMode,
            t.enabled = this.enabled,
            t.intensity = this.intensity,
            t._node.setLocalRotation(this.rotation),
            t.numCascades = this.numCascades
        }
        ,
        e.startBake = function() {
            this.light.enabled = !0,
            this.light._destroyShadowMap()
        }
        ,
        e.endBake = function(t) {
            var e = this.light;
            e.enabled = !1,
            e.shadowMap && e.shadowMap.cached && (t.add(e, e.shadowMap),
            e.shadowMap = null)
        }
        ,
        t
    }(), fo = new ut, po = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.prepareVirtualLight = function(t, e) {
            var i = this.light;
            if (i._node.setLocalRotation(this.rotation),
            t > 0) {
                var n = i.bakeArea;
                ho(fo, t, e),
                fo.mulScalar(.5 * n),
                i._node.rotateLocal(fo.x, 0, fo.y)
            }
            i._node.getWorldTransform();
            var s = this.scene.gammaCorrection ? 2.2 : 1
              , a = Math.pow(this.intensity, s);
            i.intensity = Math.pow(a / e, 1 / s)
        }
        ,
        G(e, [{
            key: "numVirtualLights",
            get: function() {
                return 0 === this.light.type ? this.light.bakeNumSamples : 1
            }
        }]),
        e
    }(uo), mo = new ji, _o = function() {
        function t(t, e, i) {
            this.material = e,
            this.layer = i,
            this.positions = [],
            this.colors = [],
            this.mesh = new Ys(t),
            this.meshInstance = null
        }
        var e = t.prototype;
        return e.addLines = function(t, e) {
            for (var i = this.positions, n = t.length, s = 0; s < n; s++) {
                var a = t[s];
                i.push(a.x, a.y, a.z)
            }
            var r = this.colors;
            if (e.length)
                for (var o = 0; o < n; o++) {
                    var h = e[o];
                    r.push(h.r, h.g, h.b, h.a)
                }
            else
                for (var l = 0; l < n; l++)
                    r.push(e.r, e.g, e.b, e.a)
        }
        ,
        e.addLinesArrays = function(t, e) {
            var i;
            (i = this.positions).push.apply(i, t);
            var n = this.colors;
            if (e.length)
                n.push.apply(n, e);
            else
                for (var s = t.length / 3, a = 0; a < s; a++)
                    n.push(e.r, e.g, e.b, e.a)
        }
        ,
        e.onPreRender = function() {
            this.positions.length > 0 && (this.mesh.setPositions(this.positions),
            this.mesh.setColors(this.colors),
            this.mesh.update(1, !1),
            this.meshInstance || (mo.worldTransform = vt.IDENTITY,
            mo._dirtyWorld = mo._dirtyNormal = !1,
            this.meshInstance = new wa(this.mesh,this.material,mo),
            this.meshInstance.cull = !1,
            this.layer.addMeshInstances([this.meshInstance], !0)),
            this.meshInstance.visible = !0)
        }
        ,
        e.onPostRender = function() {
            this.positions.length = 0,
            this.colors.length = 0,
            this.meshInstance.visible = !1
        }
        ,
        t
    }(), go = function() {
        function t(t) {
            this.device = t,
            this.map = new Map
        }
        var e = t.prototype;
        return e.getBatch = function(t, e) {
            var i = this.map.get(t);
            return i || (i = new _o(this.device,t,e),
            this.map.set(t, i)),
            i
        }
        ,
        e.onPreRender = function() {
            this.map.forEach((function(t) {
                t.onPreRender()
            }
            ))
        }
        ,
        e.onPostRender = function() {
            this.map.forEach((function(t) {
                t.onPostRender()
            }
            ))
        }
        ,
        t
    }(), vo = [], yo = function() {
        function t(t, e) {
            this.device = t,
            this.quadMesh = null,
            this.textureShader = null,
            this.depthTextureShader = null,
            this.cubeLocalPos = null,
            this.cubeWorldPos = null,
            this.usedGraphNodes = [],
            this.freeGraphNodes = [],
            this.batchesMap = new Map,
            this.allBatches = new Set,
            this._materialDepth = null,
            this._materialNoDepth = null,
            this.layerMeshInstances = new Map,
            e.on("prerender", this.onPreRender, this),
            e.on("postrender", this.onPostRender, this)
        }
        var e = t.prototype;
        return e.createMaterial = function(t) {
            var e = new ca;
            return e.vertexColors = !0,
            e.blend = !0,
            e.blendType = 2,
            e.depthTest = t,
            e.update(),
            e
        }
        ,
        e.getBatch = function(t, e) {
            var i = this.batchesMap.get(t);
            i || (i = new go(this.device),
            this.batchesMap.set(t, i)),
            this.allBatches.add(i);
            var n = e ? this.materialDepth : this.materialNoDepth;
            return i.getBatch(n, t)
        }
        ,
        t.getTextureVS = function() {
            return "\n            attribute vec2 aPosition;\n            uniform mat4 matrix_model;\n            varying vec2 uv0;\n            void main(void) {\n                gl_Position = matrix_model * vec4(aPosition, 0, 1);\n                uv0 = aPosition.xy + 0.5;\n            }\n        "
        }
        ,
        e.getTextureShader = function() {
            if (!this.textureShader) {
                var e = {
                    attributes: {
                        aPosition: se
                    },
                    vshader: t.getTextureVS(),
                    fshader: "\n                    precision lowp float;\n                    varying vec2 uv0;\n                    uniform sampler2D colorMap;\n                    void main (void) {\n                        gl_FragColor = vec4(texture2D(colorMap, uv0).xyz, 1);\n                    }\n                "
                };
                this.textureShader = new ii(this.device,e)
            }
            return this.textureShader
        }
        ,
        e.getDepthTextureShader = function() {
            if (!this.depthTextureShader) {
                var e = this.device.webgl2 ? "#define GL2" : ""
                  , i = {
                    attributes: {
                        aPosition: se
                    },
                    vshader: t.getTextureVS(),
                    fshader: "\n                    precision " + this.device.precision + " float;\n                    " + e + "\n                    " + ni.screenDepthPS + "\n                    varying vec2 uv0;\n                    void main() {\n                        float depth = getLinearScreenDepth(uv0) * camera_params.x;\n                        gl_FragColor = vec4(vec3(depth), 1.0);\n                    }\n                    "
                };
                this.depthTextureShader = new ii(this.device,i)
            }
            return this.depthTextureShader
        }
        ,
        e.getQuadMesh = function() {
            return this.quadMesh || (this.quadMesh = new Ys(this.device),
            this.quadMesh.setPositions([-.5, -.5, 0, .5, -.5, 0, -.5, .5, 0, .5, .5, 0]),
            this.quadMesh.update(5)),
            this.quadMesh
        }
        ,
        e.drawMesh = function(t, e, i, n, s) {
            if (!n) {
                var a = this.getGraphNode(e);
                (n = new wa(i,t,a)).cull = !1
            }
            var r = this.layerMeshInstances.get(s);
            r || (r = [],
            this.layerMeshInstances.set(s, r)),
            r.push(n)
        }
        ,
        e.drawWireAlignedBox = function(t, e, i, n, s) {
            vo.push(t.x, t.y, t.z, t.x, e.y, t.z, t.x, e.y, t.z, e.x, e.y, t.z, e.x, e.y, t.z, e.x, t.y, t.z, e.x, t.y, t.z, t.x, t.y, t.z, t.x, t.y, e.z, t.x, e.y, e.z, t.x, e.y, e.z, e.x, e.y, e.z, e.x, e.y, e.z, e.x, t.y, e.z, e.x, t.y, e.z, t.x, t.y, e.z, t.x, t.y, t.z, t.x, t.y, e.z, t.x, e.y, t.z, t.x, e.y, e.z, e.x, e.y, t.z, e.x, e.y, e.z, e.x, t.y, t.z, e.x, t.y, e.z),
            this.getBatch(s, n).addLinesArrays(vo, i),
            vo.length = 0
        }
        ,
        e.drawWireSphere = function(t, e, i, n, s, a) {
            for (var r = 2 * Math.PI / n, o = 0, h = 0; h < n; h++) {
                var l = Math.sin(o)
                  , c = Math.cos(o);
                o += r;
                var u = Math.sin(o)
                  , d = Math.cos(o);
                vo.push(t.x + e * l, t.y, t.z + e * c),
                vo.push(t.x + e * u, t.y, t.z + e * d),
                vo.push(t.x + e * l, t.y + e * c, t.z),
                vo.push(t.x + e * u, t.y + e * d, t.z),
                vo.push(t.x, t.y + e * l, t.z + e * c),
                vo.push(t.x, t.y + e * u, t.z + e * d)
            }
            this.getBatch(a, s).addLinesArrays(vo, i),
            vo.length = 0
        }
        ,
        e.getGraphNode = function(t) {
            var e = null;
            return e = this.freeGraphNodes.length > 0 ? this.freeGraphNodes.pop() : new ji,
            this.usedGraphNodes.push(e),
            e.worldTransform = t,
            e._dirtyWorld = e._dirtyNormal = !1,
            e
        }
        ,
        e.onPreRender = function() {
            this.allBatches.forEach((function(t) {
                t.onPreRender()
            }
            )),
            this.layerMeshInstances.forEach((function(t, e) {
                e.addMeshInstances(t, !0)
            }
            ))
        }
        ,
        e.onPostRender = function() {
            this.allBatches.forEach((function(t) {
                t.onPostRender()
            }
            )),
            this.allBatches.clear(),
            this.layerMeshInstances.forEach((function(t, e) {
                e.removeMeshInstances(t, !0),
                t.length = 0
            }
            ));
            var t = this.freeGraphNodes;
            this.freeGraphNodes = this.usedGraphNodes,
            this.usedGraphNodes = t
        }
        ,
        G(t, [{
            key: "materialDepth",
            get: function() {
                return this._materialDepth || (this._materialDepth = this.createMaterial(!0)),
                this._materialDepth
            }
        }, {
            key: "materialNoDepth",
            get: function() {
                return this._materialNoDepth || (this._materialNoDepth = this.createMaterial(!1)),
                this._materialNoDepth
            }
        }]),
        t
    }(), xo = function() {
        function t() {}
        return t.createTexture = function(t, e, i) {
            var n = new Mi(t,{
                width: i,
                height: i,
                format: e,
                addressU: 1,
                addressV: 1,
                type: Fe,
                magFilter: 1,
                minFilter: 0,
                anisotropy: 1
            });
            return n.name = "AreaLightLUT",
            n
        }
        ,
        t.setUniforms = function(t, e, i) {
            t.scope.resolve("areaLightsLutTex1").setValue(e),
            t.scope.resolve("areaLightsLutTex2").setValue(i)
        }
        ,
        t.createPlaceholder = function(e) {
            var i = t.createTexture(e, 7, 2);
            i.lock().fill(0),
            i.unlock(),
            t.setUniforms(e, i, i)
        }
        ,
        t.set = function(e, i) {
            function n(e, i, n) {
                var s = t.createTexture(e, n, 64);
                return s.lock().set(i),
                s.unlock(),
                s.upload(),
                s
            }
            function s(t, e, i) {
                for (var n = t.length, s = new Float32Array(n), a = 0; a < n; a++) {
                    var r = a % 4;
                    s[a] = (t[a] + e[r]) * i[r]
                }
                return s
            }
            function a(t) {
                for (var e = t.length, i = new Uint16Array(e), n = Si.float2Half, s = 0; s < e; s++)
                    i[s] = n(t[s]);
                return i
            }
            function r(t) {
                for (var e = t.length, i = new Uint8ClampedArray(e), n = 0; n < e; n++)
                    i[n] = 255 * t[n];
                return i
            }
            var o = new Int16Array(i,0,2)
              , h = o[0]
              , l = o[1];
            if (0 !== h || 1 !== l)
                console.warn("areaLightLuts asset version: " + h + "." + l + " is not supported in current engine version!");
            else {
                var c, u, d = new Float32Array(i,4,16384), f = new Float32Array(i,65540,16384), p = e.areaLightLutFormat;
                if (p === Qt)
                    c = d,
                    u = f;
                else if (p === Zt)
                    c = a(d),
                    u = a(f);
                else {
                    c = r(s(d, [0, .2976, .01381, 0], [.999, 3.08737, 1.6546, .603249])),
                    u = r(s(f, [-.306897, 0, 0, 0], [1.442787, 1, 1, 1]))
                }
                var m = n(e, c, p)
                  , _ = n(e, u, p);
                t.setUniforms(e, m, _)
            }
        }
        ,
        t
    }(), bo = 1, So = new vt, To = new vt, wo = new lt, Mo = new lt, Ao = new lt, Co = new lt, Eo = new lt, Po = new lt, Ro = new lt, Io = new lt, Lo = new lt, Do = new lt, ko = new lt, Oo = new lt, Fo = new lt;
    function Bo(t) {
        return t - Math.floor(t)
    }
    function No(t) {
        return Math.max(Math.min(t, 1), 0)
    }
    function Uo(t, e) {
        return t - e * Math.floor(t / e)
    }
    function zo(t) {
        var e = Bo(t)
          , i = Bo(255 * t);
        return [e -= i / 255, i -= i / 255]
    }
    var Vo = function() {
        function t(t) {
            this._emitter = t
        }
        var e = t.prototype;
        return e.calcSpawnPosition = function(t, e, i, n, s) {
            var a = this._emitter
              , r = Math.random()
              , o = Math.random()
              , h = Math.random()
              , l = Math.random();
            if (a.useCpu && (t[4 * s + 0 + 2 * a.numParticlesPot * 4] = r,
            t[4 * s + 1 + 2 * a.numParticlesPot * 4] = o,
            t[4 * s + 2 + 2 * a.numParticlesPot * 4] = h),
            Mo.x = r - .5,
            Mo.y = o - .5,
            Mo.z = h - .5,
            0 === a.emitterShape) {
                var c = Math.max(Math.abs(Mo.x), Math.max(Math.abs(Mo.y), Math.abs(Mo.z)))
                  , u = c + (.5 - c) * i[0]
                  , d = c + (.5 - c) * i[1]
                  , f = c + (.5 - c) * i[2];
                Mo.x = u * (c === Math.abs(Mo.x) ? Math.sign(Mo.x) : 2 * Mo.x),
                Mo.y = d * (c === Math.abs(Mo.y) ? Math.sign(Mo.y) : 2 * Mo.y),
                Mo.z = f * (c === Math.abs(Mo.z) ? Math.sign(Mo.z) : 2 * Mo.z),
                a.localSpace ? wo.copy(e.transformPoint(Mo)) : wo.copy(n).add(e.transformPoint(Mo))
            } else {
                Mo.normalize();
                var p = 0 === a.emitterRadius ? 0 : a.emitterRadiusInner / a.emitterRadius
                  , m = l * (1 - p) + p;
                a.localSpace ? wo.copy(Mo.mulScalar(m * a.emitterRadius)) : wo.copy(n).add(Mo.mulScalar(m * a.emitterRadius))
            }
            var _, g, v, y, x, b = -it.lerp(a.rate, a.rate2, r) * s;
            if (a.pack8) {
                var S = (wo.x - a.worldBounds.center.x) / a.worldBoundsSize.x + .5
                  , T = (wo.y - a.worldBounds.center.y) / a.worldBoundsSize.y + .5
                  , w = (wo.z - a.worldBounds.center.z) / a.worldBoundsSize.z + .5
                  , M = it.lerp(a.startAngle * it.DEG_TO_RAD, a.startAngle2 * it.DEG_TO_RAD, r);
                M = M % (2 * Math.PI) / (2 * Math.PI);
                var A = zo(S);
                t[4 * s] = A[0],
                t[4 * s + 1] = A[1];
                var C = zo(T);
                t[4 * s + 2] = C[0],
                t[4 * s + 3] = C[1];
                var E = zo(w);
                t[4 * s + 0 + 4 * a.numParticlesPot] = E[0],
                t[4 * s + 1 + 4 * a.numParticlesPot] = E[1];
                var P = zo(M);
                t[4 * s + 2 + 4 * a.numParticlesPot] = P[0],
                t[4 * s + 3 + 4 * a.numParticlesPot] = P[1];
                t[4 * s + 3 + 4 * a.numParticlesPot * 2] = 1;
                var R = Math.max(a.lifetime, (a.numParticles - 1) * Math.max(a.rate, a.rate2))
                  , I = a.lifetime + 1
                  , L = (g = Bo(_ = b = (b + R) / (R + I)),
                v = Bo(255 * _),
                y = Bo(65025 * _),
                x = Bo(160581375 * _),
                [g -= v / 255, v -= y / 255, y -= x / 255, x -= x / 255]);
                t[4 * s + 0 + 4 * a.numParticlesPot * 3] = L[0],
                t[4 * s + 1 + 4 * a.numParticlesPot * 3] = L[1],
                t[4 * s + 2 + 4 * a.numParticlesPot * 3] = L[2],
                t[4 * s + 3 + 4 * a.numParticlesPot * 3] = L[3]
            } else
                t[4 * s] = wo.x,
                t[4 * s + 1] = wo.y,
                t[4 * s + 2] = wo.z,
                t[4 * s + 3] = it.lerp(a.startAngle * it.DEG_TO_RAD, a.startAngle2 * it.DEG_TO_RAD, r),
                t[4 * s + 3 + 4 * a.numParticlesPot] = b
        }
        ,
        e.update = function(t, e, i, n, s, a, r, o) {
            var h, l, c, u = this._emitter;
            if (u.meshInstance.node) {
                for (var d = u.meshInstance.node.worldTransform, f = 0; f < 12; f++)
                    So.data[f] = d.data[f];
                To.copy(So),
                To.invert(),
                Yr = u.meshInstance.node.localScale,
                bo = Math.max(Math.max(Yr.x, Yr.y), Yr.z)
            }
            a = null === u.meshInstance.node || u.localSpace ? lt.ZERO : u.meshInstance.node.getPosition();
            for (var p, m, _, g, v, y, x, b, S = u.camera ? u.camera._node.getPosition() : lt.ZERO, T = u.useMesh ? 17 : 15, w = u.precision - 1, M = 0; M < u.numParticles; M++) {
                var A = Math.floor(u.vbCPU[M * u.numParticleVerts * (u.useMesh ? 6 : 4) + 3])
                  , C = i[4 * A + 0 + 2 * u.numParticlesPot * 4];
                Ao.x = C,
                Ao.y = i[4 * A + 1 + 2 * u.numParticlesPot * 4],
                Ao.z = i[4 * A + 2 + 2 * u.numParticlesPot * 4];
                var E = u.rate + (u.rate2 - u.rate) * C
                  , P = u.lifetime
                  , R = i[4 * A + 3 + 4 * u.numParticlesPot] + r
                  , I = No(R / P)
                  , L = 0
                  , D = 0;
                (R - r <= 0 || R >= P) && this.calcSpawnPosition(i, n, s, a, A);
                var k = R > 0 && R < P;
                k && (c = I * w,
                p = Math.floor(c),
                m = Math.ceil(c),
                c %= 1,
                _ = (h = u.qRotSpeed[p]) + ((l = u.qRotSpeed[m]) - h) * c,
                g = (h = u.qRotSpeed2[p]) + ((l = u.qRotSpeed2[m]) - h) * c,
                L = (h = u.qScale[p]) + ((l = u.qScale[m]) - h) * c,
                v = (h = u.qScale2[p]) + ((l = u.qScale2[m]) - h) * c,
                y = (h = u.qAlpha[p]) + ((l = u.qAlpha[m]) - h) * c,
                x = (h = u.qAlpha2[p]) + ((l = u.qAlpha2[m]) - h) * c,
                b = (h = u.qRadialSpeed[p]) + ((l = u.qRadialSpeed[m]) - h) * c,
                b += 100 * C % 1 * ((h = u.qRadialSpeed2[p]) + ((l = u.qRadialSpeed2[m]) - h) * c - b),
                Co.x = i[4 * A],
                Co.y = i[4 * A + 1],
                Co.z = i[4 * A + 2],
                u.localSpace ? Lo.copy(Co) : Lo.copy(Co).sub(a),
                Lo.normalize().mulScalar(b),
                p *= 3,
                m *= 3,
                h = u.qLocalVelocity[p],
                l = u.qLocalVelocity[m],
                Po.x = h + (l - h) * c,
                h = u.qLocalVelocity[p + 1],
                l = u.qLocalVelocity[m + 1],
                Po.y = h + (l - h) * c,
                h = u.qLocalVelocity[p + 2],
                l = u.qLocalVelocity[m + 2],
                Po.z = h + (l - h) * c,
                h = u.qLocalVelocity2[p],
                l = u.qLocalVelocity2[m],
                Io.x = h + (l - h) * c,
                h = u.qLocalVelocity2[p + 1],
                l = u.qLocalVelocity2[m + 1],
                Io.y = h + (l - h) * c,
                h = u.qLocalVelocity2[p + 2],
                l = u.qLocalVelocity2[m + 2],
                Io.z = h + (l - h) * c,
                h = u.qVelocity[p],
                l = u.qVelocity[m],
                Eo.x = h + (l - h) * c,
                h = u.qVelocity[p + 1],
                l = u.qVelocity[m + 1],
                Eo.y = h + (l - h) * c,
                h = u.qVelocity[p + 2],
                l = u.qVelocity[m + 2],
                Eo.z = h + (l - h) * c,
                h = u.qVelocity2[p],
                l = u.qVelocity2[m],
                Ro.x = h + (l - h) * c,
                h = u.qVelocity2[p + 1],
                l = u.qVelocity2[m + 1],
                Ro.y = h + (l - h) * c,
                h = u.qVelocity2[p + 2],
                l = u.qVelocity2[m + 2],
                Ro.z = h + (l - h) * c,
                Po.x += (Io.x - Po.x) * Ao.x,
                Po.y += (Io.y - Po.y) * Ao.y,
                Po.z += (Io.z - Po.z) * Ao.z,
                u.initialVelocity > 0 && (1 === u.emitterShape ? (Mo.copy(Ao).mulScalar(2).sub(lt.ONE).normalize(),
                Po.add(Mo.mulScalar(u.initialVelocity))) : Po.add(lt.FORWARD.mulScalar(u.initialVelocity))),
                Eo.x += (Ro.x - Eo.x) * Ao.x,
                Eo.y += (Ro.y - Eo.y) * Ao.y,
                Eo.z += (Ro.z - Eo.z) * Ao.z,
                _ += (g - _) * Ao.y,
                L = (L + 1e4 * C % 1 * (v - L)) * bo,
                D = 1e3 * C % 1 * (x - y),
                u.meshInstance.node && (u.localSpace ? (Po.x /= Yr.x,
                Po.y /= Yr.y,
                Po.z /= Yr.z) : So.transformPoint(Po, Po)),
                u.localSpace ? (To.transformPoint(Eo, Eo),
                Po.add(Eo).add(Lo)) : (Po.add(Eo.mul(Yr)),
                Po.add(Lo.mul(Yr))),
                Oo.copy(Po),
                Do.copy(Co).add(Po.mulScalar(r)),
                ko.copy(Do),
                i[4 * A] = ko.x,
                i[4 * A + 1] = ko.y,
                i[4 * A + 2] = ko.z,
                i[4 * A + 3] += _ * r,
                u.wrap && u.wrapBounds && (u.localSpace || ko.sub(a),
                ko.x = Uo(ko.x, u.wrapBounds.x) - .5 * u.wrapBounds.x,
                ko.y = Uo(ko.y, u.wrapBounds.y) - .5 * u.wrapBounds.y,
                ko.z = Uo(ko.z, u.wrapBounds.z) - .5 * u.wrapBounds.z,
                u.localSpace || ko.add(a)),
                u.sort > 0 && (1 === u.sort ? (Fo.copy(ko).sub(S),
                u.particleDistance[A] = -(Fo.x * Fo.x + Fo.y * Fo.y + Fo.z * Fo.z)) : 2 === u.sort ? u.particleDistance[A] = R : 3 === u.sort && (u.particleDistance[A] = -R))),
                o ? R < 0 && (i[4 * A + 3 + 2 * u.numParticlesPot * 4] = -1) : (R >= P && (R -= Math.max(P, (u.numParticles - 1) * E),
                i[4 * A + 3 + 2 * u.numParticlesPot * 4] = u.loop ? 1 : -1),
                R < 0 && u.loop && (i[4 * A + 3 + 2 * u.numParticlesPot * 4] = 1)),
                i[4 * A + 3 + 2 * u.numParticlesPot * 4] < 0 && (k = !1),
                i[4 * A + 3 + 4 * u.numParticlesPot] = R;
                for (var O = 0; O < u.numParticleVerts; O++) {
                    var F = (M * u.numParticleVerts + O) * (u.useMesh ? 6 : 4)
                      , B = u.vbCPU[F]
                      , N = u.vbCPU[F + 1]
                      , U = u.vbCPU[F + 2];
                    k || (B = N = U = 0);
                    var z = M * u.numParticleVerts * T + O * T;
                    t[z] = ko.x,
                    t[z + 1] = ko.y,
                    t[z + 2] = ko.z,
                    t[z + 3] = I,
                    t[z + 4] = u.alignToMotion ? 0 : i[4 * A + 3],
                    t[z + 5] = L,
                    t[z + 6] = D,
                    t[z + 7] = Oo.x,
                    t[z + 8] = B,
                    t[z + 9] = N,
                    t[z + 10] = U,
                    t[z + 11] = Oo.y,
                    t[z + 12] = A,
                    t[z + 13] = Oo.z,
                    t[z + 14] = u.vbCPU[F + 3],
                    u.useMesh && (t[z + 15] = u.vbCPU[F + 4],
                    t[z + 16] = u.vbCPU[F + 5])
                }
            }
            if (u.sort > 0 && u.camera) {
                for (var V = u.useMesh ? 6 : 4, G = u.particleDistance, W = 0; W < u.numParticles; W++)
                    e[W][0] = W,
                    e[W][1] = G[Math.floor(u.vbCPU[W * u.numParticleVerts * V + 3])];
                u.vbOld.set(u.vbCPU),
                e.sort((function(t, e) {
                    return t[1] - e[1]
                }
                ));
                for (var H = 0; H < u.numParticles; H++)
                    for (var X = e[H][0] * u.numParticleVerts * V, j = H * u.numParticleVerts * V, q = 0; q < u.numParticleVerts * V; q++)
                        u.vbCPU[j + q] = u.vbOld[X + q]
            }
        }
        ,
        t
    }()
      , Go = new ct
      , Wo = new ct
      , Ho = new ct
      , Xo = function() {
        function t(t, e) {
            this._emitter = t,
            this.frameRandomUniform = new Float32Array(3),
            this.emitterPosUniform = new Float32Array(3),
            this.emitterScaleUniform = new Float32Array([1, 1, 1]),
            this.worldBoundsMulUniform = new Float32Array(3),
            this.worldBoundsAddUniform = new Float32Array(3),
            this.inBoundsSizeUniform = new Float32Array(3),
            this.inBoundsCenterUniform = new Float32Array(3),
            this.constantParticleTexIN = e.scope.resolve("particleTexIN"),
            this.constantParticleTexOUT = e.scope.resolve("particleTexOUT"),
            this.constantEmitterPos = e.scope.resolve("emitterPos"),
            this.constantEmitterScale = e.scope.resolve("emitterScale"),
            this.constantSpawnBounds = e.scope.resolve("spawnBounds"),
            this.constantSpawnPosInnerRatio = e.scope.resolve("spawnPosInnerRatio"),
            this.constantSpawnBoundsSphere = e.scope.resolve("spawnBoundsSphere"),
            this.constantSpawnBoundsSphereInnerRatio = e.scope.resolve("spawnBoundsSphereInnerRatio"),
            this.constantInitialVelocity = e.scope.resolve("initialVelocity"),
            this.constantFrameRandom = e.scope.resolve("frameRandom"),
            this.constantDelta = e.scope.resolve("delta"),
            this.constantRate = e.scope.resolve("rate"),
            this.constantRateDiv = e.scope.resolve("rateDiv"),
            this.constantLifetime = e.scope.resolve("lifetime"),
            this.constantGraphSampleSize = e.scope.resolve("graphSampleSize"),
            this.constantGraphNumSamples = e.scope.resolve("graphNumSamples"),
            this.constantInternalTex0 = e.scope.resolve("internalTex0"),
            this.constantInternalTex1 = e.scope.resolve("internalTex1"),
            this.constantInternalTex2 = e.scope.resolve("internalTex2"),
            this.constantInternalTex3 = e.scope.resolve("internalTex3"),
            this.constantEmitterMatrix = e.scope.resolve("emitterMatrix"),
            this.constantEmitterMatrixInv = e.scope.resolve("emitterMatrixInv"),
            this.constantNumParticles = e.scope.resolve("numParticles"),
            this.constantNumParticlesPot = e.scope.resolve("numParticlesPot"),
            this.constantLocalVelocityDivMult = e.scope.resolve("localVelocityDivMult"),
            this.constantVelocityDivMult = e.scope.resolve("velocityDivMult"),
            this.constantRotSpeedDivMult = e.scope.resolve("rotSpeedDivMult"),
            this.constantSeed = e.scope.resolve("seed"),
            this.constantStartAngle = e.scope.resolve("startAngle"),
            this.constantStartAngle2 = e.scope.resolve("startAngle2"),
            this.constantOutBoundsMul = e.scope.resolve("outBoundsMul"),
            this.constantOutBoundsAdd = e.scope.resolve("outBoundsAdd"),
            this.constantInBoundsSize = e.scope.resolve("inBoundsSize"),
            this.constantInBoundsCenter = e.scope.resolve("inBoundsCenter"),
            this.constantMaxVel = e.scope.resolve("maxVel"),
            this.constantFaceTangent = e.scope.resolve("faceTangent"),
            this.constantFaceBinorm = e.scope.resolve("faceBinorm")
        }
        var e = t.prototype;
        return e._setInputBounds = function() {
            this.inBoundsSizeUniform[0] = this._emitter.prevWorldBoundsSize.x,
            this.inBoundsSizeUniform[1] = this._emitter.prevWorldBoundsSize.y,
            this.inBoundsSizeUniform[2] = this._emitter.prevWorldBoundsSize.z,
            this.constantInBoundsSize.setValue(this.inBoundsSizeUniform),
            this.inBoundsCenterUniform[0] = this._emitter.prevWorldBoundsCenter.x,
            this.inBoundsCenterUniform[1] = this._emitter.prevWorldBoundsCenter.y,
            this.inBoundsCenterUniform[2] = this._emitter.prevWorldBoundsCenter.z,
            this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform)
        }
        ,
        e.randomize = function() {
            this.frameRandomUniform[0] = Math.random(),
            this.frameRandomUniform[1] = Math.random(),
            this.frameRandomUniform[2] = Math.random()
        }
        ,
        e.update = function(t, e, i, n, s) {
            var a = this._emitter;
            t.setBlending(!1),
            t.setColorWrite(!0, !0, !0, !0),
            t.setCullMode(0),
            t.setDepthTest(!1),
            t.setDepthWrite(!1),
            this.randomize(),
            this.constantGraphSampleSize.setValue(1 / a.precision),
            this.constantGraphNumSamples.setValue(a.precision),
            this.constantNumParticles.setValue(a.numParticles),
            this.constantNumParticlesPot.setValue(a.numParticlesPot),
            this.constantInternalTex0.setValue(a.internalTex0),
            this.constantInternalTex1.setValue(a.internalTex1),
            this.constantInternalTex2.setValue(a.internalTex2),
            this.constantInternalTex3.setValue(a.internalTex3);
            var r = a.meshInstance.node
              , o = null === r ? lt.ONE : r.localScale;
            if (a.pack8) {
                this.worldBoundsMulUniform[0] = a.worldBoundsMul.x,
                this.worldBoundsMulUniform[1] = a.worldBoundsMul.y,
                this.worldBoundsMulUniform[2] = a.worldBoundsMul.z,
                this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform),
                this.worldBoundsAddUniform[0] = a.worldBoundsAdd.x,
                this.worldBoundsAddUniform[1] = a.worldBoundsAdd.y,
                this.worldBoundsAddUniform[2] = a.worldBoundsAdd.z,
                this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform),
                this._setInputBounds();
                var h = a.maxVel * Math.max(Math.max(o.x, o.y), o.z);
                h = Math.max(h, 1),
                this.constantMaxVel.setValue(h)
            }
            var l = null === r || a.localSpace ? lt.ZERO : r.getPosition()
              , c = null === r ? vt.IDENTITY : r.getWorldTransform();
            0 === a.emitterShape ? (Go.setFromMat4(e),
            this.constantSpawnBounds.setValue(Go.data),
            this.constantSpawnPosInnerRatio.setValue(i)) : (this.constantSpawnBoundsSphere.setValue(a.emitterRadius),
            this.constantSpawnBoundsSphereInnerRatio.setValue(0 === a.emitterRadius ? 0 : a.emitterRadiusInner / a.emitterRadius)),
            this.constantInitialVelocity.setValue(a.initialVelocity),
            Wo.setFromMat4(c),
            c.invertTo3x3(Ho),
            this.emitterPosUniform[0] = l.x,
            this.emitterPosUniform[1] = l.y,
            this.emitterPosUniform[2] = l.z,
            this.constantEmitterPos.setValue(this.emitterPosUniform),
            this.constantFrameRandom.setValue(this.frameRandomUniform),
            this.constantDelta.setValue(n),
            this.constantRate.setValue(a.rate),
            this.constantRateDiv.setValue(a.rate2 - a.rate),
            this.constantStartAngle.setValue(a.startAngle * it.DEG_TO_RAD),
            this.constantStartAngle2.setValue(a.startAngle2 * it.DEG_TO_RAD),
            this.constantSeed.setValue(a.seed),
            this.constantLifetime.setValue(a.lifetime),
            this.emitterScaleUniform[0] = o.x,
            this.emitterScaleUniform[1] = o.y,
            this.emitterScaleUniform[2] = o.z,
            this.constantEmitterScale.setValue(this.emitterScaleUniform),
            this.constantEmitterMatrix.setValue(Wo.data),
            this.constantEmitterMatrixInv.setValue(Ho.data),
            this.constantLocalVelocityDivMult.setValue(a.localVelocityUMax),
            this.constantVelocityDivMult.setValue(a.velocityUMax),
            this.constantRotSpeedDivMult.setValue(a.rotSpeedUMax[0]);
            var u = a.swapTex ? a.particleTexOUT : a.particleTexIN;
            u = a.beenReset ? a.particleTexStart : u;
            var d = a.swapTex ? a.particleTexIN : a.particleTexOUT;
            this.constantParticleTexIN.setValue(u),
            ei(t, a.swapTex ? a.rtParticleTexIN : a.rtParticleTexOUT, s ? a.shaderParticleUpdateOnStop : a.loop ? a.shaderParticleUpdateRespawn : a.shaderParticleUpdateNoRespawn),
            a.material.setParameter("particleTexOUT", u),
            a.material.setParameter("particleTexIN", d),
            a.beenReset = !1,
            a.swapTex = !a.swapTex,
            t.setDepthTest(!0),
            t.setDepthWrite(!0),
            a.prevWorldBoundsSize.copy(a.worldBoundsSize),
            a.prevWorldBoundsCenter.copy(a.worldBounds.center),
            a.pack8 && this._setInputBounds()
        }
        ,
        t
    }()
      , jo = [[-1, -1], [1, -1], [1, 1], [-1, 1]];
    function qo(t, e, i, n, s, a, r) {
        void 0 === s && (s = Qt);
        var o = 0;
        r && 7 === s && (o = 1);
        var h = new Mi(t,{
            width: e,
            height: i,
            format: s,
            cubemap: !1,
            mipmaps: !1,
            minFilter: o,
            magFilter: o,
            addressU: 1,
            addressV: 1
        });
        h.name = "PSTexture";
        var l = h.lock();
        if (7 === s) {
            for (var c = new Uint8Array(n.length), u = 0; u < n.length; u++)
                c[u] = n[u] * a * 255;
            n = c
        }
        return l.set(n),
        h.unlock(),
        h
    }
    function Yo(t) {
        return Math.max(Math.min(t, 1), 0)
    }
    var Ko, Zo, $o = new ot([0, 0, 1, 0]), Qo = new ot([0, 1, 1, 1]), Jo = new ht([0, 0, 1, 0],[0, 0, 1, 0],[0, 0, 1, 0]), th = new ht([0, 1, 1, 1],[0, 1, 1, 1],[0, 1, 1, 1]), eh = 2, ih = new Float32Array(3), nh = new vt, sh = new lt, ah = new lt, rh = new lt;
    function oh(t, e) {
        void 0 !== Zo[t] && null !== Zo[t] ? Ko[t] = Zo[t] : Ko[t] = e
    }
    function hh(t, e, i) {
        return (255 * t << 16 | 255 * e << 8 | 255 * i) / (1 << 24)
    }
    function lh(t, e) {
        for (var i = t.length / 3, n = new Array(4 * i), s = 0; s < i; s++)
            n[4 * s] = t[3 * s],
            n[4 * s + 1] = t[3 * s + 1],
            n[4 * s + 2] = t[3 * s + 2],
            n[4 * s + 3] = hh(e[3 * s], e[3 * s + 1], e[3 * s + 2]);
        return n
    }
    function ch(t, e) {
        for (var i = e.length, n = t.length / i, s = 0; s < n; s++)
            for (var a = 0; a < i; a++) {
                var r = Math.abs(t[s * i + a]);
                e[a] = Math.max(e[a], r)
            }
    }
    function uh(t, e, i) {
        var n = function(t, e) {
            for (var i = new Float32Array(t.length), n = 0; n < t.length; n++)
                i[n] = t[n] - e[n];
            return i
        }(e, t);
        return ch(n, i),
        function(t, e) {
            for (var i = e.length, n = t.length / i, s = 0; s < n; s++)
                for (var a = 0; a < i; a++)
                    t[s * i + a] /= 0 === e[a] ? 1 : e[a],
                    t[s * i + a] *= .5,
                    t[s * i + a] += .5
        }(n, i),
        n
    }
    var dh = function() {
        function t(e, i) {
            this.graphicsDevice = e;
            var n = e;
            this.precision = 32,
            this._addTimeTime = 0,
            t.staticInit(n),
            Ko = this,
            Zo = i,
            oh("numParticles", 1),
            this.numParticles > e.maxTextureSize && (this.numParticles = e.maxTextureSize),
            oh("rate", 1),
            oh("rate2", this.rate),
            oh("lifetime", 50),
            oh("emitterExtents", new lt(0,0,0)),
            oh("emitterExtentsInner", new lt(0,0,0)),
            oh("emitterRadius", 0),
            oh("emitterRadiusInner", 0),
            oh("emitterShape", 0),
            oh("initialVelocity", 1),
            oh("wrap", !1),
            oh("localSpace", !1),
            oh("screenSpace", !1),
            oh("wrapBounds", null),
            oh("colorMap", t.DEFAULT_PARAM_TEXTURE),
            oh("normalMap", null),
            oh("loop", !0),
            oh("preWarm", !1),
            oh("sort", 0),
            oh("mode", 0),
            oh("scene", null),
            oh("lighting", !1),
            oh("halfLambert", !1),
            oh("intensity", 1),
            oh("stretch", 0),
            oh("alignToMotion", !1),
            oh("depthSoftening", 0),
            oh("mesh", null),
            oh("particleNormal", new lt(0,1,0)),
            oh("orientation", 0),
            oh("depthWrite", !1),
            oh("noFog", !1),
            oh("blendType", 2),
            oh("node", null),
            oh("startAngle", 0),
            oh("startAngle2", this.startAngle),
            oh("animTilesX", 1),
            oh("animTilesY", 1),
            oh("animStartFrame", 0),
            oh("animNumFrames", 1),
            oh("animNumAnimations", 1),
            oh("animIndex", 0),
            oh("randomizeAnimIndex", !1),
            oh("animSpeed", 1),
            oh("animLoop", !0),
            this._gpuUpdater = new Xo(this,n),
            this._cpuUpdater = new Vo(this),
            this.constantLightCube = n.scope.resolve("lightCube[0]"),
            this.emitterPosUniform = new Float32Array(3),
            this.wrapBoundsUniform = new Float32Array(3),
            this.emitterScaleUniform = new Float32Array([1, 1, 1]),
            oh("colorGraph", th),
            oh("colorGraph2", this.colorGraph),
            oh("scaleGraph", Qo),
            oh("scaleGraph2", this.scaleGraph),
            oh("alphaGraph", Qo),
            oh("alphaGraph2", this.alphaGraph),
            oh("localVelocityGraph", Jo),
            oh("localVelocityGraph2", this.localVelocityGraph),
            oh("velocityGraph", Jo),
            oh("velocityGraph2", this.velocityGraph),
            oh("rotationSpeedGraph", $o),
            oh("rotationSpeedGraph2", this.rotationSpeedGraph),
            oh("radialSpeedGraph", $o),
            oh("radialSpeedGraph2", this.radialSpeedGraph),
            this.lightCube = new Float32Array(18),
            this.lightCubeDir = new Array(6),
            this.lightCubeDir[0] = new lt(-1,0,0),
            this.lightCubeDir[1] = new lt(1,0,0),
            this.lightCubeDir[2] = new lt(0,-1,0),
            this.lightCubeDir[3] = new lt(0,1,0),
            this.lightCubeDir[4] = new lt(0,0,-1),
            this.lightCubeDir[5] = new lt(0,0,1),
            this.animTilesParams = new Float32Array(2),
            this.animParams = new Float32Array(4),
            this.animIndexParams = new Float32Array(2),
            this.internalTex0 = null,
            this.internalTex1 = null,
            this.internalTex2 = null,
            this.colorParam = null,
            this.vbToSort = null,
            this.vbOld = null,
            this.particleDistance = null,
            this.camera = null,
            this.swapTex = !1,
            this.useMesh = !0,
            this.useCpu = !1,
            this.pack8 = !0,
            this.localBounds = new Mt,
            this.worldBoundsNoTrail = new Mt,
            this.worldBoundsTrail = [new Mt, new Mt],
            this.worldBounds = new Mt,
            this.worldBoundsSize = new lt,
            this.prevWorldBoundsSize = new lt,
            this.prevWorldBoundsCenter = new lt,
            this.prevEmitterExtents = this.emitterExtents,
            this.prevEmitterRadius = this.emitterRadius,
            this.worldBoundsMul = new lt,
            this.worldBoundsAdd = new lt,
            this.timeToSwitchBounds = 0,
            this.shaderParticleUpdateRespawn = null,
            this.shaderParticleUpdateNoRespawn = null,
            this.shaderParticleUpdateOnStop = null,
            this.numParticleVerts = 0,
            this.numParticleIndices = 0,
            this.material = null,
            this.meshInstance = null,
            this.drawOrder = 0,
            this.seed = Math.random(),
            this.fixedTimeStep = 1 / 60,
            this.maxSubSteps = 10,
            this.simTime = 0,
            this.simTimeTotal = 0,
            this.beenReset = !1,
            this._layer = null,
            this.rebuild()
        }
        t.staticInit = function(e) {
            if (!t.DEFAULT_PARAM_TEXTURE) {
                for (var i = 16, n = new Float32Array(1024), s = 0; s < i; s++)
                    for (var a = 0; a < i; a++) {
                        var r = a + 1 - 8.5
                          , o = s + 1 - 8.5
                          , h = Yo(1 - Yo(Math.sqrt(r * r + o * o) / i) - .5)
                          , l = s * i + a;
                        n[4 * l] = 1,
                        n[4 * l + 1] = 1,
                        n[4 * l + 2] = 1,
                        n[4 * l + 3] = h
                    }
                t.DEFAULT_PARAM_TEXTURE = qo(e, i, i, n, 7, 1, !0),
                t.DEFAULT_PARAM_TEXTURE.minFilter = 1,
                t.DEFAULT_PARAM_TEXTURE.magFilter = 1
            }
        }
        ,
        t.staticDestroy = function() {
            t.DEFAULT_PARAM_TEXTURE && (t.DEFAULT_PARAM_TEXTURE.destroy(),
            t.DEFAULT_PARAM_TEXTURE = null)
        }
        ;
        var e = t.prototype;
        return e.onChangeCamera = function() {
            this.regenShader(),
            this.resetMaterial()
        }
        ,
        e.calculateBoundsMad = function() {
            this.worldBoundsMul.x = 1 / this.worldBoundsSize.x,
            this.worldBoundsMul.y = 1 / this.worldBoundsSize.y,
            this.worldBoundsMul.z = 1 / this.worldBoundsSize.z,
            this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).mulScalar(-1),
            this.worldBoundsAdd.x += .5,
            this.worldBoundsAdd.y += .5,
            this.worldBoundsAdd.z += .5
        }
        ,
        e.calculateWorldBounds = function() {
            if (this.node) {
                if (this.prevWorldBoundsSize.copy(this.worldBoundsSize),
                this.prevWorldBoundsCenter.copy(this.worldBounds.center),
                !this.useCpu) {
                    (0 === this.emitterShape ? !this.emitterExtents.equals(this.prevEmitterExtents) : !(this.emitterRadius === this.prevEmitterRadius)) && this.calculateLocalBounds()
                }
                var t = this.node.getWorldTransform();
                this.localSpace ? this.worldBoundsNoTrail.copy(this.localBounds) : this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, t),
                this.worldBoundsTrail[0].add(this.worldBoundsNoTrail),
                this.worldBoundsTrail[1].add(this.worldBoundsNoTrail);
                var e = this.simTimeTotal;
                e >= this.timeToSwitchBounds && (this.worldBoundsTrail[0].copy(this.worldBoundsTrail[1]),
                this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),
                this.timeToSwitchBounds = e + this.lifetime),
                this.worldBounds.copy(this.worldBoundsTrail[0]),
                this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),
                this.localSpace ? (this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds, t),
                this.meshInstance.mesh.aabb.setFromTransformedAabb(this.worldBounds, t)) : (this.meshInstance.aabb.copy(this.worldBounds),
                this.meshInstance.mesh.aabb.copy(this.worldBounds)),
                this.meshInstance._aabbVer = 1 - this.meshInstance._aabbVer,
                this.pack8 && this.calculateBoundsMad()
            }
        }
        ,
        e.resetWorldBounds = function() {
            this.node && (this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, this.localSpace ? vt.IDENTITY : this.node.getWorldTransform()),
            this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail),
            this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),
            this.worldBounds.copy(this.worldBoundsTrail[0]),
            this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),
            this.prevWorldBoundsSize.copy(this.worldBoundsSize),
            this.prevWorldBoundsCenter.copy(this.worldBounds.center),
            this.simTimeTotal = 0,
            this.timeToSwitchBounds = 0)
        }
        ,
        e.calculateLocalBounds = function() {
            for (var t, e, i, n = Number.MAX_VALUE, s = Number.MAX_VALUE, a = Number.MAX_VALUE, r = -Number.MAX_VALUE, o = -Number.MAX_VALUE, h = -Number.MAX_VALUE, l = 0, c = 0, u = this.lifetime / this.precision, d = [this.qVelocity, this.qVelocity2], f = [this.qLocalVelocity, this.qLocalVelocity2], p = [0, 0], m = [0, 0], _ = [0, 0], g = [0, 0], v = [0, 0], y = 0; y < this.precision + 1; y++) {
                for (var x = Math.min(y, this.precision - 1), b = 0; b < 2; b++)
                    t = f[b][3 * x + 0] * u + p[b],
                    e = f[b][3 * x + 1] * u + m[b],
                    i = f[b][3 * x + 2] * u + _[b],
                    n = Math.min(t, n),
                    s = Math.min(e, s),
                    a = Math.min(i, a),
                    r = Math.max(t, r),
                    o = Math.max(e, o),
                    h = Math.max(i, h),
                    p[b] = t,
                    m[b] = e,
                    _[b] = i;
                for (var S = 0; S < 2; S++)
                    v[S] += u * Math.sqrt(d[S][3 * x + 0] * d[S][3 * x + 0] + d[S][3 * x + 1] * d[S][3 * x + 1] + d[S][3 * x + 2] * d[S][3 * x + 2]);
                g[0] += this.qRadialSpeed[x] * u,
                g[1] += this.qRadialSpeed2[x] * u,
                l = Math.max(l, Math.max(Math.abs(g[0]), Math.abs(g[1]))),
                c = Math.max(c, this.qScale[x])
            }
            0 === this.emitterShape ? (t = .5 * this.emitterExtents.x,
            e = .5 * this.emitterExtents.y,
            i = .5 * this.emitterExtents.z) : (t = this.emitterRadius,
            e = this.emitterRadius,
            i = this.emitterRadius);
            var T = Math.max(v[0], v[1]);
            ah.x = n - c - t - l - T,
            ah.y = s - c - e - l - T,
            ah.z = a - c - i - l - T,
            rh.x = r + c + t + l + T,
            rh.y = o + c + e + l + T,
            rh.z = h + c + i + l + T,
            this.localBounds.setMinMax(ah, rh)
        }
        ,
        e.rebuild = function() {
            var e = this.graphicsDevice;
            (null === this.colorMap && (this.colorMap = t.DEFAULT_PARAM_TEXTURE),
            this.spawnBounds = 0 === this.emitterShape ? this.emitterExtents : this.emitterRadius,
            this.useCpu = this.useCpu || this.sort > 0 || e.maxVertexTextures <= 1 || e.fragmentUniformsCount < 64 || e.forceCpuParticles || !e.extTextureFloat,
            this._destroyResources(),
            this.pack8 = (this.pack8 || !e.textureFloatRenderable) && !this.useCpu,
            eh = this.useCpu || this.pack8 ? 4 : 2,
            this.useMesh = !1,
            this.mesh) && (this.numParticles * this.mesh.vertexBuffer.numVertices > 65535 ? console.warn("WARNING: particle system can't render mesh particles because numParticles * numVertices is more than 65k. Reverting to quad particles.") : this.useMesh = !0);
            this.numParticlesPot = it.nextPowerOfTwo(this.numParticles),
            this.rebuildGraphs(),
            this.calculateLocalBounds(),
            this.resetWorldBounds(),
            this.node && (this.worldBounds.setFromTransformedAabb(this.localBounds, this.localSpace ? vt.IDENTITY : this.node.getWorldTransform()),
            this.worldBoundsTrail[0].copy(this.worldBounds),
            this.worldBoundsTrail[1].copy(this.worldBounds),
            this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),
            this.prevWorldBoundsSize.copy(this.worldBoundsSize),
            this.prevWorldBoundsCenter.copy(this.worldBounds.center),
            this.pack8 && this.calculateBoundsMad()),
            this.vbToSort = new Array(this.numParticles);
            for (var i = 0; i < this.numParticles; i++)
                this.vbToSort[i] = [0, 0];
            this.particleDistance = new Float32Array(this.numParticles),
            this._gpuUpdater.randomize(),
            this.particleTex = new Float32Array(this.numParticlesPot * eh * 4);
            var n = null === this.node || this.localSpace ? lt.ZERO : this.node.getPosition();
            0 === this.emitterShape && (null === this.node || this.localSpace ? nh.setTRS(lt.ZERO, yt.IDENTITY, this.spawnBounds) : nh.setTRS(lt.ZERO, this.node.getRotation(), sh.copy(this.spawnBounds).mul(this.node.localScale)),
            ih[0] = 0 !== this.emitterExtents.x ? this.emitterExtentsInner.x / this.emitterExtents.x : 0,
            ih[1] = 0 !== this.emitterExtents.y ? this.emitterExtentsInner.y / this.emitterExtents.y : 0,
            ih[2] = 0 !== this.emitterExtents.z ? this.emitterExtentsInner.z / this.emitterExtents.z : 0);
            for (var s = 0; s < this.numParticles; s++)
                this._cpuUpdater.calcSpawnPosition(this.particleTex, nh, ih, n, s),
                this.useCpu && (this.particleTex[4 * s + 3 + 2 * this.numParticlesPot * 4] = 1);
            this.particleTexStart = new Float32Array(this.numParticlesPot * eh * 4);
            for (var a = 0; a < this.particleTexStart.length; a++)
                this.particleTexStart[a] = this.particleTex[a];
            this.useCpu || (this.pack8 ? (this.particleTexIN = qo(e, this.numParticlesPot, eh, this.particleTex, 7, 1, !1),
            this.particleTexOUT = qo(e, this.numParticlesPot, eh, this.particleTex, 7, 1, !1),
            this.particleTexStart = qo(e, this.numParticlesPot, eh, this.particleTexStart, 7, 1, !1)) : (this.particleTexIN = qo(e, this.numParticlesPot, eh, this.particleTex),
            this.particleTexOUT = qo(e, this.numParticlesPot, eh, this.particleTex),
            this.particleTexStart = qo(e, this.numParticlesPot, eh, this.particleTexStart)),
            this.rtParticleTexIN = new ms({
                colorBuffer: this.particleTexIN,
                depth: !1
            }),
            this.rtParticleTexOUT = new ms({
                colorBuffer: this.particleTexOUT,
                depth: !1
            }),
            this.swapTex = !1);
            var r = (this.localSpace ? "#define LOCAL_SPACE\n" : "") + ni.particleUpdaterInitPS + (this.pack8 ? ni.particleInputRgba8PS + ni.particleOutputRgba8PS : ni.particleInputFloatPS + ni.particleOutputFloatPS) + (0 === this.emitterShape ? ni.particleUpdaterAABBPS : ni.particleUpdaterSpherePS) + ni.particleUpdaterStartPS
              , o = r + ni.particleUpdaterRespawnPS + ni.particleUpdaterEndPS
              , h = r + ni.particleUpdaterNoRespawnPS + ni.particleUpdaterEndPS
              , l = r + ni.particleUpdaterOnStopPS + ni.particleUpdaterEndPS
              , c = this.emitterShape + "" + this.pack8 + this.localSpace;
            this.shaderParticleUpdateRespawn = mi(e, ni.fullscreenQuadVS, o, "fsQuad0" + c),
            this.shaderParticleUpdateNoRespawn = mi(e, ni.fullscreenQuadVS, h, "fsQuad1" + c),
            this.shaderParticleUpdateOnStop = mi(e, ni.fullscreenQuadVS, l, "fsQuad2" + c),
            this.numParticleVerts = this.useMesh ? this.mesh.vertexBuffer.numVertices : 4,
            this.numParticleIndices = this.useMesh ? this.mesh.indexBuffer[0].numIndices : 6,
            this._allocate(this.numParticles);
            var u = new Ys(e);
            u.vertexBuffer = this.vertexBuffer,
            u.indexBuffer[0] = this.indexBuffer,
            u.primitive[0].type = 4,
            u.primitive[0].base = 0,
            u.primitive[0].count = this.numParticles * this.numParticleIndices,
            u.primitive[0].indexed = !0,
            this.material = new Fn,
            this.material.name = this.node.name,
            this.material.cull = 0,
            this.material.alphaWrite = !1,
            this.material.blend = !0,
            this.material.blendType = this.blendType,
            this.material.depthWrite = this.depthWrite,
            this.material.emitter = this,
            this.regenShader(),
            this.resetMaterial();
            var d = !this.meshInstance || this.meshInstance.visible;
            this.meshInstance = new wa(u,this.material,this.node),
            this.meshInstance.pick = !1,
            this.meshInstance.updateKey(),
            this.meshInstance.cull = !0,
            this.meshInstance._noDepthDrawGl1 = !0,
            this.localSpace ? this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds, this.node.getWorldTransform()) : this.meshInstance.aabb.copy(this.worldBounds),
            this.meshInstance._updateAabb = !1,
            this.meshInstance.visible = d,
            this._initializeTextures(),
            this.resetTime(),
            this.addTime(0, !1),
            this.preWarm && this.prewarm(this.lifetime)
        }
        ,
        e._isAnimated = function() {
            return this.animNumFrames >= 1 && (this.animTilesX > 1 || this.animTilesY > 1) && (this.colorMap && this.colorMap !== t.DEFAULT_PARAM_TEXTURE || this.normalMap)
        }
        ,
        e.rebuildGraphs = function() {
            var t = this.precision
              , e = this.graphicsDevice;
            this.qLocalVelocity = this.localVelocityGraph.quantize(t),
            this.qVelocity = this.velocityGraph.quantize(t),
            this.qColor = this.colorGraph.quantizeClamped(t, 0, 1),
            this.qRotSpeed = this.rotationSpeedGraph.quantize(t),
            this.qScale = this.scaleGraph.quantize(t),
            this.qAlpha = this.alphaGraph.quantize(t),
            this.qRadialSpeed = this.radialSpeedGraph.quantize(t),
            this.qLocalVelocity2 = this.localVelocityGraph2.quantize(t),
            this.qVelocity2 = this.velocityGraph2.quantize(t),
            this.qColor2 = this.colorGraph2.quantizeClamped(t, 0, 1),
            this.qRotSpeed2 = this.rotationSpeedGraph2.quantize(t),
            this.qScale2 = this.scaleGraph2.quantize(t),
            this.qAlpha2 = this.alphaGraph2.quantize(t),
            this.qRadialSpeed2 = this.radialSpeedGraph2.quantize(t);
            for (var i = 0; i < t; i++)
                this.qRotSpeed[i] *= it.DEG_TO_RAD,
                this.qRotSpeed2[i] *= it.DEG_TO_RAD;
            if (this.localVelocityUMax = new Float32Array(3),
            this.velocityUMax = new Float32Array(3),
            this.colorUMax = new Float32Array(3),
            this.rotSpeedUMax = [0],
            this.scaleUMax = [0],
            this.alphaUMax = [0],
            this.radialSpeedUMax = [0],
            this.qLocalVelocityDiv = uh(this.qLocalVelocity, this.qLocalVelocity2, this.localVelocityUMax),
            this.qVelocityDiv = uh(this.qVelocity, this.qVelocity2, this.velocityUMax),
            this.qColorDiv = uh(this.qColor, this.qColor2, this.colorUMax),
            this.qRotSpeedDiv = uh(this.qRotSpeed, this.qRotSpeed2, this.rotSpeedUMax),
            this.qScaleDiv = uh(this.qScale, this.qScale2, this.scaleUMax),
            this.qAlphaDiv = uh(this.qAlpha, this.qAlpha2, this.alphaUMax),
            this.qRadialSpeedDiv = uh(this.qRadialSpeed, this.qRadialSpeed2, this.radialSpeedUMax),
            this.pack8) {
                var n = [0, 0, 0];
                ch(this.qVelocity, n);
                var s = [0, 0, 0];
                ch(this.qVelocity2, s);
                var a = [0, 0, 0];
                ch(this.qLocalVelocity, a);
                var r = [0, 0, 0];
                ch(this.qLocalVelocity2, r);
                var o = [0];
                ch(this.qRadialSpeed, o);
                var h = [0];
                ch(this.qRadialSpeed2, h);
                var l = Math.max(n[0], s[0]);
                l = Math.max(l, n[1]),
                l = Math.max(l, s[1]),
                l = Math.max(l, n[2]),
                l = Math.max(l, s[2]);
                var c = Math.max(a[0], r[0]);
                c = Math.max(c, a[1]),
                c = Math.max(c, r[1]),
                c = Math.max(c, a[2]),
                c = Math.max(c, r[2]);
                var u = Math.max(o[0], h[0]);
                this.maxVel = l + c + u
            }
            this.useCpu || (this.internalTex0 = qo(e, t, 1, lh(this.qLocalVelocity, this.qLocalVelocityDiv)),
            this.internalTex1 = qo(e, t, 1, lh(this.qVelocity, this.qVelocityDiv)),
            this.internalTex2 = qo(e, t, 1, function(t, e, i, n, s) {
                for (var a = new Array(4 * t.length), r = 0; r < t.length; r++)
                    a[4 * r] = t[r],
                    a[4 * r + 1] = e[r],
                    a[4 * r + 2] = 0,
                    a[4 * r + 3] = hh(i[r], n[r], s[r]);
                return a
            }(this.qRotSpeed, this.qScale, this.qScaleDiv, this.qRotSpeedDiv, this.qAlphaDiv)),
            this.internalTex3 = qo(e, t, 1, function(t, e) {
                for (var i = new Array(4 * t.length), n = 0; n < t.length; n++)
                    i[4 * n] = t[n],
                    i[4 * n + 1] = e[n],
                    i[4 * n + 2] = 0,
                    i[4 * n + 3] = 0;
                return i
            }(this.qRadialSpeed, this.qRadialSpeedDiv))),
            this.colorParam = qo(e, t, 1, function(t, e) {
                for (var i = new Array(4 * e.length), n = 0; n < e.length; n++)
                    i[4 * n] = t[3 * n],
                    i[4 * n + 1] = t[3 * n + 1],
                    i[4 * n + 2] = t[3 * n + 2],
                    i[4 * n + 3] = e[n];
                return i
            }(this.qColor, this.qAlpha), 7, 1, !0)
        }
        ,
        e._initializeTextures = function() {
            this.colorMap && (this.material.setParameter("colorMap", this.colorMap),
            this.lighting && this.normalMap && this.material.setParameter("normalMap", this.normalMap))
        }
        ,
        e.regenShader = function() {
            var t = this.graphicsDevice.getProgramLibrary()
              , e = null !== this.normalMap;
            this.normalOption = 0,
            this.lighting && (this.normalOption = e ? 2 : 1),
            this.material.updateShader = function() {
                this.emitter.scene && this.emitter.camera !== this.emitter.scene._activeCamera && (this.emitter.camera = this.emitter.scene._activeCamera,
                this.emitter.onChangeCamera());
                var e = this.emitter.inTools
                  , i = t.getProgram("particle", {
                    useCpu: this.emitter.useCpu,
                    normal: this.emitter.normalOption,
                    halflambert: this.emitter.halfLambert,
                    stretch: this.emitter.stretch,
                    alignToMotion: this.emitter.alignToMotion,
                    soft: this.emitter.depthSoftening,
                    mesh: this.emitter.useMesh,
                    gamma: this.emitter.scene ? this.emitter.scene.gammaCorrection : 0,
                    toneMap: this.emitter.scene ? this.emitter.scene.toneMapping : 0,
                    fog: this.emitter.scene && !this.emitter.noFog ? this.emitter.scene.fog : "none",
                    wrap: this.emitter.wrap && this.emitter.wrapBounds,
                    localSpace: this.emitter.localSpace,
                    screenSpace: !e && this.emitter.screenSpace,
                    blend: this.blendType,
                    animTex: this.emitter._isAnimated(),
                    animTexLoop: this.emitter.animLoop,
                    pack8: this.emitter.pack8,
                    customFace: 0 !== this.emitter.orientation
                });
                this.shader = i
            }
            ,
            this.material.updateShader()
        }
        ,
        e.resetMaterial = function() {
            var t = this.material;
            t.setParameter("stretch", this.stretch),
            this._isAnimated() && (t.setParameter("animTexTilesParams", this.animTilesParams),
            t.setParameter("animTexParams", this.animParams),
            t.setParameter("animTexIndexParams", this.animIndexParams)),
            t.setParameter("colorMult", this.intensity),
            this.useCpu || (t.setParameter("internalTex0", this.internalTex0),
            t.setParameter("internalTex1", this.internalTex1),
            t.setParameter("internalTex2", this.internalTex2),
            t.setParameter("internalTex3", this.internalTex3)),
            t.setParameter("colorParam", this.colorParam),
            t.setParameter("numParticles", this.numParticles),
            t.setParameter("numParticlesPot", this.numParticlesPot),
            t.setParameter("lifetime", this.lifetime),
            t.setParameter("rate", this.rate),
            t.setParameter("rateDiv", this.rate2 - this.rate),
            t.setParameter("seed", this.seed),
            t.setParameter("scaleDivMult", this.scaleUMax[0]),
            t.setParameter("alphaDivMult", this.alphaUMax[0]),
            t.setParameter("radialSpeedDivMult", this.radialSpeedUMax[0]),
            t.setParameter("graphNumSamples", this.precision),
            t.setParameter("graphSampleSize", 1 / this.precision),
            t.setParameter("emitterScale", new Float32Array([1, 1, 1])),
            this.pack8 && (this._gpuUpdater._setInputBounds(),
            t.setParameter("inBoundsSize", this._gpuUpdater.inBoundsSizeUniform),
            t.setParameter("inBoundsCenter", this._gpuUpdater.inBoundsCenterUniform),
            t.setParameter("maxVel", this.maxVel)),
            this.wrap && this.wrapBounds && (this.wrapBoundsUniform[0] = this.wrapBounds.x,
            this.wrapBoundsUniform[1] = this.wrapBounds.y,
            this.wrapBoundsUniform[2] = this.wrapBounds.z,
            t.setParameter("wrapBounds", this.wrapBoundsUniform)),
            this.colorMap && t.setParameter("colorMap", this.colorMap),
            this.lighting && this.normalMap && t.setParameter("normalMap", this.normalMap),
            this.depthSoftening > 0 && t.setParameter("softening", 1 / (this.depthSoftening * this.depthSoftening * 100)),
            this.stretch > 0 && (t.cull = 0),
            this._compParticleFaceParams()
        }
        ,
        e._compParticleFaceParams = function() {
            var t, e;
            if (0 === this.orientation)
                t = new Float32Array([1, 0, 0]),
                e = new Float32Array([0, 0, 1]);
            else {
                var i;
                if (1 === this.orientation)
                    i = this.particleNormal.normalize();
                else
                    i = (null === this.node ? vt.IDENTITY : this.node.getWorldTransform()).transformVector(this.particleNormal).normalize();
                var n = new lt(1,0,0);
                1 === Math.abs(n.dot(i)) && n.set(0, 0, 1);
                var s = (new lt).cross(i, n).normalize();
                n.cross(s, i).normalize(),
                t = new Float32Array([n.x, n.y, n.z]),
                e = new Float32Array([s.x, s.y, s.z])
            }
            this.material.setParameter("faceTangent", t),
            this.material.setParameter("faceBinorm", e)
        }
        ,
        e._allocate = function(t) {
            var e = t * this.numParticleVerts
              , i = t * this.numParticleIndices;
            if (void 0 === this.vertexBuffer || this.vertexBuffer.getNumVertices() !== e) {
                if (this.useCpu) {
                    var n = [{
                        semantic: xe,
                        components: 4,
                        type: 6
                    }, {
                        semantic: be,
                        components: 4,
                        type: 6
                    }, {
                        semantic: Se,
                        components: 4,
                        type: 6
                    }, {
                        semantic: Te,
                        components: 1,
                        type: 6
                    }, {
                        semantic: we,
                        components: this.useMesh ? 4 : 2,
                        type: 6
                    }]
                      , s = new Qe(this.graphicsDevice,n);
                    this.vertexBuffer = new Ze(this.graphicsDevice,s,e,1),
                    this.indexBuffer = new ws(this.graphicsDevice,1,i)
                } else {
                    var a = [{
                        semantic: xe,
                        components: 4,
                        type: 6
                    }];
                    this.useMesh && a.push({
                        semantic: be,
                        components: 2,
                        type: 6
                    });
                    var r = new Qe(this.graphicsDevice,a);
                    this.vertexBuffer = new Ze(this.graphicsDevice,r,e,1),
                    this.indexBuffer = new ws(this.graphicsDevice,1,i)
                }
                var o, h, l, c = new Float32Array(this.vertexBuffer.lock());
                if (this.useMesh) {
                    h = (o = new Float32Array(this.mesh.vertexBuffer.lock())).length / this.mesh.vertexBuffer.numVertices;
                    for (var u = 0; u < this.mesh.vertexBuffer.format.elements.length; u++)
                        if (this.mesh.vertexBuffer.format.elements[u].name === ue) {
                            l = this.mesh.vertexBuffer.format.elements[u].offset / 4;
                            break
                        }
                }
                for (var d = 0; d < e; d++) {
                    var f = Math.floor(d / this.numParticleVerts);
                    if (this.useMesh) {
                        var p = d % this.numParticleVerts;
                        c[6 * d] = o[p * h],
                        c[6 * d + 1] = o[p * h + 1],
                        c[6 * d + 2] = o[p * h + 2],
                        c[6 * d + 3] = f,
                        c[6 * d + 4] = o[p * h + l + 0],
                        c[6 * d + 5] = 1 - o[p * h + l + 1]
                    } else {
                        var m = d % 4;
                        c[4 * d] = jo[m][0],
                        c[4 * d + 1] = jo[m][1],
                        c[4 * d + 2] = 0,
                        c[4 * d + 3] = f
                    }
                }
                this.useCpu && (this.vbCPU = new Float32Array(c),
                this.vbOld = new Float32Array(this.vbCPU.length)),
                this.vertexBuffer.unlock(),
                this.useMesh && this.mesh.vertexBuffer.unlock();
                var _ = 0
                  , g = new Uint16Array(this.indexBuffer.lock());
                this.useMesh && (o = new Uint16Array(this.mesh.indexBuffer[0].lock()));
                for (var v = 0; v < t; v++)
                    if (this.useMesh)
                        for (var y = 0; y < this.numParticleIndices; y++)
                            g[v * this.numParticleIndices + y] = o[y] + v * this.numParticleVerts;
                    else {
                        var x = 4 * v;
                        g[_++] = x,
                        g[_++] = x + 1,
                        g[_++] = x + 2,
                        g[_++] = x,
                        g[_++] = x + 2,
                        g[_++] = x + 3
                    }
                this.indexBuffer.unlock(),
                this.useMesh && this.mesh.indexBuffer[0].unlock()
            }
        }
        ,
        e.reset = function() {
            if (this.beenReset = !0,
            this.seed = Math.random(),
            this.material.setParameter("seed", this.seed),
            this.useCpu)
                for (var t = 0; t < this.particleTexStart.length; t++)
                    this.particleTex[t] = this.particleTexStart[t];
            else
                this._initializeTextures();
            this.resetWorldBounds(),
            this.resetTime();
            var e = this.loop;
            this.loop = !0,
            this.addTime(0, !1),
            this.loop = e,
            this.preWarm && this.prewarm(this.lifetime)
        }
        ,
        e.prewarm = function(t) {
            for (var e = t / this.lifetime, i = Math.min(Math.floor(e * this.precision), this.precision), n = t / i, s = 0; s < i; s++)
                this.addTime(n, !1)
        }
        ,
        e.resetTime = function() {
            var t, e;
            this.endTime = (t = this,
            e = Math.max(t.rate, t.rate2) * t.numParticles + t.lifetime,
            Date.now() + 1e3 * e)
        }
        ,
        e.finishFrame = function() {
            this.useCpu && this.vertexBuffer.unlock()
        }
        ,
        e.addTime = function(t, e) {
            var i, n = this.graphicsDevice;
            if (this.simTimeTotal += t,
            this.calculateWorldBounds(),
            this._isAnimated()) {
                var s = this.animTilesParams;
                s[0] = 1 / this.animTilesX,
                s[1] = 1 / this.animTilesY;
                var a = this.animParams;
                a[0] = this.animStartFrame,
                a[1] = this.animNumFrames * this.animSpeed,
                a[2] = this.animNumFrames - 1,
                a[3] = this.animNumAnimations - 1;
                var r = this.animIndexParams;
                r[0] = this.animIndex,
                r[1] = this.randomizeAnimIndex
            }
            this.scene && this.camera !== this.scene._activeCamera && (this.camera = this.scene._activeCamera,
            this.onChangeCamera()),
            0 === this.emitterShape && (ih[0] = 0 !== this.emitterExtents.x ? this.emitterExtentsInner.x / this.emitterExtents.x : 0,
            ih[1] = 0 !== this.emitterExtents.y ? this.emitterExtentsInner.y / this.emitterExtents.y : 0,
            ih[2] = 0 !== this.emitterExtents.z ? this.emitterExtentsInner.z / this.emitterExtents.z : 0,
            null === this.meshInstance.node ? nh.setTRS(lt.ZERO, yt.IDENTITY, this.emitterExtents) : nh.setTRS(lt.ZERO, this.meshInstance.node.getRotation(), sh.copy(this.emitterExtents).mul(this.meshInstance.node.localScale)));
            var o = null === this.meshInstance.node ? lt.ONE : this.meshInstance.node.localScale;
            if (this.emitterScaleUniform[0] = o.x,
            this.emitterScaleUniform[1] = o.y,
            this.emitterScaleUniform[2] = o.z,
            this.material.setParameter("emitterScale", this.emitterScaleUniform),
            this.localSpace && this.meshInstance.node && (i = this.meshInstance.node.getPosition(),
            this.emitterPosUniform[0] = i.x,
            this.emitterPosUniform[1] = i.y,
            this.emitterPosUniform[2] = i.z,
            this.material.setParameter("emitterPos", this.emitterPosUniform)),
            this._compParticleFaceParams(),
            this.useCpu) {
                var h = new Float32Array(this.vertexBuffer.lock());
                this._cpuUpdater.update(h, this.vbToSort, this.particleTex, nh, ih, i, t, e)
            } else
                this._gpuUpdater.update(n, nh, ih, t, e);
            this.loop || Date.now() > this.endTime && (this.onFinished && this.onFinished(),
            this.meshInstance.visible = !1),
            this.meshInstance && (this.meshInstance.drawOrder = this.drawOrder)
        }
        ,
        e._destroyResources = function() {
            this.particleTexIN && (this.particleTexIN.destroy(),
            this.particleTexIN = null),
            this.particleTexOUT && (this.particleTexOUT.destroy(),
            this.particleTexOUT = null),
            this.particleTexStart && this.particleTexStart.destroy && (this.particleTexStart.destroy(),
            this.particleTexStart = null),
            this.rtParticleTexIN && (this.rtParticleTexIN.destroy(),
            this.rtParticleTexIN = null),
            this.rtParticleTexOUT && (this.rtParticleTexOUT.destroy(),
            this.rtParticleTexOUT = null),
            this.internalTex0 && (this.internalTex0.destroy(),
            this.internalTex0 = null),
            this.internalTex1 && (this.internalTex1.destroy(),
            this.internalTex1 = null),
            this.internalTex2 && (this.internalTex2.destroy(),
            this.internalTex2 = null),
            this.internalTex3 && (this.internalTex3.destroy(),
            this.internalTex3 = null),
            this.colorParam && (this.colorParam.destroy(),
            this.colorParam = null),
            this.vertexBuffer && (this.vertexBuffer.destroy(),
            this.vertexBuffer = void 0),
            this.indexBuffer && (this.indexBuffer.destroy(),
            this.indexBuffer = void 0),
            this.material && (this.material.destroy(),
            this.material = null)
        }
        ,
        e.destroy = function() {
            this.camera = null,
            this._destroyResources()
        }
        ,
        t
    }();
    dh.DEFAULT_PARAM_TEXTURE = null;
    var fh = function(t) {
        function e(i, n) {
            var s;
            return (s = t.call(this) || this).device = n || _n().graphicsDevice,
            s._targets = i,
            s.device.supportsMorphTargetTexturesCore && (s.device.extTextureHalfFloat && s.device.textureHalfFloatRenderable ? s._renderTextureFormat = e.FORMAT_HALF_FLOAT : s.device.extTextureFloat && s.device.textureFloatRenderable && (s._renderTextureFormat = e.FORMAT_FLOAT),
            s.device.extTextureHalfFloat && s.device.textureHalfFloatUpdatable ? s._textureFormat = e.FORMAT_HALF_FLOAT : s.device.extTextureFloat && (s._textureFormat = e.FORMAT_FLOAT),
            void 0 !== s._renderTextureFormat && void 0 !== s._textureFormat && (s._useTextureMorph = !0)),
            s._init(),
            s._updateMorphFlags(),
            s._calculateAabb(),
            s
        }
        H(e, t);
        var i = e.prototype;
        return i._init = function() {
            if (this._useTextureMorph && (this._useTextureMorph = this._initTextureBased()),
            !this._useTextureMorph)
                for (var t = 0; t < this._targets.length; t++)
                    this._targets[t]._initVertexBuffers(this.device);
            for (var e = 0; e < this._targets.length; e++)
                this._targets[e]._postInit()
        }
        ,
        i._initTextureBased = function() {
            for (var t = [], i = [], n = 0; n < this._targets.length; n++) {
                var s = this._targets[n];
                s.options.deltaPositions && (t.push(s.options.deltaPositions),
                i.push({
                    target: s,
                    name: "texturePositions"
                })),
                s.options.deltaNormals && (t.push(s.options.deltaNormals),
                i.push({
                    target: s,
                    name: "textureNormals"
                }))
            }
            for (var a = [], r = [], o = 1, h = t[0].length, l = 0; l < h; l += 3) {
                for (var c = !1, u = 0; u < t.length; u++) {
                    var d = t[u];
                    if (0 !== d[l] || 0 !== d[l + 1] || 0 !== d[l + 2]) {
                        c = !0;
                        break
                    }
                }
                c ? (a.push(o + .2),
                r.push(l / 3),
                o++) : a.push(.2)
            }
            var f = Math.min(this.device.maxTextureSize, 4096)
              , p = Math.ceil(Math.sqrt(o));
            p = Math.min(p, f);
            var m = Math.ceil(o / p);
            if (m > f)
                return !1;
            this.morphTextureWidth = p,
            this.morphTextureHeight = m;
            var _ = !1
              , g = 3
              , v = Si.float2Half;
            this._textureFormat === e.FORMAT_HALF_FLOAT && (_ = !0,
            g = 4);
            for (var y = this.morphTextureWidth * this.morphTextureHeight * g, x = _ ? new Uint16Array(y) : new Float32Array(y), b = 0; b < t.length; b++) {
                for (var S = t[b], T = 0; T < r.length; T++) {
                    var w = r[T];
                    _ ? (x[T * g + g] = v(S[3 * w]),
                    x[T * g + g + 1] = v(S[3 * w + 1]),
                    x[T * g + g + 2] = v(S[3 * w + 2])) : (x[T * g + g] = S[3 * w],
                    x[T * g + g + 1] = S[3 * w + 1],
                    x[T * g + g + 2] = S[3 * w + 2])
                }
                var M = i[b].target
                  , A = this._textureFormat === e.FORMAT_FLOAT ? $t : Zt;
                M._setTexture(i[b].name, this._createTexture("MorphTarget", A, x))
            }
            var C = [{
                semantic: Oe,
                components: 1,
                type: 6
            }];
            return this.vertexBufferIds = new Ze(this.device,new Qe(this.device,C),a.length,0,new Float32Array(a)),
            !0
        }
        ,
        i.destroy = function() {
            this.vertexBufferIds && (this.vertexBufferIds.destroy(),
            this.vertexBufferIds = null);
            for (var t = 0; t < this._targets.length; t++)
                this._targets[t].destroy();
            this._targets.length = 0
        }
        ,
        i._updateMorphFlags = function() {
            this._morphPositions = !1,
            this._morphNormals = !1;
            for (var t = 0; t < this._targets.length; t++) {
                var e = this._targets[t];
                e.morphPositions && (this._morphPositions = !0),
                e.morphNormals && (this._morphNormals = !0)
            }
        }
        ,
        i._calculateAabb = function() {
            this.aabb = new Mt(new lt(0,0,0),new lt(0,0,0));
            for (var t = 0; t < this._targets.length; t++) {
                var e = this._targets[t];
                this.aabb._expand(e.aabb.getMin(), e.aabb.getMax())
            }
        }
        ,
        i._createTexture = function(t, e, i) {
            var n = new Mi(this.device,{
                width: this.morphTextureWidth,
                height: this.morphTextureHeight,
                format: e,
                cubemap: !1,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            return n.name = t,
            i && (n.lock().set(i),
            n.unlock()),
            n
        }
        ,
        G(e, [{
            key: "morphPositions",
            get: function() {
                return this._morphPositions
            }
        }, {
            key: "morphNormals",
            get: function() {
                return this._morphNormals
            }
        }, {
            key: "maxActiveTargets",
            get: function() {
                return this._useTextureMorph ? this._targets.length : this._morphPositions && this._morphNormals ? 4 : 8
            }
        }, {
            key: "useTextureMorph",
            get: function() {
                return this._useTextureMorph
            }
        }, {
            key: "targets",
            get: function() {
                return this._targets
            }
        }]),
        e
    }(Hs);
    fh.FORMAT_FLOAT = 0,
    fh.FORMAT_HALF_FLOAT = 1;
    var ph = function() {
        function t(t) {
            var e = this;
            this.morph = t,
            t.incRefCount(),
            this.device = t.device,
            this.meshInstance = null,
            this._weights = [];
            for (var i = 0; i < t._targets.length; i++)
                this.setWeight(i, t._targets[i].defaultWeight);
            if (this._activeTargets = [],
            t.useTextureMorph) {
                this.shaderCache = {},
                this.maxSubmitCount = this.device.maxTextures,
                this._shaderMorphWeights = new Float32Array(this.maxSubmitCount);
                var n = function(i, n) {
                    var s = t._renderTextureFormat === fh.FORMAT_FLOAT ? Qt : Zt;
                    return e[n] = t._createTexture(i, s),
                    new ms({
                        colorBuffer: e[n],
                        depth: !1
                    })
                };
                t.morphPositions && (this.rtPositions = n("MorphRTPos", "texturePositions")),
                t.morphNormals && (this.rtNormals = n("MorphRTNrm", "textureNormals")),
                this._textureParams = new Float32Array([t.morphTextureWidth, t.morphTextureHeight, 1 / t.morphTextureWidth, 1 / t.morphTextureHeight]);
                for (var s = 0; s < this.maxSubmitCount; s++)
                    this["morphBlendTex" + s] = this.device.scope.resolve("morphBlendTex" + s);
                this.morphFactor = this.device.scope.resolve("morphFactor[0]"),
                this.zeroTextures = !1
            } else
                this.maxSubmitCount = 8,
                this._shaderMorphWeights = new Float32Array(this.maxSubmitCount),
                this._shaderMorphWeightsA = new Float32Array(this._shaderMorphWeights.buffer,0,4),
                this._shaderMorphWeightsB = new Float32Array(this._shaderMorphWeights.buffer,16,4),
                this._activeVertexBuffers = new Array(this.maxSubmitCount)
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.meshInstance = null,
            this.shader = null;
            var t = this.morph;
            t && (this.morph = null,
            t.decRefCount(),
            t.getRefCount() < 1 && t.destroy()),
            this.rtPositions && (this.rtPositions.destroy(),
            this.rtPositions = null),
            this.texturePositions && (this.texturePositions.destroy(),
            this.texturePositions = null),
            this.rtNormals && (this.rtNormals.destroy(),
            this.rtNormals = null),
            this.textureNormals && (this.textureNormals.destroy(),
            this.textureNormals = null)
        }
        ,
        e.clone = function() {
            var e = new t(this.morph);
            return e
        }
        ,
        e.getWeight = function(t) {
            return this._weights[t]
        }
        ,
        e.setWeight = function(t, e) {
            this._weights[t] = e,
            this._dirty = !0
        }
        ,
        e._getFragmentShader = function(t) {
            var e = "";
            t > 0 && (e += "varying vec2 uv0;\nuniform highp float morphFactor[" + t + "];\n");
            for (var i = 0; i < t; i++)
                e += "uniform highp sampler2D morphBlendTex" + i + ";\n";
            e += "void main (void) {\n    highp vec4 color = vec4(0, 0, 0, 1);\n";
            for (var n = 0; n < t; n++)
                e += "    color.xyz += morphFactor[" + n + "] * texture2D(morphBlendTex" + n + ", uv0).xyz;\n";
            return e += "    gl_FragColor = color;\n}\n"
        }
        ,
        e._getShader = function(t) {
            var e = this.shaderCache[t];
            if (!e) {
                var i = this._getFragmentShader(t);
                e = mi(this.device, "\n    attribute vec2 vertex_position;\n    varying vec2 uv0;\n    void main(void) {\n        gl_Position = vec4(vertex_position, 0.5, 1.0);\n        uv0 = vertex_position.xy * 0.5 + 0.5;\n    }\n    ", i, "textureMorph" + t),
                this.shaderCache[t] = e
            }
            return e
        }
        ,
        e._updateTextureRenderTarget = function(t, e) {
            for (var i = this, n = this.device, s = function(e, s) {
                i.morphFactor.setValue(i._shaderMorphWeights),
                n.setBlending(s),
                s && (n.setBlendFunction(1, 1),
                n.setBlendEquation(0));
                var a = i._getShader(e);
                ei(n, t, a, void 0, void 0, s)
            }, a = 0, r = !1, o = this._activeTargets.length, h = 0; h < o; h++) {
                var l = this._activeTargets[h]
                  , c = l.target[e];
                c && (this["morphBlendTex" + a].setValue(c),
                this._shaderMorphWeights[a] = l.weight,
                ++a >= this.maxSubmitCount && (s(a, r),
                a = 0,
                r = !0))
            }
            (a > 0 || 0 === o && !this.zeroTextures) && s(a, r)
        }
        ,
        e._updateTextureMorph = function() {
            this.device,
            (this._activeTargets.length > 0 || !this.zeroTextures) && (this._updateTextureRenderTarget(this.rtPositions, "texturePositions"),
            this._updateTextureRenderTarget(this.rtNormals, "textureNormals"),
            this.zeroTextures = 0 === this._activeTargets.length)
        }
        ,
        e._updateVertexMorph = function() {
            for (var t = this.maxSubmitCount, e = 0; e < t; e++)
                this._shaderMorphWeights[e] = 0,
                this._activeVertexBuffers[e] = null;
            for (var i = 0, n = this.morph.morphPositions ? 4 : 0, s = 0; s < this._activeTargets.length; s++) {
                var a = this._activeTargets[s].target;
                a._vertexBufferPositions && (this._activeVertexBuffers[i] = a._vertexBufferPositions,
                this._shaderMorphWeights[i] = this._activeTargets[s].weight,
                i++),
                a._vertexBufferNormals && (this._activeVertexBuffers[n] = a._vertexBufferNormals,
                this._shaderMorphWeights[n] = this._activeTargets[s].weight,
                n++)
            }
        }
        ,
        e.update = function() {
            this._dirty = !1;
            for (var t = this.morph._targets, e = 0, i = 0; i < t.length; i++) {
                var n = Math.abs(this.getWeight(i));
                if (n > 1e-5) {
                    this._activeTargets.length <= e && (this._activeTargets[e] = {});
                    var s = this._activeTargets[e++];
                    s.absWeight = n,
                    s.weight = this.getWeight(i),
                    s.target = t[i]
                }
            }
            this._activeTargets.length = e;
            var a = this.morph.maxActiveTargets;
            this._activeTargets.length > a && (this._activeTargets.sort((function(t, e) {
                return t.absWeight < e.absWeight ? 1 : e.absWeight < t.absWeight ? -1 : 0
            }
            )),
            this._activeTargets.length = a),
            this.morph.useTextureMorph ? this._updateTextureMorph() : this._updateVertexMorph()
        }
        ,
        t
    }()
      , mh = function() {
        function t() {
            this.graph = null,
            this.meshInstances = [],
            this.skinInstances = [],
            this.morphInstances = [],
            this.cameras = [],
            this.lights = [],
            this._shadersVersion = 0,
            this._immutable = !1
        }
        var e = t.prototype;
        return e.getGraph = function() {
            return this.graph
        }
        ,
        e.setGraph = function(t) {
            this.graph = t
        }
        ,
        e.getCameras = function() {
            return this.cameras
        }
        ,
        e.setCameras = function(t) {
            this.cameras = t
        }
        ,
        e.getLights = function() {
            return this.lights
        }
        ,
        e.setLights = function(t) {
            this.lights = t
        }
        ,
        e.getMaterials = function() {
            for (var t = [], e = 0; e < this.meshInstances.length; e++) {
                var i = this.meshInstances[e];
                -1 === t.indexOf(i.material) && t.push(i.material)
            }
            return t
        }
        ,
        e.clone = function() {
            for (var e = [], i = [], n = function t(n) {
                var s = n.clone();
                e.push(n),
                i.push(s);
                for (var a = 0; a < n._children.length; a++)
                    s.addChild(t(n._children[a]));
                return s
            }(this.graph), s = [], a = [], r = [], o = 0; o < this.skinInstances.length; o++) {
                for (var h = this.skinInstances[o].skin, l = new pa(h), c = [], u = 0; u < h.boneNames.length; u++) {
                    var d = h.boneNames[u]
                      , f = n.findByName(d);
                    c.push(f)
                }
                l.bones = c,
                a.push(l)
            }
            for (var p = 0; p < this.morphInstances.length; p++) {
                var m = this.morphInstances[p].morph
                  , _ = new ph(m);
                r.push(_)
            }
            for (var g = 0; g < this.meshInstances.length; g++) {
                var v = this.meshInstances[g]
                  , y = e.indexOf(v.node)
                  , x = new wa(v.mesh,v.material,i[y]);
                if (v.skinInstance) {
                    var b = this.skinInstances.indexOf(v.skinInstance);
                    x.skinInstance = a[b]
                }
                if (v.morphInstance) {
                    var S = this.morphInstances.indexOf(v.morphInstance);
                    x.morphInstance = r[S]
                }
                s.push(x)
            }
            var T = new t;
            return T.graph = n,
            T.meshInstances = s,
            T.skinInstances = a,
            T.morphInstances = r,
            T.getGraph().syncHierarchy(),
            T
        }
        ,
        e.destroy = function() {
            for (var t = this.meshInstances, e = 0; e < t.length; e++)
                t[e].destroy();
            this.meshInstances.length = 0
        }
        ,
        e.generateWireframe = function() {
            wa._prepareRenderStyleForArray(this.meshInstances, 1)
        }
        ,
        t
    }()
      , _h = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this).root = null,
            e._gravity = new lt(0,-9.8,0),
            e._layers = null,
            e._fog = Pt,
            e.fogColor = new at(0,0,0),
            e.fogStart = 1,
            e.fogEnd = 1e3,
            e.fogDensity = 0,
            e.ambientLight = new at(0,0,0),
            e._gammaCorrection = 0,
            e._toneMapping = 0,
            e.exposure = 1,
            e._skyboxPrefiltered = [null, null, null, null, null, null],
            e._skyboxCubeMap = null,
            e.skyboxModel = null,
            e._skyboxIntensity = 1,
            e._skyboxMip = 0,
            e._skyboxRotation = new yt,
            e._skyboxRotationMat3 = null,
            e._skyboxRotationMat4 = null,
            e._skyboxIsRenderTarget = !1,
            e._ambientBake = !1,
            e._ambientBakeNumSamples = 1,
            e._ambientBakeSpherePart = .4,
            e.ambientBakeOcclusionContrast = 0,
            e.ambientBakeOcclusionBrightness = 0,
            e.lightmapSizeMultiplier = 1,
            e.lightmapMaxResolution = 2048,
            e.lightmapMode = 1,
            e.lightmapFilterEnabled = !1,
            e._lightmapFilterRange = 10,
            e._lightmapFilterSmoothness = .2,
            e._stats = {
                meshInstances: 0,
                lights: 0,
                dynamicLights: 0,
                bakedLights: 0,
                lastStaticPrepareFullTime: 0,
                lastStaticPrepareSearchTime: 0,
                lastStaticPrepareWriteTime: 0,
                lastStaticPrepareTriAabbTime: 0,
                lastStaticPrepareCombineTime: 0,
                updateShadersTime: 0
            },
            e.updateShaders = !0,
            e.updateSkybox = !0,
            e._shaderVersion = 0,
            e._statsUpdated = !1,
            e._models = [],
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this._resetSkyboxModel(),
            this.root = null,
            this.off()
        }
        ,
        i.applySettings = function(t) {
            this._gravity.set(t.physics.gravity[0], t.physics.gravity[1], t.physics.gravity[2]),
            this.ambientLight.set(t.render.global_ambient[0], t.render.global_ambient[1], t.render.global_ambient[2]),
            this._fog = t.render.fog,
            this.fogColor.set(t.render.fog_color[0], t.render.fog_color[1], t.render.fog_color[2]),
            this.fogStart = t.render.fog_start,
            this.fogEnd = t.render.fog_end,
            this.fogDensity = t.render.fog_density,
            this._gammaCorrection = t.render.gamma_correction,
            this._toneMapping = t.render.tonemapping,
            this.lightmapSizeMultiplier = t.render.lightmapSizeMultiplier,
            this.lightmapMaxResolution = t.render.lightmapMaxResolution,
            this.lightmapMode = t.render.lightmapMode,
            this.exposure = t.render.exposure,
            this._skyboxIntensity = void 0 === t.render.skyboxIntensity ? 1 : t.render.skyboxIntensity,
            this._skyboxMip = void 0 === t.render.skyboxMip ? 0 : t.render.skyboxMip,
            t.render.skyboxRotation && this._skyboxRotation.setFromEulerAngles(t.render.skyboxRotation[0], t.render.skyboxRotation[1], t.render.skyboxRotation[2]),
            this._resetSkyboxModel(),
            this.updateShaders = !0
        }
        ,
        i._updateSkybox = function(t) {
            if (this.updateSkybox && (this.updateSkybox = !1,
            !this.skyboxModel)) {
                var e = this._skyboxMip ? this._skyboxPrefiltered[[0, 1, 3, 4, 5, 6][this._skyboxMip]] || this._skyboxPrefiltered[0] || this._skyboxCubeMap : this._skyboxCubeMap || this._skyboxPrefiltered[0];
                if (!e)
                    return;
                e._isRenderTarget ? this._skyboxIsRenderTarget = !0 : this._skyboxIsRenderTarget = !1;
                var i = new Fn
                  , n = this;
                i.updateShader = function(i, s, a, r, o) {
                    var h = t.getProgramLibrary().getProgram("skybox", {
                        rgbm: e.type === Be,
                        hdr: e.type === Be || e.format === Qt,
                        useIntensity: 1 !== n.skyboxIntensity,
                        useRightHandedCubeMap: n._skyboxIsRenderTarget,
                        mip: e.fixCubemapSeams ? n.skyboxMip : 0,
                        fixSeams: e.fixCubemapSeams,
                        gamma: 1 === o ? n.gammaCorrection ? 3 : 0 : n.gammaCorrection,
                        toneMapping: 1 === o ? 0 : n.toneMapping
                    });
                    this.shader = h
                }
                ,
                i.updateShader(),
                i.setParameter("texture_cubeMap", e),
                this.skyboxRotation.equals(yt.IDENTITY) ? i.setParameter("cubeMapRotationMatrix", ct.IDENTITY.data) : (this._skyboxRotationMat4 || (this._skyboxRotationMat4 = new vt),
                this._skyboxRotationMat3 || (this._skyboxRotationMat3 = new ct),
                this._skyboxRotationMat4.setTRS(lt.ZERO, this._skyboxRotation, lt.ONE),
                this._skyboxRotationMat4.invertTo3x3(this._skyboxRotationMat3),
                i.setParameter("cubeMapRotationMatrix", this._skyboxRotationMat3.data)),
                i.cull = 2,
                i.depthWrite = !1;
                var s = this.layers.getLayerById(2);
                if (s) {
                    var a = new ji("Skybox")
                      , r = ha(t)
                      , o = new wa(r,i,a);
                    o.cull = !1,
                    o._noDepthDrawGl1 = !0,
                    o.pick = !1;
                    var h = new mh;
                    h.graph = a,
                    h.meshInstances = [o],
                    this.skyboxModel = h,
                    s.addMeshInstances(h.meshInstances),
                    this.skyLayer = s,
                    this.fire("set:skybox", e)
                }
            }
        }
        ,
        i._resetSkyboxModel = function() {
            this.skyboxModel && (this.skyLayer.removeMeshInstances(this.skyboxModel.meshInstances),
            this.skyboxModel.destroy()),
            this.skyboxModel = null,
            this.updateSkybox = !0
        }
        ,
        i.setSkybox = function(t) {
            t || (t = [null, null, null, null, null, null, null]);
            var e = !1;
            if (this._skyboxCubeMap !== t[0] && (e = !0),
            !e)
                for (var i = 0; i < 6 && !e; i++)
                    this._skyboxPrefiltered[i] !== t[i + 1] && (e = !0);
            if (e) {
                for (var n = 0; n < 6; n++)
                    this._skyboxPrefiltered[n] = t[n + 1];
                this.skybox = t[0]
            }
        }
        ,
        i.addModel = function(t) {
            if (!this.containsModel(t)) {
                var e = this.layers.getLayerById(0);
                e && (e.addMeshInstances(t.meshInstances),
                this._models.push(t))
            }
        }
        ,
        i.addShadowCaster = function(t) {
            var e = this.layers.getLayerById(0);
            e && e.addShadowCasters(t.meshInstances)
        }
        ,
        i.removeModel = function(t) {
            var e = this._models.indexOf(t);
            if (-1 !== e) {
                var i = this.layers.getLayerById(0);
                if (!i)
                    return;
                i.removeMeshInstances(t.meshInstances),
                this._models.splice(e, 1)
            }
        }
        ,
        i.removeShadowCasters = function(t) {
            var e = this.layers.getLayerById(0);
            e && e.removeShadowCasters(t.meshInstances)
        }
        ,
        i.containsModel = function(t) {
            return this._models.indexOf(t) >= 0
        }
        ,
        i.getModels = function(t) {
            return this._models
        }
        ,
        G(e, [{
            key: "fog",
            get: function() {
                return this._fog
            },
            set: function(t) {
                t !== this._fog && (this._fog = t,
                this.updateShaders = !0)
            }
        }, {
            key: "gammaCorrection",
            get: function() {
                return this._gammaCorrection
            },
            set: function(t) {
                t !== this._gammaCorrection && (this._gammaCorrection = t,
                this.updateShaders = !0)
            }
        }, {
            key: "toneMapping",
            get: function() {
                return this._toneMapping
            },
            set: function(t) {
                t !== this._toneMapping && (this._toneMapping = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skybox",
            get: function() {
                return this._skyboxCubeMap
            },
            set: function(t) {
                this._skyboxCubeMap = t,
                this._resetSkyboxModel(),
                this.updateShaders = !0
            }
        }, {
            key: "skyboxIntensity",
            get: function() {
                return this._skyboxIntensity
            },
            set: function(t) {
                this._skyboxIntensity = t,
                this._resetSkyboxModel(),
                this.updateShaders = !0
            }
        }, {
            key: "ambientBake",
            get: function() {
                return this._ambientBake
            },
            set: function(t) {
                this._ambientBake = t
            }
        }, {
            key: "ambientBakeNumSamples",
            get: function() {
                return this._ambientBakeNumSamples
            },
            set: function(t) {
                this._ambientBakeNumSamples = it.clamp(Math.floor(t), 1, 255)
            }
        }, {
            key: "ambientBakeSpherePart",
            get: function() {
                return this._ambientBakeSpherePart
            },
            set: function(t) {
                this._ambientBakeSpherePart = it.clamp(t, .001, 1)
            }
        }, {
            key: "lightmapFilterRange",
            get: function() {
                return this._lightmapFilterRange
            },
            set: function(t) {
                this._lightmapFilterRange = Math.max(t, .001)
            }
        }, {
            key: "lightmapFilterSmoothness",
            get: function() {
                return this._lightmapFilterSmoothness
            },
            set: function(t) {
                this._lightmapFilterSmoothness = Math.max(t, .001)
            }
        }, {
            key: "skyboxRotation",
            get: function() {
                return this._skyboxRotation
            },
            set: function(t) {
                this._skyboxRotation.equals(t) || (this._skyboxRotation.copy(t),
                this._resetSkyboxModel(),
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxMip",
            get: function() {
                return this._skyboxMip
            },
            set: function(t) {
                this._skyboxMip = t,
                this._resetSkyboxModel(),
                this.updateShaders = !0
            }
        }, {
            key: "skyboxPrefiltered128",
            get: function() {
                return this._skyboxPrefiltered[0]
            },
            set: function(t) {
                this._skyboxPrefiltered[0] !== t && (this._skyboxPrefiltered[0] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxPrefiltered64",
            get: function() {
                return this._skyboxPrefiltered[1]
            },
            set: function(t) {
                this._skyboxPrefiltered[1] !== t && (this._skyboxPrefiltered[1] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxPrefiltered32",
            get: function() {
                return this._skyboxPrefiltered[2]
            },
            set: function(t) {
                this._skyboxPrefiltered[2] !== t && (this._skyboxPrefiltered[2] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxPrefiltered16",
            get: function() {
                return this._skyboxPrefiltered[3]
            },
            set: function(t) {
                this._skyboxPrefiltered[3] !== t && (this._skyboxPrefiltered[3] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxPrefiltered8",
            get: function() {
                return this._skyboxPrefiltered[4]
            },
            set: function(t) {
                this._skyboxPrefiltered[4] !== t && (this._skyboxPrefiltered[4] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "skyboxPrefiltered4",
            get: function() {
                return this._skyboxPrefiltered[5]
            },
            set: function(t) {
                this._skyboxPrefiltered[5] !== t && (this._skyboxPrefiltered[5] = t,
                this.updateShaders = !0)
            }
        }, {
            key: "drawCalls",
            get: function() {
                var t = this.layers._meshInstances;
                return t.length || (this.layers._update(),
                t = this.layers._meshInstances),
                t
            },
            set: function(t) {}
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                var e = this._layers;
                this._layers = t,
                this.fire("set:layers", e, t)
            }
        }]),
        e
    }(u);
    function gh() {
        return !("undefined" == typeof AudioContext && "undefined" == typeof webkitAudioContext)
    }
    var vh = function() {
        function t(t, e, i) {
            if (void 0 === i && (i = {}),
            this.volume = void 0 === i.volume ? 1 : i.volume,
            this.loop = void 0 !== i.loop && i.loop,
            this.pitch = void 0 === i.pitch ? 1 : i.pitch,
            this.sound = e,
            this.paused = !1,
            this.suspended = !1,
            this.manager = t,
            this.source = null,
            gh()) {
                this.startTime = 0,
                this.startOffset = 0;
                var n = t.context;
                this.gain = n.createGain()
            } else
                e.audio && (this.source = e.audio.cloneNode(!1),
                this.source.pause())
        }
        var e = t.prototype;
        return e.getVolume = function() {
            return this.volume
        }
        ,
        e.getLoop = function() {
            return this.loop
        }
        ,
        e.setLoop = function(t) {
            this.loop = t,
            this.source && (this.source.loop = t)
        }
        ,
        e.getPitch = function() {
            return this.pitch
        }
        ,
        e.onManagerVolumeChange = function() {
            this.setVolume(this.getVolume())
        }
        ,
        e.onManagerSuspend = function() {
            this.isPlaying() && !this.suspended && (this.suspended = !0,
            this.pause())
        }
        ,
        e.onManagerResume = function() {
            this.suspended && (this.suspended = !1,
            this.unpause())
        }
        ,
        t
    }();
    gh() ? Object.assign(vh.prototype, {
        play: function() {
            if (this.source)
                throw new Error("Call stop() before calling play()");
            this._createSource(),
            this.source && (this.startTime = this.manager.context.currentTime,
            this.source.start(0, this.startOffset % this.source.buffer.duration),
            this.setVolume(this.volume),
            this.setLoop(this.loop),
            this.setPitch(this.pitch),
            this.manager.on("volumechange", this.onManagerVolumeChange, this),
            this.manager.on("suspend", this.onManagerSuspend, this),
            this.manager.on("resume", this.onManagerResume, this),
            this.manager.suspended && this.onManagerSuspend())
        },
        pause: function() {
            this.source && (this.paused = !0,
            this.startOffset += this.manager.context.currentTime - this.startTime,
            this.source.stop(0),
            this.source = null)
        },
        unpause: function() {
            !this.source && this.paused ? (this._createSource(),
            this.source && (this.startTime = this.manager.context.currentTime,
            this.source.start(0, this.startOffset % this.source.buffer.duration),
            this.setVolume(this.volume),
            this.setLoop(this.loop),
            this.setPitch(this.pitch),
            this.paused = !1)) : console.warn("Call pause() before unpausing.")
        },
        stop: function() {
            this.source && (this.source.stop(0),
            this.source = null),
            this.manager.off("volumechange", this.onManagerVolumeChange, this),
            this.manager.off("suspend", this.onManagerSuspend, this),
            this.manager.off("resume", this.onManagerResume, this)
        },
        setVolume: function(t) {
            t = it.clamp(t, 0, 1),
            this.volume = t,
            this.gain && (this.gain.gain.value = t * this.manager.volume)
        },
        setPitch: function(t) {
            this.pitch = t,
            this.source && (this.source.playbackRate.value = t)
        },
        isPlaying: function() {
            return !this.paused && this.source.playbackState === this.source.PLAYING_STATE
        },
        getDuration: function() {
            return this.source ? this.source.buffer.duration : 0
        },
        _createSource: function() {
            var t = this.manager.context;
            this.sound.buffer && (this.source = t.createBufferSource(),
            this.source.buffer = this.sound.buffer,
            this.source.connect(this.gain),
            this.gain.connect(t.destination),
            this.loop || (this.source.onended = this.pause.bind(this)))
        }
    }) : Object.assign(vh.prototype, {
        play: function() {
            this.source && (this.paused = !1,
            this.setVolume(this.volume),
            this.setLoop(this.loop),
            this.setPitch(this.pitch),
            this.source.play()),
            this.manager.on("volumechange", this.onManagerVolumeChange, this),
            this.manager.on("suspend", this.onManagerSuspend, this),
            this.manager.on("resume", this.onManagerResume, this),
            this.manager.suspended && this.onManagerSuspend()
        },
        pause: function() {
            this.source && (this.paused = !0,
            this.source.pause())
        },
        unpause: function() {
            this.source && (this.paused = !1,
            this.source.play())
        },
        stop: function() {
            this.source && this.source.pause(),
            this.manager.off("volumechange", this.onManagerVolumeChange, this),
            this.manager.off("suspend", this.onManagerSuspend, this),
            this.manager.off("resume", this.onManagerResume, this)
        },
        setVolume: function(t) {
            t = it.clamp(t, 0, 1),
            this.volume = t,
            this.source && (this.source.volume = t * this.manager.volume)
        },
        setPitch: function(t) {
            this.pitch = t,
            this.source && (this.source.playbackRate = t)
        },
        getDuration: function() {
            return this.source && !isNaN(this.source.duration) ? this.source.duration : 0
        },
        isPlaying: function() {
            return !this.source.paused
        }
    });
    var yh = "linear"
      , xh = "inverse"
      , bh = "exponential"
      , Sh = function(t) {
        function e(e, i, n) {
            var s;
            return (s = t.call(this, e, i, n) || this).position = new lt,
            s.velocity = new lt,
            gh() ? s.panner = e.context.createPanner() : (s.maxDistance = 1e4,
            s.minDistance = 1,
            s.rollOffFactor = 1,
            s.distanceModel = xh),
            s
        }
        H(e, t);
        var i = e.prototype;
        return i.getPosition = function() {
            return this.position
        }
        ,
        i.getVelocity = function() {
            return this.velocity
        }
        ,
        e
    }(vh);
    if (gh())
        Object.assign(Sh.prototype, {
            setPosition: function(t) {
                this.position.copy(t),
                this.panner.setPosition(t.x, t.y, t.z)
            },
            setVelocity: function(t) {
                this.velocity.copy(t),
                this.panner.setVelocity(t.x, t.y, t.z)
            },
            getMaxDistance: function() {
                return this.panner.maxDistance
            },
            setMaxDistance: function(t) {
                this.panner.maxDistance = t
            },
            getMinDistance: function() {
                return this.panner.refDistance
            },
            setMinDistance: function(t) {
                this.panner.refDistance = t
            },
            getRollOffFactor: function() {
                return this.panner.rolloffFactor
            },
            setRollOffFactor: function(t) {
                this.panner.rolloffFactor = t
            },
            getDistanceModel: function() {
                return this.pannel.distanceModel
            },
            setDistanceModel: function(t) {
                this.panner.distanceModel = t
            },
            _createSource: function() {
                var t = this.manager.context;
                this.source = t.createBufferSource(),
                this.source.buffer = this.sound.buffer,
                this.source.connect(this.panner),
                this.panner.connect(this.gain),
                this.gain.connect(t.destination),
                this.loop || (this.source.onended = this.pause.bind(this))
            }
        });
    else {
        var Th = new lt;
        Object.assign(Sh.prototype, {
            setPosition: function(t) {
                if (this.position.copy(t),
                this.source) {
                    var e = function(t, e, i, n, s, a) {
                        var r = (Th = Th.sub2(t, e)).length();
                        if (r < i)
                            return 1;
                        if (r > n)
                            return 0;
                        var o = 0;
                        return a === yh ? o = 1 - s * (r - i) / (n - i) : a === xh ? o = i / (i + s * (r - i)) : a === bh && (o = Math.pow(r / i, -s)),
                        it.clamp(o, 0, 1)
                    }(this.manager.listener.getPosition(), this.position, this.minDistance, this.maxDistance, this.rollOffFactor, this.distanceModel)
                      , i = this.getVolume();
                    this.source.volume = i * e
                }
            },
            setVelocity: function(t) {
                this.velocity.copy(t)
            },
            getMaxDistance: function() {
                return this.maxDistance
            },
            setMaxDistance: function(t) {
                this.maxDistance = t
            },
            getMinDistance: function() {
                return this.minDistance
            },
            setMinDistance: function(t) {
                this.minDistance = t
            },
            getRollOffFactor: function() {
                return this.rollOffFactor
            },
            setRollOffFactor: function(t) {
                this.rollOffFactor = t
            },
            getDistanceModel: function() {
                return this.distanceModel
            },
            setDistanceModel: function(t) {
                this.distanceModel = t
            }
        })
    }
    var wh = function() {
        function t(t) {
            this._manager = t,
            this.position = new lt,
            this.velocity = new lt,
            this.orientation = new vt
        }
        var e = t.prototype;
        return e.getPosition = function() {
            return this.position
        }
        ,
        e.setPosition = function(t) {
            this.position.copy(t);
            var e = this.listener;
            e && e.setPosition(t.x, t.y, t.z)
        }
        ,
        e.getVelocity = function() {
            return this.velocity
        }
        ,
        e.setVelocity = function(t) {
            this.velocity.copy(t);
            var e = this.listener;
            e && e.setPosition(t.x, t.y, t.z)
        }
        ,
        e.setOrientation = function(t) {
            this.orientation.copy(t);
            var e = this.listener;
            e && e.setOrientation(-t.data[8], -t.data[9], -t.data[10], t.data[4], t.data[5], t.data[6])
        }
        ,
        e.getOrientation = function() {
            return this.orientation
        }
        ,
        G(t, [{
            key: "listener",
            get: function() {
                var t = this._manager.context;
                return t ? t.listener : null
            }
        }]),
        t
    }()
      , Mh = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._context = null,
            i._forceWebAudioApi = e.forceWebAudioApi,
            i._resumeContext = null,
            i._unlock = null,
            gh() || i._forceWebAudioApi ? (i._resumeContext = function() {
                window.removeEventListener("mousedown", i._resumeContext),
                window.removeEventListener("touchend", i._resumeContext),
                i.context && i.context.resume()
            }
            ,
            window.addEventListener("mousedown", i._resumeContext),
            window.addEventListener("touchend", i._resumeContext),
            E.ios && (i._unlock = function() {
                window.removeEventListener("touchend", i._unlock);
                var t = i.context;
                if (t) {
                    var e = t.createBuffer(1, 1, 44100)
                      , n = t.createBufferSource();
                    n.buffer = e,
                    n.connect(t.destination),
                    n.start(0),
                    n.disconnect()
                }
            }
            ,
            window.addEventListener("touchend", i._unlock))) : console.warn("No support for 3D audio found"),
            i.listener = new wh(j(i)),
            i._volume = 1,
            i.suspended = !1,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.suspend = function() {
            this.suspended = !0,
            this.fire("suspend")
        }
        ,
        i.resume = function() {
            var t = this
              , e = function() {
                t.suspended = !1,
                t.fire("resume")
            };
            !gh() && !this._forceWebAudioApi || "interrupted" !== this.context.state && "suspended" !== this.context.state ? e() : this.context.resume().then(e)
        }
        ,
        i.destroy = function() {
            this._resumeContext && (window.removeEventListener("mousedown", this._resumeContext),
            window.removeEventListener("touchend", this._resumeContext)),
            this._unlock && window.removeEventListener("touchend", this._unlock),
            this.fire("destroy"),
            this._context && this._context.close && (this._context.close(),
            this._context = null)
        }
        ,
        i.playSound = function(t, e) {
            void 0 === e && (e = {});
            var i = null;
            return vh && (i = new vh(this,t,e)).play(),
            i
        }
        ,
        i.playSound3d = function(t, e, i) {
            void 0 === i && (i = {});
            var n = null;
            return Sh && ((n = new Sh(this,t,i)).setPosition(e),
            i.volume && n.setVolume(i.volume),
            i.loop && n.setLoop(i.loop),
            i.maxDistance && n.setMaxDistance(i.maxDistance),
            i.minDistance && n.setMinDistance(i.minDistance),
            i.rollOffFactor && n.setRollOffFactor(i.rollOffFactor),
            i.distanceModel && n.setDistanceModel(i.distanceModel),
            n.play()),
            n
        }
        ,
        G(e, [{
            key: "volume",
            get: function() {
                return this._volume
            },
            set: function(t) {
                t = it.clamp(t, 0, 1),
                this._volume = t,
                this.fire("volumechange", t)
            }
        }, {
            key: "context",
            get: function() {
                return this._context || (gh() || this._forceWebAudioApi) && ("undefined" != typeof AudioContext ? this._context = new AudioContext : "undefined" != typeof webkitAudioContext && (this._context = new webkitAudioContext)),
                this._context
            }
        }]),
        e
    }(u)
      , Ah = function(t, e, i, n) {
        this.time = t,
        this.position = e,
        this.rotation = i,
        this.scale = n
    }
      , Ch = function() {
        this._name = "",
        this._keys = []
    }
      , Eh = function() {
        function t() {
            this.name = "",
            this.duration = 0,
            this._nodes = [],
            this._nodeDict = {}
        }
        var e = t.prototype;
        return e.getNode = function(t) {
            return this._nodeDict[t]
        }
        ,
        e.addNode = function(t) {
            this._nodes.push(t),
            this._nodeDict[t._name] = t
        }
        ,
        G(t, [{
            key: "nodes",
            get: function() {
                return this._nodes
            }
        }]),
        t
    }()
      , Ph = function() {
        function t(t) {
            2 === arguments.length && (t = arguments[1]),
            this.options = t,
            this._name = t.name,
            this._defaultWeight = t.defaultWeight || 0,
            this.aabb = t.aabb,
            this.aabb || (this.aabb = new Mt,
            t.deltaPositions && this.aabb.compute(t.deltaPositions)),
            this.deltaPositions = t.deltaPositions
        }
        var e = t.prototype;
        return e._postInit = function() {
            this.options = null
        }
        ,
        e._initVertexBuffers = function(t) {
            var e = this.options;
            this._vertexBufferPositions = this._createVertexBuffer(t, e.deltaPositions, e.deltaPositionsType),
            this._vertexBufferNormals = this._createVertexBuffer(t, e.deltaNormals, e.deltaNormalsType),
            this._vertexBufferPositions && (this.deltaPositions = this._vertexBufferPositions.lock())
        }
        ,
        e._createVertexBuffer = function(t, e, i) {
            return void 0 === i && (i = 6),
            e ? new Ze(t,new Qe(t,[{
                semantic: xe,
                components: 3,
                type: i
            }]),e.length / 3,0,e) : null
        }
        ,
        e._setTexture = function(t, e) {
            this[t] = e
        }
        ,
        e.destroy = function() {
            this._vertexBufferPositions && (this._vertexBufferPositions.destroy(),
            this._vertexBufferPositions = null),
            this._vertexBufferNormals && (this._vertexBufferNormals.destroy(),
            this._vertexBufferNormals = null),
            this.texturePositions && (this.texturePositions.destroy(),
            this.texturePositions = null),
            this.textureNormals && (this.textureNormals.destroy(),
            this.textureNormals = null)
        }
        ,
        G(t, [{
            key: "name",
            get: function() {
                return this._name
            }
        }, {
            key: "defaultWeight",
            get: function() {
                return this._defaultWeight
            }
        }, {
            key: "morphPositions",
            get: function() {
                return !!this._vertexBufferPositions || !!this.texturePositions
            }
        }, {
            key: "morphNormals",
            get: function() {
                return !!this._vertexBufferNormals || !!this.textureNormals
            }
        }]),
        t
    }()
      , Rh = function(t, e, i) {
        this.device = t,
        this.inverseBindPose = e,
        this.boneNames = i
    }
      , Ih = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this)._meshes = null,
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this.meshes = null
        }
        ,
        i.decRefMeshes = function() {
            if (this._meshes)
                for (var t = this._meshes.length, e = 0; e < t; e++) {
                    var i = this._meshes[e];
                    i && (i.decRefCount(),
                    i.getRefCount() < 1 && (i.destroy(),
                    this._meshes[e] = null))
                }
        }
        ,
        i.incRefMeshes = function() {
            if (this._meshes)
                for (var t = this._meshes.length, e = 0; e < t; e++)
                    this._meshes[e] && this._meshes[e].incRefCount()
        }
        ,
        G(e, [{
            key: "meshes",
            get: function() {
                return this._meshes
            },
            set: function(t) {
                this.decRefMeshes(),
                this._meshes = t,
                this.incRefMeshes(),
                this.fire("set:meshes", t)
            }
        }]),
        e
    }(u)
      , Lh = function() {
        function t(t, e, i, n) {
            this._paths = t,
            this._input = e,
            this._output = i,
            this._interpolation = n
        }
        return G(t, [{
            key: "paths",
            get: function() {
                return this._paths
            }
        }, {
            key: "input",
            get: function() {
                return this._input
            }
        }, {
            key: "output",
            get: function() {
                return this._output
            }
        }, {
            key: "interpolation",
            get: function() {
                return this._interpolation
            }
        }]),
        t
    }()
      , Dh = function() {
        function t(t, e) {
            this._components = t,
            this._data = e
        }
        return G(t, [{
            key: "components",
            get: function() {
                return this._components
            }
        }, {
            key: "data",
            get: function() {
                return this._data
            }
        }]),
        t
    }()
      , kh = function() {
        function t(t) {
            this._events = [].concat(t),
            this._events.sort((function(t, e) {
                return t.time - e.time
            }
            ))
        }
        return G(t, [{
            key: "events",
            get: function() {
                return this._events
            }
        }]),
        t
    }()
      , Oh = function() {
        function t(t, e, i, n, s, a) {
            void 0 === a && (a = new kh([])),
            this._name = t,
            this._duration = e,
            this._inputs = i,
            this._outputs = n,
            this._curves = s,
            this._animEvents = a
        }
        return t.prototype.eval = function(t, e) {
            e._time = t;
            for (var i = this._inputs, n = this._outputs, s = this._curves, a = e._cache, r = e._results, o = 0; o < i.length; ++o)
                a[o].update(t, i[o]._data);
            for (var h = 0; h < s.length; ++h) {
                var l = s[h]
                  , c = n[l._output]
                  , u = r[h];
                a[l._input].eval(u, l._interpolation, c)
            }
        }
        ,
        G(t, [{
            key: "name",
            get: function() {
                return this._name
            }
        }, {
            key: "duration",
            get: function() {
                return this._duration
            }
        }, {
            key: "inputs",
            get: function() {
                return this._inputs
            }
        }, {
            key: "outputs",
            get: function() {
                return this._outputs
            }
        }, {
            key: "curves",
            get: function() {
                return this._curves
            }
        }, {
            key: "events",
            get: function() {
                return this._animEvents.events
            },
            set: function(t) {
                this._animEvents = t
            }
        }]),
        t
    }()
      , Fh = "en-US"
      , Bh = {
        en: "en-US",
        es: "en-ES",
        zh: "zh-CN",
        "zh-HK": "zh-TW",
        "zh-TW": "zh-HK",
        "zh-MO": "zh-HK",
        fr: "fr-FR",
        de: "de-DE",
        it: "it-IT",
        ru: "ru-RU",
        ja: "ja-JP"
    }
      , Nh = {};
    function Uh(t, e) {
        for (var i = 0, n = t.length; i < n; i++)
            Nh[t[i]] = e
    }
    function zh(t) {
        var e = t.indexOf("-");
        return -1 !== e ? t.substring(0, e) : t
    }
    function Vh(t, e) {
        if (e[t])
            return t;
        var i = Bh[t];
        if (i && e[i])
            return i;
        var n = zh(t);
        return e[i = Bh[n]] ? i : e[n] ? n : Fh
    }
    Uh(["ja", "ko", "th", "vi", "zh", "id"], (function(t) {
        return 0
    }
    )),
    Uh(["fa", "hi"], (function(t) {
        return t >= 0 && t <= 1 ? 0 : 1
    }
    )),
    Uh(["fr", "pt"], (function(t) {
        return t >= 0 && t < 2 ? 0 : 1
    }
    )),
    Uh(["da"], (function(t) {
        return 1 === t || !Number.isInteger(t) && t >= 0 && t <= 1 ? 0 : 1
    }
    )),
    Uh(["de", "en", "it", "el", "es", "tr", "fi", "sv", "nb", "no", "ur"], (function(t) {
        return 1 === t ? 0 : 1
    }
    )),
    Uh(["ru", "uk"], (function(t) {
        if (Number.isInteger(t)) {
            var e = t % 10
              , i = t % 100;
            if (1 === e && 11 !== i)
                return 0;
            if (e >= 2 && e <= 4 && (i < 12 || i > 14))
                return 1;
            if (0 === e || e >= 5 && e <= 9 || i >= 11 && i <= 14)
                return 2
        }
        return 3
    }
    )),
    Uh(["pl"], (function(t) {
        if (Number.isInteger(t)) {
            if (1 === t)
                return 0;
            var e = t % 10
              , i = t % 100;
            if (e >= 2 && e <= 4 && (i < 12 || i > 14))
                return 1;
            if (e >= 0 && e <= 1 || e >= 5 && e <= 9 || i >= 12 && i <= 14)
                return 2
        }
        return 3
    }
    )),
    Uh(["ar"], (function(t) {
        if (0 === t)
            return 0;
        if (1 === t)
            return 1;
        if (2 === t)
            return 2;
        if (Number.isInteger(t)) {
            var e = t % 100;
            if (e >= 3 && e <= 10)
                return 3;
            if (e >= 11 && e <= 99)
                return 4
        }
        return 5
    }
    ));
    var Gh = Nh[zh(Fh)];
    function Wh(t) {
        return Nh[t] || Gh
    }
    var Hh = new RegExp("^\\s*(?:(?:[a-z]+[a-z0-9\\-\\+\\.]*:)?//|data:|blob:)","i")
      , Xh = function() {
        function t(t, e, i, n, s, a) {
            this.url = t || "",
            this.filename = e || "",
            this.hash = void 0 === i ? null : i,
            this.size = void 0 === n ? null : n,
            this.opt = void 0 === s ? null : s,
            this.contents = a || null
        }
        return t.prototype.equals = function(t) {
            return this.url === t.url && this.filename === t.filename && this.hash === t.hash && this.size === t.size && this.opt === t.opt && this.contents === t.contents
        }
        ,
        t
    }()
      , jh = -1
      , qh = {
        pvr: "extCompressedTexturePVRTC",
        dxt: "extCompressedTextureS3TC",
        etc2: "extCompressedTextureETC",
        etc1: "extCompressedTextureETC1",
        basis: "canvas"
    }
      , Yh = ["pvr", "dxt", "etc2", "etc1", "basis"]
      , Kh = function(t) {
        function e(e, i, n, s, a) {
            var r;
            return (r = t.call(this) || this)._id = jh--,
            r.name = e || "",
            r.type = i,
            r.tags = new $(j(r)),
            r._preload = !1,
            r._file = null,
            r._data = s || {},
            r.options = a || {},
            r._resources = [],
            r._i18n = {},
            r.loaded = !1,
            r.loading = !1,
            r.registry = null,
            n && (r.file = n),
            r
        }
        H(e, t);
        var i = e.prototype;
        return i.getFileUrl = function() {
            var t = this.file;
            if (!t || !t.url)
                return null;
            var e = t.url;
            if (this.registry && this.registry.prefix && !Hh.test(e) && (e = this.registry.prefix + e),
            "script" !== this.type && t.hash) {
                var i = -1 !== e.indexOf("?") ? "&" : "?";
                e += i + "t=" + t.hash
            }
            return e
        }
        ,
        i.getAbsoluteUrl = function(t) {
            if (t.startsWith("blob:") || t.startsWith("data:"))
                return t;
            var e = p.getDirectory(this.file.url);
            return p.join(e, t)
        }
        ,
        i.getLocalizedAssetId = function(t) {
            return t = Vh(t, this._i18n),
            this._i18n[t] || null
        }
        ,
        i.addLocalizedAssetId = function(t, e) {
            this._i18n[t] = e,
            this.fire("add:localized", t, e)
        }
        ,
        i.removeLocalizedAssetId = function(t) {
            var e = this._i18n[t];
            e && (delete this._i18n[t],
            this.fire("remove:localized", t, e))
        }
        ,
        i.ready = function(t, e) {
            e = e || this,
            this.resource ? t.call(e, this) : this.once("load", (function(i) {
                t.call(e, i)
            }
            ))
        }
        ,
        i.reload = function() {
            this.loaded && (this.loaded = !1,
            this.registry.load(this))
        }
        ,
        i.unload = function() {
            if (this.loaded || 0 !== this._resources.length) {
                this.fire("unload", this),
                this.registry.fire("unload:" + this.id, this);
                var t = this._resources;
                this.resources = [],
                this.loaded = !1,
                this.file && this.registry._loader.clearCache(this.getFileUrl(), this.type);
                for (var e = 0; e < t.length; ++e) {
                    var i = t[e];
                    i && i.destroy && i.destroy()
                }
            }
        }
        ,
        e.fetchArrayBuffer = function(t, e, i, n) {
            var s;
            void 0 === n && (n = 0),
            null != i && null != (s = i.file) && s.contents ? setTimeout((function() {
                e(null, i.file.contents)
            }
            )) : st.get(t, {
                cache: !0,
                responseType: "arraybuffer",
                retry: n > 0,
                maxRetries: n
            }, e)
        }
        ,
        G(e, [{
            key: "id",
            get: function() {
                return this._id
            },
            set: function(t) {
                this._id = t
            }
        }, {
            key: "file",
            get: function() {
                return this._file
            },
            set: function(t) {
                var e = this;
                if (t && t.variants && -1 !== ["texture", "textureatlas", "bundle"].indexOf(this.type)) {
                    var i, n, s = (null == (i = this.registry) || null == (n = i._loader) ? void 0 : n._app) || _n(), a = null == s ? void 0 : s.graphicsDevice;
                    if (a)
                        for (var r = function(i, n) {
                            var r = Yh[i];
                            if (t.variants[r] && a[qh[r]])
                                return t = t.variants[r],
                                "break";
                            if (s.enableBundles) {
                                var o = s.bundles.listBundlesForAsset(e);
                                if (o && o.find((function(t) {
                                    var e;
                                    return null == t || null == (e = t.file) ? void 0 : e.variants[r]
                                }
                                )))
                                    return "break"
                            }
                        }, o = 0, h = Yh.length; o < h; o++) {
                            if ("break" === r(o))
                                break
                        }
                }
                var l = this._file
                  , c = t ? new Xh(t.url,t.filename,t.hash,t.size,t.opt,t.contents) : null;
                (!!c != !!l || c && !c.equals(l)) && (this._file = c,
                this.fire("change", this, "file", c, l),
                this.reload())
            }
        }, {
            key: "data",
            get: function() {
                return this._data
            },
            set: function(t) {
                var e = this._data;
                this._data = t,
                t !== e && (this.fire("change", this, "data", t, e),
                this.loaded && this.registry._loader.patch(this, this.registry))
            }
        }, {
            key: "resource",
            get: function() {
                return this._resources[0]
            },
            set: function(t) {
                var e = this._resources[0];
                this._resources[0] = t,
                this.fire("change", this, "resource", t, e)
            }
        }, {
            key: "resources",
            get: function() {
                return this._resources
            },
            set: function(t) {
                var e = this._resources;
                this._resources = t,
                this.fire("change", this, "resources", t, e)
            }
        }, {
            key: "preload",
            get: function() {
                return this._preload
            },
            set: function(t) {
                t = !!t,
                this._preload !== t && (this._preload = t,
                this._preload && !this.loaded && !this.loading && this.registry && this.registry.load(this))
            }
        }, {
            key: "loadFaces",
            get: function() {
                return this._loadFaces
            },
            set: function(t) {
                t = !!t,
                this.hasOwnProperty("_loadFaces") && t === this._loadFaces || (this._loadFaces = t,
                this.loaded && this.registry._loader.patch(this, this.registry))
            }
        }]),
        e
    }(u)
      , Zh = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this).skin = e,
            n.skinInstance = i,
            n
        }
        return H(e, t),
        e
    }(Hs)
      , $h = function() {
        function t() {}
        return t.createCachedSkinedInstance = function(e, i, n) {
            var s = t.getCachedSkinInstance(e, i);
            return s || ((s = new pa(e)).resolve(i, n),
            t.addCachedSkinInstance(e, i, s)),
            s
        }
        ,
        t.getCachedSkinInstance = function(e, i) {
            var n = null
              , s = t._skinInstanceCache.get(i);
            if (s) {
                var a = s.find((function(t) {
                    return t.skin === e
                }
                ));
                a && (a.incRefCount(),
                n = a.skinInstance)
            }
            return n
        }
        ,
        t.addCachedSkinInstance = function(e, i, n) {
            var s = t._skinInstanceCache.get(i);
            s || (s = [],
            t._skinInstanceCache.set(i, s));
            var a = s.find((function(t) {
                return t.skin === e
            }
            ));
            a || (a = new Zh(e,n),
            s.push(a)),
            a.incRefCount()
        }
        ,
        t.removeCachedSkinInstance = function(e) {
            if (e) {
                var i = e.rootBone;
                if (i) {
                    var n = t._skinInstanceCache.get(i);
                    if (n) {
                        var s = n.findIndex((function(t) {
                            return t.skinInstance === e
                        }
                        ));
                        if (s >= 0) {
                            var a = n[s];
                            a.decRefCount(),
                            0 === a.getRefCount() && (n.splice(s, 1),
                            n.length || t._skinInstanceCache.delete(i),
                            e && (e.destroy(),
                            a.skinInstance = null))
                        }
                    }
                }
            }
        }
        ,
        t
    }();
    $h._skinInstanceCache = new Map;
    var Qh, Jh = function() {
        function t(e, i, n, s) {
            for (var a = function(e, s, a) {
                var r = t.createAsset(i.name, e, s, a);
                return n.add(r),
                r
            }, r = [], o = 0; o < e.renders.length; ++o)
                r.push(a("render", e.renders[o], o));
            for (var h = [], l = 0; l < e.materials.length; ++l)
                h.push(a("material", e.materials[l], l));
            for (var c = [], u = 0; u < e.animations.length; ++u)
                c.push(a("animation", e.animations[u], u));
            this.data = e,
            this._model = null,
            this._assetName = i.name,
            this._assets = n,
            this._defaultMaterial = s,
            this.renders = r,
            this.materials = h,
            this.textures = e.textures,
            this.animations = c
        }
        t.createAsset = function(t, e, i, n) {
            var s = new Kh(t + "/" + e + "/" + n,e,{
                url: ""
            });
            return s.resource = i,
            s.loaded = !0,
            s
        }
        ;
        var e = t.prototype;
        return e.instantiateModelEntity = function(t) {
            var e = new nv;
            return e.addComponent("model", Object.assign({
                type: "asset",
                asset: this.model
            }, t)),
            e
        }
        ,
        e.instantiateRenderEntity = function(e) {
            for (var i, n = this._defaultMaterial, s = [], a = function(t, e, i, a, r, o) {
                var h = void 0 === i.materialIndex ? n : a[i.materialIndex]
                  , l = new wa(i,h);
                return i.morph && (l.morphInstance = new ph(i.morph)),
                o.hasOwnProperty("skin") && s.push({
                    meshInstance: l,
                    rootBone: t,
                    entity: e
                }),
                l
            }, r = function t(i, n, s) {
                var r = new nv;
                n._cloneInternal(r),
                i || (i = r);
                for (var o = null, h = 0; h < s.nodes.length; h++) {
                    if (s.nodes[h] === n) {
                        var l = s.gltf.nodes[h];
                        if (l.hasOwnProperty("mesh"))
                            for (var c = s.renders[l.mesh].meshes, u = 0; u < c.length; u++) {
                                var d = c[u];
                                if (d) {
                                    var f = a(i, r, d, s.materials, s.skins, l);
                                    o || (o = []),
                                    o.push(f)
                                }
                            }
                        if (s.lights) {
                            var p = s.lights.get(l);
                            p && r.addChild(p.clone())
                        }
                        if (s.cameras) {
                            var m = s.cameras.get(l);
                            m && m.camera.system.cloneComponent(m, r)
                        }
                    }
                }
                o && r.addComponent("render", Object.assign({
                    type: "asset",
                    meshInstances: o,
                    rootBone: i
                }, e));
                for (var _ = n.children, g = 0; g < _.length; g++) {
                    var v = t(i, _[g], s);
                    r.addChild(v)
                }
                return r
            }, o = [], h = Y(this.data.scenes); !(i = h()).done; ) {
                var l = i.value;
                o.push(r(null, l, this.data))
            }
            return s.forEach((function(t) {
                t.meshInstance.skinInstance = $h.createCachedSkinedInstance(t.meshInstance.mesh.skin, t.rootBone, t.entity)
            }
            )),
            t.createSceneHierarchy(o, "Entity")
        }
        ,
        t.createSceneHierarchy = function(t, e) {
            var i = null;
            if (1 === t.length)
                i = t[0];
            else {
                i = new e("SceneGroup");
                for (var n, s = Y(t); !(n = s()).done; ) {
                    var a = n.value;
                    i.addChild(a)
                }
            }
            return i
        }
        ,
        t.createModel = function(e, i) {
            for (var n, s = function(t, e, n, s, a, r, o) {
                var h = void 0 === e.materialIndex ? i : a[e.materialIndex]
                  , l = new wa(e,h,r);
                if (e.morph) {
                    var c = new ph(e.morph);
                    l.morphInstance = c,
                    t.morphInstances.push(c)
                }
                if (o.hasOwnProperty("skin")) {
                    var u = o.skin
                      , d = n[u];
                    e.skin = d;
                    var f = s[u];
                    l.skinInstance = f,
                    t.skinInstances.push(f)
                }
                t.meshInstances.push(l)
            }, a = new mh, r = [], o = Y(e.skins); !(n = o()).done; ) {
                var h = n.value
                  , l = new pa(h);
                l.bones = h.bones,
                r.push(l)
            }
            a.graph = t.createSceneHierarchy(e.scenes, "GraphNode");
            for (var c = 0; c < e.nodes.length; c++) {
                var u = e.nodes[c];
                if (u.root === a.graph) {
                    var d = e.gltf.nodes[c];
                    if (d.hasOwnProperty("mesh"))
                        for (var f = e.renders[d.mesh].meshes, p = 0; p < f.length; p++) {
                            var m = f[p];
                            m && s(a, m, e.skins, r, e.materials, u, d)
                        }
                }
            }
            return a
        }
        ,
        e.destroy = function() {
            var t = this._assets
              , e = function(e) {
                t.remove(e),
                e.unload()
            }
              , i = function(t) {
                t.forEach((function(t) {
                    e(t)
                }
                ))
            };
            this.animations && (i(this.animations),
            this.animations = null),
            this.textures && (i(this.textures),
            this.textures = null),
            this.materials && (i(this.materials),
            this.materials = null),
            this.renders && (i(this.renders),
            this.renders = null),
            this._model && (e(this._model),
            this._model = null),
            this.data = null,
            this.assets = null
        }
        ,
        G(t, [{
            key: "model",
            get: function() {
                if (!this._model) {
                    var e = t.createModel(this.data, this._defaultMaterial)
                      , i = t.createAsset(this._assetName, "model", e, 0);
                    this._assets.add(i),
                    this._model = i
                }
                return this._model
            }
        }]),
        t
    }(), tl = function() {
        function t(t) {
            this.gltf = t,
            this.nodes = null,
            this.scenes = null,
            this.animations = null,
            this.textures = null,
            this.materials = null,
            this.renders = null,
            this.skins = null,
            this.lights = null,
            this.cameras = null
        }
        return t.prototype.destroy = function() {
            this.renders && this.renders.forEach((function(t) {
                t.meshes = null
            }
            ))
        }
        ,
        t
    }(), el = function(t) {
        return /^data:.*,.*$/i.test(t)
    }, il = function(t) {
        switch (t) {
        case "SCALAR":
            return 1;
        case "VEC2":
            return 2;
        case "VEC3":
            return 3;
        case "VEC4":
        case "MAT2":
            return 4;
        case "MAT3":
            return 9;
        case "MAT4":
            return 16;
        default:
            return 3
        }
    }, nl = function(t) {
        switch (t) {
        case 5120:
            return 0;
        case 5121:
            return 1;
        case 5122:
            return 2;
        case 5123:
            return 3;
        case 5124:
            return 4;
        case 5125:
            return 5;
        case 5126:
            return 6;
        default:
            return 0
        }
    }, sl = function(t) {
        switch (t) {
        case 5120:
        case 5121:
            return 1;
        case 5122:
        case 5123:
            return 2;
        case 5124:
        case 5125:
        case 5126:
            return 4;
        default:
            return 0
        }
    }, al = {
        POSITION: se,
        NORMAL: ae,
        TANGENT: re,
        COLOR_0: le,
        JOINTS_0: he,
        WEIGHTS_0: oe,
        TEXCOORD_0: ue,
        TEXCOORD_1: de,
        TEXCOORD_2: fe,
        TEXCOORD_3: pe,
        TEXCOORD_4: me,
        TEXCOORD_5: _e,
        TEXCOORD_6: ge,
        TEXCOORD_7: ve
    }, rl = function(t, e, i) {
        for (var n = function(t) {
            switch (t) {
            case 0:
                return function(t) {
                    return Math.max(t / 127, -1)
                }
                ;
            case 1:
                return function(t) {
                    return t / 255
                }
                ;
            case 2:
                return function(t) {
                    return Math.max(t / 32767, -1)
                }
                ;
            case 3:
                return function(t) {
                    return t / 65535
                }
                ;
            default:
                return function(t) {
                    return t
                }
            }
        }(i), s = e.length, a = 0; a < s; ++a)
            t[a] = n(e[a]);
        return t
    }, ol = function t(e, i, n) {
        void 0 === n && (n = !1);
        var s = il(e.type)
          , a = function(t) {
            switch (t) {
            case 5120:
                return Int8Array;
            case 5121:
                return Uint8Array;
            case 5122:
                return Int16Array;
            case 5123:
                return Uint16Array;
            case 5124:
                return Int32Array;
            case 5125:
                return Uint32Array;
            case 5126:
                return Float32Array;
            default:
                return null
            }
        }(e.componentType);
        if (!a)
            return null;
        var r, o = i[e.bufferView];
        if (e.sparse) {
            var h = e.sparse
              , l = {
                count: h.count,
                type: "SCALAR"
            }
              , c = t(Object.assign(l, h.indices), i, !0)
              , u = {
                count: h.count,
                type: e.scalar,
                componentType: e.componentType
            }
              , d = t(Object.assign(u, h.values), i, !0);
            if (e.hasOwnProperty("bufferView"))
                r = t({
                    bufferView: e.bufferView,
                    byteOffset: e.byteOffset,
                    componentType: e.componentType,
                    count: e.count,
                    type: e.type
                }, i, !0).slice();
            else
                r = new a(e.count * s);
            for (var f = 0; f < h.count; ++f)
                for (var p = c[f], m = 0; m < s; ++m)
                    r[p * s + m] = d[f * s + m]
        } else if (n && o.hasOwnProperty("byteStride")) {
            for (var _ = s * a.BYTES_PER_ELEMENT, g = new ArrayBuffer(e.count * _), v = new Uint8Array(g), y = 0, x = 0; x < e.count; ++x)
                for (var b = (e.byteOffset || 0) + x * o.byteStride, S = 0; S < _; ++S)
                    v[y++] = o[b++];
            r = new a(g)
        } else
            r = new a(o.buffer,o.byteOffset + (e.byteOffset || 0),e.count * s);
        return r
    }, hl = function(t, e) {
        var i = ol(t, e, !0);
        if (i instanceof Float32Array || !t.normalized)
            return i;
        var n = new Float32Array(i.length);
        return rl(n, i, nl(t.componentType)),
        n
    }, ll = function(t) {
        var e = t.min
          , i = t.max;
        if (!e || !i)
            return null;
        if (t.normalized) {
            var n = nl(t.componentType);
            e = rl([], e, n),
            i = rl([], i, n)
        }
        return new Mt(new lt(.5 * (i[0] + e[0]),.5 * (i[1] + e[1]),.5 * (i[2] + e[2])),new lt(.5 * (i[0] - e[0]),.5 * (i[1] - e[1]),.5 * (i[2] - e[2])))
    }, cl = function(t, e) {
        var i = t.POSITION;
        if (i && 3 === i.components) {
            var n;
            if (i.size !== i.stride) {
                var s = i.stride / Xe[i.type]
                  , a = new He[i.type](i.buffer,i.offset,i.count * s);
                n = new He[i.type](3 * i.count);
                for (var r = 0; r < i.count; ++r)
                    n[3 * r + 0] = a[r * s + 0],
                    n[3 * r + 1] = a[r * s + 1],
                    n[3 * r + 2] = a[r * s + 2]
            } else
                n = new He[i.type](i.buffer,i.offset,3 * i.count);
            var o = i.count;
            e || (e = function(t) {
                for (var e = new Uint16Array(t), i = 0; i < t; i++)
                    e[i] = i;
                return e
            }(o));
            var h = Qs(n, e)
              , l = new Float32Array(h.length);
            l.set(h),
            t.NORMAL = {
                buffer: l.buffer,
                size: 12,
                offset: 0,
                stride: 12,
                count: o,
                components: 3,
                type: 6
            }
        }
    }, ul = function(t) {
        var e = new Kh(t.name + "_clone",t.type,t.file,t.data,t.options);
        return e.loaded = !0,
        e.resource = function(t) {
            var e = new Mi(t.device,t);
            return e._levels = function(t) {
                for (var e = [], i = 0; i < t._levels.length; ++i) {
                    var n = [];
                    if (t.cubemap)
                        for (var s = 0; s < 6; ++s)
                            n.push(t._levels[i][s]);
                    else
                        n = t._levels[i];
                    e.push(n)
                }
                return e
            }(t),
            e
        }(t.resource),
        t.registry.add(e),
        e
    }, dl = function(t, e, i) {
        var n = e.POSITION;
        if (!n)
            return null;
        var s = n.count
          , a = [];
        for (var r in e)
            e.hasOwnProperty(r) && a.push({
                semantic: r,
                components: e[r].components,
                type: e[r].type,
                normalize: !!e[r].normalize
            });
        var o, h, l, c, u, d, f = [se, ae, re, le, he, oe, ue, de];
        a.sort((function(t, e) {
            var i = f.indexOf(t.semantic)
              , n = f.indexOf(e.semantic);
            return i < n ? -1 : n < i ? 1 : 0
        }
        ));
        var p = new Qe(t,a)
          , m = !0;
        for (o = 0; o < p.elements.length; ++o)
            if (d = (c = e[(u = p.elements[o]).name]).offset - n.offset,
            c.buffer !== n.buffer || c.stride !== u.stride || c.size !== u.size || d !== u.offset) {
                m = !1;
                break
            }
        var _, g, v, y = new Ze(t,p,s,0), x = y.lock(), b = new Uint32Array(x);
        if (m)
            _ = new Uint32Array(n.buffer,n.offset,s * y.format.size / 4),
            b.set(_);
        else
            for (o = 0; o < y.format.elements.length; ++o) {
                g = (u = y.format.elements[o]).stride / 4,
                v = (c = e[u.name]).stride / 4,
                _ = new Uint32Array(c.buffer,c.offset,(c.count - 1) * v + (c.size + 3) / 4);
                var S = 0
                  , T = u.offset / 4
                  , w = Math.floor((c.size + 3) / 4);
                for (h = 0; h < s; ++h) {
                    for (l = 0; l < w; ++l)
                        b[T + l] = _[S + l];
                    S += v,
                    T += g
                }
            }
        return i && function(t) {
            var e, i, n = [], s = [], a = [];
            for (e = 0; e < t.format.elements.length; ++e) {
                var r = t.format.elements[e];
                if (r.name === ue || r.name === de)
                    switch (r.dataType) {
                    case 6:
                        n.push({
                            offset: r.offset / 4 + 1,
                            stride: r.stride / 4
                        });
                        break;
                    case 3:
                        s.push({
                            offset: r.offset / 2 + 1,
                            stride: r.stride / 2
                        });
                        break;
                    case 1:
                        a.push({
                            offset: r.offset + 1,
                            stride: r.stride
                        })
                    }
            }
            var o = function(n, s, a) {
                var r = new s(t.storage);
                for (e = 0; e < n.length; ++e) {
                    var o = n[e].offset
                      , h = n[e].stride;
                    for (i = 0; i < t.numVertices; ++i)
                        r[o] = a - r[o],
                        o += h
                }
            };
            n.length > 0 && o(n, Float32Array, 1),
            s.length > 0 && o(s, Uint16Array, 65535),
            a.length > 0 && o(a, Uint8Array, 255)
        }(y),
        y.unlock(),
        y
    }, fl = new vt, pl = new lt, ml = function(t, e, i, n, s, a, r) {
        var o = [];
        return e.primitives.forEach((function(h) {
            var l, c, u, d = null, f = !0;
            if (h.hasOwnProperty("extensions")) {
                var p = h.extensions;
                if (p.hasOwnProperty("KHR_draco_mesh_compression")) {
                    var m = window.DracoDecoderModule;
                    if (m) {
                        var _ = p.KHR_draco_mesh_compression;
                        if (_.hasOwnProperty("attributes")) {
                            var g = n[_.bufferView]
                              , v = new m.DecoderBuffer;
                            v.Init(g, g.length);
                            var y, x, b = new m.Decoder, S = b.GetEncodedGeometryType(v);
                            switch (S) {
                            case m.POINT_CLOUD:
                                l = 0,
                                y = new m.PointCloud,
                                x = b.DecodeBufferToPointCloud(v, y);
                                break;
                            case m.TRIANGULAR_MESH:
                                l = 4,
                                y = new m.Mesh,
                                x = b.DecodeBufferToMesh(v, y);
                                break;
                            case m.INVALID_GEOMETRY_TYPE:
                            }
                            if (!x || !x.ok() || 0 == y.ptr)
                                return void s("Failed to decode draco compressed asset: " + (x ? x.error_msg() : "Mesh asset - invalid draco compressed geometry type: " + S));
                            var T = y.num_faces();
                            if (S === m.TRIANGULAR_MESH) {
                                var w = y.num_points() > 65535
                                  , M = (u = 3 * T) * (w ? 4 : 2)
                                  , A = m._malloc(M);
                                w ? (b.GetTrianglesUInt32Array(y, M, A),
                                d = new Uint32Array(m.HEAPU32.buffer,A,u).slice()) : (b.GetTrianglesUInt16Array(y, M, A),
                                d = new Uint16Array(m.HEAPU16.buffer,A,u).slice()),
                                m._free(A)
                            }
                            c = function(t, e, i, n, s, a, r) {
                                var o = e.num_points()
                                  , h = function(t) {
                                    var i, a, r, h, l = n.GetAttributeByUniqueId(e, t), c = o * l.num_components();
                                    switch (l.data_type()) {
                                    case s.DT_UINT8:
                                        h = 1,
                                        r = 1,
                                        i = s._malloc(c * r),
                                        n.GetAttributeDataArrayForAllPoints(e, l, s.DT_UINT8, c * r, i),
                                        a = new Uint8Array(s.HEAPU8.buffer,i,c).slice();
                                        break;
                                    case s.DT_UINT16:
                                        h = 3,
                                        r = 2,
                                        i = s._malloc(c * r),
                                        n.GetAttributeDataArrayForAllPoints(e, l, s.DT_UINT16, c * r, i),
                                        a = new Uint16Array(s.HEAPU16.buffer,i,c).slice();
                                        break;
                                    case s.DT_FLOAT32:
                                    default:
                                        h = 6,
                                        r = 4,
                                        i = s._malloc(c * r),
                                        n.GetAttributeDataArrayForAllPoints(e, l, s.DT_FLOAT32, c * r, i),
                                        a = new Float32Array(s.HEAPF32.buffer,i,c).slice()
                                    }
                                    return s._free(i),
                                    {
                                        values: a,
                                        numComponents: l.num_components(),
                                        componentSizeInBytes: r,
                                        storageType: h,
                                        normalized: l.normalized()
                                    }
                                }
                                  , l = {}
                                  , c = i.attributes;
                                for (var u in c)
                                    if (c.hasOwnProperty(u) && al.hasOwnProperty(u)) {
                                        var d = al[u]
                                          , f = h(c[u])
                                          , p = f.numComponents * f.componentSizeInBytes;
                                        l[d] = {
                                            values: f.values,
                                            buffer: f.values.buffer,
                                            size: p,
                                            offset: 0,
                                            stride: p,
                                            count: o,
                                            components: f.numComponents,
                                            type: f.storageType,
                                            normalize: f.normalized
                                        }
                                    }
                                return l.hasOwnProperty(ae) || cl(l, a),
                                dl(t, l, r)
                            }(t, y, _, b, m, d, a),
                            m.destroy(y),
                            m.destroy(b),
                            m.destroy(v),
                            f = !1
                        }
                    }
                }
            }
            c || (d = h.hasOwnProperty("indices") ? ol(i[h.indices], n, !0) : null,
            c = function(t, e, i, n, s, a, r) {
                var o = {}
                  , h = [];
                for (var l in e)
                    e.hasOwnProperty(l) && al.hasOwnProperty(l) && (o[l] = e[l],
                    h.push(l + ":" + e[l]));
                h.sort();
                var c = h.join()
                  , u = r[c];
                if (!u) {
                    var d = {};
                    for (var f in o) {
                        var p = n[e[f]]
                          , m = ol(p, s)
                          , _ = s[p.bufferView]
                          , g = al[f]
                          , v = il(p.type) * sl(p.componentType)
                          , y = _.hasOwnProperty("byteStride") ? _.byteStride : v;
                        d[g] = {
                            buffer: m.buffer,
                            size: v,
                            offset: m.byteOffset,
                            stride: y,
                            count: p.count,
                            components: il(p.type),
                            type: nl(p.componentType),
                            normalize: p.normalized
                        }
                    }
                    d.hasOwnProperty(ae) || cl(d, i),
                    u = dl(t, d, a),
                    r[c] = u
                }
                return u
            }(t, h.attributes, d, i, n, a, r),
            l = function(t) {
                if (!t.hasOwnProperty("mode"))
                    return 4;
                switch (t.mode) {
                case 0:
                    return 0;
                case 1:
                    return 1;
                case 2:
                    return 2;
                case 3:
                    return 3;
                case 4:
                    return 4;
                case 5:
                    return 5;
                case 6:
                    return 6;
                default:
                    return 4
                }
            }(h));
            var C = null;
            if (c) {
                if ((C = new Ys(t)).vertexBuffer = c,
                C.primitive[0].type = l,
                C.primitive[0].base = 0,
                C.primitive[0].indexed = null !== d,
                null !== d) {
                    var E;
                    2 !== (E = d instanceof Uint8Array ? 0 : d instanceof Uint16Array ? 1 : 2) || t.extUintElement || (E = 1,
                    d = new Uint16Array(d));
                    var P = new ws(t,E,d.length,0,d);
                    C.indexBuffer[0] = P,
                    C.primitive[0].count = d.length
                } else
                    C.primitive[0].count = c.numVertices;
                C.materialIndex = h.material;
                var R = i[h.attributes.POSITION];
                if (C.aabb = ll(R),
                f && h.hasOwnProperty("targets")) {
                    var I = [];
                    h.targets.forEach((function(t, s) {
                        var a = {};
                        t.hasOwnProperty("POSITION") && (R = i[t.POSITION],
                        a.deltaPositions = hl(R, n),
                        a.deltaPositionsType = 6,
                        a.aabb = ll(R)),
                        t.hasOwnProperty("NORMAL") && (R = i[t.NORMAL],
                        a.deltaNormals = hl(R, n),
                        a.deltaNormalsType = 6),
                        e.hasOwnProperty("extras") && e.extras.hasOwnProperty("targetNames") ? a.name = e.extras.targetNames[s] : a.name = s.toString(10),
                        e.hasOwnProperty("weights") && (a.defaultWeight = e.weights[s]),
                        I.push(new Ph(a))
                    }
                    )),
                    C.morph = new fh(I,t)
                }
            }
            o.push(C)
        }
        )),
        o
    }, _l = function(t, e, i) {
        var n, s, a = ["#ifdef MAPFLOAT", "uniform float material_shininess;", "#endif", "", "#ifdef MAPTEXTURE", "uniform sampler2D texture_glossMap;", "#endif", "", "void getGlossiness() {", "    dGlossiness = 1.0;", "", "#ifdef MAPFLOAT", "    dGlossiness *= material_shininess;", "#endif", "", "#ifdef MAPTEXTURE", "    dGlossiness *= texture2D(texture_glossMap, $UV).$CH;", "#endif", "", "#ifdef MAPVERTEX", "    dGlossiness *= saturate(vVertexColor.$VC);", "#endif", "", "    dGlossiness = 1.0 - dGlossiness;", "", "    dGlossiness += 0.0000001;", "}"].join("\n"), r = ["#ifdef MAPCOLOR", "uniform vec3 material_specular;", "#endif", "", "#ifdef MAPTEXTURE", "uniform sampler2D texture_specularMap;", "#endif", "", "void getSpecularity() {", "    dSpecularity = vec3(1.0);", "", "    #ifdef MAPCOLOR", "        dSpecularity *= material_specular;", "    #endif", "", "    #ifdef MAPTEXTURE", "        vec3 srgb = texture2D(texture_specularMap, $UV).$CH;", "        dSpecularity *= vec3(pow(srgb.r, 2.2), pow(srgb.g, 2.2), pow(srgb.b, 2.2));", "    #endif", "", "    #ifdef MAPVERTEX", "        dSpecularity *= saturate(vVertexColor.$VC);", "    #endif", "}"].join("\n"), o = ["#ifdef MAPFLOAT", "uniform float material_clearCoatGlossiness;", "#endif", "", "#ifdef MAPTEXTURE", "uniform sampler2D texture_clearCoatGlossMap;", "#endif", "", "void getClearCoatGlossiness() {", "    ccGlossiness = 1.0;", "", "#ifdef MAPFLOAT", "    ccGlossiness *= material_clearCoatGlossiness;", "#endif", "", "#ifdef MAPTEXTURE", "    ccGlossiness *= texture2D(texture_clearCoatGlossMap, $UV).$CH;", "#endif", "", "#ifdef MAPVERTEX", "    ccGlossiness *= saturate(vVertexColor.$VC);", "#endif", "", "    ccGlossiness = 1.0 - ccGlossiness;", "", "    ccGlossiness += 0.0000001;", "}"].join("\n"), h = [0, 0], l = [1, 1], c = function(t, e, i) {
            var n, s, a = t.texCoord;
            if (a)
                for (s = 0; s < i.length; ++s)
                    e[i[s] + "MapUv"] = a;
            var r = null == (n = t.extensions) ? void 0 : n.KHR_texture_transform;
            if (r) {
                var o = r.offset || h
                  , c = r.scale || l
                  , u = r.rotation ? -r.rotation * it.RAD_TO_DEG : 0
                  , d = new ut(c[0],c[1])
                  , f = new ut(o[0],1 - c[1] - o[1]);
                for (s = 0; s < i.length; ++s)
                    e[i[s] + "MapTiling"] = d,
                    e[i[s] + "MapOffset"] = f,
                    e[i[s] + "MapRotation"] = u
            }
        }, u = new qn;
        if (u.occludeSpecular = !0,
        u.diffuseTint = !0,
        u.diffuseVertexColor = !0,
        u.specularTint = !0,
        u.specularVertexColor = !0,
        t.hasOwnProperty("name") && (u.name = t.name),
        t.hasOwnProperty("extensions") && t.extensions.hasOwnProperty("KHR_materials_pbrSpecularGlossiness")) {
            var d = t.extensions.KHR_materials_pbrSpecularGlossiness;
            if (d.hasOwnProperty("diffuseFactor") ? (n = d.diffuseFactor,
            u.diffuse.set(Math.pow(n[0], 1 / 2.2), Math.pow(n[1], 1 / 2.2), Math.pow(n[2], 1 / 2.2)),
            u.opacity = n[3]) : (u.diffuse.set(1, 1, 1),
            u.opacity = 1),
            d.hasOwnProperty("diffuseTexture")) {
                var f = d.diffuseTexture;
                s = e[f.index],
                u.diffuseMap = s,
                u.diffuseMapChannel = "rgb",
                u.opacityMap = s,
                u.opacityMapChannel = "a",
                c(f, u, ["diffuse", "opacity"])
            }
            if (u.useMetalness = !1,
            d.hasOwnProperty("specularFactor") ? (n = d.specularFactor,
            u.specular.set(Math.pow(n[0], 1 / 2.2), Math.pow(n[1], 1 / 2.2), Math.pow(n[2], 1 / 2.2))) : u.specular.set(1, 1, 1),
            d.hasOwnProperty("glossinessFactor") ? u.shininess = 100 * d.glossinessFactor : u.shininess = 100,
            d.hasOwnProperty("specularGlossinessTexture")) {
                var p = d.specularGlossinessTexture;
                u.specularMap = u.glossMap = e[p.index],
                u.specularMapChannel = "rgb",
                u.glossMapChannel = "a",
                c(p, u, ["gloss", "metalness"])
            }
            u.chunks.specularPS = r
        } else if (t.hasOwnProperty("pbrMetallicRoughness")) {
            var m = t.pbrMetallicRoughness;
            if (m.hasOwnProperty("baseColorFactor") ? (n = m.baseColorFactor,
            u.diffuse.set(Math.pow(n[0], 1 / 2.2), Math.pow(n[1], 1 / 2.2), Math.pow(n[2], 1 / 2.2)),
            u.opacity = n[3]) : (u.diffuse.set(1, 1, 1),
            u.opacity = 1),
            m.hasOwnProperty("baseColorTexture")) {
                var _ = m.baseColorTexture;
                s = e[_.index],
                u.diffuseMap = s,
                u.diffuseMapChannel = "rgb",
                u.opacityMap = s,
                u.opacityMapChannel = "a",
                c(_, u, ["diffuse", "opacity"])
            }
            if (u.useMetalness = !0,
            m.hasOwnProperty("metallicFactor") ? u.metalness = m.metallicFactor : u.metalness = 1,
            m.hasOwnProperty("roughnessFactor") ? u.shininess = 100 * m.roughnessFactor : u.shininess = 100,
            m.hasOwnProperty("metallicRoughnessTexture")) {
                var g = m.metallicRoughnessTexture;
                u.metalnessMap = u.glossMap = e[g.index],
                u.metalnessMapChannel = "b",
                u.glossMapChannel = "g",
                c(g, u, ["gloss", "metalness"])
            }
            u.chunks.glossPS = a
        }
        if (t.hasOwnProperty("normalTexture")) {
            var v = t.normalTexture;
            u.normalMap = e[v.index],
            c(v, u, ["normal"]),
            v.hasOwnProperty("scale") && (u.bumpiness = v.scale)
        }
        if (t.hasOwnProperty("occlusionTexture")) {
            var y = t.occlusionTexture;
            u.aoMap = e[y.index],
            u.aoMapChannel = "r",
            c(y, u, ["ao"])
        }
        if (t.hasOwnProperty("emissiveFactor") ? (n = t.emissiveFactor,
        u.emissive.set(Math.pow(n[0], 1 / 2.2), Math.pow(n[1], 1 / 2.2), Math.pow(n[2], 1 / 2.2)),
        u.emissiveTint = !0) : (u.emissive.set(0, 0, 0),
        u.emissiveTint = !1),
        t.hasOwnProperty("emissiveTexture")) {
            var x = t.emissiveTexture;
            u.emissiveMap = e[x.index],
            c(x, u, ["emissive"])
        }
        if (t.hasOwnProperty("alphaMode"))
            switch (t.alphaMode) {
            case "MASK":
                u.blendType = 3,
                t.hasOwnProperty("alphaCutoff") ? u.alphaTest = t.alphaCutoff : u.alphaTest = .5;
                break;
            case "BLEND":
                u.blendType = 2;
                break;
            default:
            case "OPAQUE":
                u.blendType = 3
            }
        else
            u.blendType = 3;
        if (t.hasOwnProperty("doubleSided") ? (u.twoSidedLighting = t.doubleSided,
        u.cull = t.doubleSided ? 0 : 1) : (u.twoSidedLighting = !1,
        u.cull = 1),
        t.hasOwnProperty("extensions") && t.extensions.hasOwnProperty("KHR_materials_clearcoat")) {
            var b = t.extensions.KHR_materials_clearcoat;
            if (b.hasOwnProperty("clearcoatFactor") ? u.clearCoat = .25 * b.clearcoatFactor : u.clearCoat = 0,
            b.hasOwnProperty("clearcoatTexture")) {
                var S = b.clearcoatTexture;
                u.clearCoatMap = e[S.index],
                u.clearCoatMapChannel = "r",
                c(S, u, ["clearCoat"])
            }
            if (b.hasOwnProperty("clearcoatRoughnessFactor") ? u.clearCoatGlossiness = b.clearcoatRoughnessFactor : u.clearCoatGlossiness = 0,
            b.hasOwnProperty("clearcoatRoughnessTexture")) {
                var T = b.clearcoatRoughnessTexture;
                u.clearCoatGlossMap = e[T.index],
                u.clearCoatGlossMapChannel = "g",
                c(T, u, ["clearCoatGloss"])
            }
            if (b.hasOwnProperty("clearcoatNormalTexture")) {
                var w = b.clearcoatNormalTexture;
                u.clearCoatNormalMap = e[w.index],
                c(w, u, ["clearCoatNormal"]),
                w.hasOwnProperty("scale") && (u.clearCoatBumpiness = w.scale)
            }
            u.chunks.clearCoatGlossPS = o
        }
        return t.hasOwnProperty("extensions") && t.extensions.hasOwnProperty("KHR_materials_unlit") && (u.useLighting = !1,
        u.emissive.copy(u.diffuse),
        u.emissiveTint = u.diffuseTint,
        u.emissiveMap = u.diffuseMap,
        u.emissiveMapUv = u.diffuseMapUv,
        u.emissiveMapTiling.copy(u.diffuseMapTiling),
        u.emissiveMapOffset.copy(u.diffuseMapOffset),
        u.emissiveMapChannel = u.diffuseMapChannel,
        u.emissiveVertexColor = u.diffuseVertexColor,
        u.emissiveVertexColorChannel = u.diffuseVertexColorChannel,
        u.diffuse.set(0, 0, 0),
        u.diffuseTint = !1,
        u.diffuseMap = null,
        u.diffuseVertexColor = !1),
        u.update(),
        u
    }, gl = function(t, e) {
        var i = new ji;
        if (t.hasOwnProperty("name") && t.name.length > 0 ? i.name = t.name : i.name = "node_" + e,
        t.hasOwnProperty("matrix") && (fl.data.set(t.matrix),
        fl.getTranslation(pl),
        i.setLocalPosition(pl),
        fl.getEulerAngles(pl),
        i.setLocalEulerAngles(pl),
        fl.getScale(pl),
        i.setLocalScale(pl)),
        t.hasOwnProperty("rotation")) {
            var n = t.rotation;
            i.setLocalRotation(n[0], n[1], n[2], n[3])
        }
        if (t.hasOwnProperty("translation")) {
            var s = t.translation;
            i.setLocalPosition(s[0], s[1], s[2])
        }
        if (t.hasOwnProperty("scale")) {
            var a = t.scale;
            i.setLocalScale(a[0], a[1], a[2])
        }
        return i
    }, vl = function(t, e) {
        var i = "orthographic" === t.type ? 1 : 0
          , n = 1 === i ? t.orthographic : t.perspective
          , s = {
            enabled: !1,
            projection: i,
            nearClip: n.znear,
            aspectRatioMode: 0
        };
        n.zfar && (s.farClip = n.zfar),
        1 === i ? (s.orthoHeight = .5 * n.ymag,
        n.ymag && (s.aspectRatioMode = 1,
        s.aspectRatio = n.xmag / n.ymag)) : (s.fov = n.yfov * it.RAD_TO_DEG,
        n.aspectRatio && (s.aspectRatioMode = 1,
        s.aspectRatio = n.aspectRatio));
        var a = new nv(t.name);
        return a.addComponent("camera", s),
        a
    }, yl = function(t, e) {
        var i = {
            enabled: !1,
            type: "point" === t.type ? "omni" : t.type,
            color: t.hasOwnProperty("color") ? new at(t.color) : at.WHITE,
            range: t.hasOwnProperty("range") ? t.range : 9999,
            falloffMode: 1,
            intensity: t.hasOwnProperty("intensity") ? it.clamp(t.intensity, 0, 2) : 1
        };
        t.hasOwnProperty("spot") && (i.innerConeAngle = t.spot.hasOwnProperty("innerConeAngle") ? t.spot.innerConeAngle * it.RAD_TO_DEG : 0,
        i.outerConeAngle = t.spot.hasOwnProperty("outerConeAngle") ? t.spot.outerConeAngle * it.RAD_TO_DEG : Math.PI / 4);
        var n = new nv(e.name);
        return n.rotateLocal(90, 0, 0),
        n.addComponent("light", i),
        n
    }, xl = function(t, e, i, n) {
        if (!e.hasOwnProperty("skins") || 0 === e.skins.length)
            return [];
        var s = new Map;
        return e.skins.map((function(a) {
            return function(t, e, i, n, s, a) {
                var r, o, h, l = e.joints, c = l.length, u = [];
                if (e.hasOwnProperty("inverseBindMatrices")) {
                    var d = e.inverseBindMatrices
                      , f = ol(i[d], n, !0)
                      , p = [];
                    for (r = 0; r < c; r++) {
                        for (o = 0; o < 16; o++)
                            p[o] = f[16 * r + o];
                        (h = new vt).set(p),
                        u.push(h)
                    }
                } else
                    for (r = 0; r < c; r++)
                        h = new vt,
                        u.push(h);
                var m = [];
                for (r = 0; r < c; r++)
                    m[r] = s[l[r]].name;
                var _ = m.join("#")
                  , g = a.get(_);
                return g || (g = new Rh(t,u,m),
                a.set(_, g)),
                g
            }(t, a, e.accessors, n, i, s)
        }
        ))
    }, bl = function(t, e, i, n) {
        if (!t.hasOwnProperty("animations") || 0 === t.animations.length)
            return [];
        var s = n && n.animation && n.animation.preprocess
          , a = n && n.animation && n.animation.postprocess;
        return t.animations.map((function(n, r) {
            s && s(n);
            var o = function(t, e, i, n, s) {
                var a, r = function(t) {
                    return new Dh(il(t.type),hl(t, n))
                }, o = {
                    STEP: 0,
                    LINEAR: 1,
                    CUBICSPLINE: 2
                }, h = {}, l = [], c = {}, u = [], d = [];
                for (a = 0; a < t.samplers.length; ++a) {
                    var f = t.samplers[a];
                    h.hasOwnProperty(f.input) || (h[f.input] = l.length,
                    l.push(r(i[f.input]))),
                    c.hasOwnProperty(f.output) || (c[f.output] = u.length,
                    u.push(r(i[f.output])));
                    var p = f.hasOwnProperty("interpolation") && o.hasOwnProperty(f.interpolation) ? o[f.interpolation] : 1;
                    d.push(new Lh([],h[f.input],c[f.output],p))
                }
                var m = []
                  , _ = {
                    translation: "localPosition",
                    rotation: "localRotation",
                    scale: "localScale",
                    weights: "weights"
                }
                  , g = function(t) {
                    for (var e = []; t; )
                        e.unshift(t.name),
                        t = t.parent;
                    return e
                };
                for (a = 0; a < t.channels.length; ++a) {
                    var v = t.channels[a]
                      , y = v.target
                      , x = d[v.sampler]
                      , b = g(s[y.node]);
                    x._paths.push({
                        entityPath: b,
                        component: "graph",
                        propertyPath: [_[y.path]]
                    }),
                    y.path.startsWith("rotation") && 2 !== x.interpolation ? m.push(x.output) : y.path.startsWith("weights") && (u[x.output]._components = u[x.output].data.length / l[x.input].data.length)
                }
                m.sort();
                var S, T = null;
                for (a = 0; a < m.length; ++a) {
                    var w = m[a];
                    if (0 === a || w !== T) {
                        if (4 === (S = u[w]).components)
                            for (var M = S.data, A = M.length - 4, C = 0; C < A; C += 4)
                                M[C + 0] * M[C + 4] + M[C + 1] * M[C + 5] + M[C + 2] * M[C + 6] + M[C + 3] * M[C + 7] < 0 && (M[C + 4] *= -1,
                                M[C + 5] *= -1,
                                M[C + 6] *= -1,
                                M[C + 7] *= -1);
                        T = w
                    }
                }
                var E = 0;
                for (a = 0; a < l.length; a++)
                    S = l[a]._data,
                    E = Math.max(E, 0 === S.length ? 0 : S[S.length - 1]);
                return new Oh(t.hasOwnProperty("name") ? t.name : "animation_" + e,E,l,u,d)
            }(n, r, t.accessors, i, e);
            return a && a(n, o),
            o
        }
        ))
    }, Sl = function(t, e, i, n, s, a) {
        var r = s && s.global && s.global.preprocess
          , o = s && s.global && s.global.postprocess;
        r && r(e);
        for (var h = e.asset && "PlayCanvas" === e.asset.generator, l = function(t, e) {
            if (!t.hasOwnProperty("nodes") || 0 === t.nodes.length)
                return [];
            for (var i = e && e.node && e.node.preprocess, n = e && e.node && e.node.process || gl, s = e && e.node && e.node.postprocess, a = t.nodes.map((function(t, e) {
                i && i(t);
                var a = n(t, e);
                return s && s(t, a),
                a
            }
            )), r = 0; r < t.nodes.length; ++r) {
                var o = t.nodes[r];
                if (o.hasOwnProperty("children"))
                    for (var h = a[r], l = {}, c = 0; c < o.children.length; ++c) {
                        var u = a[o.children[c]];
                        u.parent || (l.hasOwnProperty(u.name) ? u.name += l[u.name]++ : l[u.name] = 1,
                        h.addChild(u))
                    }
            }
            return a
        }(e, s), c = function(t, e) {
            var i, n = [], s = t.scenes.length;
            if (1 === s && 1 === (null == (i = t.scenes[0].nodes) ? void 0 : i.length)) {
                var a = t.scenes[0].nodes[0];
                n.push(e[a])
            } else
                for (var r = 0; r < s; r++) {
                    var o = t.scenes[r];
                    if (o.nodes) {
                        for (var h = new ji(o.name), l = 0; l < o.nodes.length; l++) {
                            var c = e[o.nodes[l]];
                            h.addChild(c)
                        }
                        n.push(h)
                    }
                }
            return n
        }(e, l), u = function(t, e, i) {
            var n = null;
            if (t.hasOwnProperty("nodes") && t.hasOwnProperty("extensions") && t.extensions.hasOwnProperty("KHR_lights_punctual") && t.extensions.KHR_lights_punctual.hasOwnProperty("lights")) {
                var s = t.extensions.KHR_lights_punctual.lights;
                if (s.length) {
                    var a = i && i.light && i.light.preprocess
                      , r = i && i.light && i.light.process || yl
                      , o = i && i.light && i.light.postprocess;
                    t.nodes.forEach((function(t, i) {
                        if (t.hasOwnProperty("extensions") && t.extensions.hasOwnProperty("KHR_lights_punctual") && t.extensions.KHR_lights_punctual.hasOwnProperty("light")) {
                            var h = t.extensions.KHR_lights_punctual.light
                              , l = s[h];
                            if (l) {
                                a && a(l);
                                var c = r(l, e[i]);
                                o && o(l, c),
                                c && (n || (n = new Map),
                                n.set(t, c))
                            }
                        }
                    }
                    ))
                }
            }
            return n
        }(e, l, s), d = function(t, e, i) {
            var n = null;
            if (t.hasOwnProperty("nodes") && t.hasOwnProperty("cameras") && t.cameras.length > 0) {
                var s = i && i.camera && i.camera.preprocess
                  , a = i && i.camera && i.camera.process || vl
                  , r = i && i.camera && i.camera.postprocess;
                t.nodes.forEach((function(i, o) {
                    if (i.hasOwnProperty("camera")) {
                        var h = t.cameras[i.camera];
                        if (h) {
                            s && s(h);
                            var l = a(h, e[o]);
                            r && r(h, l),
                            l && (n || (n = new Map),
                            n.set(i, l))
                        }
                    }
                }
                ))
            }
            return n
        }(e, l, s), f = bl(e, l, i, s), p = function(t, e, i, n) {
            if (!t.hasOwnProperty("materials") || 0 === t.materials.length)
                return [];
            var s = i && i.material && i.material.preprocess
              , a = i && i.material && i.material.process || _l
              , r = i && i.material && i.material.postprocess;
            return t.materials.map((function(t) {
                s && s(t);
                var i = a(t, e, n);
                return r && r(t, i),
                i
            }
            ))
        }(e, n.map((function(t) {
            return t.resource
        }
        )), s, h), m = function(t, e, i, n, s) {
            if (!e.hasOwnProperty("meshes") || 0 === e.meshes.length || !e.hasOwnProperty("accessors") || 0 === e.accessors.length || !e.hasOwnProperty("bufferViews") || 0 === e.bufferViews.length)
                return [];
            var a = {};
            return e.meshes.map((function(r) {
                return ml(t, r, e.accessors, i, n, s, a)
            }
            ))
        }(t, e, i, a, h), _ = xl(t, e, l, i), g = [], v = 0; v < m.length; v++)
            g[v] = new Ih,
            g[v].meshes = m[v];
        !function(t, e, i) {
            t.nodes.forEach((function(t) {
                t.hasOwnProperty("mesh") && t.hasOwnProperty("skin") && e[t.mesh].meshes.forEach((function(e) {
                    e.skin = i[t.skin]
                }
                ))
            }
            ))
        }(e, g, _);
        var y = new tl(e);
        y.nodes = l,
        y.scenes = c,
        y.animations = f,
        y.textures = n,
        y.materials = p,
        y.renders = g,
        y.skins = _,
        y.lights = u,
        y.cameras = d,
        o && o(e, y),
        a(null, y)
    }, Tl = 0, wl = function(t, e, i, n, s, a, r) {
        var o = a && a.image && a.image.preprocess
          , h = a && a.image && a.image.processAsync || function(t, e) {
            e(null, null)
        }
          , l = a && a.image && a.image.postprocess
          , c = function(e) {
            l && l(t, e),
            r(null, e)
        }
          , u = {
            "image/png": "png",
            "image/jpeg": "jpg",
            "image/basis": "basis",
            "image/ktx": "ktx",
            "image/vnd-ms.dds": "dds"
        }
          , d = function(e, i, n, a) {
            var o = (t.name || "gltf-texture") + "-" + Tl++
              , h = {
                url: e || o
            };
            if (i && (h.contents = i),
            n) {
                var l = u[n];
                l && (h.filename = h.url + "." + l)
            }
            var d = new Kh(o,"texture",h,null,a);
            d.on("load", c),
            d.on("error", r),
            s.add(d),
            s.load(d)
        };
        o && o(t),
        h(t, (function(s, a) {
            var o;
            s ? r(s) : a ? c(a) : t.hasOwnProperty("uri") ? el(t.uri) ? d(t.uri, null, (o = t.uri).substring(o.indexOf(":") + 1, o.indexOf(";")), null) : d(p.join(n, t.uri), null, null, {
                crossOrigin: "anonymous"
            }) : t.hasOwnProperty("bufferView") && t.hasOwnProperty("mimeType") ? d(null, i[t.bufferView], t.mimeType, null) : r("Invalid image found in gltf (neither uri or bufferView found). index=" + e)
        }
        ))
    }, Ml = function(t, e) {
        var i = JSON.parse(function(t) {
            if ("undefined" != typeof TextDecoder)
                return (new TextDecoder).decode(t);
            for (var e = "", i = 0; i < t.length; i++)
                e += String.fromCharCode(t[i]);
            return decodeURIComponent(escape(e))
        }(t));
        i.asset && i.asset.version && parseFloat(i.asset.version) < 2 ? e("Invalid gltf version. Expected version 2.0 or above but found version '" + i.asset.version + "'.") : e(null, i)
    }, Al = function(t, e, i) {
        t && t.toLowerCase().endsWith(".glb") ? function(t, e) {
            var i = t instanceof ArrayBuffer ? new DataView(t) : new DataView(t.buffer,t.byteOffset,t.byteLength)
              , n = i.getUint32(0, !0)
              , s = i.getUint32(4, !0)
              , a = i.getUint32(8, !0);
            if (1179937895 === n)
                if (2 === s)
                    if (a <= 0 || a > i.byteLength)
                        e("Invalid length found in glb header. Found " + a);
                    else {
                        for (var r = [], o = 12; o < a; ) {
                            var h = i.getUint32(o, !0);
                            if (o + h + 8 > i.byteLength)
                                throw new Error("Invalid chunk length found in glb. Found " + h);
                            var l = i.getUint32(o + 4, !0)
                              , c = new Uint8Array(i.buffer,i.byteOffset + o + 8,h);
                            r.push({
                                length: h,
                                type: l,
                                data: c
                            }),
                            o += h + 8
                        }
                        1 === r.length || 2 === r.length ? 1313821514 === r[0].type ? r.length > 1 && 5130562 !== r[1].type ? e("Invalid chunk type found in glb file. Expected 0x004E4942, found 0x" + r[1].type.toString(16)) : e(null, {
                            gltfChunk: r[0].data,
                            binaryChunk: 2 === r.length ? r[1].data : null
                        }) : e("Invalid chunk type found in glb file. Expected 0x4E4F534A, found 0x" + r[0].type.toString(16)) : e("Invalid number of chunks found in glb file.")
                    }
                else
                    e("Invalid version number found in glb header. Expected 2, found " + s);
            else
                e("Invalid magic number found in glb header. Expected 0x46546C67, found 0x" + n.toString(16))
        }(e, i) : i(null, {
            gltfChunk: e,
            binaryChunk: null
        })
    }, Cl = function(t, e, i, n) {
        var s = []
          , a = i && i.bufferView && i.bufferView.preprocess
          , r = i && i.bufferView && i.bufferView.processAsync || function(t, e, i) {
            i(null, null)
        }
          , o = i && i.bufferView && i.bufferView.postprocess
          , h = t.bufferViews ? t.bufferViews.length : 0;
        if (h)
            for (var l = function(e, i) {
                var a = t.bufferViews[e];
                a.hasOwnProperty("byteStride") && (i.byteStride = a.byteStride),
                s[e] = i,
                o && o(a, i),
                0 == --h && n(null, s)
            }, c = 0; c < t.bufferViews.length; ++c) {
                var u = t.bufferViews[c];
                a && a(u),
                r(u, e, function(t, i, s, a) {
                    if (s)
                        n(s);
                    else if (a)
                        l(t, a);
                    else {
                        var r = e[i.buffer]
                          , o = new Uint8Array(r.buffer,r.byteOffset + (i.byteOffset || 0),i.byteLength);
                        l(t, o)
                    }
                }
                .bind(null, c, u))
            }
        else
            n(null, null)
    }, El = function() {
        function t(t, e, i) {
            this._device = t,
            this._assets = e,
            this._defaultMaterial = kn.get(t),
            this._maxRetries = i
        }
        t.parseAsync = function(t, e, i, n, s, a, r) {
            Al(t, i, (function(t, i) {
                t ? r(t) : Ml(i.gltfChunk, (function(t, o) {
                    t ? r(t) : function(t, e, i, n, s) {
                        var a = [];
                        if (t.buffers && 0 !== t.buffers.length)
                            for (var r = n && n.buffer && n.buffer.preprocess, o = n && n.buffer && n.buffer.processAsync || function(t, e) {
                                e(null, null)
                            }
                            , h = n && n.buffer && n.buffer.postprocess, l = t.buffers.length, c = function(e, i) {
                                a[e] = i,
                                h && h(t.buffers[e], i),
                                0 == --l && s(null, a)
                            }, u = 0; u < t.buffers.length; ++u) {
                                var d = t.buffers[u];
                                r && r(d),
                                o(d, function(t, n, a, r) {
                                    if (a)
                                        s(a);
                                    else if (r)
                                        c(t, new Uint8Array(r));
                                    else if (n.hasOwnProperty("uri"))
                                        if (el(n.uri)) {
                                            for (var o = atob(n.uri.split(",")[1]), h = new Uint8Array(o.length), l = 0; l < o.length; l++)
                                                h[l] = o.charCodeAt(l);
                                            c(t, h)
                                        } else
                                            st.get(p.join(i, n.uri), {
                                                cache: !0,
                                                responseType: "arraybuffer",
                                                retry: !1
                                            }, function(t, e, i) {
                                                e ? s(e) : c(t, new Uint8Array(i))
                                            }
                                            .bind(null, t));
                                    else
                                        c(t, e)
                                }
                                .bind(null, u, d))
                            }
                        else
                            s(null, a)
                    }(o, i.binaryChunk, e, a, (function(t, i) {
                        t ? r(t) : Cl(o, i, a, (function(t, i) {
                            t ? r(t) : function(t, e, i, n, s, a) {
                                if (t.hasOwnProperty("images") && 0 !== t.images.length && t.hasOwnProperty("textures") && 0 !== t.textures.length)
                                    for (var r = s && s.texture && s.texture.preprocess, o = s && s.texture && s.texture.processAsync || function(t, e, i) {
                                        i(null, null)
                                    }
                                    , h = s && s.texture && s.texture.postprocess, l = [], c = [], u = t.textures.length, d = function(e, i) {
                                        if (c[i] || (c[i] = []),
                                        c[i].push(e),
                                        0 == --u) {
                                            var n = [];
                                            c.forEach((function(e, i) {
                                                e.forEach((function(e, s) {
                                                    var a, r, o, c, u = 0 === s ? l[i] : ul(l[i]);
                                                    a = u.resource,
                                                    r = (t.samplers || [])[t.textures[e].sampler],
                                                    o = function(t, e) {
                                                        switch (t) {
                                                        case 9728:
                                                            return 0;
                                                        case 9729:
                                                            return 1;
                                                        case 9984:
                                                            return 2;
                                                        case 9985:
                                                            return 4;
                                                        case 9986:
                                                            return 3;
                                                        case 9987:
                                                            return 5;
                                                        default:
                                                            return e
                                                        }
                                                    }
                                                    ,
                                                    c = function(t, e) {
                                                        switch (t) {
                                                        case 33071:
                                                            return 1;
                                                        case 33648:
                                                            return 2;
                                                        case 10497:
                                                            return 0;
                                                        default:
                                                            return e
                                                        }
                                                    }
                                                    ,
                                                    a && (r = r || {},
                                                    a.minFilter = o(r.minFilter, 5),
                                                    a.magFilter = o(r.magFilter, 1),
                                                    a.addressU = c(r.wrapS, 0),
                                                    a.addressV = c(r.wrapT, 0)),
                                                    n[e] = u,
                                                    h && h(t.textures[e], u)
                                                }
                                                ))
                                            }
                                            )),
                                            a(null, n)
                                        }
                                    }, f = 0; f < t.textures.length; ++f) {
                                        var p = t.textures[f];
                                        r && r(p),
                                        o(p, t.images, function(r, o, h, c) {
                                            var u, f;
                                            if (h)
                                                a(h);
                                            else if (null == c && void 0 === (c = null == o || null == (u = o.extensions) || null == (f = u.KHR_texture_basisu) ? void 0 : f.source) && (c = o.source),
                                            l[c])
                                                d(r, c);
                                            else {
                                                var p = t.images[c];
                                                wl(p, r, e, i, n, s, (function(t, e) {
                                                    t ? a(t) : (l[c] = e,
                                                    d(r, c))
                                                }
                                                ))
                                            }
                                        }
                                        .bind(null, f, p))
                                    }
                                else
                                    a(null, [])
                            }(o, i, e, s, a, (function(t, e) {
                                t ? r(t) : Sl(n, o, i, e, a, r)
                            }
                            ))
                        }
                        ))
                    }
                    ))
                }
                ))
            }
            ))
        }
        ,
        t.parse = function(t, e, i, n) {
            var s = null;
            return n = n || {},
            Al(t, e, (function(t, e) {
                t ? console.error(t) : Ml(e.gltfChunk, (function(t, a) {
                    t ? console.error(t) : Cl(a, [e.binaryChunk], n, (function(t, e) {
                        t ? console.error(t) : Sl(i, a, e, [], n, (function(t, e) {
                            t ? console.error(t) : s = e
                        }
                        ))
                    }
                    ))
                }
                ))
            }
            )),
            s
        }
        ;
        var e = t.prototype;
        return e._getUrlWithoutParams = function(t) {
            return t.indexOf("?") >= 0 ? t.split("?")[0] : t
        }
        ,
        e.load = function(e, i, n) {
            var s = this;
            Kh.fetchArrayBuffer(e.load, (function(a, r) {
                a ? i(a) : t.parseAsync(s._getUrlWithoutParams(e.original), p.extractPath(e.load), r, s._device, n.registry, n.options, (function(t, e) {
                    t ? i(t) : i(null, new Jh(e,n,s._assets,s._defaultMaterial))
                }
                ))
            }
            ), n, this._maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }(), Pl = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            (t.load.startsWith("blob:") || t.load.startsWith("data:")) && (".glb" === p.getExtension(t.original).toLowerCase() ? i.responseType = nt.ResponseType.ARRAY_BUFFER : i.responseType = nt.ResponseType.JSON),
            st.get(t.load, i, (function(i, n) {
                i ? e("Error loading animation resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            if (".glb" === p.getExtension(t).toLowerCase()) {
                var i = El.parse("filename.glb", e, null);
                if (i) {
                    var n = i.animations;
                    return i.destroy(),
                    n
                }
                return null
            }
            return this["_parseAnimationV" + e.animation.version](e)
        }
        ,
        e._parseAnimationV3 = function(t) {
            var e = t.animation
              , i = new Eh;
            i.name = e.name,
            i.duration = e.duration;
            for (var n = 0; n < e.nodes.length; n++) {
                var s = new Ch
                  , a = e.nodes[n];
                s._name = a.name;
                for (var r = 0; r < a.keys.length; r++) {
                    var o = a.keys[r]
                      , h = o.time
                      , l = o.pos
                      , c = o.rot
                      , u = o.scale
                      , d = new lt(l[0],l[1],l[2])
                      , f = (new yt).setFromEulerAngles(c[0], c[1], c[2])
                      , p = new lt(u[0],u[1],u[2])
                      , m = new Ah(h,d,f,p);
                    s._keys.push(m)
                }
                i.addNode(s)
            }
            return i
        }
        ,
        e._parseAnimationV4 = function(t) {
            var e = t.animation
              , i = new Eh;
            i.name = e.name,
            i.duration = e.duration;
            for (var n = 0; n < e.nodes.length; n++) {
                var s = new Ch
                  , a = e.nodes[n];
                s._name = a.name;
                for (var r = a.defaults.p, o = a.defaults.r, h = a.defaults.s, l = 0; l < a.keys.length; l++) {
                    var c = a.keys[l]
                      , u = c.t
                      , d = r || c.p
                      , f = o || c.r
                      , p = h || c.s
                      , m = new lt(d[0],d[1],d[2])
                      , _ = (new yt).setFromEulerAngles(f[0], f[1], f[2])
                      , g = new lt(p[0],p[1],p[2])
                      , v = new Ah(u,m,_,g);
                    s._keys.push(v)
                }
                i.addNode(s)
            }
            return i
        }
        ,
        t
    }(), Rl = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            t.load.startsWith("blob:") && (i.responseType = nt.ResponseType.JSON),
            st.get(t.load, i, (function(i, n) {
                i ? e("Error loading animation clip resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            var i = e.name
              , n = e.duration
              , s = e.inputs.map((function(t) {
                return new Dh(1,t)
            }
            ))
              , a = e.outputs.map((function(t) {
                return new Dh(t.components,t.data)
            }
            ))
              , r = e.curves.map((function(t) {
                return new Lh([t.path],t.inputIndex,t.outputIndex,t.interpolation)
            }
            ));
            return new Oh(i,n,s,a,r)
        }
        ,
        t
    }(), Il = function() {
        function t(t) {
            if (this._layers = [],
            this._parameters = {},
            Array.isArray(t.layers))
                this._layers = t.layers;
            else
                for (var e in t.layers) {
                    for (var i = t.layers[e], n = {
                        name: i.name,
                        blendType: i.blendType,
                        weight: i.weight,
                        states: [],
                        transitions: []
                    }, s = 0; s < i.states.length; s++)
                        n.states.push(t.states[i.states[s]]);
                    for (var a = 0; a < i.transitions.length; a++) {
                        var r = t.transitions[i.transitions[a]];
                        if (r.conditions && !Array.isArray(r.conditions)) {
                            for (var o = Object.keys(r.conditions), h = [], l = 0; l < o.length; l++) {
                                var c = r.conditions[o[l]];
                                c.parameterName && h.push(c)
                            }
                            r.conditions = h
                        }
                        Number.isInteger(r.from) && (r.from = t.states[r.from].name),
                        Number.isInteger(r.to) && (r.to = t.states[r.to].name),
                        n.transitions.push(r)
                    }
                    this._layers.push(n)
                }
            for (var u in t.parameters) {
                var d = t.parameters[u];
                this._parameters[d.name] = {
                    type: d.type,
                    value: d.value
                }
            }
        }
        return G(t, [{
            key: "parameters",
            get: function() {
                return Object.assign({}, this._parameters)
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            }
        }]),
        t
    }(), Ll = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            t.load.startsWith("blob:") && (i.responseType = nt.ResponseType.JSON),
            st.get(t.load, i, (function(i, n) {
                i ? e("Error loading animation state graph resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return new Il(e)
        }
        ,
        t
    }(), Dl = function() {
        function t(t) {
            t instanceof Audio ? this.audio = t : this.buffer = t
        }
        return G(t, [{
            key: "duration",
            get: function() {
                var t = 0;
                return this.buffer ? t = this.buffer.duration : this.audio && (t = this.audio.duration),
                t || 0
            }
        }]),
        t
    }(), kl = function() {
        if ("undefined" == typeof window)
            return !1;
        var t = window.navigator.userAgent
          , e = t.indexOf("MSIE ");
        if (e > 0)
            return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);
        if (t.indexOf("Trident/") > 0) {
            var i = t.indexOf("rv:");
            return parseInt(t.substring(i + 3, t.indexOf(".", i)), 10)
        }
        return !1
    }(), Ol = {
        ".ogg": "audio/ogg",
        ".mp3": "audio/mpeg",
        ".wav": "audio/x-wav",
        ".mp4a": "audio/mp4",
        ".m4a": "audio/mp4",
        ".mp4": "audio/mp4",
        ".aac": "audio/aac"
    }, Fl = function() {
        function t(t) {
            this.manager = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e._isSupported = function(t) {
            var e = p.getExtension(t);
            return !!Ol[e]
        }
        ,
        e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = function(i) {
                var n = "Error loading audio url: " + t.original;
                i && (n += ": " + (i.message || i)),
                console.warn(n),
                e(n)
            };
            if (this._createSound) {
                if (!this._isSupported(t.original))
                    return void i("Audio format for " + t.original + " not supported");
                this._createSound(t.load, (function(t) {
                    e(null, new Dl(t))
                }
                ), i)
            } else
                i(null)
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e._createSound = function(t, e, i) {
            if (gh()) {
                var n = this.manager;
                if (!n.context)
                    return void i("Audio manager has no audio context");
                var s = {
                    retry: this.maxRetries > 0,
                    maxRetries: this.maxRetries
                };
                (t.startsWith("blob:") || t.startsWith("data:")) && (s.responseType = nt.ResponseType.ARRAY_BUFFER),
                st.get(t, s, (function(t, s) {
                    t ? i(t) : n.context.decodeAudioData(s, e, i)
                }
                ))
            } else {
                var a = null;
                try {
                    a = new Audio
                } catch (t) {
                    return void i("No support for Audio element")
                }
                kl && document.body.appendChild(a);
                a.onerror = function() {
                    a.onerror = null,
                    kl && document.body.removeChild(a),
                    i()
                }
                ,
                a.addEventListener("canplaythrough", (function t() {
                    a.removeEventListener("canplaythrough", t),
                    kl && document.body.removeChild(a),
                    e(a)
                }
                )),
                a.src = t
            }
        }
        ,
        t
    }(), Bl = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                responseType: nt.ResponseType.ARRAY_BUFFER,
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e("Error loading binary resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }(), Nl = function() {
        function t(t) {
            this._blobUrls = {};
            for (var e = 0, i = t.length; e < i; e++)
                t[e].url && (this._blobUrls[t[e].name] = t[e].url)
        }
        var e = t.prototype;
        return e.hasBlobUrl = function(t) {
            return !!this._blobUrls[t]
        }
        ,
        e.getBlobUrl = function(t) {
            return this._blobUrls[t]
        }
        ,
        e.destroy = function() {
            for (var t in this._blobUrls)
                URL.revokeObjectURL(this._blobUrls[t]);
            this._blobUrls = null
        }
        ,
        t
    }();
    function Ul(t) {
        var e, i;
        if ("undefined" != typeof TextDecoder)
            try {
                e = new TextDecoder("utf-8"),
                i = new TextDecoder("windows-1252")
            } catch (t) {
                console.warn("TextDecoder not supported - pc.Untar module will not work")
            }
        else
            console.warn("TextDecoder not supported - pc.Untar module will not work");
        function n(t) {
            this._fields = t
        }
        function s(t) {
            this._arrayBuffer = t || new ArrayBuffer(0),
            this._bufferView = new DataView(this._arrayBuffer),
            this._globalPaxHeader = null,
            this._paxHeader = null,
            this._bytesRead = 0
        }
        n.parse = function(t, i, s) {
            for (var a = new Uint8Array(t,i,s), r = 0, o = []; r < s; ) {
                var h = void 0;
                for (h = r; h < s && 32 !== a[h]; h++)
                    ;
                if (h >= s)
                    throw new Error("Invalid PAX header data format.");
                var l = parseInt(e.decode(new Uint8Array(t,i + r,h - r)), 10)
                  , c = e.decode(new Uint8Array(t,i + h + 1,l - (h - r) - 2)).split("=");
                if (2 !== c.length)
                    throw new Error("Invalid PAX header data format.");
                0 === c[1].length && (c[1] = null),
                o.push({
                    name: c[0],
                    value: c[1]
                }),
                r += l
            }
            return new n(o)
        }
        ,
        n.prototype.applyHeader = function(t) {
            for (var e = 0; e < this._fields.length; e++) {
                var i = this._fields[e].name
                  , n = this._fields[e].value;
                "path" === i && (i = "name"),
                null === n ? delete t[i] : t[i] = n
            }
        }
        ,
        t || (Qh = s),
        s.prototype._hasNext = function() {
            return this._bytesRead + 4 < this._arrayBuffer.byteLength && 0 !== this._bufferView.getUint32(this._bytesRead)
        }
        ,
        s.prototype._readNextFile = function() {
            var e = new DataView(this._arrayBuffer,this._bytesRead,512)
              , s = i.decode(e);
            this._bytesRead += 512;
            var a = s.substr(0, 100).replace(/\0/g, "")
              , r = s.substr(257, 6)
              , o = parseInt(s.substr(124, 12), 8)
              , h = s.substr(156, 1)
              , l = this._bytesRead
              , c = null
              , u = !1;
            switch (h) {
            case "0":
            case "":
                if (u = !0,
                !t) {
                    var d = new Blob([this._arrayBuffer.slice(this._bytesRead, this._bytesRead + o)]);
                    c = URL.createObjectURL(d)
                }
                break;
            case "g":
                this._globalPaxHeader = n.parse(this._arrayBuffer, this._bytesRead, o);
                break;
            case "x":
                this._paxHeader = n.parse(this._arrayBuffer, this._bytesRead, o)
            }
            this._bytesRead += o;
            var f = o % 512;
            if (0 !== f && (this._bytesRead += 512 - f),
            !u)
                return null;
            if (-1 !== r.indexOf("ustar")) {
                var p = s.substr(345, 155).replace(/\0/g, "");
                p.length > 0 && (a = p.trim() + a.trim())
            }
            var m = {
                name: a,
                start: l,
                size: o,
                url: c
            };
            return this._globalPaxHeader && this._globalPaxHeader.applyHeader(m),
            this._paxHeader && (this._paxHeader.applyHeader(m),
            this._paxHeader = null),
            m
        }
        ,
        s.prototype.untar = function(t) {
            if (!e)
                return console.error("Cannot untar because TextDecoder interface is not available for this platform."),
                [];
            for (var i = []; this._hasNext(); ) {
                var n = this._readNextFile();
                n && (t && n.name && (n.name = t + n.name),
                i.push(n))
            }
            return i
        }
        ,
        t && (self.onmessage = function(t) {
            var e = t.data.id;
            try {
                var i = new s(t.data.arrayBuffer).untar(t.data.prefix);
                postMessage({
                    id: e,
                    files: i,
                    arrayBuffer: t.data.arrayBuffer
                }, [t.data.arrayBuffer])
            } catch (t) {
                postMessage({
                    id: e,
                    error: t.toString()
                })
            }
        }
        )
    }
    var zl = null;
    var Vl = function() {
        function t(t) {
            this._requestId = 0,
            this._pendingRequests = {},
            this._filenamePrefix = t,
            this._worker = new Worker(function() {
                if (!zl) {
                    var t = "(" + Ul.toString() + ")(true)\n\n"
                      , e = new Blob([t],{
                        type: "application/javascript"
                    });
                    zl = URL.createObjectURL(e)
                }
                return zl
            }()),
            this._worker.addEventListener("message", this._onMessage.bind(this))
        }
        var e = t.prototype;
        return e._onMessage = function(t) {
            var e = t.data.id;
            if (this._pendingRequests[e]) {
                var i = this._pendingRequests[e];
                if (delete this._pendingRequests[e],
                t.data.error)
                    i(t.data.error);
                else {
                    for (var n = t.data.arrayBuffer, s = 0, a = t.data.files.length; s < a; s++) {
                        var r = t.data.files[s]
                          , o = new Blob([n.slice(r.start, r.start + r.size)]);
                        r.url = URL.createObjectURL(o)
                    }
                    i(null, t.data.files)
                }
            }
        }
        ,
        e.untar = function(t, e) {
            var i = this._requestId++;
            this._pendingRequests[i] = e,
            this._worker.postMessage({
                id: i,
                prefix: this._filenamePrefix,
                arrayBuffer: t
            }, [t])
        }
        ,
        e.hasPendingRequests = function() {
            return Object.keys(this._pendingRequests).length > 0
        }
        ,
        e.destroy = function() {
            this._worker && (this._worker.terminate(),
            this._worker = null,
            this._pendingRequests = null)
        }
        ,
        t
    }();
    Ul();
    var Gl = function() {
        function t(t) {
            this._assets = t,
            this._worker = null,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = this;
            st.get(t.load, {
                responseType: nt.ResponseType.ARRAY_BUFFER,
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(n, s) {
                if (n)
                    e("Error loading bundle resource " + t.original + ": " + n);
                else
                    try {
                        i._untar(s, e)
                    } catch (i) {
                        e("Error loading bundle resource " + t.original + ": " + i)
                    }
            }
            ))
        }
        ,
        e._untar = function(t, e) {
            var i = this;
            if (E.workers)
                i._worker || (i._worker = new Vl(i._assets.prefix)),
                i._worker.untar(t, (function(t, n) {
                    e(t, n),
                    i._worker.hasPendingRequests() || (i._worker.destroy(),
                    i._worker = null)
                }
                ));
            else {
                var n = new Qh(t).untar(i._assets.prefix);
                e(null, n)
            }
        }
        ,
        e.open = function(t, e) {
            return new Nl(e)
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , Wl = function() {
        function t() {}
        var e = t.prototype;
        return e.instantiateModelEntity = function(t) {
            return null
        }
        ,
        e.instantiateRenderEntity = function(t) {
            return null
        }
        ,
        t
    }()
      , Hl = function() {
        function t(t, e) {
            this.glbParser = new El(t,e,0),
            this.parsers = {}
        }
        var e = t.prototype;
        return e._getUrlWithoutParams = function(t) {
            return t.indexOf("?") >= 0 ? t.split("?")[0] : t
        }
        ,
        e._getParser = function(t) {
            var e = p.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".", "");
            return this.parsers[e] || this.glbParser
        }
        ,
        e.load = function(t, e, i) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            this._getParser(t.original).load(t, e, i)
        }
        ,
        e.open = function(t, e, i) {
            return this._getParser(t).open(t, e, i)
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , Xl = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e("Error loading css resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }();
    var jl = function() {
        function t(t, e, i) {
            this._device = t,
            this._registry = e,
            this._loader = i
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            this.loadAssets(i, e)
        }
        ,
        e.open = function(t, e, i) {
            return i ? i.resource : null
        }
        ,
        e.patch = function(t, e) {
            this.loadAssets(t, (function(i, n) {
                i && (e.fire("error", t),
                e.fire("error:" + t.id, i, t),
                t.fire("error", t))
            }
            ))
        }
        ,
        e.getAssetIds = function(t) {
            var e = [];
            if (e[0] = t.file,
            (t.loadFaces || !t.file) && t.data && t.data.textures)
                for (var i = 0; i < 6; ++i)
                    e[i + 1] = t.data.textures[i];
            else
                e[1] = e[2] = e[3] = e[4] = e[5] = e[6] = null;
            return e
        }
        ,
        e.compareAssetIds = function(t, e) {
            return t && e ? parseInt(t, 10) === t || "string" == typeof t ? t === e : t.url === e.url : null !== t == (null !== e)
        }
        ,
        e.update = function(t, e, i) {
            var n, s, a, r = t.data || {}, o = t._handlerState.assets, h = t._resources, l = [null, null, null, null, null, null, null], c = function() {
                return r.hasOwnProperty("type") ? r.type : r.hasOwnProperty("rgbm") ? r.rgbm ? Be : Fe : null
            };
            if (t.loaded && i[0] === o[0])
                l[1] = h[1] || null,
                l[2] = h[2] || null,
                l[3] = h[3] || null,
                l[4] = h[4] || null,
                l[5] = h[5] || null,
                l[6] = h[6] || null;
            else if (i[0])
                for (n = i[0].resource,
                a = 0; a < 6; ++a) {
                    var u = [n._levels[a]];
                    if (0 === a && this._device.useTexCubeLod)
                        for (s = 1; s < n._levels.length; ++s)
                            u[s] = n._levels[s];
                    var d = new Mi(this._device,{
                        name: t.name + "_prelitCubemap" + (n.width >> a),
                        cubemap: !0,
                        type: c() || n.type,
                        width: n.width >> a,
                        height: n.height >> a,
                        format: n.format,
                        levels: u,
                        fixCubemapSeams: !0,
                        addressU: 1,
                        addressV: 1
                    });
                    l[a + 1] = d
                }
            var f = i.slice(1);
            if (t.loaded && this.cmpArrays(f, o.slice(1)))
                l[0] = h[0] || null;
            else if (-1 === f.indexOf(null)) {
                var p = f.map((function(t) {
                    return t.resource
                }
                ))
                  , m = [];
                for (s = 0; s < p[0]._levels.length; ++s)
                    m.push(p.map((function(t) {
                        return t._levels[s]
                    }
                    )));
                var _ = new Mi(this._device,{
                    name: t.name + "_faces",
                    cubemap: !0,
                    type: c() || p[0].type,
                    width: p[0].width,
                    height: p[0].height,
                    format: p[0].format,
                    levels: m,
                    minFilter: r.hasOwnProperty("minFilter") ? r.minFilter : p[0].minFilter,
                    magFilter: r.hasOwnProperty("magFilter") ? r.magFilter : p[0].magFilter,
                    anisotropy: r.hasOwnProperty("anisotropy") ? r.anisotropy : 1,
                    addressU: 1,
                    addressV: 1,
                    fixCubemapSeams: !!i[0]
                });
                l[0] = _
            }
            if (!this.cmpArrays(l, h))
                for (t.resources = l,
                t._handlerState.assetIds = e,
                t._handlerState.assets = i,
                a = 0; a < h.length; ++a)
                    null !== h[a] && -1 === l.indexOf(h[a]) && h[a].destroy();
            for (a = 0; a < o.length; ++a)
                null !== o[a] && -1 === i.indexOf(o[a]) && o[a].unload()
        }
        ,
        e.cmpArrays = function(t, e) {
            if (t.length !== e.length)
                return !1;
            for (var i = 0; i < t.length; ++i)
                if (t[i] !== e[i])
                    return !1;
            return !0
        }
        ,
        e.resolveId = function(t) {
            var e = parseInt(t, 10);
            return e === t || e.toString() === t ? e : t
        }
        ,
        e.loadAssets = function(t, e) {
            t.hasOwnProperty("_handlerState") || (t._handlerState = {
                assetIds: [null, null, null, null, null, null, null],
                assets: [null, null, null, null, null, null, null]
            });
            for (var i, n = this, s = n.getAssetIds(t), a = [null, null, null, null, null, null, null], r = t._handlerState.assetIds, o = t._handlerState.assets, h = n._registry, l = 7, c = function(i, r) {
                a[i] = r,
                0 === --l && (n.update(t, s, a),
                e(null, t.resources))
            }, u = function(t, i, n) {
                e(i)
            }, d = function(t, e) {
                e.loaded ? c(t, e) : (h.once("load:" + e.id, c.bind(n, t)),
                h.once("error:" + e.id, u.bind(n, t)),
                e.loading || h.load(e))
            }, f = 0; f < 7; ++f) {
                var p = this.resolveId(s[f]);
                if (p)
                    if (n.compareAssetIds(p, r[f]))
                        c(f, o[f]);
                    else if (parseInt(p, 10) === p)
                        (i = h.get(p)) ? d(f, i) : setTimeout(function(t, e) {
                            var i = h.get(e);
                            i ? d(t, i) : u(0, "failed to find dependent cubemap asset=" + e)
                        }
                        .bind(null, f, p));
                    else {
                        var m = "string" == typeof p ? {
                            url: p,
                            filename: p
                        } : p;
                        i = new Kh(t.name + "_part_" + f,"texture",m),
                        h.add(i),
                        h.once("load:" + i.id, c.bind(n, f)),
                        h.once("error:" + i.id, u.bind(n, f)),
                        h.load(i)
                    }
                else
                    c(f, null)
            }
        }
        ,
        t
    }()
      , ql = function() {
        function t() {}
        var e = t.prototype;
        return e.load = function(t, e) {
            e(null, null)
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        t
    }()
      , Yl = "msdf"
      , Kl = "bitmap"
      , Zl = function() {
        function t(t, e) {
            this.type = e && e.type || Yl,
            this.em = 1,
            this.textures = t,
            this.intensity = 0,
            this._data = null,
            this.data = e
        }
        return G(t, [{
            key: "data",
            get: function() {
                return this._data
            },
            set: function(t) {
                if (this._data = t,
                t && (void 0 !== this._data.intensity && (this.intensity = this._data.intensity),
                this._data.info || (this._data.info = {}),
                (!this._data.version || this._data.version < 2) && (this._data.info.maps = [{
                    width: this._data.info.width,
                    height: this._data.info.height
                }],
                this._data.chars)))
                    for (var e in this._data.chars)
                        this._data.chars[e].map = 0
            }
        }]),
        t
    }();
    function $l(t) {
        return t.version < 3 && (t.version < 2 && (t.info.maps = t.info.maps || [{
            width: t.info.width,
            height: t.info.height
        }]),
        t.chars = Object.keys(t.chars || {}).reduce((function(e, i) {
            var n = t.chars[i]
              , s = void 0 !== n.letter ? n.letter : U.fromCodePoint(i);
            return t.version < 2 && (n.map = n.map || 0),
            e[s] = n,
            e
        }
        ), {}),
        t.version = 3),
        t
    }
    var Ql = function() {
        function t(t) {
            this._loader = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var n = this;
            ".json" === p.getExtension(t.original) ? st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, s) {
                if (i)
                    e("Error loading font resource: " + t.original + " [" + i + "]");
                else {
                    var a = $l(s);
                    n._loadTextures(t.load.replace(".json", ".png"), a, (function(t, i) {
                        if (t)
                            return e(t);
                        e(null, {
                            data: a,
                            textures: i
                        })
                    }
                    ))
                }
            }
            )) : (i && i.data && (i.data = $l(i.data)),
            this._loadTextures(t.load, i && i.data, e))
        }
        ,
        e._loadTextures = function(t, e, i) {
            for (var n = e.info.maps.length, s = 0, a = null, r = new Array(n), o = this._loader, h = function(e) {
                var h = function(t, o) {
                    if (!a) {
                        if (t)
                            return a = t,
                            i(t);
                        o.upload(),
                        r[e] = o,
                        ++s === n && i(null, r)
                    }
                };
                0 === e ? o.load(t, "texture", h) : o.load(t.replace(".png", e + ".png"), "texture", h)
            }, l = 0; l < n; l++)
                h(l)
        }
        ,
        e.open = function(t, e, i) {
            return e.textures ? new Zl(e.textures,e.data) : new Zl(e,null)
        }
        ,
        e.patch = function(t, e) {
            var i = t.resource;
            !i.data && t.data ? i.data = t.data : !t.data && i.data && (t.data = i.data),
            t.data && (t.data = $l(t.data))
        }
        ,
        t
    }()
      , Jl = function(t, e, i) {
        var n, s, a = i.singleVecs, r = e.___1;
        r || (n = i.tripleVecs,
        s = e.___2);
        var o = r ? r[0] : n[s];
        t.setLocalPosition(a[o], a[o + 1], a[o + 2]),
        o = r ? r[1] : n[s + 1],
        t.setLocalEulerAngles(a[o], a[o + 1], a[o + 2]),
        o = r ? r[2] : n[s + 2],
        t.setLocalScale(a[o], a[o + 1], a[o + 2])
    }
      , tc = function(t, e) {
        var i = t.charCodeAt(0) - e.fieldFirstCode;
        return e.fieldArray[i]
    }
      , ec = function(t, e) {
        for (var i = 0, n = 0; n < t.length; n++)
            i = i * e.fieldCodeBase + t.charCodeAt(n) - e.fieldFirstCode;
        return e.fieldArray[i]
    }
      , ic = function() {
        function t(t, e) {
            this._node = t,
            this._data = e
        }
        var e = t.prototype;
        return e.run = function() {
            var t = Object.prototype.toString.call(this._node);
            return "[object Object]" === t ? this._handleMap() : "[object Array]" === t ? this._handleArray() : this._result = this._node,
            this._result
        }
        ,
        e._handleMap = function() {
            this._result = {},
            Object.keys(this._node).forEach(this._handleKey, this)
        }
        ,
        e._handleKey = function(e) {
            var i = e
              , n = e.length;
            1 === n ? i = tc(e, this._data) : 2 === n && (i = ec(e, this._data)),
            this._result[i] = new t(this._node[e],this._data).run()
        }
        ,
        e._handleArray = function() {
            this._result = [],
            this._node.forEach(this._handleArElt, this)
        }
        ,
        e._handleArElt = function(e) {
            var i = new t(e,this._data).run();
            this._result.push(i)
        }
        ,
        t
    }()
      , nc = function() {
        function t(t, e) {
            this._app = t,
            this._isTemplate = e
        }
        var e = t.prototype;
        return e.parse = function(t) {
            var e = {}
              , i = null
              , n = t.compressedFormat;
            for (var s in n && !t.entDecompressed && (t.entDecompressed = !0,
            t.entities = new ic(t.entities,n).run()),
            t.entities) {
                var a = t.entities[s]
                  , r = this._createEntity(a, n);
                e[s] = r,
                null === a.parent && (i = r)
            }
            for (var o in t.entities)
                for (var h = e[o], l = t.entities[o].children, c = l.length, u = 0; u < c; u++) {
                    var d = e[l[u]];
                    d && h.addChild(d)
                }
            return this._openComponentData(i, t.entities),
            i
        }
        ,
        e._createEntity = function(t, e) {
            var i = new nv;
            if (i.name = t.name,
            i.setGuid(t.resource_id),
            this._setPosRotScale(i, t, e),
            i._enabled = void 0 === t.enabled || t.enabled,
            this._isTemplate ? i._template = !0 : i._enabledInHierarchy = i._enabled,
            i.template = t.template,
            t.tags)
                for (var n = 0; n < t.tags.length; n++)
                    i.tags.add(t.tags[n]);
            return t.labels && t.labels.forEach((function(t) {
                i.addLabel(t)
            }
            )),
            i
        }
        ,
        e._setPosRotScale = function(t, e, i) {
            if (i)
                Jl(t, e, i);
            else {
                var n = e.position
                  , s = e.rotation
                  , a = e.scale;
                t.setLocalPosition(n[0], n[1], n[2]),
                t.setLocalEulerAngles(s[0], s[1], s[2]),
                t.setLocalScale(a[0], a[1], a[2])
            }
        }
        ,
        e._openComponentData = function(t, e) {
            for (var i = this._app.systems.list, n = i.length, s = e[t.getGuid()], a = 0; a < n; a++) {
                var r = i[a]
                  , o = s.components[r.id];
                o && r.addComponent(t, o)
            }
            n = s.children.length;
            for (var h = t._children, l = 0; l < n; l++)
                h[l] = this._openComponentData(h[l], e);
            return t
        }
        ,
        t
    }()
      , sc = function(t, e, i) {
        "string" == typeof t && (t = {
            load: t,
            original: t
        }),
        st.get(t.load, {
            retry: e > 0,
            maxRetries: e
        }, (function(e, n) {
            if (e) {
                var s = "Error while loading scene JSON " + t.original;
                e.message ? (s += ": " + e.message,
                e.stack && (s += "\n" + e.stack)) : s += ": " + e,
                i(s)
            } else
                i(e, n)
        }
        ))
    }
      , ac = function() {
        function t(t) {
            this._app = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            sc(t, this.maxRetries, e)
        }
        ,
        e.open = function(t, e) {
            this._app.systems.script.preloading = !0;
            var i = new nc(this._app,!1).parse(e);
            return this._app.systems.script.preloading = !1,
            i
        }
        ,
        t
    }()
      , rc = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e("Error loading html resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , oc = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            t.load.startsWith("blob:") && (i.responseType = nt.ResponseType.JSON),
            st.get(t.load, i, (function(i, n) {
                i ? e("Error loading JSON resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , hc = function() {
        function t(t, e, i, n, s) {
            this.propertyName = t,
            this.parent = e,
            this._scope = s,
            this._registry = i,
            this.id = null,
            this.url = null,
            this.asset = null,
            this._onAssetLoad = n.load,
            this._onAssetAdd = n.add,
            this._onAssetRemove = n.remove,
            this._onAssetUnload = n.unload
        }
        var e = t.prototype;
        return e._bind = function() {
            this.id && (this._onAssetLoad && this._registry.on("load:" + this.id, this._onLoad, this),
            this._onAssetAdd && this._registry.once("add:" + this.id, this._onAdd, this),
            this._onAssetRemove && this._registry.on("remove:" + this.id, this._onRemove, this),
            this._onAssetUnload && this._registry.on("unload:" + this.id, this._onUnload, this)),
            this.url && (this._onAssetLoad && this._registry.on("load:url:" + this.url, this._onLoad, this),
            this._onAssetAdd && this._registry.once("add:url:" + this.url, this._onAdd, this),
            this._onAssetRemove && this._registry.on("remove:url:" + this.url, this._onRemove, this))
        }
        ,
        e._unbind = function() {
            this.id && (this._onAssetLoad && this._registry.off("load:" + this.id, this._onLoad, this),
            this._onAssetAdd && this._registry.off("add:" + this.id, this._onAdd, this),
            this._onAssetRemove && this._registry.off("remove:" + this.id, this._onRemove, this),
            this._onAssetUnload && this._registry.off("unload:" + this.id, this._onUnload, this)),
            this.url && (this._onAssetLoad && this._registry.off("load:" + this.url, this._onLoad, this),
            this._onAssetAdd && this._registry.off("add:" + this.url, this._onAdd, this),
            this._onAssetRemove && this._registry.off("remove:" + this.url, this._onRemove, this))
        }
        ,
        e._onLoad = function(t) {
            this._onAssetLoad.call(this._scope, this.propertyName, this.parent, t)
        }
        ,
        e._onAdd = function(t) {
            this.asset = t,
            this._onAssetAdd.call(this._scope, this.propertyName, this.parent, t)
        }
        ,
        e._onRemove = function(t) {
            this._onAssetRemove.call(this._scope, this.propertyName, this.parent, t),
            this.asset = null
        }
        ,
        e._onUnload = function(t) {
            this._onAssetUnload.call(this._scope, this.propertyName, this.parent, t)
        }
        ,
        G(t, [{
            key: "id",
            get: function() {
                return this._id
            },
            set: function(t) {
                if (this.url)
                    throw Error("Can't set id and url");
                this._unbind(),
                this._id = t,
                this.asset = this._registry.get(this._id),
                this._bind()
            }
        }, {
            key: "url",
            get: function() {
                return this._url
            },
            set: function(t) {
                if (this.id)
                    throw Error("Can't set id and url");
                this._unbind(),
                this._url = t,
                this.asset = this._registry.getByUrl(this._url),
                this._bind()
            }
        }]),
        t
    }()
      , lc = function() {
        function t() {
            this.removeInvalid = !0,
            this.valid = !0,
            this.enumValidators = {
                occludeSpecular: this._createEnumValidator([0, 1, 2]),
                cull: this._createEnumValidator([0, 1, 2, 3]),
                blendType: this._createEnumValidator([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),
                shadingModel: this._createEnumValidator([0, 1])
            }
        }
        var e = t.prototype;
        return e.setInvalid = function(t, e) {
            this.valid = !1,
            this.removeInvalid && delete e[t]
        }
        ,
        e.validate = function(t) {
            var e = Un
              , i = "path" === t.mappingFormat;
            for (var n in t) {
                var s = e[n];
                if (s)
                    if (s.startsWith("enum")) {
                        var a = s.split(":")[1];
                        this.enumValidators[a] && (this.enumValidators[a](t[n]) || this.setInvalid(n, t))
                    } else if ("number" === s)
                        "number" != typeof t[n] && this.setInvalid(n, t);
                    else if ("boolean" === s)
                        "boolean" != typeof t[n] && this.setInvalid(n, t);
                    else if ("string" === s)
                        "string" != typeof t[n] && this.setInvalid(n, t);
                    else if ("vec2" === s)
                        t[n]instanceof Array && 2 === t[n].length || this.setInvalid(n, t);
                    else if ("rgb" === s)
                        t[n]instanceof Array && 3 === t[n].length || this.setInvalid(n, t);
                    else if ("texture" === s)
                        i ? "string" == typeof t[n] || t[null === n] || t[n]instanceof Mi || this.setInvalid(n, t) : "number" != typeof t[n] && null !== t[n] && (t[n]instanceof Mi || this.setInvalid(n, t));
                    else if ("boundingbox" === s)
                        t[n].center && t[n].center instanceof Array && 3 === t[n].center.length || this.setInvalid(n, t),
                        t[n].halfExtents && t[n].halfExtents instanceof Array && 3 === t[n].halfExtents.length || this.setInvalid(n, t);
                    else if ("cubemap" === s)
                        "number" != typeof t[n] && null !== t[n] && void 0 !== t[n] && (t[n]instanceof Mi && t[n].cubemap || this.setInvalid(n, t));
                    else if ("chunks" === s)
                        for (var r = Object.keys(t[n]), o = 0; o < r.length; o++)
                            "string" != typeof t[n][r[o]] && this.setInvalid(r[o], t[n]);
                    else
                        console.error("Unknown material type: " + s);
                else
                    this.valid = !1
            }
            return t.validated = !0,
            this.valid
        }
        ,
        e._createEnumValidator = function(t) {
            return function(e) {
                return t.indexOf(e) >= 0
            }
        }
        ,
        t
    }()
      , cc = function() {
        function t() {
            this._validator = null
        }
        var e = t.prototype;
        return e.parse = function(t) {
            var e = this.migrate(t)
              , i = this._validate(e)
              , n = new qn;
            return this.initialize(n, i),
            n
        }
        ,
        e.initialize = function(t, e) {
            for (var i in e.validated || (e = this._validate(e)),
            e.chunks && (t.chunks = W({}, e.chunks)),
            e) {
                var n = Un[i]
                  , s = e[i];
                if ("vec2" === n)
                    t[i] = new ut(s[0],s[1]);
                else if ("rgb" === n)
                    t[i] = new at(s[0],s[1],s[2]);
                else if ("texture" === n)
                    s instanceof Mi ? t[i] = s : t[i]instanceof Mi && "number" == typeof s && s > 0 || (t[i] = null);
                else if ("cubemap" === n)
                    s instanceof Mi ? t[i] = s : t[i]instanceof Mi && "number" == typeof s && s > 0 || (t[i] = null);
                else if ("boundingbox" === n) {
                    var a = new lt(s.center[0],s.center[1],s.center[2])
                      , r = new lt(s.halfExtents[0],s.halfExtents[1],s.halfExtents[2]);
                    t[i] = new Mt(a,r)
                } else
                    t[i] = e[i]
            }
            t.update()
        }
        ,
        e.migrate = function(t) {
            var e;
            void 0 === t.shadingModel && ("blinn" === t.shader ? t.shadingModel = 1 : t.shadingModel = 0),
            t.shader && delete t.shader,
            t.mapping_format && (t.mappingFormat = t.mapping_format,
            delete t.mapping_format);
            var i = [["bumpMapFactor", "bumpiness"], ["aoUvSet", "aoMapUv"], ["aoMapVertexColor", "aoVertexColor"], ["diffuseMapVertexColor", "diffuseVertexColor"], ["emissiveMapVertexColor", "emissiveVertexColor"], ["specularMapVertexColor", "specularVertexColor"], ["metalnessMapVertexColor", "metalnessVertexColor"], ["opacityMapVertexColor", "opacityVertexColor"], ["glossMapVertexColor", "glossVertexColor"], ["lightMapVertexColor", "lightVertexColor"], ["diffuseMapTint", "diffuseTint"], ["specularMapTint", "specularTint"], ["emissiveMapTint", "emissiveTint"], ["metalnessMapTint", "metalnessTint"]];
            for (e = 0; e < i.length; e++) {
                var n = i[e][0]
                  , s = i[e][1];
                void 0 !== t[n] && void 0 === t[s] && (t[s] = t[n],
                delete t[n])
            }
            var a = ["fresnelFactor", "shadowSampleType"];
            for (e = 0; e < a.length; e++) {
                var r = a[e];
                t.hasOwnProperty(r) && delete t[r]
            }
            return t
        }
        ,
        e._validate = function(t) {
            return t.validated || (this._validator || (this._validator = new lc),
            this._validator.validate(t)),
            t
        }
        ,
        t
    }()
      , uc = {
        aoMap: "white",
        diffuseMap: "gray",
        specularMap: "gray",
        metalnessMap: "black",
        glossMap: "gray",
        emissiveMap: "gray",
        normalMap: "normal",
        heightMap: "gray",
        opacityMap: "gray",
        sphereMap: "gray",
        lightMap: "white"
    }
      , dc = function() {
        function t(t) {
            this._assets = t.assets,
            this._device = t.graphicsDevice,
            this._placeholderTextures = null,
            this._parser = new cc,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e && e("Error loading material: " + t.original + " [" + i + "]") : e && (n._engine = !0,
                e(null, n))
            }
            ))
        }
        ,
        e.open = function(t, e) {
            var i = this._parser.parse(e);
            return e._engine && (i._data = e,
            delete e._engine),
            i
        }
        ,
        e._createPlaceholders = function() {
            this._placeholderTextures = {};
            var t = {
                white: [255, 255, 255, 255],
                gray: [128, 128, 128, 255],
                black: [0, 0, 0, 255],
                normal: [128, 128, 255, 255]
            };
            for (var e in t)
                if (t.hasOwnProperty(e)) {
                    this._placeholderTextures[e] = new Mi(this._device,{
                        width: 2,
                        height: 2,
                        format: 7
                    }),
                    this._placeholderTextures[e].name = "placeholder";
                    for (var i = this._placeholderTextures[e].lock(), n = 0; n < 4; n++)
                        for (var s = 0; s < 4; s++)
                            i[4 * n + s] = t[e][s];
                    this._placeholderTextures[e].unlock()
                }
        }
        ,
        e.patch = function(t, e) {
            t.resource._data && (t._data = t.resource._data,
            delete t.resource._data),
            t.data.name = t.name,
            t.resource.name = t.name,
            this._bindAndAssignAssets(t, e),
            t.off("unload", this._onAssetUnload, this),
            t.on("unload", this._onAssetUnload, this)
        }
        ,
        e._onAssetUnload = function(t) {
            delete t.data.parameters,
            delete t.data.chunks,
            delete t.data.name
        }
        ,
        e._assignTexture = function(t, e, i) {
            e.resource[t] = i
        }
        ,
        e._getPlaceholderTexture = function(t) {
            this._placeholderTextures || this._createPlaceholders();
            var e = uc[t];
            return this._placeholderTextures[e]
        }
        ,
        e._assignPlaceholderTexture = function(t, e) {
            e.resource[t] = this._getPlaceholderTexture(t, e)
        }
        ,
        e._onTextureLoad = function(t, e, i) {
            this._assignTexture(t, e, i.resource),
            e.resource.update()
        }
        ,
        e._onTextureAdd = function(t, e, i) {
            this._assets.load(i)
        }
        ,
        e._onTextureRemoveOrUnload = function(t, e, i) {
            var n = e.resource;
            n && e.resource[t] === i.resource && (this._assignPlaceholderTexture(t, e),
            n.update())
        }
        ,
        e._assignCubemap = function(t, e, i) {
            e.resource[t] = i[0],
            7 === i.length && (e.resource.prefilteredCubeMap128 = i[1],
            e.resource.prefilteredCubeMap64 = i[2],
            e.resource.prefilteredCubeMap32 = i[3],
            e.resource.prefilteredCubeMap16 = i[4],
            e.resource.prefilteredCubeMap8 = i[5],
            e.resource.prefilteredCubeMap4 = i[6])
        }
        ,
        e._onCubemapLoad = function(t, e, i) {
            this._assignCubemap(t, e, i.resources),
            this._parser.initialize(e.resource, e.data)
        }
        ,
        e._onCubemapAdd = function(t, e, i) {
            0 === e.data.shadingModel && (e.loadFaces = !0),
            this._assets.load(i)
        }
        ,
        e._onCubemapRemoveOrUnload = function(t, e, i) {
            var n = e.resource;
            e.data.prefilteredCubeMap128 === i.resources[1] && (this._assignCubemap(t, e, [null, null, null, null, null, null, null]),
            n.update())
        }
        ,
        e._bindAndAssignAssets = function(t, e) {
            var i, n, s, a = this._parser.migrate(t.data), r = t.resource, o = "path" === a.mappingFormat, h = zn;
            for (i = 0; i < h.length; i++) {
                n = h[i],
                s = r._assetReferences[n];
                var l = a[n]
                  , c = r[n]
                  , u = c === this._getPlaceholderTexture(n, t)
                  , d = a.validated;
                !l || c && d && !u ? s && (o ? s.url = null : s.id = null) : (s || (s = new hc(n,t,e,{
                    load: this._onTextureLoad,
                    add: this._onTextureAdd,
                    remove: this._onTextureRemoveOrUnload,
                    unload: this._onTextureRemoveOrUnload
                },this),
                r._assetReferences[n] = s),
                o ? s.url = t.getAbsoluteUrl(l) : s.id = l,
                s.asset && (s.asset.resource ? this._assignTexture(n, t, s.asset.resource) : this._assignPlaceholderTexture(n, t),
                e.load(s.asset)))
            }
            var f = Gn;
            for (i = 0; i < f.length; i++)
                n = f[i],
                s = r._assetReferences[n],
                a[n] && !t.data.prefilteredCubeMap128 && (s || (s = new hc(n,t,e,{
                    load: this._onCubemapLoad,
                    add: this._onCubemapAdd,
                    remove: this._onCubemapRemoveOrUnload,
                    unload: this._onCubemapRemoveOrUnload
                },this),
                r._assetReferences[n] = s),
                o ? s.url = a[n] : s.id = a[n],
                s.asset && (s.asset.loaded && this._assignCubemap(n, t, s.asset.resources),
                e.load(s.asset)));
            this._parser.initialize(r, a)
        }
        ,
        t
    }()
      , fc = function() {
        function t(t, e) {
            this._device = t,
            this._defaultMaterial = e
        }
        return t.prototype.parse = function(t) {
            var e = El.parse("filename.glb", t, this._device);
            if (e) {
                var i = Jh.createModel(e, this._defaultMaterial);
                return e.destroy(),
                i
            }
            return null
        }
        ,
        t
    }()
      , mc = function() {
        this.index = 0,
        this.boneIndices = [0, 0, 0, 0]
    }
      , _c = function() {
        function t() {
            this.partition = 0,
            this.vertexStart = 0,
            this.vertexCount = 0,
            this.indexStart = 0,
            this.indexCount = 0,
            this.boneIndices = [],
            this.vertices = [],
            this.indices = [],
            this.indexMap = {},
            this.originalMesh = null
        }
        var e = t.prototype;
        return e.addVertex = function(t, e, i) {
            var n = -1;
            if (void 0 !== this.indexMap[e])
                n = this.indexMap[e],
                this.indices.push(n);
            else {
                for (var s = 0; s < 4; s++)
                    if (0 !== i.blendWeight.data[4 * e + s]) {
                        var a = i.blendIndices.data[4 * t.index + s];
                        t.boneIndices[s] = this.getBoneRemap(a)
                    }
                n = this.vertices.length,
                this.indices.push(n),
                this.vertices.push(t),
                this.indexMap[e] = n
            }
        }
        ,
        e.addPrimitive = function(t, e, i, n) {
            for (var s = [], a = 0, r = t.length, o = 0; o < r; o++)
                for (var h = t[o].index, l = 0; l < 4; l++)
                    if (i.blendWeight.data[4 * h + l] > 0) {
                        for (var c = i.blendIndices.data[4 * h + l], u = !0, d = 0; d < a; d++)
                            if (s[d] === c) {
                                u = !1;
                                break
                            }
                        if (u)
                            s[a] = c,
                            a += -1 === this.getBoneRemap(c) ? 1 : 0
                    }
            if (this.boneIndices.length + a > n)
                return !1;
            for (var f = 0; f < a; f++)
                this.boneIndices.push(s[f]);
            for (var p = 0; p < r; p++)
                this.addVertex(t[p], e[p], i);
            return !0
        }
        ,
        e.getBoneRemap = function(t) {
            for (var e = 0; e < this.boneIndices.length; e++)
                if (this.boneIndices[e] === t)
                    return e;
            return -1
        }
        ,
        t
    }();
    function gc(t, e, i) {
        var n, s, a, r;
        !function(t) {
            for (var e = t.vertices, i = t.skins, n = t.meshes, s = t.meshInstances, a = 0; a < n.length; a++)
                n[a].vertices = e[n[a].vertices],
                void 0 !== n[a].skin && (n[a].skin = i[n[a].skin]);
            for (var r = 0; r < s.length; r++)
                s[r].mesh = n[s[r].mesh]
        }(t);
        var o, h = t.vertices, l = t.skins, c = t.meshes, u = t.meshInstances, d = function(t) {
            var e = new mc;
            return e.index = t,
            e
        };
        for (n = l.length - 1; n >= 0; n--)
            if (l[n].boneNames.length > i) {
                var f = l.splice(n, 1)[0]
                  , p = [];
                for (s = 0; s < c.length; s++)
                    c[s].skin === f && p.push(c[s]);
                for (s = 0; s < p.length; s++)
                    -1 !== (r = c.indexOf(p[s])) && c.splice(r, 1);
                if (0 === p.length)
                    throw new Error("partitionSkin: There should be at least one mesh that references a skin");
                var m = p[0].vertices;
                for (s = 1; s < p.length; s++)
                    if (p[s].vertices !== m)
                        throw new Error("partitionSkin: All meshes that share a skin should also share the same vertex buffer");
                var _ = void 0
                  , g = []
                  , v = []
                  , y = []
                  , x = 0;
                for (s = 0; s < p.length; s++) {
                    for (var b = (o = p[s]).indices, S = o.base; S < o.base + o.count; ) {
                        r = b[S++],
                        v[0] = d(r),
                        y[0] = r,
                        r = b[S++],
                        v[1] = d(r),
                        y[1] = r,
                        r = b[S++],
                        v[2] = d(r),
                        y[2] = r;
                        for (var T = !1, w = x; w < g.length; w++)
                            if ((_ = g[w]).addPrimitive(v, y, m, i)) {
                                T = !0;
                                break
                            }
                        T || ((_ = new _c).originalMesh = o,
                        _.addPrimitive(v, y, m, i),
                        g.push(_))
                    }
                    x = g.length
                }
                var M = []
                  , A = [];
                for (s = 0; s < g.length; s++)
                    if ((_ = g[s]).vertices.length && _.indices.length) {
                        var C = M.length
                          , E = _.vertices.length
                          , P = A.length
                          , R = _.indices.length;
                        _.partition = s,
                        _.vertexStart = C,
                        _.vertexCount = E,
                        _.indexStart = P,
                        _.indexCount = R;
                        var I = void 0
                          , L = void 0;
                        for (I = 0,
                        L = C; I < E; )
                            M[L++] = _.vertices[I++];
                        for (I = 0,
                        L = P; I < R; )
                            A[L++] = _.indices[I++] + C
                    }
                var D = [];
                for (s = 0; s < g.length; s++) {
                    _ = g[s];
                    var k = []
                      , O = [];
                    for (a = 0; a < _.boneIndices.length; a++)
                        k.push(f.inverseBindMatrices[_.boneIndices[a]]),
                        O.push(f.boneNames[_.boneIndices[a]]);
                    var F = {
                        inverseBindMatrices: k,
                        boneNames: O
                    };
                    D.push(F),
                    l.push(F)
                }
                var B = void 0
                  , N = void 0
                  , U = void 0
                  , z = void 0
                  , V = {};
                for (N in m)
                    V[N] = {
                        components: m[N].components,
                        data: [],
                        type: m[N].type
                    };
                for (N in m)
                    if ("blendIndices" === N) {
                        var G = V[N].data;
                        for (s = 0; s < M.length; s++) {
                            var W = M[s].boneIndices;
                            G.push(W[0], W[1], W[2], W[3])
                        }
                    } else
                        for (U = (B = m[N]).data,
                        z = B.components,
                        s = 0; s < M.length; s++)
                            for (r = M[s].index,
                            a = 0; a < z; a++)
                                V[N].data.push(U[r * z + a]);
                for (h[h.indexOf(m)] = V,
                s = 0; s < g.length; s++)
                    for (_ = g[s],
                    o = {
                        aabb: {
                            min: [0, 0, 0],
                            max: [0, 0, 0]
                        },
                        vertices: V,
                        skin: D[s],
                        indices: A.splice(0, _.indexCount),
                        type: "triangles",
                        base: 0,
                        count: _.indexCount
                    },
                    c.push(o),
                    a = u.length - 1; a >= 0; a--)
                        u[a].mesh === _.originalMesh && (u.push({
                            mesh: o,
                            node: u[a].node
                        }),
                        e && e.push({
                            material: e[a].material,
                            path: e[a].path
                        }));
                for (s = 0; s < g.length; s++)
                    for (_ = g[s],
                    a = u.length - 1; a >= 0; a--)
                        u[a].mesh === _.originalMesh && (u.splice(a, 1),
                        e && e.splice(a, 1))
            }
        !function(t) {
            for (var e = t.vertices, i = t.skins, n = t.meshes, s = t.meshInstances, a = 0; a < n.length; a++)
                n[a].vertices = e.indexOf(n[a].vertices),
                void 0 !== n[a].skin && (n[a].skin = i.indexOf(n[a].skin));
            for (var r = 0; r < s.length; r++)
                s[r].mesh = n.indexOf(s[r].mesh)
        }(t)
    }
    var vc = {
        points: 0,
        lines: 1,
        lineloop: 2,
        linestrip: 3,
        triangles: 4,
        trianglestrip: 5,
        trianglefan: 6
    }
      , yc = {
        int8: 0,
        uint8: 1,
        int16: 2,
        uint16: 3,
        int32: 4,
        uint32: 5,
        float32: 6
    }
      , xc = function() {
        function t(t, e) {
            this._device = t,
            this._defaultMaterial = e
        }
        var e = t.prototype;
        return e.parse = function(t) {
            var e = t.model;
            if (!e)
                return null;
            if (e.version <= 1)
                return null;
            var i = this._parseNodes(t)
              , n = this._parseSkins(t, i)
              , s = this._parseVertexBuffers(t)
              , a = this._parseIndexBuffers(t, s)
              , r = this._parseMorphs(t, i, s)
              , o = this._parseMeshes(t, n.skins, r.morphs, s, a.buffer, a.data)
              , h = this._parseMeshInstances(t, i, o, n.skins, n.instances, r.morphs, r.instances)
              , l = new mh;
            return l.graph = i[0],
            l.meshInstances = h,
            l.skinInstances = n.instances,
            l.morphInstances = r.instances,
            l.getGraph().syncHierarchy(),
            l
        }
        ,
        e._parseNodes = function(t) {
            var e, i = t.model, n = [];
            for (e = 0; e < i.nodes.length; e++) {
                var s = i.nodes[e]
                  , a = new ji(s.name);
                a.setLocalPosition(s.position[0], s.position[1], s.position[2]),
                a.setLocalEulerAngles(s.rotation[0], s.rotation[1], s.rotation[2]),
                a.setLocalScale(s.scale[0], s.scale[1], s.scale[2]),
                a.scaleCompensation = !!s.scaleCompensation,
                n.push(a)
            }
            for (e = 1; e < i.parents.length; e++)
                n[i.parents[e]].addChild(n[e]);
            return n
        }
        ,
        e._parseSkins = function(t, e) {
            var i, n, s = t.model, a = [], r = [];
            !this._device.supportsBoneTextures && s.skins.length > 0 && gc(s, null, this._device.getBoneLimit());
            for (i = 0; i < s.skins.length; i++) {
                var o = s.skins[i]
                  , h = [];
                for (n = 0; n < o.inverseBindMatrices.length; n++) {
                    var l = o.inverseBindMatrices[n];
                    h[n] = (new vt).set(l)
                }
                var c = new Rh(this._device,h,o.boneNames);
                a.push(c);
                var u = new pa(c)
                  , d = [];
                for (n = 0; n < c.boneNames.length; n++) {
                    var f = c.boneNames[n]
                      , p = e[0].findByName(f);
                    d.push(p)
                }
                u.bones = d,
                r.push(u)
            }
            return {
                skins: a,
                instances: r
            }
        }
        ,
        e._getMorphVertexCount = function(t, e, i) {
            for (var n = 0; n < t.meshes.length; n++) {
                var s = t.meshes[n];
                if (s.morph === e)
                    return i[s.vertices].numVertices
            }
        }
        ,
        e._parseMorphs = function(t, e, i) {
            var n, s, a, r, o, h, l = t.model, c = [], u = [];
            if (l.morphs) {
                var d = function(t, e, i) {
                    for (var n = new Float32Array(3 * i), s = 0; s < e.length; s++) {
                        var a = 3 * e[s];
                        n[a] = t[3 * s],
                        n[a + 1] = t[3 * s + 1],
                        n[a + 2] = t[3 * s + 2]
                    }
                    return n
                };
                for (n = 0; n < l.morphs.length; n++) {
                    for (r = l.morphs[n].targets,
                    h = [],
                    a = this._getMorphVertexCount(l, n, i),
                    s = 0; s < r.length; s++) {
                        var f = r[s].aabb
                          , p = f.min
                          , m = f.max
                          , _ = new Mt(new lt(.5 * (m[0] + p[0]),.5 * (m[1] + p[1]),.5 * (m[2] + p[2])),new lt(.5 * (m[0] - p[0]),.5 * (m[1] - p[1]),.5 * (m[2] - p[2])))
                          , g = r[s].indices
                          , v = r[s].deltaPositions
                          , y = r[s].deltaNormals;
                        g && (v = d(v, g, a),
                        y = d(y, g, a)),
                        o = new Ph({
                            deltaPositions: v,
                            deltaNormals: y,
                            name: r[s].name,
                            aabb: _
                        }),
                        h.push(o)
                    }
                    var x = new fh(h,this._device);
                    c.push(x);
                    var b = new ph(x);
                    u.push(b)
                }
            }
            return {
                morphs: c,
                instances: u
            }
        }
        ,
        e._parseVertexBuffers = function(t) {
            for (var e = t.model, i = [], n = {
                position: se,
                normal: ae,
                tangent: re,
                blendWeight: oe,
                blendIndices: he,
                color: le,
                texCoord0: ue,
                texCoord1: de,
                texCoord2: fe,
                texCoord3: pe,
                texCoord4: me,
                texCoord5: _e,
                texCoord6: ge,
                texCoord7: ve
            }, s = 0; s < e.vertices.length; s++) {
                var a = e.vertices[s]
                  , r = [];
                for (var o in a) {
                    var h = a[o];
                    r.push({
                        semantic: n[o],
                        components: h.components,
                        type: yc[h.type],
                        normalize: n[o] === le
                    })
                }
                for (var l = new Qe(this._device,r), c = a.position.data.length / a.position.components, u = new Ze(this._device,l,c), d = new Ns(u), f = 0; f < c; f++) {
                    for (var p in a) {
                        var m = a[p];
                        switch (m.components) {
                        case 1:
                            d.element[n[p]].set(m.data[f]);
                            break;
                        case 2:
                            d.element[n[p]].set(m.data[2 * f], 1 - m.data[2 * f + 1]);
                            break;
                        case 3:
                            d.element[n[p]].set(m.data[3 * f], m.data[3 * f + 1], m.data[3 * f + 2]);
                            break;
                        case 4:
                            d.element[n[p]].set(m.data[4 * f], m.data[4 * f + 1], m.data[4 * f + 2], m.data[4 * f + 3])
                        }
                    }
                    d.next()
                }
                d.end(),
                i.push(u)
            }
            return i
        }
        ,
        e._parseIndexBuffers = function(t, e) {
            var i, n = t.model, s = null, a = null, r = 0;
            for (i = 0; i < n.meshes.length; i++) {
                var o = n.meshes[i];
                void 0 !== o.indices && (r += o.indices.length)
            }
            var h = 0;
            for (i = 0; i < e.length; i++)
                h = Math.max(h, e[i].numVertices);
            return r > 0 && (h > 65535 && this._device.extUintElement ? (s = new ws(this._device,2,r),
            a = new Uint32Array(s.lock())) : (s = new ws(this._device,1,r),
            a = new Uint16Array(s.lock()))),
            {
                buffer: s,
                data: a
            }
        }
        ,
        e._parseMeshes = function(t, e, i, n, s, a) {
            for (var r = t.model, o = [], h = 0, l = 0; l < r.meshes.length; l++) {
                var c = r.meshes[l]
                  , u = c.aabb
                  , d = u.min
                  , f = u.max
                  , p = new Mt(new lt(.5 * (f[0] + d[0]),.5 * (f[1] + d[1]),.5 * (f[2] + d[2])),new lt(.5 * (f[0] - d[0]),.5 * (f[1] - d[1]),.5 * (f[2] - d[2])))
                  , m = void 0 !== c.indices
                  , _ = new Ys(this._device);
                _.vertexBuffer = n[c.vertices],
                _.indexBuffer[0] = m ? s : null,
                _.primitive[0].type = vc[c.type],
                _.primitive[0].base = m ? c.base + h : c.base,
                _.primitive[0].count = c.count,
                _.primitive[0].indexed = m,
                _.skin = void 0 !== c.skin ? e[c.skin] : null,
                _.morph = void 0 !== c.morph ? i[c.morph] : null,
                _.aabb = p,
                m && (a.set(c.indices, h),
                h += c.indices.length),
                o.push(_)
            }
            return null !== s && s.unlock(),
            o
        }
        ,
        e._parseMeshInstances = function(t, e, i, n, s, a, r) {
            var o, h = t.model, l = [];
            for (o = 0; o < h.meshInstances.length; o++) {
                var c = h.meshInstances[o]
                  , u = e[c.node]
                  , d = i[c.mesh]
                  , f = new wa(d,this._defaultMaterial,u);
                if (d.skin) {
                    var p = n.indexOf(d.skin);
                    f.skinInstance = s[p]
                }
                if (d.morph) {
                    var m = a.indexOf(d.morph);
                    f.morphInstance = r[m]
                }
                l.push(f)
            }
            return l
        }
        ,
        t
    }()
      , bc = function() {
        function t(t) {
            this._device = t,
            this._parsers = [],
            this._defaultMaterial = kn.get(t),
            this.maxRetries = 0,
            this.addParser(new xc(this._device,this._defaultMaterial), (function(t, e) {
                return ".json" === p.getExtension(t)
            }
            )),
            this.addParser(new fc(this._device,this._defaultMaterial), (function(t, e) {
                return ".glb" === p.getExtension(t)
            }
            ))
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            (t.load.startsWith("blob:") || t.load.startsWith("data:")) && (".glb" === p.getExtension(t.original).toLowerCase() ? i.responseType = nt.ResponseType.ARRAY_BUFFER : i.responseType = nt.ResponseType.JSON),
            st.get(t.load, i, (function(i, n) {
                e && (i ? e("Error loading model: " + t.original + " [" + i + "]") : e(null, n))
            }
            ))
        }
        ,
        e.open = function(t, e) {
            for (var i = 0; i < this._parsers.length; i++) {
                var n = this._parsers[i];
                if (n.decider(t, e))
                    return n.parser.parse(e)
            }
            return null
        }
        ,
        e.patch = function(t, e) {
            if (t.resource) {
                var i = t.data
                  , n = this;
                t.resource.meshInstances.forEach((function(s, a) {
                    if (i.mapping) {
                        var r = function t(i) {
                            i.resource ? s.material = i.resource : (i.once("load", t),
                            e.load(i)),
                            i.once("remove", (function(t) {
                                s.material === t.resource && (s.material = n._defaultMaterial)
                            }
                            ))
                        };
                        if (!i.mapping[a])
                            return void (s.material = n._defaultMaterial);
                        var o, h = i.mapping[a].material, l = i.mapping[a].path;
                        if (void 0 !== h)
                            h ? (o = e.get(h)) ? r(o) : e.once("add:" + h, r) : s.material = n._defaultMaterial;
                        else if (l) {
                            var c = t.getAbsoluteUrl(i.mapping[a].path);
                            (o = e.getByUrl(c)) ? r(o) : e.once("add:url:" + c, r)
                        }
                    }
                }
                ))
            }
        }
        ,
        e.addParser = function(t, e) {
            this._parsers.push({
                parser: t,
                decider: e
            })
        }
        ,
        t
    }();
    function Sc(t) {
        var e = this;
        if (e.resource) {
            var i = t.resource
              , n = i.renders && i.renders[e.data.renderIndex];
            n && (e.resource.meshes = n.resource.meshes)
        }
    }
    function Tc(t) {
        var e = this;
        e.registry.off("load:" + t.id, Sc, e),
        e.registry.on("load:" + t.id, Sc, e),
        e.registry.off("remove:" + t.id, wc, e),
        e.registry.once("remove:" + t.id, wc, e),
        t.resource ? Sc.call(e, t) : e.registry.load(t)
    }
    function wc(t) {
        var e = this;
        e.registry.off("load:" + t.id, Sc, e),
        e.resource && e.resource.destroy()
    }
    var Mc = function() {
        function t(t) {
            this._registry = t
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {}
        ,
        e.open = function(t, e) {
            return new Ih
        }
        ,
        e.patch = function(t, e) {
            if (t.data.containerAsset) {
                var i = e.get(t.data.containerAsset);
                i ? Tc.call(t, i) : e.once("add:" + t.data.containerAsset, Tc, t)
            }
        }
        ,
        t
    }()
      , Ac = function() {
        function t(t) {
            this._handlers = {},
            this._requests = {},
            this._cache = {},
            this._app = t
        }
        var e = t.prototype;
        return e.addHandler = function(t, e) {
            this._handlers[t] = e,
            e._loader = this
        }
        ,
        e.removeHandler = function(t) {
            delete this._handlers[t]
        }
        ,
        e.getHandler = function(t) {
            return this._handlers[t]
        }
        ,
        e.load = function(t, e, i, n) {
            var s = this._handlers[e];
            if (s)
                if (t) {
                    var a = t + e;
                    if (void 0 !== this._cache[a])
                        i(null, this._cache[a]);
                    else if (this._requests[a])
                        this._requests[a].push(i);
                    else {
                        this._requests[a] = [i];
                        var r = this
                          , o = function(t, e) {
                            t ? r._onFailure(a, t) : s.load(e, (function(t, i, o) {
                                if (r._requests[a])
                                    if (t)
                                        r._onFailure(a, t);
                                    else
                                        try {
                                            r._onSuccess(a, s.open(e.original, i, n), o)
                                        } catch (t) {
                                            r._onFailure(a, t)
                                        }
                            }
                            ), n)
                        }
                          , h = t.split("?")[0];
                        if (this._app.enableBundles && this._app.bundles.hasUrl(h)) {
                            if (!this._app.bundles.canLoadUrl(h))
                                return void o("Bundle for " + t + " not loaded yet");
                            this._app.bundles.loadUrl(h, (function(t, e) {
                                o(t, {
                                    load: e,
                                    original: h
                                })
                            }
                            ))
                        } else
                            o(null, {
                                load: t,
                                original: n && n.file.filename || t
                            })
                    }
                } else
                    this._loadNull(s, i, n);
            else
                i("No handler for asset type: " + e)
        }
        ,
        e._loadNull = function(t, e, i) {
            t.load(null, (function(n, s, a) {
                if (n)
                    e(n);
                else
                    try {
                        e(null, t.open(null, s, i), a)
                    } catch (t) {
                        e(t)
                    }
            }
            ), i)
        }
        ,
        e._onSuccess = function(t, e, i) {
            this._cache[t] = e;
            for (var n = 0; n < this._requests[t].length; n++)
                this._requests[t][n](null, e, i);
            delete this._requests[t]
        }
        ,
        e._onFailure = function(t, e) {
            if (console.error(e),
            this._requests[t]) {
                for (var i = 0; i < this._requests[t].length; i++)
                    this._requests[t][i](e);
                delete this._requests[t]
            }
        }
        ,
        e.open = function(t, e) {
            var i = this._handlers[t];
            return i ? i.open(null, e) : (console.warn("No resource handler found for: " + t),
            e)
        }
        ,
        e.patch = function(t, e) {
            var i = this._handlers[t.type];
            i ? i.patch && i.patch(t, e) : console.warn("No resource handler found for: " + t.type)
        }
        ,
        e.clearCache = function(t, e) {
            delete this._cache[t + e]
        }
        ,
        e.getFromCache = function(t, e) {
            if (this._cache[t + e])
                return this._cache[t + e]
        }
        ,
        e.enableRetry = function(t) {
            for (var e in void 0 === t && (t = 5),
            t = Math.max(0, t) || 0,
            this._handlers)
                this._handlers[e].maxRetries = t
        }
        ,
        e.disableRetry = function() {
            for (var t in this._handlers)
                this._handlers[t].maxRetries = 0
        }
        ,
        e.destroy = function() {
            this._handlers = {},
            this._requests = {},
            this._cache = {}
        }
        ,
        t
    }()
      , Cc = function() {
        function t(t) {
            this._app = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            sc(t, this.maxRetries, e)
        }
        ,
        e.open = function(t, e) {
            this._app.systems.script.preloading = !0;
            var i = new nc(this._app,!1).parse(e)
              , n = this._app.scene;
            return n.root = i,
            this._app.applySceneSettings(e.settings),
            this._app.systems.script.preloading = !1,
            n
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , Ec = !1
      , Pc = !1
      , Rc = {
        app: null,
        create: function(t, e) {
            if (Ec) {
                var i = e(Rc.app);
                i._pcScriptName = t,
                Ic._push(i),
                this.fire("created", t, e)
            }
        },
        attribute: function(t, e, i, n) {},
        createLoadingScreen: function(t) {
            Pc || (Pc = !0,
            t(_n()))
        }
    };
    Object.defineProperty(Rc, "legacy", {
        get: function() {
            return Ec
        },
        set: function(t) {
            Ec = t
        }
    }),
    d.attach(Rc);
    var Ic = function() {
        function t(t) {
            this._app = t,
            this._scripts = {},
            this._cache = {}
        }
        t._push = function(e) {
            Rc.legacy && t._types.length > 0 ? console.assert("Script Ordering Error. Contact support@playcanvas.com") : t._types.push(e)
        }
        ;
        var e = t.prototype;
        return e.load = function(e, i) {
            var n = this;
            "string" == typeof e && (e = {
                load: e,
                original: e
            });
            var s = this;
            Rc.app = this._app,
            this._loadScript(e.load, (function(e, a, r) {
                if (e)
                    i(e);
                else if (Rc.legacy) {
                    var o = null;
                    t._types.length && (o = t._types.pop()),
                    o ? n._scripts[a] = o : o = null,
                    i(null, o, r)
                } else {
                    for (var h = {}, l = 0; l < t._types.length; l++)
                        h[t._types[l].name] = t._types[l];
                    t._types.length = 0,
                    i(null, h, r),
                    delete s._loader._cache[a + "script"]
                }
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        e._loadScript = function(t, e) {
            var i = document.head
              , n = document.createElement("script");
            this._cache[t] = n,
            n.async = !1,
            n.addEventListener("error", (function(t) {
                e("Script: " + t.target.src + " failed to load")
            }
            ), !1);
            var s = !1;
            n.onload = n.onreadystatechange = function() {
                s || this.readyState && "loaded" !== this.readyState && "complete" !== this.readyState || (s = !0,
                e(null, t, n))
            }
            ,
            n.src = t,
            i.appendChild(n)
        }
        ,
        t
    }();
    Ic._types = [];
    var Lc = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e("Error loading shader resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , Dc = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]
      , kc = [0, 1, 3, 2, 3, 1]
      , Oc = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._device = e,
            n._pixelsPerUnit = i && void 0 !== i.pixelsPerUnit ? i.pixelsPerUnit : 1,
            n._renderMode = i && void 0 !== i.renderMode ? i.renderMode : 0,
            n._atlas = i && void 0 !== i.atlas ? i.atlas : null,
            n._frameKeys = i && void 0 !== i.frameKeys ? i.frameKeys : null,
            n._meshes = [],
            n._updatingProperties = !1,
            n._meshesDirty = !1,
            n._atlas && n._frameKeys && n._createMeshes(),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._createMeshes = function() {
            for (var t = this._meshes.length, e = 0; e < t; e++) {
                var i = this._meshes[e];
                i && i.destroy()
            }
            var n = this._frameKeys.length;
            this._meshes = new Array(n);
            for (var s = 1 === this.renderMode || 2 === this._renderMode ? this._create9SliceMesh : this._createSimpleMesh, a = 0; a < n; a++) {
                var r = this._atlas.frames[this._frameKeys[a]];
                this._meshes[a] = r ? s.call(this, r) : null
            }
            this.fire("set:meshes")
        }
        ,
        i._createSimpleMesh = function(t) {
            var e = t.rect
              , i = this._atlas.texture.width
              , n = this._atlas.texture.height
              , s = e.z / this._pixelsPerUnit
              , a = e.w / this._pixelsPerUnit
              , r = t.pivot.x
              , o = t.pivot.y
              , h = [-r * s, -o * a, 0, (1 - r) * s, -o * a, 0, (1 - r) * s, (1 - o) * a, 0, -r * s, (1 - o) * a, 0]
              , l = e.x / i
              , c = 1 - e.y / n
              , u = (e.x + e.z) / i
              , d = 1 - (e.y + e.w) / n
              , f = [l, c, u, c, u, d, l, d];
            return ta(this._device, h, {
                uvs: f,
                normals: Dc,
                indices: kc
            })
        }
        ,
        i._create9SliceMesh = function() {
            for (var t = ut.ONE, e = [], i = [], n = [], s = [], a = 0, r = 0; r <= 3; r++)
                for (var o = 0 === r || 3 === r ? 0 : 1, h = 0; h <= 3; h++) {
                    var l = -t.x + 2 * t.x * (r <= 1 ? 0 : 3) / 3
                      , c = -(-t.y + 2 * t.y * (h <= 1 ? 0 : 3) / 3)
                      , u = 0 === h || 3 === h ? 0 : 1;
                    e.push(-l, 0, c),
                    i.push(0, 1, 0),
                    n.push(o, u),
                    r < 3 && h < 3 && (s.push(a + 3 + 1, a + 1, a),
                    s.push(a + 3 + 1, a + 3 + 2, a + 1)),
                    a++
                }
            var d = {
                normals: i,
                uvs: n,
                indices: s
            };
            return ta(this._device, e, d)
        }
        ,
        i._onSetFrames = function(t) {
            this._updatingProperties ? this._meshesDirty = !0 : this._createMeshes()
        }
        ,
        i._onFrameChanged = function(t, e) {
            var i = this._frameKeys.indexOf(t);
            i < 0 || (e ? 0 === this.renderMode && (this._meshes[i] = this._createSimpleMesh(e)) : this._meshes[i] = null,
            this.fire("set:meshes"))
        }
        ,
        i._onFrameRemoved = function(t) {
            var e = this._frameKeys.indexOf(t);
            e < 0 || (this._meshes[e] = null,
            this.fire("set:meshes"))
        }
        ,
        i.startUpdate = function() {
            this._updatingProperties = !0,
            this._meshesDirty = !1
        }
        ,
        i.endUpdate = function() {
            this._updatingProperties = !1,
            this._meshesDirty && this._atlas && this._frameKeys && this._createMeshes(),
            this._meshesDirty = !1
        }
        ,
        i.destroy = function() {
            for (var t, e = Y(this._meshes); !(t = e()).done; ) {
                var i = t.value;
                i && i.destroy()
            }
            this._meshes.length = 0
        }
        ,
        G(e, [{
            key: "frameKeys",
            get: function() {
                return this._frameKeys
            },
            set: function(t) {
                this._frameKeys = t,
                this._atlas && this._frameKeys && (this._updatingProperties ? this._meshesDirty = !0 : this._createMeshes()),
                this.fire("set:frameKeys", t)
            }
        }, {
            key: "atlas",
            get: function() {
                return this._atlas
            },
            set: function(t) {
                t !== this._atlas && (this._atlas && (this._atlas.off("set:frames", this._onSetFrames, this),
                this._atlas.off("set:frame", this._onFrameChanged, this),
                this._atlas.off("remove:frame", this._onFrameRemoved, this)),
                this._atlas = t,
                this._atlas && this._frameKeys && (this._atlas.on("set:frames", this._onSetFrames, this),
                this._atlas.on("set:frame", this._onFrameChanged, this),
                this._atlas.on("remove:frame", this._onFrameRemoved, this),
                this._updatingProperties ? this._meshesDirty = !0 : this._createMeshes()),
                this.fire("set:atlas", t))
            }
        }, {
            key: "pixelsPerUnit",
            get: function() {
                return this._pixelsPerUnit
            },
            set: function(t) {
                this._pixelsPerUnit !== t && (this._pixelsPerUnit = t,
                this.fire("set:pixelsPerUnit", t),
                this._atlas && this._frameKeys && 0 === this.renderMode && (this._updatingProperties ? this._meshesDirty = !0 : this._createMeshes()))
            }
        }, {
            key: "renderMode",
            get: function() {
                return this._renderMode
            },
            set: function(t) {
                if (this._renderMode !== t) {
                    var e = this._renderMode;
                    this._renderMode = t,
                    this.fire("set:renderMode", t),
                    0 !== e && 0 !== t || this._atlas && this._frameKeys && (this._updatingProperties ? this._meshesDirty = !0 : this._createMeshes())
                }
            }
        }, {
            key: "meshes",
            get: function() {
                return this._meshes
            }
        }]),
        e
    }(u);
    function Fc(t) {
        this.resource && (this.resource.atlas = t.resource)
    }
    function Bc(t) {
        this.registry.load(t)
    }
    var Nc = function() {
        function t(t, e) {
            this._assets = t,
            this._device = e,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            ".json" === p.getExtension(t.original) && st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(t, i) {
                t ? e(t) : e(null, i)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            var i = new Oc(this._device);
            return t && (i.__data = e),
            i
        }
        ,
        e.patch = function(t, e) {
            var i = t.resource;
            if (i.__data && (t.data.pixelsPerUnit = i.__data.pixelsPerUnit,
            t.data.renderMode = i.__data.renderMode,
            t.data.frameKeys = i.__data.frameKeys,
            i.__data.textureAtlasAsset)) {
                var n = e.getByUrl(i.__data.textureAtlasAsset);
                n ? t.data.textureAtlasAsset = n.id : console.warn("Could not find textureatlas with url: " + i.__data.textureAtlasAsset)
            }
            i.startUpdate(),
            i.renderMode = t.data.renderMode,
            i.pixelsPerUnit = t.data.pixelsPerUnit,
            i.frameKeys = t.data.frameKeys,
            this._updateAtlas(t),
            i.endUpdate(),
            t.off("change", this._onAssetChange, this),
            t.on("change", this._onAssetChange, this)
        }
        ,
        e._updateAtlas = function(t) {
            var e = t.resource;
            if (t.data.textureAtlasAsset) {
                this._assets.off("load:" + t.data.textureAtlasAsset, Fc, t),
                this._assets.on("load:" + t.data.textureAtlasAsset, Fc, t);
                var i = this._assets.get(t.data.textureAtlasAsset);
                i && i.resource ? e.atlas = i.resource : i ? this._assets.load(i) : (this._assets.off("add:" + t.data.textureAtlasAsset, Bc, t),
                this._assets.on("add:" + t.data.textureAtlasAsset, Bc, t))
            } else
                e.atlas = null
        }
        ,
        e._onAssetChange = function(t, e, i, n) {
            "data" === e && i && i.textureAtlasAsset && n && i.textureAtlasAsset !== n.textureAtlasAsset && (this._assets.off("load:" + n.textureAtlasAsset, Fc, t),
            this._assets.off("add:" + n.textureAtlasAsset, Bc, t))
        }
        ,
        t
    }()
      , Uc = function() {
        function t(t, e) {
            this._app = t,
            this._data = e,
            this._templateRoot = null
        }
        var e = t.prototype;
        return e.instantiate = function() {
            return this._templateRoot || this._parseTemplate(),
            this._templateRoot.clone()
        }
        ,
        e._parseTemplate = function() {
            var t = new nc(this._app,!0);
            this._templateRoot = t.parse(this._data)
        }
        ,
        t
    }()
      , zc = function() {
        function t(t) {
            this._app = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            st.get(t.load, i, (function(i, n) {
                i ? e("Error requesting template: " + t.original) : e(i, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return new Uc(this._app,e)
        }
        ,
        t
    }()
      , Vc = function() {
        function t() {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(i, n) {
                i ? e("Error loading text resource: " + t.original + " [" + i + "]") : e(null, n)
            }
            ))
        }
        ,
        e.open = function(t, e) {
            return e
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , Gc = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this)._texture = null,
            e._frames = null,
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.setFrame = function(t, e) {
            var i = this._frames[t];
            i ? (i.rect.copy(e.rect),
            i.pivot.copy(e.pivot),
            i.border.copy(e.border)) : (i = {
                rect: e.rect.clone(),
                pivot: e.pivot.clone(),
                border: e.border.clone()
            },
            this._frames[t] = i),
            this.fire("set:frame", t.toString(), i)
        }
        ,
        i.removeFrame = function(t) {
            var e = this._frames[t];
            e && (delete this._frames[t],
            this.fire("remove:frame", t.toString(), e))
        }
        ,
        i.destroy = function() {
            this._texture && this._texture.destroy()
        }
        ,
        G(e, [{
            key: "texture",
            get: function() {
                return this._texture
            },
            set: function(t) {
                this._texture = t,
                this.fire("set:texture", t)
            }
        }, {
            key: "frames",
            get: function() {
                return this._frames
            },
            set: function(t) {
                this._frames = t,
                this.fire("set:frames", t)
            }
        }]),
        e
    }(u)
      , Wc = {
        repeat: 0,
        clamp: 1,
        mirror: 2
    }
      , Hc = {
        nearest: 0,
        linear: 1,
        nearest_mip_nearest: 2,
        linear_mip_nearest: 4,
        nearest_mip_linear: 3,
        linear_mip_linear: 5
    }
      , Xc = /^data\.frames\.(\d+)$/
      , jc = function() {
        function t(t) {
            this._loader = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            });
            var i = this
              , n = this._loader.getHandler("texture");
            if (".json" !== p.getExtension(t.original))
                return n.load(t, e);
            st.get(t.load, {
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            }, (function(n, s) {
                if (n)
                    e(n);
                else {
                    var a = t.original.replace(".json", ".png");
                    i._loader.load(a, "texture", (function(t, i) {
                        t ? e(t) : e(null, {
                            data: s,
                            texture: i
                        })
                    }
                    ))
                }
            }
            ))
        }
        ,
        e.open = function(t, e) {
            var i = new Gc;
            if (e.texture && e.data)
                i.texture = e.texture,
                i.__data = e.data;
            else {
                var n = this._loader.getHandler("texture").open(t, e);
                if (!n)
                    return null;
                i.texture = n
            }
            return i
        }
        ,
        e.patch = function(t, e) {
            t.resource.__data && (void 0 !== t.resource.__data.minfilter && (t.data.minfilter = t.resource.__data.minfilter),
            void 0 !== t.resource.__data.magfilter && (t.data.magfilter = t.resource.__data.magfilter),
            void 0 !== t.resource.__data.addressu && (t.data.addressu = t.resource.__data.addressu),
            void 0 !== t.resource.__data.addressv && (t.data.addressv = t.resource.__data.addressv),
            void 0 !== t.resource.__data.mipmaps && (t.data.mipmaps = t.resource.__data.mipmaps),
            void 0 !== t.resource.__data.anisotropy && (t.data.anisotropy = t.resource.__data.anisotropy),
            void 0 !== t.resource.__data.rgbm && (t.data.rgbm = !!t.resource.__data.rgbm),
            t.data.frames = t.resource.__data.frames,
            delete t.resource.__data);
            var i = t.resource.texture;
            if (i && (i.name = t.name,
            t.data.hasOwnProperty("minfilter") && i.minFilter !== Hc[t.data.minfilter] && (i.minFilter = Hc[t.data.minfilter]),
            t.data.hasOwnProperty("magfilter") && i.magFilter !== Hc[t.data.magfilter] && (i.magFilter = Hc[t.data.magfilter]),
            t.data.hasOwnProperty("addressu") && i.addressU !== Wc[t.data.addressu] && (i.addressU = Wc[t.data.addressu]),
            t.data.hasOwnProperty("addressv") && i.addressV !== Wc[t.data.addressv] && (i.addressV = Wc[t.data.addressv]),
            t.data.hasOwnProperty("mipmaps") && i.mipmaps !== t.data.mipmaps && (i.mipmaps = t.data.mipmaps),
            t.data.hasOwnProperty("anisotropy") && i.anisotropy !== t.data.anisotropy && (i.anisotropy = t.data.anisotropy),
            t.data.hasOwnProperty("rgbm"))) {
                var n = t.data.rgbm ? Be : Fe;
                i.type !== n && (i.type = n)
            }
            t.resource.texture = i;
            var s = {};
            for (var a in t.data.frames) {
                var r = t.data.frames[a];
                s[a] = {
                    rect: new dt(r.rect),
                    pivot: new ut(r.pivot),
                    border: new dt(r.border)
                }
            }
            t.resource.frames = s,
            t.off("change", this._onAssetChange, this),
            t.on("change", this._onAssetChange, this)
        }
        ,
        e._onAssetChange = function(t, e, i) {
            var n;
            if ("data" === e || "data.frames" === e) {
                var s = {};
                for (var a in i.frames)
                    n = i.frames[a],
                    s[a] = {
                        rect: new dt(n.rect),
                        pivot: new ut(n.pivot),
                        border: new dt(n.border)
                    };
                t.resource.frames = s
            } else {
                var r = e.match(Xc);
                if (r) {
                    var o = r[1];
                    i ? (t.resource.frames[o] ? ((n = t.resource.frames[o]).rect.set(i.rect[0], i.rect[1], i.rect[2], i.rect[3]),
                    n.pivot.set(i.pivot[0], i.pivot[1]),
                    n.border.set(i.border[0], i.border[1], i.border[2], i.border[3])) : t.resource.frames[o] = {
                        rect: new dt(i.rect),
                        pivot: new ut(i.pivot),
                        border: new dt(i.border)
                    },
                    t.resource.fire("set:frame", o, t.resource.frames[o])) : t.resource.frames[o] && (delete t.resource.frames[o],
                    t.resource.fire("remove:frame", o))
                }
            }
        }
        ,
        t
    }();
    function qc() {
        var t, e, i, n = 0, s = 1, a = 2, r = 3, o = 8, h = 9, l = 10, c = 11, u = 12, d = 13, f = 14, p = 16, m = {
            astc: l,
            dxt: a,
            etc1: n,
            etc2: n,
            pvr: o,
            atc: c,
            none: f
        }, _ = {
            astc: l,
            dxt: r,
            etc1: p,
            etc2: s,
            pvr: h,
            atc: u,
            none: p
        }, g = 21, v = 22, y = 23, x = 8, b = 10, S = 26, T = 27, w = 28, M = 29, A = 30, C = 7, E = 3, P = 5, R = function(t, e) {
            switch (t) {
            case n:
                return e.formats.etc1 ? g : v;
            case s:
                return y;
            case a:
                return x;
            case r:
                return b;
            case o:
                return S;
            case h:
                return T;
            case l:
                return w;
            case c:
                return M;
            case u:
                return A;
            case d:
                return C;
            case f:
                return E;
            case p:
                return P
            }
        }, I = function(t) {
            for (var e = function(t, e) {
                var i = t * (2 / 255) - 1
                  , n = e * (2 / 255) - 1
                  , s = Math.sqrt(1 - Math.min(1, i * i + n * n));
                return Math.max(0, Math.min(255, Math.floor(.5 * (s + 1) * 255)))
            }, i = 0; i < t.length; i += 4) {
                var n = t[i + 3]
                  , s = t[i + 1];
                t[i + 0] = n,
                t[i + 2] = e(n, s),
                t[i + 3] = 255
            }
            return t
        }, L = function(t) {
            for (var e = new Uint16Array(t.length / 4), i = 0; i < t.length; i += 4) {
                var n = t[i + 0]
                  , s = t[i + 1]
                  , a = t[i + 2];
                e[i / 4] = (248 & n) << 8 | (252 & s) << 3 | a >> 3
            }
            return e
        }, D = function() {
            return "undefined" != typeof performance ? performance.now() : 0
        }, k = function(t, n, s) {
            if (s) {
                if (t.formats.astc)
                    return "astc"
            } else if (n) {
                if (t.formats.etc2)
                    return "etc2"
            } else if (t.formats.etc1 || t.formats.etc2)
                return "etc1";
            return function(e) {
                for (var i = 0; i < e.length; ++i) {
                    var n = e[i];
                    if (t.formats[n])
                        return n
                }
                return "none"
            }(n ? i : e)
        }, O = function(t, e, i, d) {
            switch (i) {
            case n:
            case s:
                return !0;
            case a:
            case r:
                return 0 == (3 & t) && 0 == (3 & e);
            case o:
            case h:
                return function(t, e) {
                    return 0 == (t & t - 1) && 0 == (e & e - 1)
                }(t, e) && (t === e || d);
            case l:
                return !0;
            case c:
            case u:
                return !0
            }
        }, F = function(e, i, n) {
            return n.isKTX2 ? function(e, i, n) {
                if (!t.KTX2File)
                    throw new Error("Basis transcoder module does not include support for KTX2.");
                var s = D()
                  , a = new t.KTX2File(new Uint8Array(i))
                  , r = a.getWidth()
                  , o = a.getHeight()
                  , h = a.getLevels()
                  , l = !!a.getHasAlpha()
                  , c = a.isUASTC && a.isUASTC();
                if (!r || !o || !h)
                    throw a.close(),
                    a.delete(),
                    new Error("Invalid image dimensions url=" + e + " width=" + r + " height=" + o + " levels=" + h);
                var u, g, v = k(n.deviceDetails, l, c), y = !!n.isGGGR && "pvr" === v;
                if (y ? u = d : O(r, o, u = l ? _[v] : m[v], n.deviceDetails.webgl2) || (u = l ? d : f),
                !a.startTranscoding())
                    throw a.close(),
                    a.delete(),
                    new Error("Failed to start transcoding url=" + e);
                for (var x = [], b = 0; b < h; ++b) {
                    var S = a.getImageTranscodedSizeInBytes(b, 0, 0, u)
                      , T = new Uint8Array(S);
                    if (!a.transcodeImage(T, b, 0, 0, u, 0, -1, -1))
                        throw a.close(),
                        a.delete(),
                        new Error("Failed to transcode image url=" + e);
                    var w = u === f || u === p;
                    x.push(w ? new Uint16Array(T.buffer) : T)
                }
                if (a.close(),
                a.delete(),
                y)
                    for (u = f,
                    g = 0; g < x.length; ++g)
                        x[g] = L(I(x[g]));
                return {
                    format: R(u, n.deviceDetails),
                    width: r,
                    height: o,
                    levels: x,
                    cubemap: !1,
                    transcodeTime: D() - s,
                    url: e,
                    unswizzledGGGR: y
                }
            }(e, i, n) : function(e, i, n) {
                var s = D()
                  , a = new t.BasisFile(new Uint8Array(i))
                  , r = a.getImageWidth(0, 0)
                  , o = a.getImageHeight(0, 0)
                  , h = a.getNumImages()
                  , l = a.getNumLevels(0)
                  , c = !!a.getHasAlpha()
                  , u = a.isUASTC && a.isUASTC();
                if (!(r && o && h && l))
                    throw a.close(),
                    a.delete(),
                    new Error("Invalid image dimensions url=" + e + " width=" + r + " height=" + o + " images=" + h + " levels=" + l);
                var g, v, y = k(n.deviceDetails, c, u), x = !!n.isGGGR && "pvr" === y;
                if (x ? g = d : O(r, o, g = c ? _[y] : m[y], n.deviceDetails.webgl2) || (g = c ? d : f),
                !a.startTranscoding())
                    throw a.close(),
                    a.delete(),
                    new Error("Failed to start transcoding url=" + e);
                for (var b = [], S = 0; S < l; ++S) {
                    var T = a.getImageTranscodedSizeInBytes(0, S, g)
                      , w = new Uint8Array(T);
                    if (!a.transcodeImage(w, 0, S, g, 0, 0))
                        throw a.close(),
                        a.delete(),
                        new Error("Failed to transcode image url=" + e);
                    var M = g === f || g === p;
                    b.push(M ? new Uint16Array(w.buffer) : w)
                }
                if (a.close(),
                a.delete(),
                x)
                    for (g = f,
                    v = 0; v < b.length; ++v)
                        b[v] = L(I(b[v]));
                return {
                    format: R(g, n.deviceDetails),
                    width: r,
                    height: o,
                    levels: b,
                    cubemap: !1,
                    transcodeTime: D() - s,
                    url: e,
                    unswizzledGGGR: x
                }
            }(e, i, n)
        }, B = function(t, e, i) {
            try {
                var n = F(t, e, i);
                n.levels = n.levels.map((function(t) {
                    return t.buffer
                }
                )),
                self.postMessage({
                    url: t,
                    data: n
                }, n.levels)
            } catch (e) {
                self.postMessage({
                    url: t,
                    err: e
                }, null)
            }
        }, N = [];
        self.onmessage = function(n) {
            var s = n.data;
            switch (s.type) {
            case "init":
                !function(n, s) {
                    self.importScripts(n.basisUrl),
                    self.BASIS(n.module ? {
                        instantiateWasm: function(t, e) {
                            return WebAssembly.instantiate(n.module, t).then((function(t) {
                                e(t)
                            }
                            )).catch((function(t) {
                                console.error("instantiate failed + " + t)
                            }
                            )),
                            {}
                        }
                    } : null).then((function(a) {
                        a.initializeBasis(),
                        t = a,
                        e = n.rgbPriority,
                        i = n.rgbaPriority,
                        s(null)
                    }
                    ))
                }(s.config, (function() {
                    for (var t = 0; t < N.length; ++t)
                        B(N[t].url, N[t].data, N[t].options);
                    N.length = 0
                }
                ));
                break;
            case "transcode":
                t ? B(s.url, s.data, s.options) : N.push(s)
            }
        }
    }
    var Yc = function(t) {
        return {
            astc: !!t.extCompressedTextureASTC,
            atc: !!t.extCompressedTextureATC,
            dxt: !!t.extCompressedTextureS3TC,
            etc1: !!t.extCompressedTextureETC1,
            etc2: !!t.extCompressedTextureETC,
            pvr: !!t.extCompressedTexturePVRTC
        }
    }
      , Kc = function() {
        function t() {
            this.callbacks = {},
            this.queue = [],
            this.clients = []
        }
        var e = t.prototype;
        return e.enqueueJob = function(t, e, i, n) {
            if (this.callbacks.hasOwnProperty(t))
                this.callbacks[t].push(i);
            else {
                this.callbacks[t] = [i];
                var s = {
                    url: t,
                    data: e,
                    options: n
                };
                this.clients.length > 0 ? this.clients.shift().run(s) : this.queue.push(s)
            }
        }
        ,
        e.enqueueClient = function(t) {
            this.queue.length > 0 ? t.run(this.queue.shift()) : this.clients.push(t)
        }
        ,
        e.handleResponse = function(t, e, i) {
            var n = this.callbacks[t];
            if (e)
                for (var s = 0; s < n.length; ++s)
                    n[s](e);
            else {
                3 === i.format || 5 === i.format ? i.levels = i.levels.map((function(t) {
                    return new Uint16Array(t)
                }
                )) : i.levels = i.levels.map((function(t) {
                    return new Uint8Array(t)
                }
                ));
                for (var a = 0; a < n.length; ++a)
                    n[a](null, i)
            }
            delete this.callbacks[t]
        }
        ,
        t
    }()
      , Zc = function() {
        function t(t, e, i) {
            var n = this;
            this.queue = t,
            this.worker = new Worker(e.workerUrl),
            this.worker.addEventListener("message", (function(t) {
                var e = t.data;
                n.queue.handleResponse(e.url, e.err, e.data),
                n.eager || n.queue.enqueueClient(n)
            }
            )),
            this.worker.postMessage({
                type: "init",
                config: e
            }),
            this.eager = i
        }
        return t.prototype.run = function(t) {
            var e = [];
            t.data instanceof ArrayBuffer && e.push(t.data),
            this.worker.postMessage({
                type: "transcode",
                url: t.url,
                format: t.format,
                data: t.data,
                options: t.options
            }, e),
            this.eager && this.queue.enqueueClient(this)
        }
        ,
        t
    }()
      , $c = ["etc1", "etc2", "astc", "dxt", "pvr", "atc"]
      , Qc = ["astc", "dxt", "etc2", "pvr", "atc"]
      , Jc = new Kc
      , tu = null
      , eu = !1;
    function iu(t) {
        if (!eu) {
            if (t) {
                if (t.lazyInit)
                    return void (tu = t)
            } else
                t = tu || {};
            if (!t.glueUrl || !t.wasmUrl || !t.fallbackUrl) {
                var e = ((window.config ? window.config.wasmModules : window.PRELOAD_MODULES) || []).find((function(t) {
                    return "BASIS" === t.moduleName
                }
                ));
                if (e) {
                    var i = window.ASSET_PREFIX || "";
                    t.glueUrl || (t.glueUrl = i + e.glueUrl),
                    t.wasmUrl || (t.wasmUrl = i + e.wasmUrl),
                    t.fallbackUrl || (t.fallbackUrl = i + e.fallbackUrl)
                }
            }
            if (t.glueUrl || t.wasmUrl || t.fallbackUrl) {
                eu = !0;
                var n = Math.max(1, Math.min(16, t.numWorkers || 1))
                  , s = 1 === t.numWorkers || !t.hasOwnProperty("eagerWorkers") || t.eagerWorkers;
                t.rgbPriority = t.rgbPriority || $c,
                t.rgbaPriority = t.rgbaPriority || Qc,
                function(t, e) {
                    var i = function(i, n) {
                        var s;
                        e(null, {
                            workerUrl: URL.createObjectURL((s = "(" + qc.toString() + ")()\n\n",
                            new Blob([s],{
                                type: "application/javascript"
                            }))),
                            basisUrl: URL.createObjectURL(i),
                            module: n,
                            rgbPriority: t.rgbPriority,
                            rgbaPriority: t.rgbaPriority
                        })
                    };
                    if (t.glueUrl && t.wasmUrl && function() {
                        try {
                            if ("object" == typeof WebAssembly && "function" == typeof WebAssembly.instantiate) {
                                var t = new WebAssembly.Module(Uint8Array.of(0, 97, 115, 109, 1, 0, 0, 0));
                                if (t instanceof WebAssembly.Module)
                                    return new WebAssembly.Instance(t)instanceof WebAssembly.Instance
                            }
                        } catch (t) {}
                        return !1
                    }()) {
                        var n = null
                          , s = null;
                        st.get(t.glueUrl, {
                            responseType: "blob"
                        }, (function(t, a) {
                            t ? e(t) : s ? i(a, s) : n = a
                        }
                        ));
                        var a = fetch(t.wasmUrl)
                          , r = function() {
                            a.then((function(t) {
                                return t.arrayBuffer()
                            }
                            )).then((function(t) {
                                return WebAssembly.compile(t)
                            }
                            )).then((function(t) {
                                n ? i(n, t) : s = t
                            }
                            )).catch((function(t) {
                                e(t, null)
                            }
                            ))
                        };
                        WebAssembly.compileStreaming ? WebAssembly.compileStreaming(a).then((function(t) {
                            n ? i(n, t) : s = t
                        }
                        )).catch((function(t) {
                            r()
                        }
                        )) : r()
                    } else
                        st.get(t.fallbackUrl, {
                            responseType: "blob"
                        }, (function(t, n) {
                            t ? e(t, null) : i(n, null)
                        }
                        ))
                }(t, (function(t, e) {
                    if (t)
                        console.error("failed to initialize basis worker: " + t);
                    else
                        for (var i = 0; i < n; ++i)
                            Jc.enqueueClient(new Zc(Jc,e,s))
                }
                ))
            }
        }
    }
    var nu = null;
    function su(t, e, i, n, s) {
        return iu(),
        nu || (nu = {
            webgl2: t.webgl2,
            formats: Yc(t)
        }),
        Jc.enqueueJob(e, i, n, {
            deviceDetails: nu,
            isGGGR: !(null == s || !s.isGGGR),
            isKTX2: !(null == s || !s.isKTX2)
        }),
        eu
    }
    var au = function() {
        function t(t, e) {
            this.device = e,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            var n = this.device;
            Kh.fetchArrayBuffer(t.load, (function(s, a) {
                s ? e(s) : function(s) {
                    var a, r, o;
                    su(n, t.load, s, e, {
                        isGGGR: 0 != (8 & (null == i || null == (a = i.file) || null == (r = a.variants) || null == (o = r.basis) ? void 0 : o.opt))
                    }) || e("Basis module not found. Asset '" + i.name + "' basis texture variant will not be loaded.")
                }(a)
            }
            ), i, this.maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            var n = new Mi(i,{
                name: t,
                addressU: e.cubemap ? 1 : 0,
                addressV: e.cubemap ? 1 : 0,
                width: e.width,
                height: e.height,
                format: e.format,
                cubemap: e.cubemap,
                levels: e.levels
            });
            return n.upload(),
            n
        }
        ,
        t
    }()
      , ru = function() {
        function t(t) {
            this.crossOrigin = t.prefix ? "anonymous" : null,
            this.maxRetries = 0,
            this.useImageBitmap = !1
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            var n, s = !(null == i || null == (n = i.file) || !n.contents);
            s && (t = {
                load: URL.createObjectURL(new Blob([i.file.contents])),
                original: t.original
            });
            var a, r = function(i, n) {
                s && URL.revokeObjectURL(t.load),
                e(i, n)
            };
            i && i.options && i.options.hasOwnProperty("crossOrigin") ? a = i.options.crossOrigin : Hh.test(t.load) && (a = this.crossOrigin),
            this.useImageBitmap ? this._loadImageBitmap(t.load, t.original, a, r) : this._loadImage(t.load, t.original, a, r)
        }
        ,
        e.open = function(t, e, i) {
            var n = p.getExtension(t).toLowerCase()
              , s = ".jpg" === n || ".jpeg" === n ? 6 : 7
              , a = new Mi(i,{
                name: t,
                width: e.width,
                height: e.height,
                format: s
            });
            return a.setSource(e),
            a
        }
        ,
        e._loadImage = function(t, e, i, n) {
            var s = new Image;
            i && (s.crossOrigin = i);
            var a, r = 0, o = this.maxRetries;
            s.onload = function() {
                n(null, s)
            }
            ,
            s.onerror = function() {
                if (!a)
                    if (o > 0 && ++r <= o) {
                        var i = 100 * Math.pow(2, r);
                        console.log("Error loading Texture from: '" + e + "' - Retrying in " + i + "ms...");
                        var h = t.indexOf("?") >= 0 ? "&" : "?";
                        a = setTimeout((function() {
                            s.src = t + h + "retry=" + Date.now(),
                            a = null
                        }
                        ), i)
                    } else
                        n("Error loading Texture from: '" + e + "'")
            }
            ,
            s.src = t
        }
        ,
        e._loadImageBitmap = function(t, e, i, n) {
            var s = {
                cache: !0,
                responseType: "blob",
                retry: this.maxRetries > 0,
                maxRetries: this.maxRetries
            };
            st.get(t, s, (function(t, e) {
                t ? n(t) : createImageBitmap(e, {
                    premultiplyAlpha: "none"
                }).then((function(t) {
                    n(null, t)
                }
                )).catch((function(t) {
                    n(t)
                }
                ))
            }
            ))
        }
        ,
        t
    }()
      , ou = [1481919403, 3140563232, 169478669]
      , hu = {
        33776: 8,
        33778: 9,
        33779: Yt,
        36196: ee,
        37492: 22,
        37496: 23,
        35840: 26,
        35841: ie,
        35842: 27,
        35843: ne,
        32849: 6,
        32856: 7,
        35905: 19,
        35907: 20,
        35898: 18,
        34843: Kt,
        34842: Zt
    };
    var lu = function() {
        function t(t) {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            Kh.fetchArrayBuffer(t.load, e, i, this.maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            var n = this.parse(e);
            if (!n)
                return null;
            var s = new Mi(i,{
                name: t,
                addressU: n.cubemap ? 1 : 0,
                addressV: n.cubemap ? 1 : 0,
                width: n.width,
                height: n.height,
                format: n.format,
                cubemap: n.cubemap,
                levels: n.levels
            });
            return s.upload(),
            s
        }
        ,
        e.parse = function(t) {
            var e = new Uint32Array(t);
            if (ou[0] !== e[0] || ou[1] !== e[1] || ou[2] !== e[2])
                return null;
            var i = {
                endianness: e[3],
                glType: e[4],
                glTypeSize: e[5],
                glFormat: e[6],
                glInternalFormat: e[7],
                glBaseInternalFormat: e[8],
                pixelWidth: e[9],
                pixelHeight: e[10],
                pixelDepth: e[11],
                numberOfArrayElements: e[12],
                numberOfFaces: e[13],
                numberOfMipmapLevels: e[14],
                bytesOfKeyValueData: e[15]
            };
            if (i.pixelDepth > 1)
                return null;
            if (0 !== i.numberOfArrayElements)
                return null;
            var n = hu[i.glInternalFormat];
            if (void 0 === n)
                return null;
            for (var s, a, r, o = 16 + i.bytesOfKeyValueData / 4, h = i.numberOfFaces > 1, l = [], c = 0; c < (i.numberOfMipmapLevels || 1); c++) {
                var u = e[o++];
                h && l.push([]);
                for (var d = h ? l[c] : l, f = 0; f < (h ? 6 : 1); ++f)
                    d.push((s = t,
                    a = 4 * o,
                    r = u,
                    18 === n ? new Uint32Array(s,a,r / 4) : new Uint8Array(s,a,r))),
                    o += u + 3 >> 2
            }
            return {
                format: n,
                width: i.pixelWidth,
                height: i.pixelHeight,
                levels: l,
                cubemap: h
            }
        }
        ,
        t
    }()
      , cu = 166
      , uu = function() {
        function t(t, e) {
            this.maxRetries = 0,
            this.device = e
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            var n = this;
            Kh.fetchArrayBuffer(t.load, (function(s, a) {
                s ? e(s, a) : n.parse(a, t, e, i)
            }
            ), i, this.maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            var n = new Mi(i,{
                name: t,
                addressU: e.cubemap ? 1 : 0,
                addressV: e.cubemap ? 1 : 0,
                width: e.width,
                height: e.height,
                format: e.format,
                cubemap: e.cubemap,
                levels: e.levels
            });
            return n.upload(),
            n
        }
        ,
        e.parse = function(t, e, i, n) {
            var s = new K(t)
              , a = [s.readU32be(), s.readU32be(), s.readU32be()];
            if (2873840728 !== a[0] || 540160187 !== a[1] || 218765834 !== a[2])
                return null;
            for (var r = {
                vkFormat: s.readU32(),
                typeSize: s.readU32(),
                pixelWidth: s.readU32(),
                pixelHeight: s.readU32(),
                pixelDepth: s.readU32(),
                layerCount: s.readU32(),
                faceCount: s.readU32(),
                levelCount: s.readU32(),
                supercompressionScheme: s.readU32()
            }, o = {
                dfdByteOffset: s.readU32(),
                dfdByteLength: s.readU32(),
                kvdByteOffset: s.readU32(),
                kvdByteLength: s.readU32(),
                sgdByteOffset: s.readU64(),
                sgdByteLength: s.readU64()
            }, h = [], l = 0; l < Math.max(1, r.levelCount); ++l)
                h.push({
                    byteOffset: s.readU64(),
                    byteLength: s.readU64(),
                    uncompressedByteLength: s.readU64()
                });
            if (s.readU32() !== o.kvdByteOffset - o.dfdByteOffset)
                return null;
            s.skip(8);
            var c, u, d, f = s.readU8();
            (s.skip(o.dfdByteLength - 9),
            s.skip(o.kvdByteLength),
            1 === r.supercompressionScheme || f === cu) ? su(this.device, e.load, t, i, {
                isGGGR: 0 != (8 & (null == n || null == (c = n.file) || null == (u = c.variants) || null == (d = u.basis) ? void 0 : d.opt)),
                isKTX2: !0
            }) || i('Basis module not found. Asset "' + n.name + '" basis texture variant will not be loaded.') : i("unsupported KTX2 pixel format")
        }
        ,
        t
    }()
      , du = function() {
        function t(t) {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            Kh.fetchArrayBuffer(t.load, e, i, this.maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            var n, s = new Uint32Array(e,0,32), a = s[4], r = s[3], o = Math.max(s[7], 1), h = 4 === s[20], l = s[21], c = s[22], u = 65024 === s[28], d = 827611204, f = 825438800, p = 825439312, m = !1, _ = !1, g = !1, v = !1, y = !1, x = null;
            if (h ? l === d ? (x = 8,
            m = !0) : 894720068 === l ? (x = Yt,
            m = !0) : 116 === l ? (x = Qt,
            _ = !0) : 826496069 === l ? (x = ee,
            m = !0,
            g = !0) : l === f || 825504336 === l ? (x = l === f ? ie : ne,
            m = !0,
            v = !0) : l !== p && 825504848 !== l || (x = l === p ? 26 : 27,
            m = !0,
            y = !0) : 32 === c && (x = 7),
            !x)
                return (n = new Mi(i,{
                    width: 4,
                    height: 4,
                    format: 6
                })).name = "dds-legacy-empty",
                n;
            n = new Mi(i,{
                name: t,
                addressU: u ? 1 : 0,
                addressV: u ? 1 : 0,
                width: a,
                height: r,
                format: x,
                cubemap: u
            });
            for (var b, S = 128, T = u ? 6 : 1, w = l === d ? 8 : 16, M = 0; M < T; M++)
                for (var A = a, C = r, E = 0; E < o; E++) {
                    b = m ? g ? Math.floor((A + 3) / 4) * Math.floor((C + 3) / 4) * 8 : v ? Math.max(A, 16) * Math.max(C, 8) / 4 : y ? Math.max(A, 8) * Math.max(C, 8) / 2 : Math.floor((A + 4 - 1) / 4) * Math.floor((C + 4 - 1) / 4) * w : A * C * 4;
                    var P = _ ? new Float32Array(e,S,b) : new Uint8Array(e,S,b);
                    u ? (n._levels[E] || (n._levels[E] = []),
                    n._levels[E][M] = P) : n._levels[E] = P,
                    S += _ ? 4 * b : b,
                    A = Math.max(.5 * A, 1),
                    C = Math.max(.5 * C, 1)
                }
            return n.upload(),
            n
        }
        ,
        t
    }()
      , fu = function() {
        function t(t) {
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e, i) {
            Kh.fetchArrayBuffer(t.load, e, i, this.maxRetries)
        }
        ,
        e.open = function(t, e, i) {
            var n = this.parse(e);
            if (!n)
                return null;
            var s = new Mi(i,{
                name: t,
                addressU: 0,
                addressV: 1,
                minFilter: 2,
                magFilter: 0,
                width: n.width,
                height: n.height,
                levels: n.levels,
                format: 7,
                type: Ne,
                mipmaps: !1
            });
            return s.upload(),
            s
        }
        ,
        e.parse = function(t) {
            var e = new K(t);
            if (!e.readLine().startsWith("#?RADIANCE"))
                return this._error("radiance header has invalid magic"),
                null;
            for (var i = {}; ; ) {
                var n = e.readLine();
                if (0 === n.length)
                    break;
                var s = n.split("=");
                2 === s.length && (i[s[0]] = s[1])
            }
            if (!i.hasOwnProperty("FORMAT"))
                return this._error("radiance header missing FORMAT variable"),
                null;
            var a = e.readLine().split(" ");
            if (4 !== a.length)
                return this._error("radiance header has invalid resolution"),
                null;
            var r = parseInt(a[1], 10)
              , o = parseInt(a[3], 10)
              , h = this._readPixels(e, o, r, "-Y" === a[0]);
            return h ? {
                width: o,
                height: r,
                levels: [h]
            } : null
        }
        ,
        e._readPixels = function(t, e, i, n) {
            if (e < 8 || e > 32767)
                return this._readPixelsFlat(t, e, i);
            var s = [0, 0, 0, 0];
            if (t.readArray(s),
            2 !== s[0] || 2 !== s[1] || 0 != (128 & s[2]))
                return t.skip(-4),
                this._readPixelsFlat(t, e, i);
            var a, r, o, h, l, c, u = new ArrayBuffer(e * i * 4), d = new Uint8Array(u), f = n ? 0 : 4 * e * (i - 1);
            for (r = 0; r < i; ++r) {
                if (r && t.readArray(s),
                (s[2] << 8) + s[3] !== e)
                    return this._error("radiance has invalid scanline width"),
                    null;
                for (h = 0; h < 4; ++h)
                    for (a = 0; a < e; )
                        if ((l = t.readU8()) > 128) {
                            if (a + (l -= 128) > e)
                                return this._error("radiance has invalid scanline data"),
                                null;
                            for (c = t.readU8(),
                            o = 0; o < l; ++o)
                                d[f + h + 4 * a++] = c
                        } else {
                            if (0 === l || a + l > e)
                                return this._error("radiance has invalid scanline data"),
                                null;
                            for (o = 0; o < l; ++o)
                                d[f + h + 4 * a++] = t.readU8()
                        }
                f += 4 * e * (n ? 1 : -1)
            }
            return d
        }
        ,
        e._readPixelsFlat = function(t, e, i) {
            return t.remainingBytes === e * i * 4 ? new Uint8Array(t.arraybuffer,t.offset) : null
        }
        ,
        e._error = function(t) {}
        ,
        t
    }()
      , pu = {
        repeat: 0,
        clamp: 1,
        mirror: 2
    }
      , mu = {
        nearest: 0,
        linear: 1,
        nearest_mip_nearest: 2,
        linear_mip_nearest: 4,
        nearest_mip_linear: 3,
        linear_mip_linear: 5
    }
      , _u = {
        default: Fe,
        rgbm: Be,
        rgbe: Ne,
        swizzleGGGR: Ue
    }
      , gu = function() {
        function t() {}
        var e = t.prototype;
        return e.load = function(t, e, i) {
            throw new Error("not implemented")
        }
        ,
        e.open = function(t, e, i) {
            throw new Error("not implemented")
        }
        ,
        t
    }()
      , vu = function() {
        function t(t, e, i) {
            this._device = t,
            this._assets = e,
            this._loader = i,
            this.imgParser = new ru(e),
            this.parsers = {
                dds: new du(e),
                ktx: new lu(e),
                ktx2: new uu(e,t),
                basis: new au(e,t),
                hdr: new fu(e)
            }
        }
        var e = t.prototype;
        return e._getUrlWithoutParams = function(t) {
            return t.indexOf("?") >= 0 ? t.split("?")[0] : t
        }
        ,
        e._getParser = function(t) {
            var e = p.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".", "");
            return this.parsers[e] || this.imgParser
        }
        ,
        e.load = function(t, e, i) {
            "string" == typeof t && (t = {
                load: t,
                original: t
            }),
            this._getParser(t.original).load(t, e, i)
        }
        ,
        e.open = function(t, e, i) {
            if (t) {
                var n = this._getParser(t).open(t, e, this._device);
                return null === n ? n = new Mi(this._device,{
                    width: 4,
                    height: 4,
                    format: 6
                }) : (!function(t) {
                    var e = Math.log2(Math.max(t._width, t._height)) + 1;
                    if (!(7 !== t._format && t._format !== Qt || t._volume || t._compressed || 1 === t._levels.length || t._levels.length === e || (i = t._cubemap ? t._levels[0][0] : t._levels[0],
                    i instanceof HTMLCanvasElement || i instanceof HTMLImageElement || i instanceof HTMLVideoElement))) {
                        for (var i, n = function(t, e, i) {
                            for (var n = Math.max(1, t >> 1), s = Math.max(1, e >> 1), a = new i.constructor(n * s * 4), r = Math.floor(t / n), o = Math.floor(e / s), h = r * o, l = 0; l < s; ++l)
                                for (var c = 0; c < n; ++c)
                                    for (var u = 0; u < 4; ++u) {
                                        for (var d = 0, f = 0; f < o; ++f)
                                            for (var p = 0; p < r; ++p)
                                                d += i[4 * (c * r + p + (l * o + f) * t) + u];
                                        a[4 * (c + l * n) + u] = d / h
                                    }
                            return a
                        }, s = t._levels.length; s < e; ++s) {
                            var a = Math.max(1, t._width >> s - 1)
                              , r = Math.max(1, t._height >> s - 1);
                            if (t._cubemap) {
                                for (var o = [], h = 0; h < 6; ++h)
                                    o.push(n(a, r, t._levels[s - 1][h]));
                                t._levels.push(o)
                            } else
                                t._levels.push(n(a, r, t._levels[s - 1]))
                        }
                        t._levelsUpdated = t._cubemap ? [[!0, !0, !0, !0, !0, !0]] : [!0]
                    }
                }(n),
                e.unswizzledGGGR && (i.file.variants.basis.opt &= -9)),
                n
            }
        }
        ,
        e.patch = function(t, e) {
            var i = t.resource;
            if (i) {
                t.name && t.name.length > 0 && (i.name = t.name);
                var n = t.data;
                n.hasOwnProperty("minfilter") && (i.minFilter = mu[n.minfilter]),
                n.hasOwnProperty("magfilter") && (i.magFilter = mu[n.magfilter]),
                i.cubemap || (n.hasOwnProperty("addressu") && (i.addressU = pu[n.addressu]),
                n.hasOwnProperty("addressv") && (i.addressV = pu[n.addressv])),
                n.hasOwnProperty("mipmaps") && (i.mipmaps = n.mipmaps),
                n.hasOwnProperty("anisotropy") && (i.anisotropy = n.anisotropy),
                n.hasOwnProperty("flipY") && (i.flipY = !!n.flipY),
                n.hasOwnProperty("type") ? i.type = _u[n.type] : n.hasOwnProperty("rgbm") && n.rgbm ? i.type = Be : t.file && 0 != (8 & t.file.opt) && (i.type = Ue)
            }
        }
        ,
        G(t, [{
            key: "crossOrigin",
            get: function() {
                return this.imgParser.crossOrigin
            },
            set: function(t) {
                this.imgParser.crossOrigin = t
            }
        }, {
            key: "maxRetries",
            get: function() {
                return this.imgParser.maxRetries
            },
            set: function(t) {
                for (var e in this.imgParser.maxRetries = t,
                this.parsers)
                    this.parsers.hasOwnProperty(e) && (this.parsers[e].maxRetries = t)
            }
        }]),
        t
    }()
      , yu = function() {
        function t(t) {
            void 0 === t && (t = null),
            this._index = {},
            this._key = t
        }
        var e = t.prototype;
        return e.addItem = function(t) {
            for (var e, i = Y(t.tags._list); !(e = i()).done; ) {
                var n = e.value;
                this.add(n, t)
            }
        }
        ,
        e.removeItem = function(t) {
            for (var e, i = Y(t.tags._list); !(e = i()).done; ) {
                var n = e.value;
                this.remove(n, t)
            }
        }
        ,
        e.add = function(t, e) {
            this._index[t] && -1 !== this._index[t].list.indexOf(e) || (this._index[t] || (this._index[t] = {
                list: []
            },
            this._key && (this._index[t].keys = {})),
            this._index[t].list.push(e),
            this._key && (this._index[t].keys[e[this._key]] = e))
        }
        ,
        e.remove = function(t, e) {
            if (this._index[t] && (!this._key || this._index[t].keys[e[this._key]])) {
                var i = this._index[t].list.indexOf(e);
                -1 !== i && (this._index[t].list.splice(i, 1),
                this._key && delete this._index[t].keys[e[this._key]],
                0 === this._index[t].list.length && delete this._index[t])
            }
        }
        ,
        e.find = function(t) {
            for (var e, i, n, s, a, r = this, o = {}, h = [], l = function(t, e) {
                return r._index[t].list.length - r._index[e].list.length
            }, c = 0; c < t.length; c++) {
                if ((i = t[c])instanceof Array) {
                    if (0 === i.length)
                        continue;
                    if (1 !== i.length) {
                        a = !1;
                        for (var u = 0; u < i.length; u++)
                            if (!this._index[i[u]]) {
                                a = !0;
                                break
                            }
                        if (a)
                            continue;
                        1 === (s = (n = i.slice(0).sort(l)).slice(1)).length && (s = s[0]);
                        for (var d = 0; d < this._index[n[0]].list.length; d++)
                            e = this._index[n[0]].list[d],
                            (this._key ? !o[e[this._key]] : -1 === h.indexOf(e)) && e.tags.has(s) && (this._key && (o[e[this._key]] = !0),
                            h.push(e));
                        continue
                    }
                    i = i[0]
                }
                if (i && "string" == typeof i && this._index[i])
                    for (var f = 0; f < this._index[i].list.length; f++)
                        e = this._index[i].list[f],
                        this._key ? o[e[this._key]] || (o[e[this._key]] = !0,
                        h.push(e)) : -1 === h.indexOf(e) && h.push(e)
            }
            return h
        }
        ,
        t
    }()
      , xu = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._loader = e,
            i._assets = [],
            i._cache = {},
            i._names = {},
            i._tags = new yu("_id"),
            i._urls = {},
            i.prefix = null,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.list = function(t) {
            return t = t || {},
            this._assets.filter((function(e) {
                var i = !0;
                return void 0 !== t.preload && (i = e.preload === t.preload),
                i
            }
            ))
        }
        ,
        i.add = function(t) {
            var e, i = this._assets.push(t) - 1;
            this._cache[t.id] = i,
            this._names[t.name] || (this._names[t.name] = []),
            this._names[t.name].push(i),
            t.file && (e = t.file.url,
            this._urls[e] = i),
            t.registry = this,
            this._tags.addItem(t),
            t.tags.on("add", this._onTagAdd, this),
            t.tags.on("remove", this._onTagRemove, this),
            this.fire("add", t),
            this.fire("add:" + t.id, t),
            e && this.fire("add:url:" + e, t),
            t.preload && this.load(t)
        }
        ,
        i.remove = function(t) {
            var e = this._cache[t.id]
              , i = t.file ? t.file.url : null;
            if (void 0 !== e) {
                this._assets.splice(e, 1),
                delete this._cache[t.id],
                this._names = {},
                this._urls = [];
                for (var n = 0, s = this._assets.length; n < s; n++) {
                    var a = this._assets[n];
                    this._cache[a.id] = n,
                    this._names[a.name] || (this._names[a.name] = []),
                    this._names[a.name].push(n),
                    a.file && (this._urls[a.file.url] = n)
                }
                return this._tags.removeItem(t),
                t.tags.off("add", this._onTagAdd, this),
                t.tags.off("remove", this._onTagRemove, this),
                t.fire("remove", t),
                this.fire("remove", t),
                this.fire("remove:" + t.id, t),
                i && this.fire("remove:url:" + i, t),
                !0
            }
            return !1
        }
        ,
        i.get = function(t) {
            var e = this._cache[t];
            return this._assets[e]
        }
        ,
        i.getByUrl = function(t) {
            var e = this._urls[t];
            return this._assets[e]
        }
        ,
        i.load = function(t) {
            var e = this;
            if (!t.loading && !t.loaded) {
                var i = t.file
                  , n = function(n) {
                    n instanceof Array ? t.resources = n : t.resource = n,
                    e._loader.patch(t, e),
                    e.fire("load", t),
                    e.fire("load:" + t.id, t),
                    i && i.url && e.fire("load:url:" + i.url, t),
                    t.fire("load", t)
                };
                if (i || "cubemap" === t.type)
                    this.fire("load:start", t),
                    this.fire("load:" + t.id + ":start", t),
                    t.loading = !0,
                    this._loader.load(t.getFileUrl(), t.type, (function(i, s, a) {
                        if (t.loaded = !0,
                        t.loading = !1,
                        i)
                            e.fire("error", i, t),
                            e.fire("error:" + t.id, i, t),
                            t.fire("error", i, t);
                        else {
                            if (!Rc.legacy && "script" === t.type) {
                                var r = e._loader.getHandler("script");
                                r._cache[t.id] && r._cache[t.id].parentNode === document.head && document.head.removeChild(r._cache[t.id]),
                                r._cache[t.id] = a
                            }
                            n(s)
                        }
                    }
                    ), t);
                else {
                    var s = this._loader.open(t.type, t.data);
                    t.loaded = !0,
                    n(s)
                }
            }
        }
        ,
        i.loadFromUrl = function(t, e, i) {
            this.loadFromUrlAndFilename(t, null, e, i)
        }
        ,
        i.loadFromUrlAndFilename = function(t, e, i, n) {
            var s = this
              , a = p.getBasename(e || t)
              , r = {
                filename: e || a,
                url: t
            }
              , o = this.getByUrl(t);
            if (o) {
                if (o.loaded)
                    return void n(o.loadFromUrlError || null, o)
            } else
                o = new Kh(a,i,r),
                this.add(o);
            var h = function(t) {
                t.once("load", (function(t) {
                    "material" === i ? s._loadTextures(t, (function(e, i) {
                        n(e, t)
                    }
                    )) : n(null, t)
                }
                )),
                t.once("error", (function(e) {
                    e && (s.loadFromUrlError = e),
                    n(e, t)
                }
                )),
                s.load(t)
            };
            o.resource ? n(null, o) : "model" === i ? this._loadModel(o, h) : h(o)
        }
        ,
        i._loadModel = function(t, e) {
            var i = this
              , n = t.getFileUrl()
              , s = p.getExtension(n);
            if (".json" === s || ".glb" === s) {
                var a = p.getDirectory(n)
                  , r = p.getBasename(n)
                  , o = p.join(a, r.replace(s, ".mapping.json"));
                this._loader.load(o, "json", (function(n, s) {
                    n ? (t.data = {
                        mapping: []
                    },
                    e(t)) : i._loadMaterials(t, s, (function(i, n) {
                        t.data = s,
                        e(t)
                    }
                    ))
                }
                ))
            } else
                e(t)
        }
        ,
        i._loadMaterials = function(t, e, i) {
            for (var n = this, s = [], a = 0, r = function(t, e) {
                n._loadTextures(e, (function(t, n) {
                    s.push(e),
                    s.length === a && i(null, s)
                }
                ))
            }, o = 0; o < e.mapping.length; o++) {
                var h = e.mapping[o].path;
                if (h) {
                    a++;
                    var l = t.getAbsoluteUrl(h);
                    this.loadFromUrl(l, "material", r)
                }
            }
            0 === a && i(null, s)
        }
        ,
        i._loadTextures = function(t, e) {
            var i = []
              , n = 0
              , s = t.data;
            if ("path" === s.mappingFormat) {
                for (var a = function(t, s) {
                    t && console.error(t),
                    i.push(s),
                    i.length === n && e(null, i)
                }, r = zn, o = 0; o < r.length; o++) {
                    var h = s[r[o]];
                    if (h && "string" == typeof h) {
                        n++;
                        var l = t.getAbsoluteUrl(h);
                        this.loadFromUrl(l, "texture", a)
                    }
                }
                0 === n && e(null, i)
            } else
                e(null, i)
        }
        ,
        i.findAll = function(t, e) {
            var i = this
              , n = this._names[t];
            if (n) {
                var s = n.map((function(t) {
                    return i._assets[t]
                }
                ));
                return e ? s.filter((function(t) {
                    return t.type === e
                }
                )) : s
            }
            return []
        }
        ,
        i._onTagAdd = function(t, e) {
            this._tags.add(t, e)
        }
        ,
        i._onTagRemove = function(t, e) {
            this._tags.remove(t, e)
        }
        ,
        i.findByTag = function() {
            return this._tags.find(arguments)
        }
        ,
        i.filter = function(t) {
            return this._assets.filter((function(e) {
                return t(e)
            }
            ))
        }
        ,
        i.find = function(t, e) {
            var i = this.findAll(t, e);
            return i.length > 0 ? i[0] : null
        }
        ,
        e
    }(u)
      , bu = function() {
        function t(t) {
            this._assets = t,
            this._bundleAssets = {},
            this._assetsInBundles = {},
            this._urlsInBundles = {},
            this._fileRequests = {},
            this._assets.on("add", this._onAssetAdded, this),
            this._assets.on("remove", this._onAssetRemoved, this)
        }
        var e = t.prototype;
        return e._onAssetAdded = function(t) {
            if ("bundle" === t.type) {
                this._bundleAssets[t.id] = t,
                this._registerBundleEventListeners(t.id);
                for (var e = 0, i = t.data.assets.length; e < i; e++)
                    this._indexAssetInBundle(t.data.assets[e], t)
            } else
                this._assetsInBundles[t.id] && this._indexAssetFileUrls(t)
        }
        ,
        e._registerBundleEventListeners = function(t) {
            this._assets.on("load:" + t, this._onBundleLoaded, this),
            this._assets.on("error:" + t, this._onBundleError, this)
        }
        ,
        e._unregisterBundleEventListeners = function(t) {
            this._assets.off("load:" + t, this._onBundleLoaded, this),
            this._assets.off("error:" + t, this._onBundleError, this)
        }
        ,
        e._indexAssetInBundle = function(t, e) {
            if (this._assetsInBundles[t]) {
                var i = this._assetsInBundles[t];
                -1 === i.indexOf(e) && i.push(e)
            } else
                this._assetsInBundles[t] = [e];
            var n = this._assets.get(t);
            n && this._indexAssetFileUrls(n)
        }
        ,
        e._indexAssetFileUrls = function(t) {
            var e = this._getAssetFileUrls(t);
            if (e)
                for (var i = 0, n = e.length; i < n; i++) {
                    var s = e[i];
                    this._urlsInBundles[s] = this._assetsInBundles[t.id]
                }
        }
        ,
        e._getAssetFileUrls = function(t) {
            var e = t.getFileUrl();
            if (!e)
                return null;
            var i = [e = this._normalizeUrl(e)];
            if ("font" === t.type)
                for (var n = t.data.info.maps.length, s = 1; s < n; s++)
                    i.push(e.replace(".png", s + ".png"));
            return i
        }
        ,
        e._normalizeUrl = function(t) {
            return t && t.split("?")[0]
        }
        ,
        e._onAssetRemoved = function(t) {
            if ("bundle" === t.type) {
                for (var e in delete this._bundleAssets[t.id],
                this._unregisterBundleEventListeners(t.id),
                this._assetsInBundles) {
                    var i = this._assetsInBundles[e]
                      , n = i.indexOf(t);
                    if (-1 !== n && (i.splice(n, 1),
                    !i.length))
                        for (var s in delete this._assetsInBundles[e],
                        this._urlsInBundles)
                            this._urlsInBundles[s] === i && delete this._urlsInBundles[s]
                }
                this._onBundleError("Bundle " + t.id + " was removed", t)
            } else if (this._assetsInBundles[t.id]) {
                delete this._assetsInBundles[t.id];
                for (var a = this._getAssetFileUrls(t), r = 0, o = a.length; r < o; r++)
                    delete this._urlsInBundles[a[r]]
            }
        }
        ,
        e._onBundleLoaded = function(t) {
            var e = this;
            t.resource ? requestAnimationFrame((function() {
                if (e._fileRequests)
                    for (var i in e._fileRequests) {
                        var n = e._urlsInBundles[i];
                        if (n && -1 !== n.indexOf(t)) {
                            var s = decodeURIComponent(i)
                              , a = null;
                            t.resource.hasBlobUrl(s) || (a = "Bundle " + t.id + " does not contain URL " + i);
                            for (var r = e._fileRequests[i], o = 0, h = r.length; o < h; o++)
                                a ? r[o](a) : r[o](null, t.resource.getBlobUrl(s));
                            delete e._fileRequests[i]
                        }
                    }
            }
            )) : this._onBundleError("Bundle " + t.id + " failed to load", t)
        }
        ,
        e._onBundleError = function(t, e) {
            for (var i in this._fileRequests) {
                if (!this._findLoadedOrLoadingBundleForUrl(i)) {
                    for (var n = this._fileRequests[i], s = 0, a = n.length; s < a; s++)
                        n[s](t);
                    delete this._fileRequests[i]
                }
            }
        }
        ,
        e._findLoadedOrLoadingBundleForUrl = function(t) {
            var e = this._urlsInBundles[t];
            if (!e)
                return null;
            for (var i = e.length, n = 0; n < i; n++)
                if (e[n].loaded && e[n].resource)
                    return e[n];
            for (var s = 0; s < i; s++)
                if (e[s].loading)
                    return e[s];
            return null
        }
        ,
        e.listBundlesForAsset = function(t) {
            return this._assetsInBundles[t.id] || null
        }
        ,
        e.list = function() {
            var t = [];
            for (var e in this._bundleAssets)
                t.push(this._bundleAssets[e]);
            return t
        }
        ,
        e.hasUrl = function(t) {
            return !!this._urlsInBundles[t]
        }
        ,
        e.canLoadUrl = function(t) {
            return !!this._findLoadedOrLoadingBundleForUrl(t)
        }
        ,
        e.loadUrl = function(t, e) {
            var i = this._findLoadedOrLoadingBundleForUrl(t);
            if (i)
                if (i.loaded) {
                    var n = decodeURIComponent(t);
                    if (!i.resource.hasBlobUrl(n))
                        return void e("Bundle " + i.id + " does not contain URL " + t);
                    e(null, i.resource.getBlobUrl(n))
                } else
                    this._fileRequests.hasOwnProperty(t) ? this._fileRequests[t].push(e) : this._fileRequests[t] = [e];
            else
                e("URL " + t + " not found in any bundles")
        }
        ,
        e.destroy = function() {
            for (var t in this._assets.off("add", this._onAssetAdded, this),
            this._assets.off("remove", this._onAssetRemoved, this),
            this._bundleAssets)
                this._unregisterBundleEventListeners(t);
            this._assets = null,
            this._bundleAssets = null,
            this._assetsInBundles = null,
            this._urlsInBundles = null,
            this._fileRequests = null
        }
        ,
        t
    }()
      , Su = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).app = e,
            i._scripts = {},
            i._list = [],
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this.app = null,
            this.off()
        }
        ,
        i.add = function(t) {
            var e = this
              , i = t.__name;
            return this._scripts.hasOwnProperty(i) ? (setTimeout((function() {
                if (t.prototype.swap) {
                    var n = e._scripts[i]
                      , s = e._list.indexOf(n);
                    e._list[s] = t,
                    e._scripts[i] = t,
                    e.fire("swap", i, t),
                    e.fire("swap:" + i, t)
                } else
                    console.warn("script registry already has '" + i + "' script, define 'swap' method for new script type to enable code hot swapping")
            }
            )),
            !1) : (this._scripts[i] = t,
            this._list.push(t),
            this.fire("add", i, t),
            this.fire("add:" + i, t),
            setTimeout((function() {
                if (e._scripts.hasOwnProperty(i) && e.app && e.app.systems && e.app.systems.script) {
                    var t, n = e.app.systems.script._components, s = [], a = [];
                    for (n.loopIndex = 0; n.loopIndex < n.length; n.loopIndex++) {
                        var r = n.items[n.loopIndex];
                        if (r._scriptsIndex[i] && r._scriptsIndex[i].awaiting) {
                            r._scriptsData && r._scriptsData[i] && (t = r._scriptsData[i].attributes);
                            var o = r.create(i, {
                                preloading: !0,
                                ind: r._scriptsIndex[i].ind,
                                attributes: t
                            });
                            o && s.push(o)
                        }
                    }
                    for (var h = 0; h < s.length; h++)
                        s[h].__initializeAttributes();
                    for (var l = 0; l < s.length; l++)
                        s[l].enabled && (s[l]._initialized = !0,
                        a.push(s[l]),
                        s[l].initialize && s[l].initialize());
                    for (var c = 0; c < a.length; c++)
                        a[c].enabled && !a[c]._postInitialized && (a[c]._postInitialized = !0,
                        a[c].postInitialize && a[c].postInitialize())
                }
            }
            )),
            !0)
        }
        ,
        i.remove = function(t) {
            var e = t
              , i = t;
            if ("string" != typeof i ? i = e.__name : e = this.get(i),
            this.get(i) !== e)
                return !1;
            delete this._scripts[i];
            var n = this._list.indexOf(e);
            return this._list.splice(n, 1),
            this.fire("remove", i, e),
            this.fire("remove:" + i, e),
            !0
        }
        ,
        i.get = function(t) {
            return this._scripts[t] || null
        }
        ,
        i.has = function(t) {
            if ("string" == typeof t)
                return this._scripts.hasOwnProperty(t);
            if (!t)
                return !1;
            var e = t.__name;
            return this._scripts[e] === t
        }
        ,
        i.list = function() {
            return this._list
        }
        ,
        e
    }(u)
      , Tu = function() {
        function t() {}
        var e = t.prototype;
        return e._validate = function(t) {
            if (!t.header)
                throw new Error('pc.I18n#addData: Missing "header" field');
            if (!t.header.version)
                throw new Error('pc.I18n#addData: Missing "header.version" field');
            if (1 !== t.header.version)
                throw new Error('pc.I18n#addData: Invalid "header.version" field');
            if (!t.data)
                throw new Error('pc.I18n#addData: Missing "data" field');
            if (!Array.isArray(t.data))
                throw new Error('pc.I18n#addData: "data" field must be an array');
            for (var e = 0, i = t.data.length; e < i; e++) {
                var n = t.data[e];
                if (!n.info)
                    throw new Error('pc.I18n#addData: missing "data[' + e + '].info" field');
                if (!n.info.locale)
                    throw new Error('pc.I18n#addData: missing "data[' + e + '].info.locale" field');
                if ("string" != typeof n.info.locale)
                    throw new Error('pc.I18n#addData: "data[' + e + '].info.locale" must be a string');
                if (!n.messages)
                    throw new Error('pc.I18n#addData: missing "data[' + e + '].messages" field')
            }
        }
        ,
        e.parse = function(t) {
            return t.data
        }
        ,
        t
    }()
      , wu = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).locale = Fh,
            i._translations = {},
            i._availableLangs = {},
            i._app = e,
            i._assets = [],
            i._parser = new Tu,
            i
        }
        H(e, t),
        e.findAvailableLocale = function(t, e) {
            return Vh(t, e)
        }
        ;
        var i = e.prototype;
        return i.findAvailableLocale = function(t) {
            if (this._translations[t])
                return t;
            var e = zh(t);
            return this._findFallbackLocale(t, e)
        }
        ,
        i.getText = function(t, e) {
            var i, n = t;
            e || (e = this._locale,
            i = this._lang);
            var s = this._translations[e];
            return s || (i || (i = zh(e)),
            e = this._findFallbackLocale(e, i),
            s = this._translations[e]),
            s && s.hasOwnProperty(t) && (n = s[t],
            Array.isArray(n) && (n = n[0]),
            null == n && (n = t)),
            n
        }
        ,
        i.getPluralText = function(t, e, i) {
            var n, s, a = t;
            i ? s = Wh(n = zh(i)) : (i = this._locale,
            n = this._lang,
            s = this._pluralFn);
            var r = this._translations[i];
            if (r || (s = Wh(n = zh(i = this._findFallbackLocale(i, n))),
            r = this._translations[i]),
            r && r[t] && s) {
                var o = s(e);
                null == (a = r[t][o]) && (a = t)
            }
            return a
        }
        ,
        i.addData = function(t) {
            var e;
            try {
                e = this._parser.parse(t)
            } catch (t) {
                return void console.error(t)
            }
            for (var i = 0, n = e.length; i < n; i++) {
                var s = e[i]
                  , a = s.info.locale
                  , r = s.messages;
                if (!this._translations[a]) {
                    this._translations[a] = {};
                    var o = zh(a);
                    this._availableLangs[o] || (this._availableLangs[o] = a)
                }
                Object.assign(this._translations[a], r),
                this.fire("data:add", a, r)
            }
        }
        ,
        i.removeData = function(t) {
            var e;
            try {
                e = this._parser.parse(t)
            } catch (t) {
                return void console.error(t)
            }
            for (var i = 0, n = e.length; i < n; i++) {
                var s = e[i]
                  , a = s.info.locale
                  , r = this._translations[a];
                if (r) {
                    var o = s.messages;
                    for (var h in o)
                        delete r[h];
                    0 === Object.keys(r).length && (delete this._translations[a],
                    delete this._availableLangs[zh(a)]),
                    this.fire("data:remove", a, o)
                }
            }
        }
        ,
        i.destroy = function() {
            this._translations = null,
            this._availableLangs = null,
            this._assets = null,
            this._parser = null,
            this.off()
        }
        ,
        i._findFallbackLocale = function(t, e) {
            var i = Bh[t];
            return i && this._translations[i] || (i = Bh[e]) && this._translations[i] || (i = this._availableLangs[e]) && this._translations[i] ? i : Fh
        }
        ,
        i._onAssetAdd = function(t) {
            t.on("load", this._onAssetLoad, this),
            t.on("change", this._onAssetChange, this),
            t.on("remove", this._onAssetRemove, this),
            t.on("unload", this._onAssetUnload, this),
            t.resource && this._onAssetLoad(t)
        }
        ,
        i._onAssetLoad = function(t) {
            this.addData(t.resource)
        }
        ,
        i._onAssetChange = function(t) {
            t.resource && this.addData(t.resource)
        }
        ,
        i._onAssetRemove = function(t) {
            t.off("load", this._onAssetLoad, this),
            t.off("change", this._onAssetChange, this),
            t.off("remove", this._onAssetRemove, this),
            t.off("unload", this._onAssetUnload, this),
            t.resource && this.removeData(t.resource),
            this._app.assets.once("add:" + t.id, this._onAssetAdd, this)
        }
        ,
        i._onAssetUnload = function(t) {
            t.resource && this.removeData(t.resource)
        }
        ,
        G(e, [{
            key: "locale",
            get: function() {
                return this._locale
            },
            set: function(t) {
                if (this._locale !== t) {
                    var e = zh(t);
                    if ("in" !== e || (n = e = "id",
                    t = -1 !== (s = (i = t).indexOf("-")) ? n + i.substring(s) : n,
                    this._locale !== t)) {
                        var i, n, s, a = this._locale;
                        this._locale = t,
                        this._lang = e,
                        this._pluralFn = Wh(this._lang),
                        this.fire("set:locale", t, a)
                    }
                }
            }
        }, {
            key: "assets",
            get: function() {
                return this._assets
            },
            set: function(t) {
                for (var e = {}, i = 0, n = t.length; i < n; i++) {
                    e[t[i]instanceof Kh ? t[i].id : t[i]] = !0
                }
                for (var s = this._assets.length; s--; ) {
                    var a = this._assets[s];
                    if (!e[a]) {
                        this._app.assets.off("add:" + a, this._onAssetAdd, this);
                        var r = this._app.assets.get(a);
                        r && this._onAssetRemove(r),
                        this._assets.splice(s, 1)
                    }
                }
                for (var o in e) {
                    var h = parseInt(o, 10);
                    if (-1 === this._assets.indexOf(h)) {
                        this._assets.push(h);
                        var l = this._app.assets.get(h);
                        l ? this._onAssetAdd(l) : this._app.assets.once("add:" + h, this._onAssetAdd, this)
                    }
                }
            }
        }]),
        e
    }(u)
      , Mu = "NONE"
      , Au = "FILL_WINDOW"
      , Cu = "KEEP_ASPECT"
      , Eu = "AUTO"
      , Pu = "FIXED"
      , Ru = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._app = e,
            n._device = e.graphicsDevice,
            n.id = i.displayId,
            n._frameData = null,
            window.VRFrameData && (n._frameData = new window.VRFrameData),
            n.display = i,
            n._camera = null,
            n.sitToStandInv = new vt,
            n.leftView = new vt,
            n.leftProj = new vt,
            n.leftViewInv = new vt,
            n.leftPos = new lt,
            n.rightView = new vt,
            n.rightProj = new vt,
            n.rightViewInv = new vt,
            n.rightPos = new lt,
            n.combinedPos = new lt,
            n.combinedView = new vt,
            n.combinedProj = new vt,
            n.combinedViewInv = new vt,
            n.combinedFov = 0,
            n.combinedAspect = 0,
            n.presenting = !1,
            n._presentChange = function(t) {
                if ((t.display ? t.display : t.detail && t.detail.display ? t.detail.display : t.detail && t.detail.vrdisplay ? t.detail.vrdisplay : n.display) === n.display) {
                    if (n.presenting = n.display && n.display.isPresenting,
                    n.presenting) {
                        var e = n.display.getEyeParameters("left")
                          , i = n.display.getEyeParameters("right")
                          , s = 2 * Math.max(e.renderWidth, i.renderWidth)
                          , a = Math.max(e.renderHeight, i.renderHeight);
                        n._app.graphicsDevice.setResolution(s, a),
                        n._app._allowResize = !1
                    } else
                        n._app.setCanvasResolution(Eu),
                        n._app._allowResize = !0;
                    n.fire("beforepresentchange", j(n)),
                    n.fire("presentchange", j(n))
                }
            }
            ,
            window.addEventListener("vrdisplaypresentchange", n._presentChange, !1),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            window.removeEventListener("vrdisplaypresentchange", this._presentChange),
            this._camera && (this._camera.vrDisplay = null),
            this._camera = null
        }
        ,
        i.poll = function() {
            if (this.display) {
                this.display.getFrameData(this._frameData),
                this.leftProj.data = this._frameData.leftProjectionMatrix,
                this.rightProj.data = this._frameData.rightProjectionMatrix;
                var t = this.display.stageParameters;
                t ? (this.sitToStandInv.set(t.sittingToStandingTransform).invert(),
                this.combinedView.set(this._frameData.leftViewMatrix),
                this.leftView.mul2(this.combinedView, this.sitToStandInv),
                this.combinedView.set(this._frameData.rightViewMatrix),
                this.rightView.mul2(this.combinedView, this.sitToStandInv)) : (this.leftView.set(this._frameData.leftViewMatrix),
                this.rightView.set(this._frameData.rightViewMatrix));
                var e = this.leftProj.data[3] + this.leftProj.data[0]
                  , i = this.leftProj.data[11] + this.leftProj.data[8]
                  , n = 1 / Math.sqrt(e * e + i * i);
                e *= n,
                i *= n;
                var s = -Math.atan2(i, e);
                e = this.rightProj.data[3] + this.rightProj.data[0],
                i = this.rightProj.data[11] + this.rightProj.data[8],
                e *= n = 1 / Math.sqrt(e * e + i * i),
                i *= n,
                s = Math.max(s, -Math.atan2(i, e)),
                s *= 2,
                this.combinedFov = s;
                var a = this.rightProj.data[5] / this.rightProj.data[0];
                this.combinedAspect = a;
                var r = this.combinedView;
                r.copy(this.leftView),
                r.invert(),
                this.leftViewInv.copy(r);
                var o = this.combinedPos;
                o.x = this.leftPos.x = r.data[12],
                o.y = this.leftPos.y = r.data[13],
                o.z = this.leftPos.z = r.data[14],
                r.copy(this.rightView),
                r.invert(),
                this.rightViewInv.copy(r);
                var h = o.x - r.data[12]
                  , l = o.y - r.data[13]
                  , c = o.z - r.data[14]
                  , u = Math.sqrt(h * h + l * l + c * c);
                this.rightPos.x = r.data[12],
                this.rightPos.y = r.data[13],
                this.rightPos.z = r.data[14],
                o.x += r.data[12],
                o.y += r.data[13],
                o.z += r.data[14],
                o.x *= .5,
                o.y *= .5,
                o.z *= .5;
                var d = .5 * Math.PI
                  , f = .5 * s
                  , p = Math.PI - (d + f)
                  , m = .5 * u * Math.sin(p)
                  , _ = r.data[8]
                  , g = r.data[9]
                  , v = r.data[10];
                r.data[12] = o.x + _ * m,
                r.data[13] = o.y + g * m,
                r.data[14] = o.z + v * m,
                this.combinedViewInv.copy(r),
                r.invert(),
                this.combinedProj.setPerspective(s * it.RAD_TO_DEG, a, this.display.depthNear + m, this.display.depthFar + m, !0)
            }
        }
        ,
        i.requestPresent = function(t) {
            this.display ? this.presenting ? t && t(new Error("VrDisplay already presenting")) : this.display.requestPresent([{
                source: this._device.canvas
            }]).then((function() {
                t && t()
            }
            ), (function(e) {
                t && t(e)
            }
            )) : t && t(new Error("No VrDisplay to requestPresent"))
        }
        ,
        i.exitPresent = function(t) {
            this.display || t && t(new Error("No VrDisplay to exitPresent")),
            this.presenting ? this.display.exitPresent().then((function() {
                t && t()
            }
            ), (function() {
                t && t(new Error("exitPresent failed"))
            }
            )) : t && t(new Error("VrDisplay not presenting"))
        }
        ,
        i.requestAnimationFrame = function(t) {
            this.display && this.display.requestAnimationFrame(t)
        }
        ,
        i.submitFrame = function() {
            this.display && this.display.submitFrame()
        }
        ,
        i.reset = function() {
            this.display && this.display.resetPose()
        }
        ,
        i.setClipPlanes = function(t, e) {
            this.display && (this.display.depthNear = t,
            this.display.depthFar = e)
        }
        ,
        i.getFrameData = function() {
            if (this.display)
                return this._frameData
        }
        ,
        G(e, [{
            key: "capabilities",
            get: function() {
                return this.display ? this.display.capabilities : {}
            }
        }]),
        e
    }(u)
      , Iu = function(t) {
        function e(i) {
            var n;
            return (n = t.call(this) || this).isSupported = e.isSupported,
            n._index = {},
            n.displays = [],
            n.display = null,
            n._app = i,
            n._onDisplayConnect = n._onDisplayConnect.bind(j(n)),
            n._onDisplayDisconnect = n._onDisplayDisconnect.bind(j(n)),
            n._attach(),
            n._getDisplays((function(t, e) {
                if (t)
                    n.fire("error", t);
                else {
                    for (var i = 0; i < e.length; i++)
                        n._addDisplay(e[i]);
                    n.fire("ready", n.displays)
                }
            }
            )),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._attach = function() {
            window.addEventListener("vrdisplayconnect", this._onDisplayConnect),
            window.addEventListener("vrdisplaydisconnect", this._onDisplayDisconnect)
        }
        ,
        i._detach = function() {
            window.removeEventListener("vrdisplayconnect", this._onDisplayConnect),
            window.removeEventListener("vrdisplaydisconnect", this._onDisplayDisconnect)
        }
        ,
        i.destroy = function() {
            this._detach()
        }
        ,
        i.poll = function() {
            var t = this.displays.length;
            if (t)
                for (var e = 0; e < t; e++)
                    this.displays[e]._camera && this.displays[e].poll()
        }
        ,
        i._getDisplays = function(t) {
            navigator.getVRDisplays ? navigator.getVRDisplays().then((function(e) {
                t && t(null, e)
            }
            )) : t && t(new Error("WebVR not supported"))
        }
        ,
        i._addDisplay = function(t) {
            if (!this._index[t.displayId]) {
                var e = new Ru(this._app,t);
                this._index[e.id] = e,
                this.displays.push(e),
                this.display || (this.display = e),
                this.fire("displayconnect", e)
            }
        }
        ,
        i._onDisplayConnect = function(t) {
            t.detail && t.detail.display ? this._addDisplay(t.detail.display) : this._addDisplay(t.display)
        }
        ,
        i._onDisplayDisconnect = function(t) {
            var e;
            e = t.detail && t.detail.display ? t.detail.display.displayId : t.display.displayId;
            var i = this._index[e];
            if (i) {
                i.destroy(),
                delete this._index[i.id];
                var n = this.displays.indexOf(i);
                this.displays.splice(n, 1),
                this.display === i && (this.displays.length ? this.display = this.displays[0] : this.display = null),
                this.fire("displaydisconnect", i)
            }
        }
        ,
        e
    }(u);
    Iu.isSupported = "undefined" != typeof navigator && !!navigator.getVRDisplays;
    for (var Lu = "inline", Du = "immersive-vr", ku = "immersive-ar", Ou = "viewer", Fu = "left", Bu = "cpu-optimized", Nu = "gpu-optimized", Uu = "luminance-alpha", zu = [], Vu = [], Gu = function(t) {
        function e(e, i, n) {
            var s;
            return (s = t.call(this) || this).manager = e,
            s._xrHitTestSource = i,
            s._transient = n,
            s
        }
        H(e, t);
        var i = e.prototype;
        return i.remove = function() {
            if (this._xrHitTestSource) {
                var t = this.manager.hitTest.sources
                  , e = t.indexOf(this);
                -1 !== e && t.splice(e, 1),
                this.onStop()
            }
        }
        ,
        i.onStop = function() {
            this._xrHitTestSource.cancel(),
            this._xrHitTestSource = null,
            this.fire("remove"),
            this.manager.hitTest.fire("remove", this)
        }
        ,
        i.update = function(t) {
            if (this._transient)
                for (var e = t.getHitTestResultsForTransientInput(this._xrHitTestSource), i = 0; i < e.length; i++) {
                    var n = e[i]
                      , s = void 0;
                    n.inputSource && (s = this.manager.input._getByInputSource(n.inputSource)),
                    this.updateHitResults(n.results, s)
                }
            else
                this.updateHitResults(t.getHitTestResults(this._xrHitTestSource))
        }
        ,
        i.updateHitResults = function(t, e) {
            for (var i = 0; i < t.length; i++) {
                var n = t[i].getPose(this.manager._referenceSpace)
                  , s = zu.pop();
                s || (s = new lt),
                s.copy(n.transform.position);
                var a = Vu.pop();
                a || (a = new yt),
                a.copy(n.transform.orientation),
                this.fire("result", s, a, e),
                this.manager.hitTest.fire("result", this, s, a, e),
                zu.push(s),
                Vu.push(a)
            }
        }
        ,
        e
    }(u), Wu = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).manager = e,
            i._supported = E.browser && !(!window.XRSession || !window.XRSession.prototype.requestHitTestSource),
            i._session = null,
            i.sources = [],
            i._supported && (i.manager.on("start", i._onSessionStart, j(i)),
            i.manager.on("end", i._onSessionEnd, j(i))),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._onSessionStart = function() {
            this.manager.type === ku && (this._session = this.manager.session)
        }
        ,
        i._onSessionEnd = function() {
            if (this._session) {
                this._session = null;
                for (var t = 0; t < this.sources.length; t++)
                    this.sources[t].onStop();
                this.sources = []
            }
        }
        ,
        i.isAvailable = function(t, e) {
            var i;
            return this._supported || (i = new Error("XR HitTest is not supported")),
            this._session || (i = new Error("XR Session is not started (1)")),
            this.manager.type !== ku && (i = new Error("XR HitTest is available only for AR")),
            !i || (t && t(i),
            e && e.fire("error", i),
            !1)
        }
        ,
        i.start = function(t) {
            var e = this;
            if (t = t || {},
            this.isAvailable(t.callback, this)) {
                var i;
                t.profile || t.spaceType || (t.spaceType = Ou);
                var n = t.offsetRay;
                n && (i = new XRRay(new DOMPoint(n.origin.x,n.origin.y,n.origin.z),new DOMPoint(n.direction.x,n.direction.y,n.direction.z)));
                var s = t.callback;
                t.spaceType ? this._session.requestReferenceSpace(t.spaceType).then((function(n) {
                    if (!e._session) {
                        var a = new Error("XR Session is not started (2)");
                        return s && s(a),
                        void e.fire("error", a)
                    }
                    e._session.requestHitTestSource({
                        space: n,
                        entityTypes: t.entityTypes || void 0,
                        offsetRay: i
                    }).then((function(t) {
                        e._onHitTestSource(t, !1, s)
                    }
                    )).catch((function(t) {
                        s && s(t),
                        e.fire("error", t)
                    }
                    ))
                }
                )).catch((function(t) {
                    s && s(t),
                    e.fire("error", t)
                }
                )) : this._session.requestHitTestSourceForTransientInput({
                    profile: t.profile,
                    entityTypes: t.entityTypes || void 0,
                    offsetRay: i
                }).then((function(t) {
                    e._onHitTestSource(t, !0, s)
                }
                )).catch((function(t) {
                    s && s(t),
                    e.fire("error", t)
                }
                ))
            }
        }
        ,
        i._onHitTestSource = function(t, e, i) {
            if (!this._session) {
                t.cancel();
                var n = new Error("XR Session is not started (3)");
                return i && i(n),
                void this.fire("error", n)
            }
            var s = new Gu(this.manager,t,e);
            this.sources.push(s),
            i && i(null, s),
            this.fire("add", s)
        }
        ,
        i.update = function(t) {
            for (var e = 0; e < this.sources.length; e++)
                this.sources[e].update(t)
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }]),
        e
    }(u), Hu = function() {
        function t(t, e) {
            this._index = t,
            this._hand = e,
            this._hand._fingers.push(this),
            this._joints = [],
            this._tip = null
        }
        return G(t, [{
            key: "index",
            get: function() {
                return this._index
            }
        }, {
            key: "hand",
            get: function() {
                return this._hand
            }
        }, {
            key: "joints",
            get: function() {
                return this._joints
            }
        }, {
            key: "tip",
            get: function() {
                return this._tip
            }
        }]),
        t
    }(), Xu = E.browser && window.XRHand ? ["thumb-tip", "index-finger-tip", "middle-finger-tip", "ring-finger-tip", "pinky-finger-tip"] : [], ju = {}, qu = 0; qu < Xu.length; qu++)
        ju[Xu[qu]] = !0;
    var Yu = function() {
        function t(t, e, i, n) {
            void 0 === n && (n = null),
            this._index = t,
            this._id = e,
            this._hand = i,
            this._finger = n,
            this._wrist = "wrist" === e,
            this._tip = this._finger && !!ju[e],
            this._radius = null,
            this._localTransform = new vt,
            this._worldTransform = new vt,
            this._localPosition = new lt,
            this._localRotation = new yt,
            this._position = new lt,
            this._rotation = new yt,
            this._dirtyLocal = !0
        }
        var e = t.prototype;
        return e.update = function(t) {
            this._dirtyLocal = !0,
            this._radius = t.radius,
            this._localPosition.copy(t.transform.position),
            this._localRotation.copy(t.transform.orientation)
        }
        ,
        e._updateTransforms = function() {
            this._dirtyLocal && (this._dirtyLocal = !1,
            this._localTransform.setTRS(this._localPosition, this._localRotation, lt.ONE));
            var t = this._hand._manager.camera.parent;
            t ? this._worldTransform.mul2(t.getWorldTransform(), this._localTransform) : this._worldTransform.copy(this._localTransform)
        }
        ,
        e.getPosition = function() {
            return this._updateTransforms(),
            this._worldTransform.getTranslation(this._position),
            this._position
        }
        ,
        e.getRotation = function() {
            return this._updateTransforms(),
            this._rotation.setFromMat4(this._worldTransform),
            this._rotation
        }
        ,
        G(t, [{
            key: "index",
            get: function() {
                return this._index
            }
        }, {
            key: "hand",
            get: function() {
                return this._hand
            }
        }, {
            key: "finger",
            get: function() {
                return this._finger
            }
        }, {
            key: "wrist",
            get: function() {
                return this._wrist
            }
        }, {
            key: "tip",
            get: function() {
                return this._tip
            }
        }, {
            key: "radius",
            get: function() {
                return this._radius || .005
            }
        }]),
        t
    }()
      , Ku = []
      , Zu = new lt
      , $u = new lt
      , Qu = new lt;
    E.browser && window.XRHand && (Ku = [["thumb-metacarpal", "thumb-phalanx-proximal", "thumb-phalanx-distal", "thumb-tip"], ["index-finger-metacarpal", "index-finger-phalanx-proximal", "index-finger-phalanx-intermediate", "index-finger-phalanx-distal", "index-finger-tip"], ["middle-finger-metacarpal", "middle-finger-phalanx-proximal", "middle-finger-phalanx-intermediate", "middle-finger-phalanx-distal", "middle-finger-tip"], ["ring-finger-metacarpal", "ring-finger-phalanx-proximal", "ring-finger-phalanx-intermediate", "ring-finger-phalanx-distal", "ring-finger-tip"], ["pinky-finger-metacarpal", "pinky-finger-phalanx-proximal", "pinky-finger-phalanx-intermediate", "pinky-finger-phalanx-distal", "pinky-finger-tip"]]);
    var Ju = function(t) {
        function e(e) {
            var i;
            i = t.call(this) || this;
            var n = e._xrInputSource.hand;
            if (i._manager = e._manager,
            i._inputSource = e,
            i._tracking = !1,
            i._fingers = [],
            i._joints = [],
            i._jointsById = {},
            i._tips = [],
            i._wrist = null,
            n.get("wrist")) {
                var s = new Yu(0,"wrist",j(i),null);
                i._wrist = s,
                i._joints.push(s),
                i._jointsById.wrist = s
            }
            for (var a = 0; a < Ku.length; a++)
                for (var r = new Hu(a,j(i)), o = 0; o < Ku[a].length; o++) {
                    var h = Ku[a][o];
                    if (n.get(h)) {
                        var l = new Yu(o,h,j(i),r);
                        i._joints.push(l),
                        i._jointsById[h] = l,
                        l.tip && (i._tips.push(l),
                        r._tip = l),
                        r._joints.push(l)
                    }
                }
            return i
        }
        H(e, t);
        var i = e.prototype;
        return i.update = function(t) {
            for (var e = this._inputSource._xrInputSource, i = 0; i < this._joints.length; i++) {
                var n = this._joints[i]
                  , s = e.hand.get(n._id);
                if (s) {
                    var a = void 0;
                    if ("hidden" !== t.session.visibilityState && (a = t.getJointPose(s, this._manager._referenceSpace)),
                    a)
                        n.update(a),
                        n.wrist && !this._tracking && (this._tracking = !0,
                        this.fire("tracking"));
                    else if (n.wrist) {
                        this._tracking && (this._tracking = !1,
                        this.fire("trackinglost"));
                        break
                    }
                }
            }
            var r = this._jointsById["thumb-metacarpal"]
              , o = this._jointsById["thumb-tip"]
              , h = this._jointsById["index-finger-phalanx-proximal"]
              , l = this._jointsById["index-finger-tip"]
              , c = this._jointsById["ring-finger-phalanx-proximal"]
              , u = this._jointsById["pinky-finger-phalanx-proximal"];
            if (r && o && h && l && c && u) {
                this._inputSource._dirtyRay = !0,
                this._inputSource._rayLocal.origin.lerp(o._localPosition, l._localPosition, .5);
                var d = r
                  , f = u;
                if (this._inputSource.handedness === Fu) {
                    var p = d;
                    d = f,
                    f = p
                }
                Zu.sub2(d._localPosition, this._wrist._localPosition),
                $u.sub2(f._localPosition, this._wrist._localPosition),
                Qu.cross(Zu, $u).normalize(),
                Zu.lerp(h._localPosition, c._localPosition, .5),
                Zu.sub(this._wrist._localPosition).normalize(),
                this._inputSource._rayLocal.direction.lerp(Qu, Zu, .5).normalize()
            }
            this._fingerIsClosed(1) && this._fingerIsClosed(2) && this._fingerIsClosed(3) && this._fingerIsClosed(4) ? this._inputSource._squeezing || (this._inputSource._squeezing = !0,
            this._inputSource.fire("squeezestart"),
            this._manager.input.fire("squeezestart", this._inputSource)) : this._inputSource._squeezing && (this._inputSource._squeezing = !1,
            this._inputSource.fire("squeeze"),
            this._manager.input.fire("squeeze", this._inputSource),
            this._inputSource.fire("squeezeend"),
            this._manager.input.fire("squeezeend", this._inputSource))
        }
        ,
        i._fingerIsClosed = function(t) {
            var e = this._fingers[t];
            return Zu.sub2(e.joints[0]._localPosition, e.joints[1]._localPosition).normalize(),
            $u.sub2(e.joints[2]._localPosition, e.joints[3]._localPosition).normalize(),
            Zu.dot($u) < -.8
        }
        ,
        i.getJointById = function(t) {
            return this._jointsById[t] || null
        }
        ,
        G(e, [{
            key: "fingers",
            get: function() {
                return this._fingers
            }
        }, {
            key: "joints",
            get: function() {
                return this._joints
            }
        }, {
            key: "tips",
            get: function() {
                return this._tips
            }
        }, {
            key: "wrist",
            get: function() {
                return this._wrist
            }
        }, {
            key: "tracking",
            get: function() {
                return this._tracking
            }
        }]),
        e
    }(u)
      , td = new yt
      , ed = 0
      , id = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._id = ++ed,
            n._manager = e,
            n._xrInputSource = i,
            n._ray = new zt,
            n._rayLocal = new zt,
            n._grip = !1,
            n._hand = null,
            i.hand && (n._hand = new Ju(j(n))),
            n._localTransform = null,
            n._worldTransform = null,
            n._position = new lt,
            n._rotation = new yt,
            n._localPosition = null,
            n._localRotation = null,
            n._dirtyLocal = !0,
            n._selecting = !1,
            n._squeezing = !1,
            n._elementInput = !0,
            n._elementEntity = null,
            n._hitTestSources = [],
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.update = function(t) {
            if (this._hand)
                this._hand.update(t);
            else {
                if (this._xrInputSource.gripSpace) {
                    var e = t.getPose(this._xrInputSource.gripSpace, this._manager._referenceSpace);
                    e && (this._grip || (this._grip = !0,
                    this._localTransform = new vt,
                    this._worldTransform = new vt,
                    this._localPosition = new lt,
                    this._localRotation = new yt),
                    this._dirtyLocal = !0,
                    this._localPosition.copy(e.transform.position),
                    this._localRotation.copy(e.transform.orientation))
                }
                var i = t.getPose(this._xrInputSource.targetRaySpace, this._manager._referenceSpace);
                i && (this._dirtyRay = !0,
                this._rayLocal.origin.copy(i.transform.position),
                this._rayLocal.direction.set(0, 0, -1),
                td.copy(i.transform.orientation),
                td.transformVector(this._rayLocal.direction, this._rayLocal.direction))
            }
        }
        ,
        i._updateTransforms = function() {
            this._dirtyLocal && (this._dirtyLocal = !1,
            this._localTransform.setTRS(this._localPosition, this._localRotation, lt.ONE));
            var t = this._manager.camera.parent;
            t ? this._worldTransform.mul2(t.getWorldTransform(), this._localTransform) : this._worldTransform.copy(this._localTransform)
        }
        ,
        i._updateRayTransforms = function() {
            var t = this._dirtyRay;
            if (this._dirtyRay = !1,
            this._manager.camera.parent) {
                var e = this._manager.camera.parent.getWorldTransform();
                e.getTranslation(this._position),
                this._rotation.setFromMat4(e),
                this._rotation.transformVector(this._rayLocal.origin, this._ray.origin),
                this._ray.origin.add(this._position),
                this._rotation.transformVector(this._rayLocal.direction, this._ray.direction)
            } else
                t && (this._ray.origin.copy(this._rayLocal.origin),
                this._ray.direction.copy(this._rayLocal.direction))
        }
        ,
        i.getPosition = function() {
            return this._position ? (this._updateTransforms(),
            this._worldTransform.getTranslation(this._position),
            this._position) : null
        }
        ,
        i.getLocalPosition = function() {
            return this._localPosition
        }
        ,
        i.getRotation = function() {
            return this._rotation ? (this._updateTransforms(),
            this._rotation.setFromMat4(this._worldTransform),
            this._rotation) : null
        }
        ,
        i.getLocalRotation = function() {
            return this._localRotation
        }
        ,
        i.getOrigin = function() {
            return this._updateRayTransforms(),
            this._ray.origin
        }
        ,
        i.getDirection = function() {
            return this._updateRayTransforms(),
            this._ray.direction
        }
        ,
        i.hitTestStart = function(t) {
            var e = this;
            void 0 === t && (t = {}),
            t.profile = this._xrInputSource.profiles[0];
            var i = t.callback;
            t.callback = function(t, n) {
                n && e.onHitTestSourceAdd(n),
                i && i(t, n)
            }
            ,
            this._manager.hitTest.start(t)
        }
        ,
        i.onHitTestSourceAdd = function(t) {
            this._hitTestSources.push(t),
            this.fire("hittest:add", t),
            t.on("result", (function(e, i, n) {
                n === this && this.fire("hittest:result", t, e, i)
            }
            ), this),
            t.once("remove", (function() {
                this.onHitTestSourceRemove(t),
                this.fire("hittest:remove", t)
            }
            ), this)
        }
        ,
        i.onHitTestSourceRemove = function(t) {
            var e = this._hitTestSources.indexOf(t);
            -1 !== e && this._hitTestSources.splice(e, 1)
        }
        ,
        G(e, [{
            key: "id",
            get: function() {
                return this._id
            }
        }, {
            key: "inputSource",
            get: function() {
                return this._xrInputSource
            }
        }, {
            key: "targetRayMode",
            get: function() {
                return this._xrInputSource.targetRayMode
            }
        }, {
            key: "handedness",
            get: function() {
                return this._xrInputSource.handedness
            }
        }, {
            key: "profiles",
            get: function() {
                return this._xrInputSource.profiles
            }
        }, {
            key: "grip",
            get: function() {
                return this._grip
            }
        }, {
            key: "hand",
            get: function() {
                return this._hand
            }
        }, {
            key: "gamepad",
            get: function() {
                return this._xrInputSource.gamepad || null
            }
        }, {
            key: "selecting",
            get: function() {
                return this._selecting
            }
        }, {
            key: "squeezing",
            get: function() {
                return this._squeezing
            }
        }, {
            key: "elementInput",
            get: function() {
                return this._elementInput
            },
            set: function(t) {
                this._elementInput !== t && (this._elementInput = t,
                this._elementInput || (this._elementEntity = null))
            }
        }, {
            key: "elementEntity",
            get: function() {
                return this._elementEntity
            }
        }, {
            key: "hitTestSources",
            get: function() {
                return this._hitTestSources
            }
        }]),
        e
    }(u)
      , nd = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).manager = e,
            i._session = null,
            i._inputSources = [],
            i._onInputSourcesChangeEvt = function(t) {
                i._onInputSourcesChange(t)
            }
            ,
            i.manager.on("start", i._onSessionStart, j(i)),
            i.manager.on("end", i._onSessionEnd, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._onSessionStart = function() {
            var t = this;
            this._session = this.manager.session,
            this._session.addEventListener("inputsourceschange", this._onInputSourcesChangeEvt),
            this._session.addEventListener("select", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i.fire("select", e),
                t.fire("select", i, e)
            }
            )),
            this._session.addEventListener("selectstart", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i._selecting = !0,
                i.fire("selectstart", e),
                t.fire("selectstart", i, e)
            }
            )),
            this._session.addEventListener("selectend", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i._selecting = !1,
                i.fire("selectend", e),
                t.fire("selectend", i, e)
            }
            )),
            this._session.addEventListener("squeeze", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i.fire("squeeze", e),
                t.fire("squeeze", i, e)
            }
            )),
            this._session.addEventListener("squeezestart", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i._squeezing = !0,
                i.fire("squeezestart", e),
                t.fire("squeezestart", i, e)
            }
            )),
            this._session.addEventListener("squeezeend", (function(e) {
                var i = t._getByInputSource(e.inputSource);
                i.update(e.frame),
                i._squeezing = !1,
                i.fire("squeezeend", e),
                t.fire("squeezeend", i, e)
            }
            ));
            for (var e = this._session.inputSources, i = 0; i < e.length; i++)
                this._addInputSource(e[i])
        }
        ,
        i._onSessionEnd = function() {
            for (var t = this._inputSources.length; t--; ) {
                var e = this._inputSources[t];
                this._inputSources.splice(t, 1),
                e.fire("remove"),
                this.fire("remove", e)
            }
            this._session.removeEventListener("inputsourceschange", this._onInputSourcesChangeEvt),
            this._session = null
        }
        ,
        i._onInputSourcesChange = function(t) {
            for (var e = 0; e < t.removed.length; e++)
                this._removeInputSource(t.removed[e]);
            for (var i = 0; i < t.added.length; i++)
                this._addInputSource(t.added[i])
        }
        ,
        i._getByInputSource = function(t) {
            for (var e = 0; e < this._inputSources.length; e++)
                if (this._inputSources[e].inputSource === t)
                    return this._inputSources[e];
            return null
        }
        ,
        i._addInputSource = function(t) {
            if (!this._getByInputSource(t)) {
                var e = new id(this.manager,t);
                this._inputSources.push(e),
                this.fire("add", e)
            }
        }
        ,
        i._removeInputSource = function(t) {
            for (var e = 0; e < this._inputSources.length; e++)
                if (this._inputSources[e].inputSource === t) {
                    var i = this._inputSources[e];
                    this._inputSources.splice(e, 1);
                    for (var n = i.hitTestSources.length; n--; )
                        i.hitTestSources[n].remove();
                    return i.fire("remove"),
                    void this.fire("remove", i)
                }
        }
        ,
        i.update = function(t) {
            for (var e = 0; e < this._inputSources.length; e++)
                this._inputSources[e].update(t)
        }
        ,
        G(e, [{
            key: "inputSources",
            get: function() {
                return this._inputSources
            }
        }]),
        e
    }(u)
      , sd = new lt
      , ad = new lt
      , rd = new vt
      , od = new vt
      , hd = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._manager = e,
            i._supported = !1,
            i._available = !1,
            i._lightProbeRequested = !1,
            i._lightProbe = null,
            i._intensity = 0,
            i._rotation = new yt,
            i._color = new at,
            i._sphericalHarmonics = new Float32Array(27),
            i._manager.on("start", i._onSessionStart, j(i)),
            i._manager.on("end", i._onSessionEnd, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._onSessionStart = function() {
            !!this._manager.session.requestLightProbe && (this._supported = !0)
        }
        ,
        i._onSessionEnd = function() {
            this._supported = !1,
            this._available = !1,
            this._lightProbeRequested = !1,
            this._lightProbe = null
        }
        ,
        i.start = function() {
            var t, e = this;
            this._manager.session || (t = new Error("XR session is not running")),
            t || this._manager.type === ku || (t = new Error("XR session type is not AR")),
            t || this._supported || (t = new Error("light-estimation is not supported")),
            (!t && this._lightProbe || this._lightProbeRequested) && (t = new Error("light estimation is already requested")),
            t ? this.fire("error", t) : (this._lightProbeRequested = !0,
            this._manager.session.requestLightProbe().then((function(t) {
                var i = e._lightProbeRequested;
                e._lightProbeRequested = !1,
                e._manager.active ? i && (e._lightProbe = t) : e.fire("error", new Error("XR session is not active"))
            }
            )).catch((function(t) {
                e._lightProbeRequested = !1,
                e.fire("error", t)
            }
            )))
        }
        ,
        i.end = function() {
            this._lightProbeRequested = !1,
            this._lightProbe = null,
            this._available = !1
        }
        ,
        i.update = function(t) {
            if (this._lightProbe) {
                var e = t.getLightEstimate(this._lightProbe);
                if (e) {
                    this._available || (this._available = !0,
                    this.fire("available"));
                    var i = e.primaryLightIntensity;
                    this._intensity = Math.max(1, Math.max(i.x, Math.max(i.y, i.z))),
                    sd.copy(i).mulScalar(1 / this._intensity),
                    this._color.set(sd.x, sd.y, sd.z),
                    sd.set(0, 0, 0),
                    ad.copy(e.primaryLightDirection),
                    rd.setLookAt(ad, sd, lt.UP),
                    od.setFromAxisAngle(lt.RIGHT, 90),
                    rd.mul(od),
                    this._rotation.setFromMat4(rd),
                    this._sphericalHarmonics.set(e.sphericalHarmonicsCoefficients)
                }
            }
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }, {
            key: "available",
            get: function() {
                return this._available
            }
        }, {
            key: "intensity",
            get: function() {
                return this._available ? this._intensity : null
            }
        }, {
            key: "color",
            get: function() {
                return this._available ? this._color : null
            }
        }, {
            key: "rotation",
            get: function() {
                return this._available ? this._rotation : null
            }
        }, {
            key: "sphericalHarmonics",
            get: function() {
                return this._available ? this._sphericalHarmonics : null
            }
        }]),
        e
    }(u)
      , ld = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._image = e,
            n._bitmap = null,
            n._width = i,
            n._measuredWidth = 0,
            n._trackable = !1,
            n._tracking = !1,
            n._emulated = !1,
            n._pose = null,
            n._position = new lt,
            n._rotation = new yt,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.prepare = function() {
            var t = this;
            return this._bitmap ? {
                image: this._bitmap,
                widthInMeters: this._width
            } : createImageBitmap(this._image).then((function(e) {
                return t._bitmap = e,
                {
                    image: t._bitmap,
                    widthInMeters: t._width
                }
            }
            ))
        }
        ,
        i.destroy = function() {
            this._image = null,
            this._pose = null,
            this._bitmap && (this._bitmap.close(),
            this._bitmap = null)
        }
        ,
        i.getPosition = function() {
            return this._pose && this._position.copy(this._pose.transform.position),
            this._position
        }
        ,
        i.getRotation = function() {
            return this._pose && this._rotation.copy(this._pose.transform.orientation),
            this._rotation
        }
        ,
        G(e, [{
            key: "image",
            get: function() {
                return this._image
            }
        }, {
            key: "width",
            get: function() {
                return this._width
            },
            set: function(t) {
                this._width = t
            }
        }, {
            key: "trackable",
            get: function() {
                return this._trackable
            }
        }, {
            key: "tracking",
            get: function() {
                return this._tracking
            }
        }, {
            key: "emulated",
            get: function() {
                return this._emulated
            }
        }]),
        e
    }(u)
      , cd = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._manager = e,
            i._supported = E.browser && !!window.XRImageTrackingResult,
            i._available = !1,
            i._images = [],
            i._supported && (i._manager.on("start", i._onSessionStart, j(i)),
            i._manager.on("end", i._onSessionEnd, j(i))),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.add = function(t, e) {
            if (!this._supported || this._manager.active)
                return null;
            var i = new ld(t,e);
            return this._images.push(i),
            i
        }
        ,
        i.remove = function(t) {
            if (!this._manager.active) {
                var e = this._images.indexOf(t);
                -1 !== e && (t.destroy(),
                this._images.splice(e, 1))
            }
        }
        ,
        i._onSessionStart = function() {
            var t = this;
            this._manager.session.getTrackedImageScores().then((function(e) {
                t._available = !0;
                for (var i = 0; i < e.length; i++)
                    t._images[i]._trackable = "trackable" === e[i]
            }
            )).catch((function(e) {
                t._available = !1,
                t.fire("error", e)
            }
            ))
        }
        ,
        i._onSessionEnd = function() {
            this._available = !1;
            for (var t = 0; t < this._images.length; t++)
                this._images[t]._pose = null,
                this._images[t]._measuredWidth = 0,
                this._images[t]._tracking && (this._images[t]._tracking = !1,
                this._images[t].fire("untracked"))
        }
        ,
        i.prepareImages = function(t) {
            this._images.length ? Promise.all(this._images.map((function(t) {
                return t.prepare()
            }
            ))).then((function(e) {
                t(null, e)
            }
            )).catch((function(e) {
                t(e, null)
            }
            )) : t(null, null)
        }
        ,
        i.update = function(t) {
            if (this._available) {
                for (var e = t.getImageTrackingResults(), i = {}, n = 0; n < e.length; n++) {
                    i[e[n].index] = e[n];
                    var s = this._images[e[n].index];
                    s._emulated = "emulated" === e[n].trackingState,
                    s._measuredWidth = e[n].measuredWidthInMeters,
                    s._dirtyTransform = !0,
                    s._pose = t.getPose(e[n].imageSpace, this._manager._referenceSpace)
                }
                for (var a = 0; a < this._images.length; a++)
                    this._images[a]._tracking && !i[a] ? (this._images[a]._tracking = !1,
                    this._images[a].fire("untracked")) : !this._images[a]._tracking && i[a] && (this._images[a]._tracking = !0,
                    this._images[a].fire("tracked"))
            }
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }, {
            key: "available",
            get: function() {
                return this._available
            }
        }, {
            key: "images",
            get: function() {
                return this._images
            }
        }]),
        e
    }(u)
      , ud = function() {
        function t(t) {
            this._manager = t,
            this._supported = E.browser && !!window.XRDOMOverlayState,
            this._root = null
        }
        return G(t, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }, {
            key: "available",
            get: function() {
                return this._supported && this._manager.active && null !== this._manager._session.domOverlayState
            }
        }, {
            key: "state",
            get: function() {
                return this._supported && this._manager.active && this._manager._session.domOverlayState ? this._manager._session.domOverlayState.type : null
            }
        }, {
            key: "root",
            get: function() {
                return this._root
            },
            set: function(t) {
                this._supported && !this._manager.active && (this._root = t)
            }
        }]),
        t
    }()
      , dd = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._manager = e,
            i._available = !1,
            i._depthInfoCpu = null,
            i._depthInfoGpu = null,
            i._usage = null,
            i._dataFormat = null,
            i._matrixDirty = !1,
            i._matrix = new vt,
            i._emptyBuffer = new Uint8Array(32),
            i._depthBuffer = null,
            i._texture = new Mi(i._manager.app.graphicsDevice,{
                format: 2,
                mipmaps: !1,
                addressU: 1,
                addressV: 1,
                minFilter: 1,
                magFilter: 1
            }),
            i.supported && (i._manager.on("start", i._onSessionStart, j(i)),
            i._manager.on("end", i._onSessionEnd, j(i))),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._onSessionStart = function() {
            var t = this._manager.session;
            try {
                this._usage = t.depthUsage,
                this._dataFormat = t.depthDataFormat
            } catch (t) {
                this._usage = null,
                this._dataFormat = null,
                this._available = !1,
                this.fire("error", t)
            }
        }
        ,
        i._onSessionEnd = function() {
            this._depthInfoCpu = null,
            this._depthInfoGpu = null,
            this._usage = null,
            this._dataFormat = null,
            this._available && (this._available = !1,
            this.fire("unavailable")),
            this._depthBuffer = null,
            this._texture._width = 4,
            this._texture._height = 4,
            this._texture._levels[0] = this._emptyBuffer,
            this._texture.upload()
        }
        ,
        i._updateTexture = function() {
            var t = this._depthInfoCpu || this._depthInfoGpu;
            if (t) {
                var e = !1;
                if (t.width === this._texture.width && t.height === this._texture.height || (this._texture._width = t.width,
                this._texture._height = t.height,
                this._matrixDirty = !0,
                e = !0),
                this._depthInfoCpu) {
                    var i = this._depthInfoCpu.data;
                    this._depthBuffer = new Uint8Array(i),
                    this._texture._levels[0] = this._depthBuffer,
                    this._texture.upload()
                } else
                    this._depthInfoGpu && (this._texture._levels[0] = this._depthInfoGpu.texture,
                    this._texture.upload());
                e && this.fire("resize", t.width, t.height)
            } else
                this._depthBuffer && (this._depthBuffer = null,
                this._texture._width = 4,
                this._texture._height = 4,
                this._texture._levels[0] = this._emptyBuffer,
                this._texture.upload())
        }
        ,
        i.update = function(t, e) {
            if (this._usage) {
                var i = null
                  , n = null;
                if (this._usage === Bu && e ? i = t.getDepthInformation(e) : this._usage === Nu && e && (n = t.getDepthInformation(e)),
                (this._depthInfoCpu && !i || !this._depthInfoCpu && i || this.depthInfoGpu && !n || !this._depthInfoGpu && n) && (this._matrixDirty = !0),
                this._depthInfoCpu = i,
                this._depthInfoGpu = n,
                this._updateTexture(),
                this._matrixDirty) {
                    this._matrixDirty = !1;
                    var s = this._depthInfoCpu || this._depthInfoGpu;
                    s ? this._matrix.data.set(s.normDepthBufferFromNormView.matrix) : this._matrix.setIdentity()
                }
                !this._depthInfoCpu && !this._depthInfoGpu || this._available ? this._depthInfoCpu || this._depthInfoGpu || !this._available || (this._available = !1,
                this.fire("unavailable")) : (this._available = !0,
                this.fire("available"))
            }
        }
        ,
        i.getDepth = function(t, e) {
            return this._depthInfoCpu ? this._depthInfoCpu.getDepthInMeters(t, e) : null
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return E.browser && !!window.XRDepthInformation
            }
        }, {
            key: "available",
            get: function() {
                return this._available
            }
        }, {
            key: "usage",
            get: function() {
                return this._usage
            }
        }, {
            key: "dataFormat",
            get: function() {
                return this._dataFormat
            }
        }, {
            key: "width",
            get: function() {
                var t = this._depthInfoCpu || this._depthInfoGpu;
                return t && t.width || 0
            }
        }, {
            key: "height",
            get: function() {
                var t = this._depthInfoCpu || this._depthInfoGpu;
                return t && t.height || 0
            }
        }, {
            key: "texture",
            get: function() {
                return this._texture
            }
        }, {
            key: "uvMatrix",
            get: function() {
                return this._matrix
            }
        }, {
            key: "rawValueToMeters",
            get: function() {
                var t = this._depthInfoCpu || this._depthInfoGpu;
                return t && t.rawValueToMeters || 0
            }
        }]),
        e
    }(u)
      , fd = 0
      , pd = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._id = ++fd,
            n._planeDetection = e,
            n._manager = n._planeDetection._manager,
            n._xrPlane = i,
            n._lastChangedTime = n._xrPlane.lastChangedTime,
            n._orientation = n._xrPlane.orientation,
            n._position = new lt,
            n._rotation = new yt,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            this.fire("remove")
        }
        ,
        i.update = function(t) {
            var e = t.getPose(this._xrPlane.planeSpace, this._manager._referenceSpace);
            e && (this._position.copy(e.transform.position),
            this._rotation.copy(e.transform.orientation)),
            this._lastChangedTime !== this._xrPlane.lastChangedTime && (this._lastChangedTime = this._xrPlane.lastChangedTime,
            this.fire("change"))
        }
        ,
        i.getPosition = function() {
            return this._position
        }
        ,
        i.getRotation = function() {
            return this._rotation
        }
        ,
        G(e, [{
            key: "id",
            get: function() {
                return this.id
            }
        }, {
            key: "orientation",
            get: function() {
                return this._orientation
            }
        }, {
            key: "points",
            get: function() {
                return this._xrPlane.polygon
            }
        }]),
        e
    }(u)
      , md = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._manager = e,
            i._supported = E.browser && !!window.XRPlane,
            i._available = !1,
            i._planesIndex = new Map,
            i._planes = null,
            i._supported && i._manager.on("end", i._onSessionEnd, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._onSessionEnd = function() {
            if (this._planes)
                for (var t = 0; t < this._planes.length; t++)
                    this._planes[t].destroy();
            this._planesIndex.clear(),
            this._planes = null,
            this._available && (this._available = !1,
            this.fire("unavailable"))
        }
        ,
        i.update = function(t) {
            var e;
            if (this._available)
                e = t.detectedPlanes;
            else
                try {
                    e = t.detectedPlanes,
                    this._planes = [],
                    this._available = !0,
                    this.fire("available")
                } catch (t) {
                    return
                }
            for (var i, n = Y(this._planesIndex); !(i = n()).done; ) {
                var s = i.value
                  , a = s[0]
                  , r = s[1];
                e.has(a) || (this._planesIndex.delete(a),
                this._planes.splice(this._planes.indexOf(r), 1),
                r.destroy(),
                this.fire("remove", r))
            }
            for (var o, h = Y(e); !(o = h()).done; ) {
                var l = o.value
                  , c = this._planesIndex.get(l);
                c ? c.update(t) : (c = new pd(this,l),
                this._planesIndex.set(l, c),
                this._planes.push(c),
                c.update(t),
                this.fire("add", c))
            }
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }, {
            key: "available",
            get: function() {
                return this._available
            }
        }, {
            key: "planes",
            get: function() {
                return this._planes
            }
        }]),
        e
    }(u)
      , _d = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).app = e,
            i._supported = E.browser && !!navigator.xr,
            i._available = {},
            i._available.inline = !1,
            i._available[Du] = !1,
            i._available[ku] = !1,
            i._type = null,
            i._spaceType = null,
            i._session = null,
            i._baseLayer = null,
            i._referenceSpace = null,
            i.depthSensing = new dd(j(i)),
            i.domOverlay = new ud(j(i)),
            i.hitTest = new Wu(j(i)),
            i.imageTracking = new cd(j(i)),
            i.planeDetection = new md(j(i)),
            i.input = new nd(j(i)),
            i.lightEstimation = new hd(j(i)),
            i._camera = null,
            i.views = [],
            i.viewsPool = [],
            i._localPosition = new lt,
            i._localRotation = new yt,
            i._depthNear = .1,
            i._depthFar = 1e3,
            i._width = 0,
            i._height = 0,
            i._supported && (navigator.xr.addEventListener("devicechange", (function() {
                i._deviceAvailabilityCheck()
            }
            )),
            i._deviceAvailabilityCheck()),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.start = function(t, e, i, n) {
            var s = this
              , a = n;
            if ("object" == typeof n && (a = n.callback),
            this._available[e])
                if (this._session)
                    a && a(new Error("XR session is already started"));
                else {
                    this._camera = t,
                    this._camera.camera.xr = this,
                    this._type = e,
                    this._spaceType = i,
                    this._setClipPlanes(t.nearClip, t.farClip);
                    var r = {
                        requiredFeatures: [i],
                        optionalFeatures: []
                    };
                    if (e === ku) {
                        if (r.optionalFeatures.push("light-estimation"),
                        r.optionalFeatures.push("hit-test"),
                        n && (n.imageTracking && this.imageTracking.supported && r.optionalFeatures.push("image-tracking"),
                        n.planeDetection && r.optionalFeatures.push("plane-detection")),
                        this.domOverlay.supported && this.domOverlay.root && (r.optionalFeatures.push("dom-overlay"),
                        r.domOverlay = {
                            root: this.domOverlay.root
                        }),
                        n && n.depthSensing && this.depthSensing.supported) {
                            r.optionalFeatures.push("depth-sensing");
                            var o = [Bu]
                              , h = [Uu];
                            if (n.depthSensing.usagePreference) {
                                var l = o.indexOf(n.depthSensing.usagePreference);
                                -1 !== l && o.splice(l, 1),
                                o.unshift(n.depthSensing.usagePreference)
                            }
                            if (n.depthSensing.dataFormatPreference) {
                                var c = h.indexOf(n.depthSensing.dataFormatPreference);
                                -1 !== c && h.splice(c, 1),
                                h.unshift(n.depthSensing.dataFormatPreference)
                            }
                            r.depthSensing = {
                                usagePreference: o,
                                dataFormatPreference: h
                            }
                        }
                    } else
                        e === Du && r.optionalFeatures.push("hand-tracking");
                    n && n.optionalFeatures && (r.optionalFeatures = r.optionalFeatures.concat(n.optionalFeatures)),
                    this.imageTracking.supported && this.imageTracking.images.length ? this.imageTracking.prepareImages((function(t, n) {
                        if (t)
                            return a && a(t),
                            void s.fire("error", t);
                        null !== n && (r.trackedImages = n),
                        s._onStartOptionsReady(e, i, r, a)
                    }
                    )) : this._onStartOptionsReady(e, i, r, a)
                }
            else
                a && a(new Error("XR is not available"))
        }
        ,
        i._onStartOptionsReady = function(t, e, i, n) {
            var s = this;
            navigator.xr.requestSession(t, i).then((function(t) {
                s._onSessionStart(t, e, n)
            }
            )).catch((function(t) {
                s._camera.camera.xr = null,
                s._camera = null,
                s._type = null,
                s._spaceType = null,
                n && n(t),
                s.fire("error", t)
            }
            ))
        }
        ,
        i.end = function(t) {
            this._session ? (t && this.once("end", t),
            this._session.end()) : t && t(new Error("XR Session is not initialized"))
        }
        ,
        i.isAvailable = function(t) {
            return this._available[t]
        }
        ,
        i._deviceAvailabilityCheck = function() {
            for (var t in this._available)
                this._sessionSupportCheck(t)
        }
        ,
        i._sessionSupportCheck = function(t) {
            var e = this;
            navigator.xr.isSessionSupported(t).then((function(i) {
                e._available[t] !== i && (e._available[t] = i,
                e.fire("available", t, i),
                e.fire("available:" + t, i))
            }
            )).catch((function(t) {
                e.fire("error", t)
            }
            ))
        }
        ,
        i._onSessionStart = function(t, e, i) {
            var n = this
              , s = !1;
            this._session = t;
            var a = function() {
                n.fire("visibility:change", t.visibilityState)
            }
              , r = function() {
                n._setClipPlanes(n._camera.nearClip, n._camera.farClip)
            };
            t.addEventListener("end", (function e() {
                n._session = null,
                n._referenceSpace = null,
                n.views = [],
                n._width = 0,
                n._height = 0,
                n._type = null,
                n._spaceType = null,
                n._camera && (n._camera.off("set_nearClip", r),
                n._camera.off("set_farClip", r),
                n._camera.camera.xr = null,
                n._camera = null),
                t.removeEventListener("end", e),
                t.removeEventListener("visibilitychange", a),
                s || n.fire("end"),
                n.app.tick()
            }
            )),
            t.addEventListener("visibilitychange", a),
            this._camera.on("set_nearClip", r),
            this._camera.on("set_farClip", r),
            this._baseLayer = new XRWebGLLayer(t,this.app.graphicsDevice.gl),
            t.updateRenderState({
                baseLayer: this._baseLayer,
                depthNear: this._depthNear,
                depthFar: this._depthFar
            }),
            t.requestReferenceSpace(e).then((function(t) {
                n._referenceSpace = t,
                n.app.tick(),
                i && i(null),
                n.fire("start")
            }
            )).catch((function(e) {
                s = !0,
                t.end(),
                i && i(e),
                n.fire("error", e)
            }
            ))
        }
        ,
        i._setClipPlanes = function(t, e) {
            this._depthNear === t && this._depthFar === e || (this._depthNear = t,
            this._depthFar = e,
            this._session && this._session.updateRenderState({
                depthNear: this._depthNear,
                depthFar: this._depthFar
            }))
        }
        ,
        i.update = function(t) {
            if (this._session) {
                var e = t.session.renderState.baseLayer.framebufferWidth
                  , i = t.session.renderState.baseLayer.framebufferHeight;
                this._width === e && this._height === i || (this._width = e,
                this._height = i,
                this.app.graphicsDevice.setResolution(e, i));
                var n = t.getViewerPose(this._referenceSpace)
                  , s = n ? n.views.length : 0;
                if (s > this.views.length)
                    for (var a = 0; a <= s - this.views.length; a++) {
                        var r = this.viewsPool.pop();
                        r || (r = {
                            viewport: new dt,
                            projMat: new vt,
                            viewMat: new vt,
                            viewOffMat: new vt,
                            viewInvMat: new vt,
                            viewInvOffMat: new vt,
                            projViewOffMat: new vt,
                            viewMat3: new ct,
                            position: new Float32Array(3),
                            rotation: new yt
                        }),
                        this.views.push(r)
                    }
                else if (s <= this.views.length)
                    for (var o = 0; o < this.views.length - s; o++)
                        this.viewsPool.push(this.views.pop());
                if (n) {
                    var h = n.transform.position
                      , l = n.transform.orientation;
                    this._localPosition.set(h.x, h.y, h.z),
                    this._localRotation.set(l.x, l.y, l.z, l.w);
                    for (var c = t.session.renderState.baseLayer, u = 0; u < n.views.length; u++) {
                        var d = n.views[u]
                          , f = this.views[u]
                          , p = c.getViewport(d);
                        f.viewport.x = p.x,
                        f.viewport.y = p.y,
                        f.viewport.z = p.width,
                        f.viewport.w = p.height,
                        f.projMat.set(d.projectionMatrix),
                        f.viewMat.set(d.transform.inverse.matrix),
                        f.viewInvMat.set(d.transform.matrix)
                    }
                }
                this._camera.camera._node.setLocalPosition(this._localPosition),
                this._camera.camera._node.setLocalRotation(this._localRotation),
                this.input.update(t),
                this._type === ku && (this.hitTest.supported && this.hitTest.update(t),
                this.lightEstimation.supported && this.lightEstimation.update(t),
                this.depthSensing.supported && this.depthSensing.update(t, n && n.views[0]),
                this.imageTracking.supported && this.imageTracking.update(t),
                this.planeDetection.supported && this.planeDetection.update(t)),
                this.fire("update", t)
            }
        }
        ,
        G(e, [{
            key: "supported",
            get: function() {
                return this._supported
            }
        }, {
            key: "active",
            get: function() {
                return !!this._session
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            }
        }, {
            key: "spaceType",
            get: function() {
                return this._spaceType
            }
        }, {
            key: "session",
            get: function() {
                return this._session
            }
        }, {
            key: "visibilityState",
            get: function() {
                return this._session ? this._session.visibilityState : null
            }
        }, {
            key: "camera",
            get: function() {
                return this._camera ? this._camera.entity : null
            }
        }]),
        e
    }(u)
      , gd = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this).system = e,
            n.entity = i,
            n.system.schema && !n._accessorsBuilt && n.buildAccessors(n.system.schema),
            n.on("set", (function(t, e, i) {
                this.fire("set_" + t, t, e, i)
            }
            )),
            n.on("set_enabled", n.onSetEnabled, j(n)),
            n
        }
        H(e, t),
        e._buildAccessors = function(t, e) {
            e.forEach((function(e) {
                var i = "object" == typeof e ? e.name : e;
                Object.defineProperty(t, i, {
                    get: function() {
                        return this.data[i]
                    },
                    set: function(t) {
                        var e = this.data
                          , n = e[i];
                        e[i] = t,
                        this.fire("set", i, n, t)
                    },
                    configurable: !0
                })
            }
            )),
            t._accessorsBuilt = !0
        }
        ;
        var i = e.prototype;
        return i.buildAccessors = function(t) {
            e._buildAccessors(this, t)
        }
        ,
        i.onSetEnabled = function(t, e, i) {
            e !== i && this.entity.enabled && (i ? this.onEnable() : this.onDisable())
        }
        ,
        i.onEnable = function() {}
        ,
        i.onDisable = function() {}
        ,
        i.onPostStateChange = function() {}
        ,
        G(e, [{
            key: "data",
            get: function() {
                var t = this.system.store[this.entity.getGuid()];
                return t ? t.data : null
            }
        }]),
        e
    }(u)
      , vd = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).app = e,
            i.store = {},
            i.schema = [],
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.addComponent = function(t, e) {
            void 0 === e && (e = {});
            var i = new this.ComponentType(this,t)
              , n = new this.DataType;
            return this.store[t.getGuid()] = {
                entity: t,
                data: n
            },
            t[this.id] = i,
            t.c[this.id] = i,
            this.initializeComponentData(i, e, []),
            this.fire("add", t, i),
            i
        }
        ,
        i.removeComponent = function(t) {
            var e = this.store[t.getGuid()]
              , i = t.c[this.id];
            this.fire("beforeremove", t, i),
            delete this.store[t.getGuid()],
            delete t[this.id],
            delete t.c[this.id],
            this.fire("remove", t, e.data)
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = this.store[t.getGuid()];
            return this.addComponent(e, i.data)
        }
        ,
        i.initializeComponentData = function(t, e, i) {
            void 0 === e && (e = {});
            for (var n = 0, s = i.length; n < s; n++) {
                var a = i[n]
                  , r = void 0
                  , o = void 0;
                "object" == typeof a ? (r = a.name,
                o = a.type) : (r = a,
                o = void 0);
                var h = e[r];
                void 0 !== h ? (void 0 !== o && (h = yd(h, o)),
                t[r] = h) : t[r] = t.data[r]
            }
            t.enabled && t.entity.enabled && t.onEnable()
        }
        ,
        i.getPropertiesOfType = function(t) {
            var e = [];
            return (this.schema || []).forEach((function(i) {
                i && "object" == typeof i && i.type === t && e.push(i)
            }
            )),
            e
        }
        ,
        i.destroy = function() {
            this.off()
        }
        ,
        e
    }(u);
    function yd(t, e) {
        if (!t)
            return t;
        switch (e) {
        case "rgb":
            return t instanceof at ? t.clone() : new at(t[0],t[1],t[2]);
        case "rgba":
            return t instanceof at ? t.clone() : new at(t[0],t[1],t[2],t[3]);
        case "vec2":
            return t instanceof ut ? t.clone() : new ut(t[0],t[1]);
        case "vec3":
            return t instanceof lt ? t.clone() : new lt(t[0],t[1],t[2]);
        case "vec4":
            return t instanceof dt ? t.clone() : new dt(t[0],t[1],t[2],t[3]);
        case "boolean":
        case "number":
        case "string":
        case "entity":
            return t;
        default:
            throw new Error("Could not convert unhandled type: " + e)
        }
    }
    d.attach(vd);
    var xd = function() {
        function t() {
            this._left = 1 / 0,
            this._right = -1 / 0,
            this._len = 0,
            this._recip = 0,
            this._p0 = 0,
            this._p1 = 0,
            this._t = 0,
            this._hermite = {
                valid: !1,
                p0: 0,
                m0: 0,
                p1: 0,
                m1: 0
            }
        }
        var e = t.prototype;
        return e.update = function(t, e) {
            if (t < this._left || t >= this._right) {
                var i = e.length;
                if (i)
                    if (t < e[0])
                        this._left = -1 / 0,
                        this._right = e[0],
                        this._len = 0,
                        this._recip = 0,
                        this._p0 = this._p1 = 0;
                    else if (t >= e[i - 1])
                        this._left = e[i - 1],
                        this._right = 1 / 0,
                        this._len = 0,
                        this._recip = 0,
                        this._p0 = this._p1 = i - 1;
                    else {
                        var n = this._findKey(t, e);
                        this._left = e[n],
                        this._right = e[n + 1],
                        this._len = this._right - this._left;
                        var s = 1 / this._len;
                        this._recip = isFinite(s) ? s : 0,
                        this._p0 = n,
                        this._p1 = n + 1
                    }
                else
                    this._left = -1 / 0,
                    this._right = 1 / 0,
                    this._len = 0,
                    this._recip = 0,
                    this._p0 = this._p1 = 0
            }
            this._t = 0 === this._recip ? 0 : (t - this._left) * this._recip,
            this._hermite.valid = !1
        }
        ,
        e._findKey = function(t, e) {
            for (var i = 0; t >= e[i + 1]; )
                i++;
            return i
        }
        ,
        e.eval = function(t, e, i) {
            var n = i._data
              , s = i._components
              , a = this._p0 * s;
            if (0 === e)
                for (var r = 0; r < s; ++r)
                    t[r] = n[a + r];
            else {
                var o = this._t
                  , h = this._p1 * s;
                switch (e) {
                case 1:
                    for (var l = 0; l < s; ++l)
                        t[l] = it.lerp(n[a + l], n[h + l], o);
                    break;
                case 2:
                    var c = this._hermite;
                    if (!c.valid) {
                        var u = o * o
                          , d = o + o
                          , f = 1 - o
                          , p = f * f;
                        c.valid = !0,
                        c.p0 = (1 + d) * p,
                        c.m0 = o * p,
                        c.p1 = u * (3 - d),
                        c.m1 = u * (o - 1)
                    }
                    for (var m = (3 * this._p0 + 1) * s, _ = (3 * this._p0 + 2) * s, g = (3 * this._p1 + 1) * s, v = (3 * this._p1 + 0) * s, y = 0; y < s; ++y)
                        t[y] = c.p0 * n[m + y] + c.m0 * n[_ + y] * this._len + c.p1 * n[g + y] + c.m1 * n[v + y] * this._len
                }
            }
        }
        ,
        t
    }()
      , bd = function(t) {
        this._name = t.name + "Snapshot",
        this._time = -1,
        this._cache = [],
        this._results = [];
        for (var e = 0; e < t._inputs.length; ++e)
            this._cache[e] = new xd;
        for (var i = t._curves, n = t._outputs, s = 0; s < i.length; ++s) {
            for (var a = n[i[s]._output], r = [], o = 0; o < a._components; ++o)
                r[o] = 0;
            this._results[s] = r
        }
    }
      , Sd = function() {
        function t(t, e, i, n, s, a) {
            for (this._name = t.name,
            this._track = t,
            this._snapshot = new bd(t),
            this._playing = n,
            this._time = e,
            this._speed = i,
            this._loop = s,
            this._blendWeight = 1,
            this._blendOrder = 0,
            this._eventHandler = a,
            this._eventCursor = 0; this._track.events[this._eventCursor] && this._track.events[this._eventCursor].time < this.time; )
                this._eventCursor++
        }
        var e = t.prototype;
        return e.activeEventsForFrame = function(t, e) {
            var i;
            for (0 === t && (this.eventCursor = 0),
            e > this.track.duration && (i = e - this.track.duration,
            e = this.track.duration); this.track.events[this.eventCursor] && this.track.events[this.eventCursor].time >= t && (e === this.track.duration ? this.track.events[this.eventCursor].time <= e : this.track.events[this.eventCursor].time < e); ) {
                var n = this.track.events[this.eventCursor];
                this._eventHandler.fire(n.name, W({
                    track: this.track
                }, n)),
                this.eventCursor++
            }
            Number.isFinite(i) && this.activeEventsForFrame(0, i)
        }
        ,
        e._update = function(t) {
            if (this._playing) {
                var e = this._time
                  , i = this._track.duration
                  , n = this._speed
                  , s = this._loop;
                this._track.events.length > 0 && i > 0 && this.activeEventsForFrame(e, e + n * t),
                e += n * t,
                n >= 0 ? e > i && (s ? e = e % i || 0 : (e = this._track.duration,
                this.pause())) : e < 0 && (s ? e = i + (e % i || 0) : (e = 0,
                this.pause())),
                this._time = e
            }
            this._time !== this._snapshot._time && this._track.eval(this._time, this._snapshot)
        }
        ,
        e.play = function() {
            this._playing = !0,
            this._time = 0
        }
        ,
        e.stop = function() {
            this._playing = !1,
            this._time = 0
        }
        ,
        e.pause = function() {
            this._playing = !1
        }
        ,
        e.resume = function() {
            this._playing = !0
        }
        ,
        e.reset = function() {
            this._time = 0
        }
        ,
        G(t, [{
            key: "name",
            get: function() {
                return this._name
            },
            set: function(t) {
                this._name = t
            }
        }, {
            key: "track",
            get: function() {
                return this._track
            }
        }, {
            key: "snapshot",
            get: function() {
                return this._snapshot
            }
        }, {
            key: "time",
            get: function() {
                return this._time
            },
            set: function(t) {
                this._time = t
            }
        }, {
            key: "speed",
            get: function() {
                return this._speed
            },
            set: function(t) {
                this._speed = t
            }
        }, {
            key: "loop",
            get: function() {
                return this._loop
            },
            set: function(t) {
                this._loop = t
            }
        }, {
            key: "blendWeight",
            get: function() {
                return this._blendWeight
            },
            set: function(t) {
                this._blendWeight = t
            }
        }, {
            key: "blendOrder",
            get: function() {
                return this._blendOrder
            },
            set: function(t) {
                this._blendOrder = t
            }
        }, {
            key: "eventCursor",
            get: function() {
                return this._eventCursor
            },
            set: function(t) {
                this._eventCursor = t
            }
        }]),
        t
    }()
      , Td = "NONE"
      , wd = "PREV_STATE"
      , Md = "NEXT_STATE"
      , Ad = "PREV_STATE_NEXT_STATE"
      , Cd = "NEXT_STATE_PREV_STATE"
      , Ed = "GREATER_THAN"
      , Pd = "LESS_THAN"
      , Rd = "GREATER_THAN_EQUAL_TO"
      , Id = "LESS_THAN_EQUAL_TO"
      , Ld = "EQUAL_TO"
      , Dd = "NOT_EQUAL_TO"
      , kd = "INTEGER"
      , Od = "FLOAT"
      , Fd = "BOOLEAN"
      , Bd = "TRIGGER"
      , Nd = "2D_DIRECTIONAL"
      , Ud = "2D_CARTESIAN"
      , zd = "DIRECT"
      , Vd = "START"
      , Gd = "END"
      , Wd = "ANY"
      , Hd = [Vd, Gd, Wd]
      , Xd = "OVERWRITE"
      , jd = function() {
        function t(t, e) {
            this._component = t,
            this.mask = new Int8Array(t.layers.length),
            this.weights = new Float32Array(t.layers.length),
            this.totalWeight = 0,
            this.counter = 0,
            this.layerCounter = 0,
            this.valueType = e,
            this.dirty = !0,
            this.value = [0, 0, 0, 1]
        }
        var e = t.prototype;
        return e.getWeight = function(t) {
            return this.dirty && this.updateWeights(),
            0 !== this.totalWeight && this.mask[t] ? this.weights[t] / this.totalWeight : 0
        }
        ,
        e.setMask = function(t, e) {
            this.mask[t] = e,
            this._component.layers[t].blendType === Xd && (this.mask = this.mask.fill(0, 0, t)),
            this.dirty = !0
        }
        ,
        e.updateWeights = function() {
            this.totalWeight = 0;
            for (var t = 0; t < this.weights.length; t++)
                this.weights[t] = this._component.layers[t].weight,
                this.totalWeight += this.mask[t] * this.weights[t];
            this.dirty = !1
        }
        ,
        e.updateValue = function(t, e) {
            0 === this.counter && (this.value[0] = 0,
            this.value[1] = 0,
            this.value[2] = 0,
            this.value[3] = 1),
            this.mask[t] && (0 === this.counter ? qd._set(this.value, e, this.valueType) : qd._blend(this.value, e, this.getWeight(t), this.valueType))
        }
        ,
        t
    }();
    jd.TYPE_QUAT = "quaternion",
    jd.TYPE_VEC3 = "vector3";
    var qd = function() {
        function t(t) {
            this._binder = t,
            this._clips = [],
            this._inputs = [],
            this._outputs = [],
            this._targets = {}
        }
        t._dot = function(t, e) {
            for (var i = t.length, n = 0, s = 0; s < i; ++s)
                n += t[s] * e[s];
            return n
        }
        ,
        t._normalize = function(e) {
            var i = t._dot(e, e);
            if (i > 0) {
                i = 1 / Math.sqrt(i);
                for (var n = e.length, s = 0; s < n; ++s)
                    e[s] *= i
            }
        }
        ,
        t._set = function(e, i, n) {
            var s = e.length;
            if ("quaternion" === n) {
                var a = t._dot(i, i);
                a > 0 && (a = 1 / Math.sqrt(a));
                for (var r = 0; r < s; ++r)
                    e[r] = i[r] * a
            } else
                for (var o = 0; o < s; ++o)
                    e[o] = i[o]
        }
        ,
        t._blendVec = function(t, e, i) {
            for (var n = 1 - i, s = t.length, a = 0; a < s; ++a)
                t[a] = t[a] * n + e[a] * i
        }
        ,
        t._blendQuat = function(e, i, n) {
            var s = e.length
              , a = 1 - n;
            t._dot(e, i) < 0 && (n = -n);
            for (var r = 0; r < s; ++r)
                e[r] = e[r] * a + i[r] * n;
            t._normalize(e)
        }
        ,
        t._blend = function(e, i, n, s) {
            "quaternion" === s ? t._blendQuat(e, i, n) : t._blendVec(e, i, n)
        }
        ,
        t._stableSort = function(t, e) {
            for (var i = t.length, n = 0; n < i - 1; ++n)
                for (var s = n + 1; s < i; ++s)
                    if (e(t[s], t[n])) {
                        var a = t[n];
                        t[n] = t[s],
                        t[s] = a
                    }
        }
        ;
        var e = t.prototype;
        return e.addClip = function(t) {
            for (var e = this._targets, i = this._binder, n = t.track.curves, s = t.snapshot, a = [], r = [], o = 0; o < n.length; ++o)
                for (var h = n[o].paths, l = 0; l < h.length; ++l) {
                    var c = h[l]
                      , u = i.resolve(c)
                      , d = e[u && u.targetPath || null];
                    if (!d && u) {
                        d = {
                            target: u,
                            value: [],
                            curves: 0,
                            blendCounter: 0
                        };
                        for (var f = 0; f < d.target.components; ++f)
                            d.value.push(0);
                        if (e[u.targetPath] = d,
                        i.animComponent) {
                            if (!i.animComponent.targets[u.targetPath]) {
                                var p = void 0;
                                p = "localRotation" === u.targetPath.substring(u.targetPath.length - 13) ? jd.TYPE_QUAT : jd.TYPE_VEC3,
                                i.animComponent.targets[u.targetPath] = new jd(i.animComponent,p)
                            }
                            i.animComponent.targets[u.targetPath].layerCounter++,
                            i.animComponent.targets[u.targetPath].setMask(i.layerIndex, 1)
                        }
                    }
                    d && (d.curves++,
                    a.push(s._results[o]),
                    r.push(d))
                }
            this._clips.push(t),
            this._inputs.push(a),
            this._outputs.push(r)
        }
        ,
        e.removeClip = function(t) {
            for (var e = this._targets, i = this._binder, n = this._clips, s = n[t].track.curves, a = 0; a < s.length; ++a)
                for (var r = s[a].paths, o = 0; o < r.length; ++o) {
                    var h = r[o]
                      , l = this._binder.resolve(h);
                    l && (l.curves--,
                    0 === l.curves && (i.unresolve(h),
                    delete e[l.targetPath],
                    i.animComponent && i.animComponent.targets[l.targetPath].layerCounter--))
                }
            n.splice(t, 1),
            this._inputs.splice(t, 1),
            this._outputs.splice(t, 1)
        }
        ,
        e.removeClips = function() {
            for (; this._clips.length > 0; )
                this.removeClip(0)
        }
        ,
        e.findClip = function(t) {
            for (var e = this._clips, i = 0; i < e.length; ++i) {
                var n = e[i];
                if (n.name === t)
                    return n
            }
            return null
        }
        ,
        e.rebind = function() {
            var t = this;
            this._binder.rebind(),
            this._targets = {};
            var e = [].concat(this.clips);
            this.removeClips(),
            e.forEach((function(e) {
                t.addClip(e)
            }
            ))
        }
        ,
        e.assignMask = function(t) {
            return this._binder.assignMask(t)
        }
        ,
        e.update = function(e) {
            var i = this._clips
              , n = i.map((function(t, e) {
                return e
            }
            ));
            t._stableSort(n, (function(t, e) {
                return i[t].blendOrder < i[e].blendOrder
            }
            ));
            for (var s = 0; s < n.length; ++s) {
                var a = n[s]
                  , r = i[a]
                  , o = this._inputs[a]
                  , h = this._outputs[a]
                  , l = r.blendWeight;
                l > 0 && r._update(e);
                var c = void 0
                  , u = void 0
                  , d = void 0;
                if (l >= 1)
                    for (var f = 0; f < o.length; ++f)
                        c = o[f],
                        d = (u = h[f]).value,
                        t._set(d, c, u.target.type),
                        u.blendCounter++;
                else if (l > 0)
                    for (var p = 0; p < o.length; ++p)
                        c = o[p],
                        d = (u = h[p]).value,
                        0 === u.blendCounter ? t._set(d, c, u.target.type) : t._blend(d, c, l, u.target.type),
                        u.blendCounter++
            }
            var m = this._targets
              , _ = this._binder;
            for (var g in m)
                if (m.hasOwnProperty(g)) {
                    var v = m[g];
                    if (_.animComponent && v.target.isTransform) {
                        var y = _.animComponent.targets[g];
                        y.counter === y.layerCounter && (y.counter = 0),
                        y.updateValue(_.layerIndex, v.value),
                        v.target.func(y.value),
                        y.counter++
                    } else
                        v.target.func(v.value);
                    v.blendCounter = 0
                }
            _.update(e)
        }
        ,
        G(t, [{
            key: "clips",
            get: function() {
                return this._clips
            }
        }]),
        t
    }()
      , Yd = function() {
        function t() {}
        t.joinPath = function(t, e) {
            e = e || ".";
            return t.map((function(t) {
                return t.replace(/\\/g, "\\\\").replace(new RegExp("\\" + e,"g"), "\\" + e)
            }
            )).join(e)
        }
        ,
        t.splitPath = function(t, e) {
            e = e || ".";
            for (var i = [], n = "", s = 0; s < t.length; ) {
                var a = t[s++];
                "\\" === a && s < t.length ? n += "\\" === (a = t[s++]) || a === e ? a : "\\" + a : a === e ? (i.push(n),
                n = "") : n += a
            }
            return n.length > 0 && i.push(n),
            i
        }
        ,
        t.encode = function(t, e, i) {
            return (Array.isArray(t) ? t.join("/") : t) + "/" + e + "/" + (Array.isArray(i) ? i.join("/") : i)
        }
        ;
        var e = t.prototype;
        return e.resolve = function(t) {
            return null
        }
        ,
        e.unresolve = function(t) {}
        ,
        e.update = function(t) {}
        ,
        t
    }()
      , Kd = function() {
        function t(t, e, i, n) {
            this._func = t,
            this._type = e,
            this._components = i,
            this._targetPath = n,
            this._isTransform = "localRotation" === this._targetPath.substring(this._targetPath.length - 13) || "localPosition" === this._targetPath.substring(this._targetPath.length - 13) || "localScale" === this._targetPath.substring(this._targetPath.length - 10)
        }
        return G(t, [{
            key: "func",
            get: function() {
                return this._func
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            }
        }, {
            key: "components",
            get: function() {
                return this._components
            }
        }, {
            key: "targetPath",
            get: function() {
                return this._targetPath
            }
        }, {
            key: "isTransform",
            get: function() {
                return this._isTransform
            }
        }]),
        t
    }()
      , Zd = function() {
        function t(e) {
            var i = this;
            if (this._isPathInMask = function(t, e) {
                var n = i._mask[t];
                return !!n && !!(n.children || e && !1 !== n.value)
            }
            ,
            this.graph = e,
            e) {
                this._mask = null;
                var n = {};
                !function t(e) {
                    n[e.name] = e;
                    for (var i = 0; i < e.children.length; ++i)
                        t(e.children[i])
                }(e),
                this.nodes = n,
                this.targetCache = {};
                var s = function(t) {
                    for (var e, i = t; i && !(i instanceof nv); )
                        i = i.parent;
                    return i && (i.render ? e = i.render.meshInstances : i.model && (e = i.model.meshInstances)),
                    e
                };
                this.nodeCounts = {},
                this.activeNodes = [],
                this.handlers = {
                    localPosition: function(e) {
                        var i = e.localPosition;
                        return t.createAnimTarget((function(t) {
                            i.set.apply(i, t)
                        }
                        ), "vector", 3, e, "localPosition")
                    },
                    localRotation: function(e) {
                        var i = e.localRotation;
                        return t.createAnimTarget((function(t) {
                            i.set.apply(i, t)
                        }
                        ), "quaternion", 4, e, "localRotation")
                    },
                    localScale: function(e) {
                        var i = e.localScale;
                        return t.createAnimTarget((function(t) {
                            i.set.apply(i, t)
                        }
                        ), "vector", 3, e, "localScale")
                    },
                    weights: function(e) {
                        var i = s(e);
                        if (i) {
                            for (var n = [], a = 0; a < i.length; ++a)
                                i[a].node.name === e.name && i[a].morphInstance && n.push(i[a].morphInstance);
                            if (n.length > 0) {
                                return t.createAnimTarget((function(t) {
                                    for (var e = 0; e < t.length; ++e)
                                        for (var i = 0; i < n.length; i++)
                                            n[i].setWeight(e, t[e])
                                }
                                ), "vector", n[0].morph._targets.length, e, "weights")
                            }
                        }
                        return null
                    },
                    materialTexture: function(e, n) {
                        var a = s(e);
                        if (a) {
                            for (var r, o = 0; o < a.length; ++o)
                                if (a[o].node.name === e.name) {
                                    r = a[o];
                                    break
                                }
                            if (r) {
                                return t.createAnimTarget((function(t) {
                                    var e = i.animComponent.system.app.assets.get(t[0]);
                                    e && e.resource && "texture" === e.type && (r.material[n] = e.resource,
                                    r.material.update())
                                }
                                ), "vector", 1, e, "materialTexture", "material")
                            }
                        }
                        return null
                    }
                }
            }
        }
        var e = t.prototype;
        return e._isPathActive = function(t) {
            if (!this._mask)
                return !0;
            for (var e = [t.entityPath[0], this.graph.name], i = 0; i < e.length; ++i) {
                var n = e[i];
                if (this._isPathInMask(n, 1 === t.entityPath.length))
                    return !0;
                for (var s = 1; s < t.entityPath.length; s++)
                    if (n += "/" + t.entityPath[s],
                    this._isPathInMask(n, s === t.entityPath.length - 1))
                        return !0
            }
            return !1
        }
        ,
        e.findNode = function(t) {
            return this._isPathActive(t) ? (this.graph && (e = this.graph.findByPath(t.entityPath)),
            e || (e = this.nodes[t.entityPath[t.entityPath.length - 1] || ""]),
            e) : null;
            var e
        }
        ,
        t.createAnimTarget = function(t, e, i, n, s, a) {
            var r = Yd.encode(n.path, a || "entity", s);
            return new Kd(t,e,i,r)
        }
        ,
        e.resolve = function(t) {
            var e = Yd.encode(t.entityPath, t.component, t.propertyPath)
              , i = this.targetCache[e];
            if (i)
                return i;
            var n = this.findNode(t);
            if (!n)
                return null;
            var s = this.handlers[t.propertyPath];
            return s && (i = s(n)) ? (this.targetCache[e] = i,
            this.nodeCounts[n.path] ? this.nodeCounts[n.path]++ : (this.activeNodes.push(n),
            this.nodeCounts[n.path] = 1),
            i) : null
        }
        ,
        e.unresolve = function(t) {
            if ("graph" === t.component) {
                var e = this.nodes[t.entityPath[t.entityPath.length - 1] || ""];
                if (this.nodeCounts[e.path]--,
                0 === this.nodeCounts[e.path]) {
                    var i = this.activeNodes
                      , n = i.indexOf(e.node)
                      , s = i.length;
                    n < s - 1 && (i[n] = i[s - 1]),
                    i.pop()
                }
            }
        }
        ,
        e.update = function(t) {
            for (var e = this.activeNodes, i = 0; i < e.length; ++i)
                e[i]._dirtifyLocal()
        }
        ,
        e.assignMask = function(t) {
            return t !== this._mask && (this._mask = t,
            !0)
        }
        ,
        t
    }()
      , $d = function() {
        function t() {
            this._written = !1,
            this._name = "",
            this._keyFrames = [],
            this._quat = new yt,
            this._pos = new lt,
            this._scale = new lt,
            this._targetNode = null
        }
        var e = t.prototype;
        return e.getTarget = function() {
            return this._targetNode
        }
        ,
        e.setTarget = function(t) {
            this._targetNode = t
        }
        ,
        t
    }()
      , Qd = function() {
        function t(t) {
            var e = this;
            this._animation = null,
            this._time = 0,
            this.looping = !0,
            this._interpolatedKeys = [],
            this._interpolatedKeyDict = {},
            this._currKeyIndices = {},
            this.graph = null;
            !function t(i) {
                var n = new $d;
                n._name = i.name,
                e._interpolatedKeys.push(n),
                e._interpolatedKeyDict[i.name] = n,
                e._currKeyIndices[i.name] = 0;
                for (var s = 0; s < i._children.length; s++)
                    t(i._children[s])
            }(t)
        }
        var e = t.prototype;
        return e.addTime = function(t) {
            if (null !== this._animation) {
                var e = this._animation._nodes
                  , i = this._animation.duration;
                if (this._time === i && !this.looping)
                    return;
                if (this._time += t,
                this._time > i) {
                    this._time = this.looping ? 0 : i;
                    for (var n = 0; n < e.length; n++) {
                        var s = e[n]._name;
                        this._currKeyIndices[s] = 0
                    }
                } else if (this._time < 0) {
                    this._time = this.looping ? i : 0;
                    for (var a = 0; a < e.length; a++) {
                        var r = e[a]
                          , o = r._name;
                        this._currKeyIndices[o] = r._keys.length - 2
                    }
                }
                for (var h = t >= 0 ? 1 : -1, l = 0; l < e.length; l++) {
                    var c = e[l]
                      , u = c._name
                      , d = c._keys
                      , f = this._interpolatedKeyDict[u];
                    if (void 0 !== f) {
                        var p = !1;
                        if (1 !== d.length)
                            for (var m = this._currKeyIndices[u]; m < d.length - 1 && m >= 0; m += h) {
                                var _ = d[m]
                                  , g = d[m + 1];
                                if (_.time <= this._time && g.time >= this._time) {
                                    var v = (this._time - _.time) / (g.time - _.time);
                                    f._pos.lerp(_.position, g.position, v),
                                    f._quat.slerp(_.rotation, g.rotation, v),
                                    f._scale.lerp(_.scale, g.scale, v),
                                    f._written = !0,
                                    this._currKeyIndices[u] = m,
                                    p = !0;
                                    break
                                }
                            }
                        (1 === d.length || !p && 0 === this._time && this.looping) && (f._pos.copy(d[0].position),
                        f._quat.copy(d[0].rotation),
                        f._scale.copy(d[0].scale),
                        f._written = !0)
                    }
                }
            }
        }
        ,
        e.blend = function(t, e, i) {
            for (var n = this._interpolatedKeys.length, s = 0; s < n; s++) {
                var a = t._interpolatedKeys[s]
                  , r = e._interpolatedKeys[s]
                  , o = this._interpolatedKeys[s];
                a._written && r._written ? (o._quat.slerp(a._quat, e._interpolatedKeys[s]._quat, i),
                o._pos.lerp(a._pos, e._interpolatedKeys[s]._pos, i),
                o._scale.lerp(a._scale, r._scale, i),
                o._written = !0) : a._written ? (o._quat.copy(a._quat),
                o._pos.copy(a._pos),
                o._scale.copy(a._scale),
                o._written = !0) : r._written && (o._quat.copy(r._quat),
                o._pos.copy(r._pos),
                o._scale.copy(r._scale),
                o._written = !0)
            }
        }
        ,
        e.setGraph = function(t) {
            if (this.graph = t,
            t)
                for (var e = 0; e < this._interpolatedKeys.length; e++) {
                    var i = this._interpolatedKeys[e]
                      , n = t.findByName(i._name);
                    this._interpolatedKeys[e].setTarget(n)
                }
            else
                for (var s = 0; s < this._interpolatedKeys.length; s++)
                    this._interpolatedKeys[s].setTarget(null)
        }
        ,
        e.updateGraph = function() {
            if (this.graph)
                for (var t = 0; t < this._interpolatedKeys.length; t++) {
                    var e = this._interpolatedKeys[t];
                    if (e._written) {
                        var i = e.getTarget();
                        i.localPosition.copy(e._pos),
                        i.localRotation.copy(e._quat),
                        i.localScale.copy(e._scale),
                        i._dirtyLocal || i._dirtifyLocal(),
                        e._written = !1
                    }
                }
        }
        ,
        G(t, [{
            key: "animation",
            get: function() {
                return this._animation
            },
            set: function(t) {
                this._animation = t,
                this.currentTime = 0
            }
        }, {
            key: "currentTime",
            get: function() {
                return this._time
            },
            set: function(t) {
                this._time = t;
                for (var e = this._interpolatedKeys.length, i = 0; i < e; i++) {
                    var n = this._interpolatedKeys[i]._name;
                    this._currKeyIndices[n] = 0
                }
                this.addTime(0),
                this.updateGraph()
            }
        }, {
            key: "numNodes",
            get: function() {
                return this._interpolatedKeys.length
            }
        }]),
        t
    }()
      , Jd = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this).animationsIndex = {},
            n.on("set_animations", n.onSetAnimations, j(n)),
            n.on("set_assets", n.onSetAssets, j(n)),
            n.on("set_loop", n.onSetLoop, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.play = function(t, e) {
            if (void 0 === e && (e = 0),
            this.enabled && this.entity.enabled) {
                var i = this.data;
                if (i.animations[t]) {
                    if (i.prevAnim = i.currAnim,
                    i.currAnim = t,
                    i.model) {
                        i.skeleton || i.animEvaluator || this._createAnimationController();
                        var n = i.animations[i.prevAnim]
                          , s = i.animations[i.currAnim];
                        if (i.blending = e > 0 && i.prevAnim,
                        i.blending && (i.blend = 0,
                        i.blendSpeed = 1 / e),
                        i.skeleton && (i.blending ? (i.fromSkel.animation = n,
                        i.fromSkel.addTime(i.skeleton._time),
                        i.toSkel.animation = s) : i.skeleton.animation = s),
                        i.animEvaluator) {
                            var a = i.animEvaluator;
                            if (i.blending)
                                for (; a.clips.length > 1; )
                                    a.removeClip(0);
                            else
                                i.animEvaluator.removeClips();
                            var r = new Sd(i.animations[i.currAnim],0,1,!0,i.loop);
                            r.name = i.currAnim,
                            r.blendWeight = i.blending ? 0 : 1,
                            r.reset(),
                            i.animEvaluator.addClip(r)
                        }
                    }
                    i.playing = !0
                }
            }
        }
        ,
        i.getAnimation = function(t) {
            return this.data.animations[t]
        }
        ,
        i.setModel = function(t) {
            var e = this.data;
            t !== e.model && (this._resetAnimationController(),
            e.model = t,
            e.animations && e.currAnim && e.animations[e.currAnim] && this.play(e.currAnim))
        }
        ,
        i._resetAnimationController = function() {
            var t = this.data;
            t.skeleton = null,
            t.fromSkel = null,
            t.toSkel = null,
            t.animEvaluator = null
        }
        ,
        i._createAnimationController = function() {
            var t = this.data
              , e = t.model
              , i = t.animations
              , n = !1
              , s = !1;
            for (var a in i) {
                if (i.hasOwnProperty(a))
                    i[a].constructor === Oh ? s = !0 : n = !0
            }
            var r = e.getGraph();
            n ? (t.fromSkel = new Qd(r),
            t.toSkel = new Qd(r),
            t.skeleton = new Qd(r),
            t.skeleton.looping = t.loop,
            t.skeleton.setGraph(r)) : s && (t.animEvaluator = new qd(new Zd(this.entity)))
        }
        ,
        i.loadAnimationAssets = function(t) {
            var e = this;
            if (t && t.length)
                for (var i = this.system.app.assets, n = function(t) {
                    if (t.resources.length > 1)
                        for (var i = 0; i < t.resources.length; i++)
                            e.animations[t.resources[i].name] = t.resources[i],
                            e.animationsIndex[t.id] = t.resources[i].name;
                    else
                        e.animations[t.name] = t.resource,
                        e.animationsIndex[t.id] = t.name;
                    e.animations = e.animations
                }, s = function(t) {
                    t.off("change", e.onAssetChanged, e),
                    t.on("change", e.onAssetChanged, e),
                    t.off("remove", e.onAssetRemoved, e),
                    t.on("remove", e.onAssetRemoved, e),
                    t.resource ? n(t) : (t.once("load", n, e),
                    e.enabled && e.entity.enabled && i.load(t))
                }, a = 0, r = t.length; a < r; a++) {
                    var o = i.get(t[a]);
                    o ? s(o) : i.on("add:" + t[a], s)
                }
        }
        ,
        i.onAssetChanged = function(t, e, i, n) {
            if ("resource" === e || "resources" === e)
                if ("resources" === e && i && 0 === i.length && (i = null),
                i) {
                    var s = !1;
                    if (i.length > 1) {
                        if (n && n.length > 1)
                            for (var a = 0; a < n.length; a++)
                                delete this.animations[n[a].name];
                        else
                            delete this.animations[t.name];
                        s = !1;
                        for (var r = 0; r < i.length; r++)
                            this.animations[i[r].name] = i[r],
                            s || this.data.currAnim !== i[r].name || this.data.playing && this.data.enabled && this.entity.enabled && (s = !0,
                            this.play(i[r].name));
                        s || (this._stopCurrentAnimation(),
                        this.onSetAnimations())
                    } else {
                        if (n && n.length > 1)
                            for (var o = 0; o < n.length; o++)
                                delete this.animations[n[o].name];
                        this.animations[t.name] = i[0] || i,
                        s = !1,
                        this.data.currAnim === t.name && this.data.playing && this.data.enabled && this.entity.enabled && (s = !0,
                        this.play(t.name)),
                        s || (this._stopCurrentAnimation(),
                        this.onSetAnimations())
                    }
                    this.animationsIndex[t.id] = t.name
                } else {
                    if (n.length > 1)
                        for (var h = 0; h < n.length; h++)
                            delete this.animations[n[h].name],
                            this.data.currAnim === n[h].name && this._stopCurrentAnimation();
                    else
                        delete this.animations[t.name],
                        this.data.currAnim === t.name && this._stopCurrentAnimation();
                    delete this.animationsIndex[t.id]
                }
        }
        ,
        i.onAssetRemoved = function(t) {
            if (t.off("remove", this.onAssetRemoved, this),
            this.animations) {
                if (t.resources.length > 1)
                    for (var e = 0; e < t.resources.length; e++)
                        delete this.animations[t.resources[e].name],
                        this.data.currAnim === t.resources[e].name && this._stopCurrentAnimation();
                else
                    delete this.animations[t.name],
                    this.data.currAnim === t.name && this._stopCurrentAnimation();
                delete this.animationsIndex[t.id]
            }
        }
        ,
        i._stopCurrentAnimation = function() {
            var t = this.data;
            if (t.currAnim = null,
            t.playing = !1,
            t.skeleton && (t.skeleton.currentTime = 0,
            t.skeleton.animation = null),
            t.animEvaluator) {
                for (var e = 0; e < t.animEvaluator.clips.length; ++e)
                    t.animEvaluator.clips[e].stop();
                t.animEvaluator.update(0),
                t.animEvaluator.removeClips()
            }
        }
        ,
        i.onSetAnimations = function(t, e, i) {
            var n = this.data
              , s = this.entity.model;
            if (s) {
                var a = s.model;
                a && a !== n.model && this.setModel(a)
            }
            if (!n.currAnim && n.activate && n.enabled && this.entity.enabled) {
                var r = Object.keys(n.animations);
                r.length > 0 && this.play(r[0])
            }
        }
        ,
        i.onSetAssets = function(t, e, i) {
            if (e && e.length)
                for (var n = 0; n < e.length; n++)
                    if (e[n]) {
                        var s = this.system.app.assets.get(e[n]);
                        if (s) {
                            s.off("change", this.onAssetChanged, this),
                            s.off("remove", this.onAssetRemoved, this);
                            var a = this.animationsIndex[s.id];
                            this.data.currAnim === a && this._stopCurrentAnimation(),
                            delete this.animations[a],
                            delete this.animationsIndex[s.id]
                        }
                    }
            var r = i.map((function(t) {
                return t instanceof Kh ? t.id : t
            }
            ));
            this.loadAnimationAssets(r)
        }
        ,
        i.onSetLoop = function(t, e, i) {
            var n = this.data;
            if (n.skeleton && (n.skeleton.looping = n.loop),
            n.animEvaluator)
                for (var s = 0; s < n.animEvaluator.clips.length; ++s)
                    n.animEvaluator.clips[s].loop = n.loop
        }
        ,
        i.onSetCurrentTime = function(t, e, i) {
            var n = this.data;
            if (n.skeleton) {
                var s = n.skeleton;
                s.currentTime = i,
                s.addTime(0),
                s.updateGraph()
            }
            if (n.animEvaluator)
                for (var a = n.animEvaluator, r = 0; r < a.clips.length; ++r)
                    a.clips[r].time = i
        }
        ,
        i.onEnable = function() {
            t.prototype.onEnable.call(this);
            var e = this.data
              , i = e.assets
              , n = this.system.app.assets;
            if (i)
                for (var s = 0, a = i.length; s < a; s++) {
                    var r = i[s];
                    r instanceof Kh || (r = n.get(r)),
                    r && !r.resource && n.load(r)
                }
            if (e.activate && !e.currAnim) {
                var o = Object.keys(e.animations);
                o.length > 0 && this.play(o[0])
            }
        }
        ,
        i.onBeforeRemove = function() {
            for (var t = 0; t < this.assets.length; t++) {
                var e = this.assets[t];
                "number" == typeof e && (e = this.system.app.assets.get(e)),
                e && (e.off("change", this.onAssetChanged, this),
                e.off("remove", this.onAssetRemoved, this))
            }
            var i = this.data;
            delete i.animation,
            delete i.skeleton,
            delete i.fromSkel,
            delete i.toSkel,
            delete i.animEvaluator
        }
        ,
        G(e, [{
            key: "currentTime",
            get: function() {
                var t = this.data;
                if (t.skeleton)
                    return this.data.skeleton._time;
                if (t.animEvaluator) {
                    var e = t.animEvaluator.clips;
                    if (e.length > 0)
                        return e[e.length - 1].time
                }
                return 0
            },
            set: function(t) {
                var e = this.data;
                if (e.skeleton) {
                    var i = e.skeleton;
                    i.currentTime = t,
                    i.addTime(0),
                    i.updateGraph()
                }
                if (e.animEvaluator)
                    for (var n = e.animEvaluator, s = 0; s < n.clips.length; ++s)
                        n.clips[s].time = t
            }
        }, {
            key: "duration",
            get: function() {
                return this.data.animations[this.data.currAnim].duration
            }
        }]),
        e
    }(gd)
      , tf = function() {
        this.assets = [],
        this.speed = 1,
        this.loop = !0,
        this.activate = !0,
        this.enabled = !0,
        this.animations = {},
        this.model = null,
        this.prevAnim = null,
        this.currAnim = null,
        this.blending = !1,
        this.blend = 0,
        this.blendSpeed = 0,
        this.playing = !1,
        this.skeleton = null,
        this.fromSkel = null,
        this.toSkel = null,
        this.animEvaluator = null
    }
      , ef = ["enabled", "assets", "speed", "loop", "activate", "animations", "skeleton", "model", "prevAnim", "currAnim", "fromSkel", "toSkel", "blending", "blendTimeRemaining", "playing"]
      , nf = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "animation",
            i.ComponentType = Jd,
            i.DataType = tf,
            i.schema = ef,
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.app.systems.on("update", i.onUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["activate", "enabled", "loop", "speed", "assets"],
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            this.addComponent(e, {}),
            e.animation.assets = t.animation.assets.slice(),
            e.animation.data.speed = t.animation.speed,
            e.animation.data.loop = t.animation.loop,
            e.animation.data.activate = t.animation.activate,
            e.animation.data.enabled = t.animation.enabled;
            var i = {}
              , n = t.animation.animations;
            for (var s in n)
                n.hasOwnProperty(s) && (i[s] = n[s]);
            e.animation.animations = i;
            var a = {}
              , r = t.animation.animationsIndex;
            for (var o in r)
                r.hasOwnProperty(o) && (a[o] = r[o]);
            e.animation.animationsIndex = a
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.onBeforeRemove()
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i]
                      , s = n.data;
                    if (s.enabled && n.entity.enabled) {
                        if (s.blending && (s.blend += t * s.blendSpeed,
                        s.blend >= 1 && (s.blend = 1)),
                        s.playing) {
                            var a = s.skeleton;
                            if (null !== a && null !== s.model) {
                                if (s.blending)
                                    a.blend(s.fromSkel, s.toSkel, s.blend);
                                else {
                                    var r = t * s.speed;
                                    a.addTime(r),
                                    (s.speed > 0 && a._time === a._animation.duration && !s.loop || s.speed < 0 && 0 === a._time && !s.loop) && (s.playing = !1)
                                }
                                s.blending && 1 === s.blend && (a.animation = s.toSkel._animation),
                                a.updateGraph()
                            }
                        }
                        var o = s.animEvaluator;
                        if (o) {
                            for (var h = 0; h < o.clips.length; ++h) {
                                var l = o.clips[h];
                                l.speed = s.speed,
                                s.playing ? l.resume() : l.pause()
                            }
                            s.blending && o.clips.length > 1 && (o.clips[1].blendWeight = s.blend),
                            o.update(t)
                        }
                        s.blending && 1 === s.blend && (s.blending = !1)
                    }
                }
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Jd.prototype, ef);
    var sf = function() {
        function t(t, e, i, n, s) {
            void 0 === s && (s = 1),
            this._state = t,
            this._parent = e,
            this._name = i,
            Array.isArray(n) ? (this._point = new ut(n[0],n[1]),
            this._pointLength = this._point.length()) : (this._point = n,
            this._pointLength = n),
            this._speed = s,
            this._weightedSpeed = 1,
            this._weight = 1,
            this._animTrack = null
        }
        return G(t, [{
            key: "parent",
            get: function() {
                return this._parent
            }
        }, {
            key: "name",
            get: function() {
                return this._name
            }
        }, {
            key: "path",
            get: function() {
                return this._parent ? this._parent.path + "." + this._name : this._name
            }
        }, {
            key: "point",
            get: function() {
                return this._point
            }
        }, {
            key: "pointLength",
            get: function() {
                return this._pointLength
            }
        }, {
            key: "weight",
            get: function() {
                return this._parent ? this._parent.weight * this._weight : this._weight
            },
            set: function(t) {
                this._weight = t
            }
        }, {
            key: "normalizedWeight",
            get: function() {
                var t = this._state.totalWeight;
                return 0 === t ? 0 : this.weight / t
            }
        }, {
            key: "speed",
            get: function() {
                return this._weightedSpeed * this._speed
            }
        }, {
            key: "absoluteSpeed",
            get: function() {
                return Math.abs(this._speed)
            }
        }, {
            key: "weightedSpeed",
            get: function() {
                return this._weightedSpeed
            },
            set: function(t) {
                this._weightedSpeed = t
            }
        }, {
            key: "animTrack",
            get: function() {
                return this._animTrack
            },
            set: function(t) {
                this._animTrack = t
            }
        }]),
        t
    }()
      , af = function(t) {
        function e(e, i, n, s, a, r, o, h, l) {
            var c;
            (c = t.call(this, e, i, n, s) || this)._parameters = a,
            c._parameterValues = new Array(a.length),
            c._children = [],
            c._findParameter = l,
            c._syncAnimations = !1 !== o,
            c._pointCache = {};
            for (var u = 0; u < r.length; u++) {
                var d = r[u];
                d.children ? c._children.push(h(d.type, j(c), null, n, 1, d.parameter ? [d.parameter] : d.parameters, d.children, h, l)) : c._children.push(new sf(e,j(c),d.name,d.point,d.speed))
            }
            return c
        }
        H(e, t);
        var i = e.prototype;
        return i.getChild = function(t) {
            for (var e = 0; e < this._children.length; e++)
                if (this._children[e].name === t)
                    return this._children[e];
            return null
        }
        ,
        i.updateParameterValues = function() {
            for (var t = !0, e = 0; e < this._parameterValues.length; e++) {
                var i = this._findParameter(this._parameters[e]).value;
                this._parameterValues[e] !== i && (this._parameterValues[e] = i,
                t = !1)
            }
            return t
        }
        ,
        i.getNodeWeightedDuration = function(t) {
            return this._children[t].animTrack.duration / this._children[t].speedMultiplier * this._children[t].weight
        }
        ,
        i.getNodeCount = function() {
            for (var t = 0, i = 0; i < this._children.length; i++) {
                this._children[i].constructor === e ? t += this._children[i].getNodeCount() : t++
            }
            return t
        }
        ,
        G(e, [{
            key: "weight",
            get: function() {
                return this.calculateWeights(),
                this._parent ? this._parent.weight * this._weight : this._weight
            }
        }, {
            key: "syncAnimations",
            get: function() {
                return this._syncAnimations
            }
        }]),
        e
    }(sf)
      , rf = function(t) {
        function e(e, i, n, s, a, r, o, h, l) {
            return r.sort((function(t, e) {
                return t.point - e.point
            }
            )),
            t.call(this, e, i, n, s, a, r, o, h, l) || this
        }
        return H(e, t),
        e.prototype.calculateWeights = function() {
            if (!this.updateParameterValues()) {
                var t = 0;
                this._children[0].weight = 0;
                for (var e = 0; e < this._children.length; e++) {
                    var i = this._children[e];
                    if (e !== this._children.length - 1) {
                        var n = this._children[e + 1];
                        if (i.point === n.point)
                            i.weight = .5,
                            n.weight = .5;
                        else if (it.between(this._parameterValues[0], i.point, n.point, !0)) {
                            var s = Math.abs(i.point - n.point)
                              , a = (s - Math.abs(i.point - this._parameterValues[0])) / s;
                            i.weight = a,
                            n.weight = 1 - a
                        } else
                            n.weight = 0
                    }
                    this._syncAnimations && (t += i.animTrack.duration / i.absoluteSpeed * i.weight)
                }
                if (this._syncAnimations)
                    for (var r = 0; r < this._children.length; r++) {
                        var o = this._children[r];
                        o.weightedSpeed = o.animTrack.duration / o.absoluteSpeed / t
                    }
            }
        }
        ,
        e
    }(af)
      , of = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.pointDistanceCache = function(t, e) {
            var i = "" + t + e;
            return this._pointCache[i] || (this._pointCache[i] = this._children[e].point.clone().sub(this._children[t].point)),
            this._pointCache[i]
        }
        ,
        i.calculateWeights = function() {
            var t;
            if (!this.updateParameterValues()) {
                var i, n;
                (t = e._p).set.apply(t, this._parameterValues),
                i = 0,
                n = 0;
                for (var s = 0; s < this._children.length; s++) {
                    var a = this._children[s]
                      , r = a.point;
                    e._pip.set(e._p.x, e._p.y).sub(r);
                    for (var o = Number.MAX_VALUE, h = 0; h < this._children.length; h++)
                        if (s !== h) {
                            var l = this.pointDistanceCache(s, h)
                              , c = it.clamp(1 - e._pip.dot(l) / l.lengthSq(), 0, 1);
                            c < o && (o = c)
                        }
                    a.weight = o,
                    i += o,
                    this._syncAnimations && (n += a.animTrack.duration / a.absoluteSpeed * a.weight)
                }
                for (var u = 0; u < this._children.length; u++) {
                    var d = this._children[u];
                    d.weight = d._weight / i,
                    this._syncAnimations && (d.weightedSpeed = d.animTrack.duration / d.absoluteSpeed / n)
                }
            }
        }
        ,
        e
    }(af);
    of._p = new ut,
    of._pip = new ut;
    var hf = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.pointCache = function(t, e) {
            var i = "" + t + e;
            return this._pointCache[i] || (this._pointCache[i] = new ut((this._children[e].pointLength - this._children[t].pointLength) / ((this._children[e].pointLength + this._children[t].pointLength) / 2),2 * ut.angleRad(this._children[t].point, this._children[e].point))),
            this._pointCache[i]
        }
        ,
        i.calculateWeights = function() {
            var t;
            if (!this.updateParameterValues()) {
                var i, n;
                (t = e._p).set.apply(t, this._parameterValues);
                var s = e._p.length();
                i = 0,
                n = 0;
                for (var a = 0; a < this._children.length; a++) {
                    for (var r = this._children[a], o = r.point, h = r.pointLength, l = Number.MAX_VALUE, c = 0; c < this._children.length; c++)
                        if (a !== c) {
                            var u = this.pointCache(a, c)
                              , d = this._children[c].pointLength;
                            e._pip.set((s - h) / ((d + h) / 2), 2 * ut.angleRad(o, e._p));
                            var f = it.clamp(1 - Math.abs(e._pip.dot(u) / u.lengthSq()), 0, 1);
                            f < l && (l = f)
                        }
                    r.weight = l,
                    i += l,
                    this._syncAnimations && (n += r.animTrack.duration / r.absoluteSpeed * r.weight)
                }
                for (var p = 0; p < this._children.length; p++) {
                    var m = this._children[p];
                    if (m.weight = m._weight / i,
                    this._syncAnimations) {
                        var _ = m.animTrack.duration / n * i;
                        m.weightedSpeed = m.absoluteSpeed * _
                    }
                }
            }
        }
        ,
        e
    }(af);
    hf._p = new ut,
    hf._pip = new ut;
    var lf = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.calculateWeights = function() {
            if (!this.updateParameterValues()) {
                for (var t = 0, e = 0, i = 0; i < this._children.length; i++)
                    if (t += Math.max(this._parameterValues[i], 0),
                    this._syncAnimations) {
                        var n = this._children[i];
                        e += n.animTrack.duration / n.absoluteSpeed * n.weight
                    }
                for (var s = 0; s < this._children.length; s++) {
                    var a = this._children[s];
                    a.weight = Math.max(this._parameterValues[s], 0) / t,
                    this._syncAnimations && (a.weightedSpeed = a.animTrack.duration / a.absoluteSpeed / e)
                }
            }
        }
        ,
        e
    }(af)
      , cf = function() {
        function t(t, e, i, n, s) {
            this._controller = t,
            this._name = e,
            this._animations = {},
            this._animationList = [],
            this._speed = i || 1,
            this._loop = void 0 === n || n;
            var a = this._controller.findParameter.bind(this._controller);
            this._blendTree = s ? this._createTree(s.type, this, null, e, 1, s.parameter ? [s.parameter] : s.parameters, s.children, s.syncAnimations, this._createTree, a) : new sf(this,null,e,1,i)
        }
        var e = t.prototype;
        return e._createTree = function(t, e, i, n, s, a, r, o, h, l) {
            switch (t) {
            case "1D":
                return new rf(e,i,n,s,a,r,o,h,l);
            case Ud:
                return new of(e,i,n,s,a,r,o,h,l);
            case Nd:
                return new hf(e,i,n,s,a,r,o,h,l);
            case zd:
                return new lf(e,i,n,s,a,r,o,h,l)
            }
        }
        ,
        e._getNodeFromPath = function(t) {
            for (var e = this._blendTree, i = 1; i < t.length; i++)
                e = e.getChild(t[i]);
            return e
        }
        ,
        e.addAnimation = function(t, e) {
            var i = t.join(".")
              , n = this._animationList.findIndex((function(t) {
                return t.path === i
            }
            ));
            if (n >= 0)
                this._animationList[n].animTrack = e;
            else {
                var s = this._getNodeFromPath(t);
                s.animTrack = e,
                this._animationList.push(s)
            }
        }
        ,
        G(t, [{
            key: "name",
            get: function() {
                return this._name
            }
        }, {
            key: "animations",
            get: function() {
                return this._animationList
            },
            set: function(t) {
                this._animationList = t
            }
        }, {
            key: "speed",
            get: function() {
                return this._speed
            },
            set: function(t) {
                this._speed = t
            }
        }, {
            key: "loop",
            get: function() {
                return this._loop
            },
            set: function(t) {
                this._loop = t
            }
        }, {
            key: "nodeCount",
            get: function() {
                return this._blendTree && this._blendTree.constructor !== sf ? this._blendTree.getNodeCount() : 1
            }
        }, {
            key: "playable",
            get: function() {
                return -1 !== Hd.indexOf(this.name) || this.animations.length === this.nodeCount
            }
        }, {
            key: "looping",
            get: function() {
                if (this.animations.length > 0) {
                    var t = this.name + "." + this.animations[0].animTrack.name
                      , e = this._controller.animEvaluator.findClip(t);
                    if (e)
                        return e.loop
                }
                return !1
            }
        }, {
            key: "totalWeight",
            get: function() {
                for (var t = 0, e = 0; e < this.animations.length; e++)
                    t += this.animations[e].weight;
                return t
            }
        }, {
            key: "timelineDuration",
            get: function() {
                for (var t = 0, e = 0; e < this.animations.length; e++) {
                    var i = this.animations[e];
                    i.animTrack.duration > t && (t = i.animTrack.duration)
                }
                return t
            }
        }]),
        t
    }()
      , uf = function() {
        function t(t) {
            var e = t.from
              , i = t.to
              , n = t.time
              , s = void 0 === n ? 0 : n
              , a = t.priority
              , r = void 0 === a ? 0 : a
              , o = t.conditions
              , h = void 0 === o ? [] : o
              , l = t.exitTime
              , c = void 0 === l ? null : l
              , u = t.transitionOffset
              , d = void 0 === u ? null : u
              , f = t.interruptionSource
              , p = void 0 === f ? Td : f;
            this._from = e,
            this._to = i,
            this._time = s,
            this._priority = r,
            this._conditions = h,
            this._exitTime = c,
            this._transitionOffset = d,
            this._interruptionSource = p
        }
        return G(t, [{
            key: "from",
            get: function() {
                return this._from
            }
        }, {
            key: "to",
            get: function() {
                return this._to
            },
            set: function(t) {
                this._to = t
            }
        }, {
            key: "time",
            get: function() {
                return this._time
            }
        }, {
            key: "priority",
            get: function() {
                return this._priority
            }
        }, {
            key: "conditions",
            get: function() {
                return this._conditions
            }
        }, {
            key: "exitTime",
            get: function() {
                return this._exitTime
            }
        }, {
            key: "transitionOffset",
            get: function() {
                return this._transitionOffset
            }
        }, {
            key: "interruptionSource",
            get: function() {
                return this._interruptionSource
            }
        }, {
            key: "hasExitTime",
            get: function() {
                return !!this.exitTime
            }
        }]),
        t
    }()
      , df = function() {
        function t(t, e, i, n, s, a, r) {
            this._animEvaluator = t,
            this._states = {},
            this._stateNames = [],
            this._eventHandler = a,
            this._consumedTriggers = r;
            for (var o = 0; o < e.length; o++)
                this._states[e[o].name] = new cf(this,e[o].name,e[o].speed,e[o].loop,e[o].blendTree),
                this._stateNames.push(e[o].name);
            this._transitions = i.map((function(t) {
                return new uf(W({}, t))
            }
            )),
            this._findTransitionsFromStateCache = {},
            this._findTransitionsBetweenStatesCache = {},
            this._parameters = n,
            this._previousStateName = null,
            this._activeStateName = Vd,
            this._playing = !1,
            this._activate = s,
            this._currTransitionTime = 1,
            this._totalTransitionTime = 1,
            this._isTransitioning = !1,
            this._transitionInterruptionSource = Td,
            this._transitionPreviousStates = [],
            this._timeInState = 0,
            this._timeInStateBefore = 0
        }
        var e = t.prototype;
        return e.assignMask = function(t) {
            return this._animEvaluator.assignMask(t)
        }
        ,
        e._findState = function(t) {
            return this._states[t]
        }
        ,
        e._getActiveStateProgressForTime = function(t) {
            if (this.activeStateName === Vd || this.activeStateName === Gd || this.activeStateName === Wd)
                return 1;
            var e = this._animEvaluator.findClip(this.activeStateAnimations[0].name);
            return e ? t / e.track.duration : null
        }
        ,
        e._findTransitionsFromState = function(t) {
            var e = this._findTransitionsFromStateCache[t];
            return e || ((e = this._transitions.filter((function(e) {
                return e.from === t
            }
            ))).sort((function(t, e) {
                return t.priority < e.priority
            }
            )),
            this._findTransitionsFromStateCache[t] = e),
            e
        }
        ,
        e._findTransitionsBetweenStates = function(t, e) {
            var i = this._findTransitionsBetweenStatesCache[t + "->" + e];
            return i || ((i = this._transitions.filter((function(i) {
                return i.from === t && i.to === e
            }
            ))).sort((function(t, e) {
                return t.priority < e.priority
            }
            )),
            this._findTransitionsBetweenStatesCache[t + "->" + e] = i),
            i
        }
        ,
        e._transitionHasConditionsMet = function(t) {
            for (var e = !0, i = 0; i < t.conditions.length; i++) {
                var n = t.conditions[i]
                  , s = this.findParameter(n.parameterName);
                switch (n.predicate) {
                case Ed:
                    e = e && s.value > n.value;
                    break;
                case Pd:
                    e = e && s.value < n.value;
                    break;
                case Rd:
                    e = e && s.value >= n.value;
                    break;
                case Id:
                    e = e && s.value <= n.value;
                    break;
                case Ld:
                    e = e && s.value === n.value;
                    break;
                case Dd:
                    e = e && s.value !== n.value
                }
                if (!e)
                    return e
            }
            return e
        }
        ,
        e._findTransition = function(t, e) {
            var i = this
              , n = [];
            if (t && e)
                n.concat(this._findTransitionsBetweenStates(t, e));
            else if (this._isTransitioning)
                switch (this._transitionInterruptionSource) {
                case wd:
                    n = (n = n.concat(this._findTransitionsFromState(this._previousStateName))).concat(this._findTransitionsFromState(Wd));
                    break;
                case Md:
                    n = (n = n.concat(this._findTransitionsFromState(this._activeStateName))).concat(this._findTransitionsFromState(Wd));
                    break;
                case Ad:
                    n = (n = (n = n.concat(this._findTransitionsFromState(this._previousStateName))).concat(this._findTransitionsFromState(this._activeStateName))).concat(this._findTransitionsFromState(Wd));
                    break;
                case Cd:
                    n = (n = (n = n.concat(this._findTransitionsFromState(this._activeStateName))).concat(this._findTransitionsFromState(this._previousStateName))).concat(this._findTransitionsFromState(Wd))
                }
            else
                n = (n = n.concat(this._findTransitionsFromState(this._activeStateName))).concat(this._findTransitionsFromState(Wd));
            if ((n = n.filter((function(t) {
                if (t.to === i.activeStateName)
                    return !1;
                if (t.hasExitTime) {
                    var e = i._getActiveStateProgressForTime(i._timeInStateBefore)
                      , n = i._getActiveStateProgressForTime(i._timeInState);
                    if (t.exitTime < 1 && i.activeState.loop && (e -= Math.floor(e),
                    n -= Math.floor(n)),
                    !(t.exitTime > e && t.exitTime <= n))
                        return null
                }
                return i._transitionHasConditionsMet(t)
            }
            ))).length > 0) {
                var s = n[0];
                if (s.to === Gd) {
                    var a = this._findTransitionsFromState(Vd)[0];
                    s.to = a.to
                }
                return s
            }
            return null
        }
        ,
        e.updateStateFromTransition = function(t) {
            var e, i, n;
            this.previousState = t.from ? this.activeStateName : null,
            this.activeState = t.to;
            for (var s = 0; s < t.conditions.length; s++) {
                var a = t.conditions[s];
                this.findParameter(a.parameterName).type === Bd && this._consumedTriggers.add(a.parameterName)
            }
            if (this.previousState) {
                this._isTransitioning || (this._transitionPreviousStates = []),
                this._transitionPreviousStates.push({
                    name: this._previousStateName,
                    weight: 1
                });
                for (var r = Math.min(this._currTransitionTime / this._totalTransitionTime, 1), o = 0; o < this._transitionPreviousStates.length; o++) {
                    this._isTransitioning ? o !== this._transitionPreviousStates.length - 1 ? this._transitionPreviousStates[o].weight *= 1 - r : this._transitionPreviousStates[o].weight = r : this._transitionPreviousStates[o].weight = 1,
                    e = this._findState(this._transitionPreviousStates[o].name);
                    for (var h = 0; h < e.animations.length; h++)
                        i = e.animations[h],
                        (n = this._animEvaluator.findClip(i.name + ".previous." + o)) || ((n = this._animEvaluator.findClip(i.name)).name = i.name + ".previous." + o),
                        o !== this._transitionPreviousStates.length - 1 && n.pause()
                }
            }
            this._isTransitioning = !0,
            this._totalTransitionTime = t.time,
            this._currTransitionTime = 0,
            this._transitionInterruptionSource = t.interruptionSource;
            var l = this.activeState
              , c = t.transitionOffset && t.transitionOffset > 0 && t.transitionOffset < 1
              , u = 0
              , d = 0;
            if (c) {
                var f = l.timelineDuration * t.transitionOffset;
                u = f,
                d = f
            }
            this._timeInState = u,
            this._timeInStateBefore = d;
            for (var p = 0; p < l.animations.length; p++) {
                if (n = this._animEvaluator.findClip(l.animations[p].name))
                    n.reset();
                else {
                    var m = Number.isFinite(l.animations[p].speed) ? l.animations[p].speed : l.speed;
                    (n = new Sd(l.animations[p].animTrack,this._timeInState,m,!0,l.loop,this._eventHandler)).name = l.animations[p].name,
                    this._animEvaluator.addClip(n)
                }
                if (t.time > 0 ? n.blendWeight = 0 : n.blendWeight = l.animations[p].normalizedWeight,
                n.play(),
                c)
                    n.time = l.timelineDuration * t.transitionOffset;
                else {
                    var _ = l.speed >= 0 ? 0 : this.activeStateDuration;
                    n.time = _
                }
            }
        }
        ,
        e._transitionToState = function(t) {
            if (this._findState(t)) {
                var e = this._findTransition(this._activeStateName, t);
                e || (this._animEvaluator.removeClips(),
                e = new uf({
                    from: null,
                    to: t
                })),
                this.updateStateFromTransition(e)
            }
        }
        ,
        e.assignAnimation = function(t, e, i, n) {
            var s = t.split(".")
              , a = this._findState(s[0]);
            a || (a = new cf(this,s[0],1),
            this._states[s[0]] = a,
            this._stateNames.push(s[0])),
            a.addAnimation(s, e),
            void 0 !== i && (a.speed = i),
            void 0 !== n && (a.loop = n),
            !this._playing && this._activate && this.playable && this.play()
        }
        ,
        e.removeNodeAnimations = function(t) {
            if (-1 === Hd.indexOf(t)) {
                var e = this._findState(t);
                if (e)
                    return e.animations = [],
                    !0
            }
        }
        ,
        e.play = function(t) {
            t && this._transitionToState(t),
            this._playing = !0
        }
        ,
        e.pause = function() {
            this._playing = !1
        }
        ,
        e.reset = function() {
            this._previousStateName = null,
            this._activeStateName = Vd,
            this._playing = !1,
            this._currTransitionTime = 1,
            this._totalTransitionTime = 1,
            this._isTransitioning = !1,
            this._timeInState = 0,
            this._timeInStateBefore = 0,
            this._animEvaluator.removeClips()
        }
        ,
        e.rebind = function() {
            this._animEvaluator.rebind()
        }
        ,
        e.update = function(t) {
            if (this._playing) {
                var e, i, n;
                this._timeInStateBefore = this._timeInState,
                this._timeInState += t;
                var s = this._findTransition(this._activeStateName);
                if (s && this.updateStateFromTransition(s),
                this._isTransitioning)
                    if (this._currTransitionTime += t,
                    this._currTransitionTime <= this._totalTransitionTime) {
                        for (var a = 0 !== this._totalTransitionTime ? this._currTransitionTime / this._totalTransitionTime : 1, r = 0; r < this._transitionPreviousStates.length; r++) {
                            e = this._findState(this._transitionPreviousStates[r].name);
                            for (var o = this._transitionPreviousStates[r].weight, h = 0; h < e.animations.length; h++)
                                i = e.animations[h],
                                (n = this._animEvaluator.findClip(i.name + ".previous." + r)) && (n.blendWeight = (1 - a) * i.normalizedWeight * o)
                        }
                        e = this.activeState;
                        for (var l = 0; l < e.animations.length; l++)
                            i = e.animations[l],
                            this._animEvaluator.findClip(i.name).blendWeight = a * i.normalizedWeight
                    } else {
                        this._isTransitioning = !1;
                        for (var c = this.activeStateAnimations.length, u = this._animEvaluator.clips.length, d = 0; d < u - c; d++)
                            this._animEvaluator.removeClip(0);
                        this._transitionPreviousStates = [],
                        e = this.activeState;
                        for (var f = 0; f < e.animations.length; f++)
                            i = e.animations[f],
                            (n = this._animEvaluator.findClip(i.name)) && (n.blendWeight = i.normalizedWeight)
                    }
                else if (this.activeState._blendTree.constructor !== sf) {
                    e = this.activeState;
                    for (var p = 0; p < e.animations.length; p++)
                        i = e.animations[p],
                        (n = this._animEvaluator.findClip(i.name)) && (n.blendWeight = i.normalizedWeight,
                        i.parent.syncAnimations && (n.speed = i.speed))
                }
                this._animEvaluator.update(t)
            }
        }
        ,
        e.findParameter = function(t) {
            return this._parameters[t]
        }
        ,
        G(t, [{
            key: "animEvaluator",
            get: function() {
                return this._animEvaluator
            }
        }, {
            key: "activeState",
            get: function() {
                return this._findState(this._activeStateName)
            },
            set: function(t) {
                this._activeStateName = t
            }
        }, {
            key: "activeStateName",
            get: function() {
                return this._activeStateName
            }
        }, {
            key: "activeStateAnimations",
            get: function() {
                return this.activeState.animations
            }
        }, {
            key: "previousState",
            get: function() {
                return this._findState(this._previousStateName)
            },
            set: function(t) {
                this._previousStateName = t
            }
        }, {
            key: "previousStateName",
            get: function() {
                return this._previousStateName
            }
        }, {
            key: "playable",
            get: function() {
                for (var t = !0, e = 0; e < this._stateNames.length; e++)
                    this._states[this._stateNames[e]].playable || (t = !1);
                return t
            }
        }, {
            key: "playing",
            get: function() {
                return this._playing
            },
            set: function(t) {
                this._playing = t
            }
        }, {
            key: "activeStateProgress",
            get: function() {
                return this._getActiveStateProgressForTime(this._timeInState)
            }
        }, {
            key: "activeStateDuration",
            get: function() {
                if (this.activeStateName === Vd || this.activeStateName === Gd)
                    return 0;
                for (var t = 0, e = 0; e < this.activeStateAnimations.length; e++) {
                    var i = this._animEvaluator.findClip(this.activeStateAnimations[e].name);
                    i && (t = Math.max(t, i.track.duration))
                }
                return t
            }
        }, {
            key: "activeStateCurrentTime",
            get: function() {
                return this._timeInState
            },
            set: function(t) {
                this._timeInStateBefore = t,
                this._timeInState = t;
                for (var e = 0; e < this.activeStateAnimations.length; e++) {
                    var i = this.animEvaluator.findClip(this.activeStateAnimations[e].name);
                    i && (i.time = t)
                }
            }
        }, {
            key: "transitioning",
            get: function() {
                return this._isTransitioning
            }
        }, {
            key: "transitionProgress",
            get: function() {
                return this._currTransitionTime / this._totalTransitionTime
            }
        }, {
            key: "states",
            get: function() {
                return this._stateNames
            }
        }]),
        t
    }()
      , ff = new ut
      , pf = new lt
      , mf = new dt
      , _f = new at
      , gf = new yt
      , vf = function(t) {
        function e(e, i, n, s, a) {
            var r;
            return (r = t.call(this, i) || this).animComponent = e,
            r._mask = s,
            r.layerName = n,
            r.layerIndex = a,
            r
        }
        H(e, t),
        e._packFloat = function(t) {
            return t[0]
        }
        ,
        e._packBoolean = function(t) {
            return !!t[0]
        }
        ,
        e._packVec2 = function(t) {
            return ff.x = t[0],
            ff.y = t[1],
            ff
        }
        ,
        e._packVec3 = function(t) {
            return pf.x = t[0],
            pf.y = t[1],
            pf.z = t[2],
            pf
        }
        ,
        e._packVec4 = function(t) {
            return mf.x = t[0],
            mf.y = t[1],
            mf.z = t[2],
            mf.w = t[3],
            mf
        }
        ,
        e._packColor = function(t) {
            return _f.r = t[0],
            _f.g = t[1],
            _f.b = t[2],
            _f.a = t[3],
            _f
        }
        ,
        e._packQuat = function(t) {
            return gf.x = t[0],
            gf.y = t[1],
            gf.z = t[2],
            gf.w = t[3],
            gf
        }
        ;
        var i = e.prototype;
        return i.resolve = function(t) {
            var e, i, n, s = Yd.encode(t.entityPath, t.component, t.propertyPath), a = this.targetCache[s];
            if (a)
                return a;
            switch (t.component) {
            case "entity":
                e = this._getEntityFromHierarchy(t.entityPath),
                n = Yd.encode(e.path, "entity", t.propertyPath),
                i = e;
                break;
            case "graph":
                if (!(i = this.findNode(t)))
                    return null;
                n = Yd.encode(i.path, "graph", t.propertyPath);
                break;
            default:
                if (!(i = (e = this._getEntityFromHierarchy(t.entityPath)).findComponent(t.component)))
                    return null;
                n = Yd.encode(e.path, t.component, t.propertyPath)
            }
            return a = this._createAnimTargetForProperty(i, t.propertyPath, n),
            this.targetCache[s] = a,
            a
        }
        ,
        i.update = function(t) {
            var e = this.activeNodes;
            if (e)
                for (var i = 0; i < e.length; i++)
                    e[i]._dirtifyLocal()
        }
        ,
        i._getEntityFromHierarchy = function(t) {
            if (!this.animComponent.entity.name === t[0])
                return null;
            var e = this.animComponent.entity;
            return 1 === t.length ? e : e._parent.findByPath(t)
        }
        ,
        i._resolvePath = function(t, e, i) {
            for (var n = e.length - (i ? 0 : 1), s = 0; s < n; s++)
                t = t[e[s]];
            return t
        }
        ,
        i._setter = function(t, e, i) {
            var n = this._resolvePath(t, e)
              , s = e[e.length - 1]
              , a = "set" + s.substring(0, 1).toUpperCase() + s.substring(1);
            if (n[a]) {
                var r = n[a].bind(n);
                return function(t) {
                    r(i(t))
                }
            }
            var o = n[s];
            if ("object" == typeof o && o.hasOwnProperty("copy"))
                return function(t) {
                    o.copy(i(t))
                }
                ;
            if (-1 !== [ut, lt, dt, at, yt].indexOf(n.constructor) && e.length > 1) {
                var h = e.length > 2 ? this._resolvePath(t, e.slice(0, -1)) : t
                  , l = e[e.length - 2];
                return function(t) {
                    n[s] = i(t),
                    h[l] = n
                }
            }
            return function(t) {
                n[s] = i(t)
            }
        }
        ,
        i._createAnimTargetForProperty = function(t, i, n) {
            if (this.handlers && "weights" === i[0])
                return this.handlers.weights(t);
            if (this.handlers && "material" === i[0] && 2 === i.length) {
                var s = i[1];
                if (s.indexOf("Map") === s.length - 3)
                    return this.handlers.materialTexture(t, s)
            }
            var a, r, o, h = this._resolvePath(t, i, !0);
            if (void 0 === h)
                return null;
            if ("number" == typeof h)
                a = this._setter(t, i, e._packFloat),
                r = "vector",
                o = 1;
            else if ("boolean" == typeof h)
                a = this._setter(t, i, e._packBoolean),
                r = "vector",
                o = 1;
            else if ("object" == typeof h)
                switch (h.constructor) {
                case ut:
                    a = this._setter(t, i, e._packVec2),
                    r = "vector",
                    o = 2;
                    break;
                case lt:
                    a = this._setter(t, i, e._packVec3),
                    r = "vector",
                    o = 3;
                    break;
                case dt:
                    a = this._setter(t, i, e._packVec4),
                    r = "vector",
                    o = 4;
                    break;
                case at:
                    a = this._setter(t, i, e._packColor),
                    r = "vector",
                    o = 4;
                    break;
                case yt:
                    a = this._setter(t, i, e._packQuat),
                    r = "quaternion",
                    o = 4;
                    break;
                default:
                    return null
                }
            return -1 !== i.indexOf("material") ? new Kd((function(e) {
                a(e),
                t.material.update()
            }
            ),r,o,n) : new Kd(a,r,o,n)
        }
        ,
        i.rebind = function() {
            this.targetCache = {},
            this.animComponent.rootBone ? this.graph = this.animComponent.rootBone : this.graph = this.animComponent.entity;
            var t = {};
            !function e(i) {
                t[i.name] = i;
                for (var n = 0; n < i.children.length; ++n)
                    e(i.children[n])
            }(this.graph),
            this.nodes = t
        }
        ,
        e
    }(Zd)
      , yf = function() {
        function t(t, e, i, n, s) {
            void 0 === n && (n = 1),
            void 0 === s && (s = Xd),
            this._name = t,
            this._controller = e,
            this._component = i,
            this._weight = n,
            this._blendType = s,
            this._mask = null
        }
        var e = t.prototype;
        return e.play = function(t) {
            this._controller.play(t)
        }
        ,
        e.pause = function() {
            this._controller.pause()
        }
        ,
        e.reset = function() {
            this._controller.reset()
        }
        ,
        e.rebind = function() {
            this._controller.rebind()
        }
        ,
        e.update = function(t) {
            this._controller.update(t)
        }
        ,
        e.assignMask = function(t) {
            this._controller.assignMask(t) && this._component.rebind(),
            this._mask = t
        }
        ,
        e.assignAnimation = function(t, e, i, n) {
            e.constructor === Oh && (this._controller.assignAnimation(t, e, i, n),
            0 === this._controller._transitions.length && this._controller._transitions.push(new uf({
                from: "START",
                to: t
            })),
            this._component.activate && this._component.playable && (this._component.playing = !0))
        }
        ,
        e.removeNodeAnimations = function(t) {
            this._controller.removeNodeAnimations(t) && (this._component.playing = !1)
        }
        ,
        e.transition = function(t, e, i) {
            void 0 === e && (e = 0),
            void 0 === i && (i = null),
            this._controller.updateStateFromTransition(new uf({
                from: this._controller.activeStateName,
                to: t,
                time: e,
                transitionOffset: i
            }))
        }
        ,
        G(t, [{
            key: "mask",
            get: function() {
                return this._mask
            }
        }, {
            key: "name",
            get: function() {
                return this._name
            }
        }, {
            key: "playing",
            get: function() {
                return this._controller.playing
            },
            set: function(t) {
                this._controller.playing = t
            }
        }, {
            key: "playable",
            get: function() {
                return this._controller.playable
            }
        }, {
            key: "activeState",
            get: function() {
                return this._controller.activeStateName
            }
        }, {
            key: "previousState",
            get: function() {
                return this._controller.previousStateName
            }
        }, {
            key: "activeStateProgress",
            get: function() {
                return this._controller.activeStateProgress
            }
        }, {
            key: "activeStateDuration",
            get: function() {
                return this._controller.activeStateDuration
            }
        }, {
            key: "activeStateCurrentTime",
            get: function() {
                return this._controller.activeStateCurrentTime
            },
            set: function(t) {
                this._controller.activeStateCurrentTime = t
            }
        }, {
            key: "transitioning",
            get: function() {
                return this._controller.transitioning
            }
        }, {
            key: "transitionProgress",
            get: function() {
                return this.transitioning ? this._controller.transitionProgress : null
            }
        }, {
            key: "states",
            get: function() {
                return this._controller.states
            }
        }, {
            key: "weight",
            get: function() {
                return this._weight
            },
            set: function(t) {
                this._weight = t,
                this._component.dirtifyTargets()
            }
        }, {
            key: "blendType",
            get: function() {
                return this._blendType
            },
            set: function(t) {
                t !== this._blendType && (this._blendType = t,
                this._component.rebind())
            }
        }]),
        t
    }()
      , xf = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._stateGraphAsset = null,
            n._animationAssets = {},
            n._speed = 1,
            n._activate = !0,
            n._playing = !1,
            n._rootBone = null,
            n._stateGraph = null,
            n._layers = [],
            n._layerIndices = {},
            n._parameters = {},
            n._targets = {},
            n._consumedTriggers = new Set,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._onStateGraphAssetChangeEvent = function(t) {
            var e = this.animationAssets
              , i = this.layers.map((function(t) {
                return t.mask
            }
            ));
            this.removeStateGraph(),
            this._stateGraph = new Il(t._data),
            this.loadStateGraph(this._stateGraph),
            this.animationAssets = e,
            this.loadAnimationAssets(),
            this.layers.forEach((function(t, e) {
                return t.assignMask(i[e])
            }
            )),
            this.rebind()
        }
        ,
        i.dirtifyTargets = function() {
            for (var t = Object.values(this._targets), e = 0; e < t.length; e++)
                t[e].dirty = !0
        }
        ,
        i._addLayer = function(t) {
            var e, i = t.name, n = t.states, s = t.transitions, a = t.weight, r = t.mask, o = t.blendType;
            e = this.rootBone ? this.rootBone : this.entity;
            var h = this._layers.length
              , l = new vf(this,e,i,r,h)
              , c = new qd(l)
              , u = new df(c,n,s,this._parameters,this._activate,this,this._consumedTriggers);
            return this._layers.push(new yf(i,u,this,a,o)),
            this._layerIndices[i] = h,
            this._layers[h]
        }
        ,
        i.addLayer = function(t, e, i, n) {
            var s = this.findAnimationLayer(t);
            if (s)
                return s;
            return this._addLayer({
                name: t,
                states: [{
                    name: "START",
                    speed: 1
                }],
                transitions: [],
                weight: e,
                mask: i,
                blendType: n
            })
        }
        ,
        i.loadStateGraph = function(t) {
            this._stateGraph = t,
            this._parameters = {};
            for (var e = Object.keys(t.parameters), i = 0; i < e.length; i++) {
                var n = e[i];
                this._parameters[n] = {
                    type: t.parameters[n].type,
                    value: t.parameters[n].value
                }
            }
            this._layers = [];
            for (var s = 0; s < t.layers.length; s++) {
                var a = t.layers[s];
                this._addLayer.bind(this)(W({}, a))
            }
            this.setupAnimationAssets()
        }
        ,
        i.setupAnimationAssets = function() {
            for (var t = 0; t < this._layers.length; t++)
                for (var e = this._layers[t], i = e.name, n = 0; n < e.states.length; n++) {
                    var s = e.states[n];
                    if (-1 === Hd.indexOf(s)) {
                        var a = i + ":" + s;
                        this._animationAssets[a] || (this._animationAssets[a] = {
                            asset: null
                        })
                    }
                }
            this.loadAnimationAssets()
        }
        ,
        i.loadAnimationAssets = function() {
            for (var t = 0; t < this._layers.length; t++)
                for (var e = this._layers[t], i = 0; i < e.states.length; i++) {
                    var n = e.states[i];
                    if (-1 === Hd.indexOf(n)) {
                        var s = this._animationAssets[e.name + ":" + n];
                        if (s && s.asset) {
                            var a = s.asset
                              , r = this.system.app.assets.get(a);
                            r && (r.resource ? this.onAnimationAssetLoaded(e.name, n, r) : (r.once("load", function(t, e) {
                                return function(i) {
                                    this.onAnimationAssetLoaded(t, e, i)
                                }
                                .bind(this)
                            }
                            .bind(this)(e.name, n)),
                            this.system.app.assets.load(r)))
                        } else
                            this.removeNodeAnimations(n, e.name)
                    }
                }
        }
        ,
        i.onAnimationAssetLoaded = function(t, e, i) {
            var n = i.resource;
            i.data.events && (n.events = new kh(Object.values(i.data.events))),
            this.findAnimationLayer(t).assignAnimation(e, i.resource)
        }
        ,
        i.removeStateGraph = function() {
            this._stateGraph = null,
            this._stateGraphAsset = null,
            this._animationAssets = {},
            this._layers = [],
            this._layerIndices = {},
            this._parameters = {},
            this._playing = !1
        }
        ,
        i.resetStateGraph = function() {
            if (this.stateGraphAsset) {
                var t = this.system.app.assets.get(this.stateGraphAsset).resource;
                this.loadStateGraph(t)
            } else
                this.removeStateGraph()
        }
        ,
        i.reset = function() {
            this._parameters = Object.assign({}, this._stateGraph.parameters);
            for (var t = 0; t < this._layers.length; t++) {
                var e = this._layers[t].playing;
                this._layers[t].reset(),
                this._layers[t].playing = e
            }
        }
        ,
        i.rebind = function() {
            this._targets = {};
            for (var t = 0; t < this._layers.length; t++)
                this._layers[t].rebind()
        }
        ,
        i.findAnimationLayer = function(t) {
            var e = this._layerIndices[t];
            return this._layers[e] || null
        }
        ,
        i.addAnimationState = function(t, e, i, n, s) {
            void 0 === i && (i = 1),
            void 0 === n && (n = !0),
            void 0 === s && (s = "Base"),
            this._stateGraph || this.loadStateGraph(new Il({
                layers: [{
                    name: s,
                    states: [{
                        name: "START",
                        speed: 1
                    }, {
                        name: t,
                        speed: i,
                        loop: n,
                        defaultState: !0
                    }],
                    transitions: [{
                        from: "START",
                        to: t
                    }]
                }],
                parameters: {}
            }));
            var a, r = this.findAnimationLayer(s);
            r ? r.assignAnimation(t, e, i, n) : null == (a = this.addLayer(s)) || a.assignAnimation(t, e, i, n)
        }
        ,
        i.assignAnimation = function(t, e, i, n, s) {
            if (void 0 === n && (n = 1),
            void 0 === s && (s = !0),
            !this._stateGraph)
                return this.loadStateGraph(new Il({
                    layers: [{
                        name: "Base",
                        states: [{
                            name: "START",
                            speed: 1
                        }, {
                            name: t,
                            speed: n,
                            loop: s,
                            defaultState: !0
                        }],
                        transitions: [{
                            from: "START",
                            to: t
                        }]
                    }],
                    parameters: {}
                })),
                void this.baseLayer.assignAnimation(t, e);
            var a = i ? this.findAnimationLayer(i) : this.baseLayer;
            a && a.assignAnimation(t, e, n, s)
        }
        ,
        i.removeNodeAnimations = function(t, e) {
            var i = e ? this.findAnimationLayer(e) : this.baseLayer;
            i && i.removeNodeAnimations(t)
        }
        ,
        i.getParameterValue = function(t, e) {
            var i = this._parameters[t];
            if (i && i.type === e)
                return i.value
        }
        ,
        i.setParameterValue = function(t, e, i) {
            var n = this._parameters[t];
            n && n.type === e && (n.value = i)
        }
        ,
        i.getFloat = function(t) {
            return this.getParameterValue(t, Od)
        }
        ,
        i.setFloat = function(t, e) {
            this.setParameterValue(t, Od, e)
        }
        ,
        i.getInteger = function(t) {
            return this.getParameterValue(t, kd)
        }
        ,
        i.setInteger = function(t, e) {
            "number" == typeof e && e % 1 == 0 && this.setParameterValue(t, kd, e)
        }
        ,
        i.getBoolean = function(t) {
            return this.getParameterValue(t, Fd)
        }
        ,
        i.setBoolean = function(t, e) {
            this.setParameterValue(t, Fd, !!e)
        }
        ,
        i.getTrigger = function(t) {
            return this.getParameterValue(t, Bd)
        }
        ,
        i.setTrigger = function(t, e) {
            void 0 === e && (e = !1),
            this.setParameterValue(t, Bd, !0),
            e && this._consumedTriggers.add(t)
        }
        ,
        i.resetTrigger = function(t) {
            this.setParameterValue(t, Bd, !1)
        }
        ,
        i.onBeforeRemove = function() {
            Number.isFinite(this._stateGraphAsset) && this.system.app.assets.get(this._stateGraphAsset).off("change", this._onStateGraphAssetChangeEvent, this)
        }
        ,
        i.update = function(t) {
            for (var e = this, i = 0; i < this.layers.length; i++)
                this.layers[i].update(t * this.speed);
            this._consumedTriggers.forEach((function(t) {
                e.parameters[t].value = !1
            }
            )),
            this._consumedTriggers.clear()
        }
        ,
        i.resolveDuplicatedEntityReferenceProperties = function(t, e) {
            t.rootBone && e[t.rootBone.getGuid()] ? this.rootBone = e[t.rootBone.getGuid()] : this.rebind()
        }
        ,
        G(e, [{
            key: "stateGraphAsset",
            get: function() {
                return this._stateGraphAsset
            },
            set: function(t) {
                var e = this;
                if (null !== t) {
                    var i, n;
                    if (this._stateGraphAsset)
                        this.system.app.assets.get(this._stateGraphAsset).off("change", this._onStateGraphAssetChangeEvent, this);
                    t instanceof Kh ? (i = t.id,
                    (n = this.system.app.assets.get(i)) || (this.system.app.assets.add(t),
                    n = this.system.app.assets.get(i))) : (i = t,
                    n = this.system.app.assets.get(i)),
                    n && this._stateGraphAsset !== i && (n.resource ? (this._stateGraph = n.resource,
                    this.loadStateGraph(this._stateGraph),
                    n.on("change", this._onStateGraphAssetChangeEvent, this)) : (n.once("load", (function(t) {
                        e._stateGraph = t.resource,
                        e.loadStateGraph(e._stateGraph)
                    }
                    )),
                    n.on("change", this._onStateGraphAssetChangeEvent, this),
                    this.system.app.assets.load(n)),
                    this._stateGraphAsset = i)
                } else
                    this.removeStateGraph()
            }
        }, {
            key: "animationAssets",
            get: function() {
                return this._animationAssets
            },
            set: function(t) {
                this._animationAssets = t,
                this.loadAnimationAssets()
            }
        }, {
            key: "speed",
            get: function() {
                return this._speed
            },
            set: function(t) {
                this._speed = t
            }
        }, {
            key: "activate",
            get: function() {
                return this._activate
            },
            set: function(t) {
                this._activate = t
            }
        }, {
            key: "playing",
            get: function() {
                return this._playing
            },
            set: function(t) {
                this._playing = t
            }
        }, {
            key: "rootBone",
            get: function() {
                return this._rootBone
            },
            set: function(t) {
                if ("string" == typeof t) {
                    var e = this.entity.root.findByGuid(t);
                    this._rootBone = e
                } else
                    this._rootBone = t instanceof nv ? t : null;
                this.rebind()
            }
        }, {
            key: "stateGraph",
            get: function() {
                return this._stateGraph
            },
            set: function(t) {
                this._stateGraph = t
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                this._layers = t
            }
        }, {
            key: "layerIndicies",
            get: function() {
                return this._layerIndicies
            },
            set: function(t) {
                this._layerIndicies = t
            }
        }, {
            key: "parameters",
            get: function() {
                return this._parameters
            },
            set: function(t) {
                this._parameters = t
            }
        }, {
            key: "targets",
            get: function() {
                return this._targets
            },
            set: function(t) {
                this._targets = t
            }
        }, {
            key: "playable",
            get: function() {
                for (var t = 0; t < this._layers.length; t++)
                    if (!this._layers[t].playable)
                        return !1;
                return !0
            }
        }, {
            key: "baseLayer",
            get: function() {
                return this._layers.length > 0 ? this._layers[0] : null
            }
        }]),
        e
    }(gd)
      , bf = function() {
        this.enabled = !0
    }
      , Sf = ["enabled"]
      , Tf = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "anim",
            i.ComponentType = xf,
            i.DataType = bf,
            i.schema = Sf,
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.app.systems.on("animationUpdate", i.onAnimationUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            t.prototype.initializeComponentData.call(this, e, i, Sf);
            var s = ["animationAssets", "stateGraph", "layers", "masks"];
            Object.keys(i).forEach((function(t) {
                s.includes(t) || (e[t] = i[t])
            }
            )),
            i.stateGraph && (e.stateGraph = i.stateGraph,
            e.loadStateGraph(e.stateGraph)),
            i.layers ? i.layers.forEach((function(t, i) {
                t._controller.states.forEach((function(n) {
                    t._controller._states[n]._animationList.forEach((function(t) {
                        e.layers[i].assignAnimation(t.name, t.animTrack)
                    }
                    ))
                }
                ))
            }
            )) : i.animationAssets && (e.animationAssets = Object.assign(e.animationAssets, i.animationAssets)),
            i.masks && Object.keys(i.masks).forEach((function(t) {
                if (e.layers[t]) {
                    var n = i.masks[t].mask
                      , s = {};
                    Object.keys(n).forEach((function(t) {
                        s[decodeURI(t)] = n[t]
                    }
                    )),
                    e.layers[t].assignMask(s)
                }
            }
            ))
        }
        ,
        i.onAnimationUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i].entity.anim;
                    n.data.enabled && n.entity.enabled && n.playing && n.update(t)
                }
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = {
                stateGraphAsset: t.anim.stateGraphAsset,
                animationAssets: t.anim.animationAssets,
                speed: t.anim.speed,
                activate: t.anim.activate,
                playing: t.anim.playing,
                rootBone: t.anim.rootBone,
                stateGraph: t.anim.stateGraph,
                layers: t.anim.layers,
                layerIndices: t.anim.layerIndices,
                parameters: t.anim.parameters
            };
            this.addComponent(e, i)
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.onBeforeRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("animationUpdate", this.onAnimationUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(xf.prototype, Sf);
    var wf = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.setCurrentListener = function() {
            if (this.enabled && this.entity.audiolistener && this.entity.enabled) {
                this.system.current = this.entity;
                var t = this.system.current.getPosition();
                this.system.manager.listener.setPosition(t)
            }
        }
        ,
        i.onEnable = function() {
            this.setCurrentListener()
        }
        ,
        i.onDisable = function() {
            this.system.current === this.entity && (this.system.current = null)
        }
        ,
        e
    }(gd)
      , Mf = function() {
        this.enabled = !0
    }
      , Af = ["enabled"]
      , Cf = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e) || this).id = "audiolistener",
            n.ComponentType = wf,
            n.DataType = Mf,
            n.schema = Af,
            n.manager = i,
            n.current = null,
            n.app.systems.on("update", n.onUpdate, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["enabled"],
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.onUpdate = function(t) {
            if (this.current) {
                var e = this.current.getPosition();
                this.manager.listener.setPosition(e);
                var i = this.current.getWorldTransform();
                this.manager.listener.setOrientation(i)
            }
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(wf.prototype, Af);
    var Ef = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this).on("set_assets", n.onSetAssets, j(n)),
            n.on("set_loop", n.onSetLoop, j(n)),
            n.on("set_volume", n.onSetVolume, j(n)),
            n.on("set_pitch", n.onSetPitch, j(n)),
            n.on("set_minDistance", n.onSetMinDistance, j(n)),
            n.on("set_maxDistance", n.onSetMaxDistance, j(n)),
            n.on("set_rollOffFactor", n.onSetRollOffFactor, j(n)),
            n.on("set_distanceModel", n.onSetDistanceModel, j(n)),
            n.on("set_3d", n.onSet3d, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.play = function(t) {
            if (this.enabled && this.entity.enabled) {
                var e;
                this.channel && this.stop();
                var i = this.data;
                if (i.sources[t])
                    if (i["3d"]) {
                        var n = this.entity.getPosition();
                        e = this.system.manager.playSound3d(i.sources[t], n, i),
                        i.currentSource = t,
                        i.channel = e
                    } else
                        e = this.system.manager.playSound(i.sources[t], i),
                        i.currentSource = t,
                        i.channel = e
            }
        }
        ,
        i.pause = function() {
            this.channel && this.channel.pause()
        }
        ,
        i.unpause = function() {
            this.channel && this.channel.paused && this.channel.unpause()
        }
        ,
        i.stop = function() {
            this.channel && (this.channel.stop(),
            this.channel = null)
        }
        ,
        i.onSetAssets = function(t, e, i) {
            var n = []
              , s = i.length;
            if (e && e.length)
                for (var a = 0; a < e.length; a++)
                    if (e[a]) {
                        var r = this.system.app.assets.get(e[a]);
                        r && (r.off("change", this.onAssetChanged, this),
                        r.off("remove", this.onAssetRemoved, this),
                        this.currentSource === r.name && this.stop())
                    }
            if (s)
                for (var o = 0; o < s; o++)
                    e.indexOf(i[o]) < 0 && (i[o]instanceof Kh ? n.push(i[o].id) : n.push(i[o]));
            !this.system._inTools && n.length && this.loadAudioSourceAssets(n)
        }
        ,
        i.onAssetChanged = function(t, e, i, n) {
            "resource" === e && (this.data.sources && (this.data.sources[t.name] = i,
            this.data.currentSource === t.name && this.channel && (this.channel.paused ? (this.play(t.name),
            this.pause()) : this.play(t.name))))
        }
        ,
        i.onAssetRemoved = function(t) {
            t.off("remove", this.onAssetRemoved, this),
            this.data.sources[t.name] && (delete this.data.sources[t.name],
            this.data.currentSource === t.name && (this.stop(),
            this.data.currentSource = null))
        }
        ,
        i.onSetLoop = function(t, e, i) {
            e !== i && this.channel && this.channel.setLoop(i)
        }
        ,
        i.onSetVolume = function(t, e, i) {
            e !== i && this.channel && this.channel.setVolume(i)
        }
        ,
        i.onSetPitch = function(t, e, i) {
            e !== i && this.channel && this.channel.setPitch(i)
        }
        ,
        i.onSetMaxDistance = function(t, e, i) {
            e !== i && this.channel instanceof Sh && this.channel.setMaxDistance(i)
        }
        ,
        i.onSetMinDistance = function(t, e, i) {
            e !== i && this.channel instanceof Sh && this.channel.setMinDistance(i)
        }
        ,
        i.onSetRollOffFactor = function(t, e, i) {
            e !== i && this.channel instanceof Sh && this.channel.setRollOffFactor(i)
        }
        ,
        i.onSetDistanceModel = function(t, e, i) {
            e !== i && this.channel instanceof Sh && this.channel.setDistanceModel(i)
        }
        ,
        i.onSet3d = function(t, e, i) {
            if (e !== i && this.system.initialized && this.currentSource) {
                var n = !1
                  , s = !1;
                this.channel && (n = this.channel.paused,
                s = this.channel.suspended),
                this.play(this.currentSource),
                this.channel && (this.channel.paused = n,
                this.channel.suspended = s)
            }
        }
        ,
        i.onEnable = function() {
            var t = this.data.assets;
            if (t)
                for (var e = this.system.app.assets, i = 0, n = t.length; i < n; i++) {
                    var s = t[i];
                    s instanceof Kh || (s = e.get(s)),
                    s && !s.resource && e.load(s)
                }
            this.system.initialized && (this.data.activate && !this.channel ? this.play(this.currentSource) : this.unpause())
        }
        ,
        i.onDisable = function() {
            this.pause()
        }
        ,
        i.loadAudioSourceAssets = function(t) {
            var e = this
              , i = t.map((function(t) {
                return e.system.app.assets.get(t)
            }
            ))
              , n = {}
              , s = null
              , a = i.length
              , r = function(t) {
                a--
            }
              , o = function() {
                e.data.sources = n,
                e.data.currentSource = s,
                e.enabled && e.activate && s && e.onEnable()
            };
            i.forEach((function(i, h) {
                i ? (s = s || i.name,
                i.off("change", e.onAssetChanged, e),
                i.on("change", e.onAssetChanged, e),
                i.off("remove", e.onAssetRemoved, e),
                i.on("remove", e.onAssetRemoved, e),
                i.off("error", r, e),
                i.on("error", r, e),
                i.ready((function(t) {
                    n[t.name] = t.resource,
                    0 === --a && o()
                }
                )),
                !i.resource && e.enabled && e.entity.enabled && e.system.app.assets.load(i)) : (0 === --a && o(),
                e.system.app.assets.on("add:" + t[h], (function(t) {
                    t.ready((function(t) {
                        e.data.sources[t.name] = t.resource
                    }
                    )),
                    t.resource || e.system.app.assets.load(t)
                }
                )))
            }
            ))
        }
        ,
        e
    }(gd)
      , Pf = function() {
        this.enabled = !0,
        this.assets = [],
        this.activate = !0,
        this.volume = 1,
        this.pitch = 1,
        this.loop = !1,
        this["3d"] = !0,
        this.minDistance = 1,
        this.maxDistance = 1e4,
        this.rollOffFactor = 1,
        this.distanceModel = xh,
        this.paused = !0,
        this.sources = {},
        this.currentSource = null,
        this.channel = null
    }
      , Rf = ["enabled", "assets", "volume", "pitch", "loop", "activate", "3d", "minDistance", "maxDistance", "rollOffFactor", "distanceModel", "sources", "currentSource", "channel"]
      , If = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e) || this).id = "audiosource",
            n.ComponentType = Ef,
            n.DataType = Pf,
            n.schema = Rf,
            n.manager = i,
            n.initialized = !1,
            n.app.systems.on("initialize", n.onInitialize, j(n)),
            n.app.systems.on("update", n.onUpdate, j(n)),
            n.on("remove", n.onRemove, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["activate", "volume", "pitch", "loop", "3d", "minDistance", "maxDistance", "rollOffFactor", "distanceModel", "enabled", "assets"],
            t.prototype.initializeComponentData.call(this, e, i, n),
            e.paused = !(e.enabled && e.activate)
        }
        ,
        i.onInitialize = function(t) {
            t.audiosource && t.enabled && t.audiosource.enabled && t.audiosource.activate && t.audiosource.play(t.audiosource.currentSource);
            for (var e = t._children, i = 0, n = e.length; i < n; i++)
                e[i]instanceof nv && this.onInitialize(e[i]);
            this.initialized = !0
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i]
                      , s = n.entity
                      , a = n.data;
                    if (a.enabled && s.enabled && a.channel instanceof Sh) {
                        var r = s.getPosition();
                        a.channel.setPosition(r)
                    }
                }
        }
        ,
        i.onRemove = function(t, e) {
            e.channel && (e.channel.stop(),
            e.channel = null)
        }
        ,
        i.setVolume = function(t) {
            this.manager.setVolume(t)
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("initialize", this.onInitialize, this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Ef.prototype, Rf);
    var Lf = function(t) {
        function e(e, i, n) {
            var s;
            if (s = t.call(this) || this,
            !(e && e instanceof gd))
                throw new Error("The parentComponent argument is required and must be a Component");
            if (!i || "string" != typeof i)
                throw new Error("The propertyName argument is required and must be a string");
            if (n && "object" != typeof n)
                throw new Error("If provided, the eventConfig argument must be an object");
            return s._parentComponent = e,
            s._entityPropertyName = i,
            s._entity = null,
            s._app = e.system.app,
            s._configureEventListeners(n || {}, {
                "entity#destroy": s._onEntityDestroy
            }),
            s._toggleLifecycleListeners("on"),
            s
        }
        H(e, t);
        var i = e.prototype;
        return i._configureEventListeners = function(t, e) {
            var i = this._parseEventListenerConfig(t, "external", this._parentComponent)
              , n = this._parseEventListenerConfig(e, "internal", this);
            this._eventListenerConfigs = i.concat(n),
            this._listenerStatusFlags = {},
            this._gainListeners = {},
            this._loseListeners = {}
        }
        ,
        i._parseEventListenerConfig = function(t, e, i) {
            return Object.keys(t).map((function(n, s) {
                var a = n.split("#")
                  , r = a[0]
                  , o = a[1]
                  , h = t[n];
                if (2 !== a.length || "string" != typeof r || 0 === r.length || "string" != typeof o || 0 === o.length)
                    throw new Error("Invalid event listener description: `" + n + "`");
                if ("function" != typeof h)
                    throw new Error("Invalid or missing callback for event listener `" + n + "`");
                return {
                    id: e + "_" + s + "_" + n,
                    sourceName: r,
                    eventName: o,
                    callback: h,
                    scope: i
                }
            }
            ), this)
        }
        ,
        i._toggleLifecycleListeners = function(t) {
            this._parentComponent[t]("set_" + this._entityPropertyName, this._onSetEntity, this),
            this._parentComponent.system[t]("beforeremove", this._onParentComponentRemove, this),
            this._app.systems[t]("postPostInitialize", this._updateEntityReference, this),
            this._app[t]("tools:sceneloaded", this._onSceneLoaded, this);
            for (var e = [], i = 0; i < this._eventListenerConfigs.length; ++i) {
                var n = this._eventListenerConfigs[i]
                  , s = this._app.systems[n.sourceName];
                s && (-1 === e.indexOf(s) && e.push(s),
                s && "gain" === n.eventName && (this._gainListeners[n.sourceName] = n),
                s && "lose" === n.eventName && (this._loseListeners[n.sourceName] = n))
            }
            for (var a = 0; a < e.length; ++a)
                e[a][t]("add", this._onComponentAdd, this),
                e[a][t]("beforeremove", this._onComponentRemove, this)
        }
        ,
        i._onSetEntity = function(t, e, i) {
            if (i instanceof nv)
                this._updateEntityReference();
            else {
                if (null != i && "string" != typeof i)
                    return void console.warn("Entity field `" + this._entityPropertyName + "` was set to unexpected type '" + typeof i + "'");
                e !== i && this._updateEntityReference()
            }
        }
        ,
        i.onParentComponentEnable = function() {
            this._entity || this._updateEntityReference()
        }
        ,
        i._onSceneLoaded = function() {
            this._updateEntityReference()
        }
        ,
        i._updateEntityReference = function() {
            var t, e = this._parentComponent.data[this._entityPropertyName];
            if (e instanceof nv)
                e = (t = e).getGuid(),
                this._parentComponent.data[this._entityPropertyName] = e;
            else {
                var i = this._parentComponent.system.app.root;
                t = this._parentComponent.entity.isDescendantOf(i) && e ? i.findByGuid(e) : null
            }
            this._entity !== t && (this._entity && this._onBeforeEntityChange(),
            this._entity = t,
            this._entity && this._onAfterEntityChange(),
            this.fire("set:entity", this._entity))
        }
        ,
        i._onBeforeEntityChange = function() {
            this._toggleEntityListeners("off"),
            this._callAllGainOrLoseListeners(this._loseListeners)
        }
        ,
        i._onAfterEntityChange = function() {
            this._toggleEntityListeners("on"),
            this._callAllGainOrLoseListeners(this._gainListeners)
        }
        ,
        i._onComponentAdd = function(t, e) {
            var i = e.system.id;
            t === this._entity && (this._callGainOrLoseListener(i, this._gainListeners),
            this._toggleComponentListeners("on", i))
        }
        ,
        i._onComponentRemove = function(t, e) {
            var i = e.system.id;
            t === this._entity && (this._callGainOrLoseListener(i, this._loseListeners),
            this._toggleComponentListeners("off", i, !0))
        }
        ,
        i._callAllGainOrLoseListeners = function(t) {
            for (var e in this._entity.c)
                this._callGainOrLoseListener(e, t)
        }
        ,
        i._callGainOrLoseListener = function(t, e) {
            if (this._entity.c.hasOwnProperty(t) && e[t]) {
                var i = e[t];
                i.callback.call(i.scope)
            }
        }
        ,
        i._toggleEntityListeners = function(t, e) {
            if (this._entity)
                for (var i = 0; i < this._eventListenerConfigs.length; ++i)
                    this._safeToggleListener(t, this._eventListenerConfigs[i], e)
        }
        ,
        i._toggleComponentListeners = function(t, e, i) {
            for (var n = 0; n < this._eventListenerConfigs.length; ++n) {
                var s = this._eventListenerConfigs[n];
                s.sourceName === e && this._safeToggleListener(t, s, i)
            }
        }
        ,
        i._safeToggleListener = function(t, e, i) {
            var n = "on" === t;
            if (!n || !this._listenerStatusFlags[e.id]) {
                var s = this._getEventSource(e.sourceName, i);
                s && (s[t](e.eventName, e.callback, e.scope),
                this._listenerStatusFlags[e.id] = n)
            }
        }
        ,
        i._getEventSource = function(t, e) {
            if ("entity" === t)
                return this._entity;
            var i = this._entity[t];
            return i || (e || console.warn("Entity has no component with name " + t),
            null)
        }
        ,
        i._onEntityDestroy = function(t) {
            this._entity === t && (this._toggleEntityListeners("off", !0),
            this._entity = null)
        }
        ,
        i._onParentComponentRemove = function(t, e) {
            e === this._parentComponent && (this._toggleLifecycleListeners("off"),
            this._toggleEntityListeners("off", !0))
        }
        ,
        i.hasComponent = function(t) {
            return !(!this._entity || !this._entity.c) && !!this._entity.c[t]
        }
        ,
        G(e, [{
            key: "entity",
            get: function() {
                return this._entity
            }
        }]),
        e
    }(u)
      , Df = "group"
      , kf = "image"
      , Of = "text"
      , Ff = "DEFAULT"
      , Bf = "HOVER"
      , Nf = "PRESSED"
      , Uf = "INACTIVE"
      , zf = {};
    zf[Ff] = "_defaultTint",
    zf[Bf] = "hoverTint",
    zf[Nf] = "pressedTint",
    zf[Uf] = "inactiveTint";
    var Vf = {};
    Vf[Ff] = "_defaultSpriteAsset",
    Vf[Bf] = "hoverSpriteAsset",
    Vf[Nf] = "pressedSpriteAsset",
    Vf[Uf] = "inactiveSpriteAsset";
    var Gf = {};
    Gf[Ff] = "_defaultSpriteFrame",
    Gf[Bf] = "hoverSpriteFrame",
    Gf[Nf] = "pressedSpriteFrame",
    Gf[Uf] = "inactiveSpriteFrame";
    var Wf = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._visualState = Ff,
            n._isHovering = !1,
            n._hoveringCounter = 0,
            n._isPressed = !1,
            n._defaultTint = new at(1,1,1,1),
            n._defaultSpriteAsset = null,
            n._defaultSpriteFrame = 0,
            n._imageReference = new Lf(j(n),"imageEntity",{
                "element#gain": n._onImageElementGain,
                "element#lose": n._onImageElementLose,
                "element#set:color": n._onSetColor,
                "element#set:opacity": n._onSetOpacity,
                "element#set:spriteAsset": n._onSetSpriteAsset,
                "element#set:spriteFrame": n._onSetSpriteFrame
            }),
            n._toggleLifecycleListeners("on", e),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._toggleLifecycleListeners = function(t, e) {
            this[t]("set_active", this._onSetActive, this),
            this[t]("set_transitionMode", this._onSetTransitionMode, this),
            this[t]("set_hoverTint", this._onSetTransitionValue, this),
            this[t]("set_pressedTint", this._onSetTransitionValue, this),
            this[t]("set_inactiveTint", this._onSetTransitionValue, this),
            this[t]("set_hoverSpriteAsset", this._onSetTransitionValue, this),
            this[t]("set_hoverSpriteFrame", this._onSetTransitionValue, this),
            this[t]("set_pressedSpriteAsset", this._onSetTransitionValue, this),
            this[t]("set_pressedSpriteFrame", this._onSetTransitionValue, this),
            this[t]("set_inactiveSpriteAsset", this._onSetTransitionValue, this),
            this[t]("set_inactiveSpriteFrame", this._onSetTransitionValue, this),
            e.app.systems.element[t]("add", this._onElementComponentAdd, this),
            e.app.systems.element[t]("beforeremove", this._onElementComponentRemove, this)
        }
        ,
        i._onSetActive = function(t, e, i) {
            e !== i && this._updateVisualState()
        }
        ,
        i._onSetTransitionMode = function(t, e, i) {
            e !== i && (this._cancelTween(),
            this._resetToDefaultVisualState(e),
            this._forceReapplyVisualState())
        }
        ,
        i._onSetTransitionValue = function(t, e, i) {
            e !== i && this._forceReapplyVisualState()
        }
        ,
        i._onElementComponentRemove = function(t) {
            this.entity === t && this._toggleHitElementListeners("off")
        }
        ,
        i._onElementComponentAdd = function(t) {
            this.entity === t && this._toggleHitElementListeners("on")
        }
        ,
        i._onImageElementLose = function() {
            this._cancelTween(),
            this._resetToDefaultVisualState(this.transitionMode)
        }
        ,
        i._onImageElementGain = function() {
            this._storeDefaultVisualState(),
            this._forceReapplyVisualState()
        }
        ,
        i._toggleHitElementListeners = function(t) {
            if (this.entity.element) {
                var e = "on" === t;
                if (e && this._hasHitElementListeners)
                    return;
                this.entity.element[t]("mouseenter", this._onMouseEnter, this),
                this.entity.element[t]("mouseleave", this._onMouseLeave, this),
                this.entity.element[t]("mousedown", this._onMouseDown, this),
                this.entity.element[t]("mouseup", this._onMouseUp, this),
                this.entity.element[t]("touchstart", this._onTouchStart, this),
                this.entity.element[t]("touchend", this._onTouchEnd, this),
                this.entity.element[t]("touchleave", this._onTouchLeave, this),
                this.entity.element[t]("touchcancel", this._onTouchCancel, this),
                this.entity.element[t]("selectstart", this._onSelectStart, this),
                this.entity.element[t]("selectend", this._onSelectEnd, this),
                this.entity.element[t]("selectenter", this._onSelectEnter, this),
                this.entity.element[t]("selectleave", this._onSelectLeave, this),
                this.entity.element[t]("click", this._onClick, this),
                this._hasHitElementListeners = e
            }
        }
        ,
        i._storeDefaultVisualState = function() {
            if (this._imageReference.hasComponent("element")) {
                var t = this._imageReference.entity.element;
                t.type !== Df && (this._storeDefaultColor(t.color),
                this._storeDefaultOpacity(t.opacity),
                this._storeDefaultSpriteAsset(t.spriteAsset),
                this._storeDefaultSpriteFrame(t.spriteFrame))
            }
        }
        ,
        i._storeDefaultColor = function(t) {
            this._defaultTint.r = t.r,
            this._defaultTint.g = t.g,
            this._defaultTint.b = t.b
        }
        ,
        i._storeDefaultOpacity = function(t) {
            this._defaultTint.a = t
        }
        ,
        i._storeDefaultSpriteAsset = function(t) {
            this._defaultSpriteAsset = t
        }
        ,
        i._storeDefaultSpriteFrame = function(t) {
            this._defaultSpriteFrame = t
        }
        ,
        i._onSetColor = function(t) {
            this._isApplyingTint || (this._storeDefaultColor(t),
            this._forceReapplyVisualState())
        }
        ,
        i._onSetOpacity = function(t) {
            this._isApplyingTint || (this._storeDefaultOpacity(t),
            this._forceReapplyVisualState())
        }
        ,
        i._onSetSpriteAsset = function(t) {
            this._isApplyingSprite || (this._storeDefaultSpriteAsset(t),
            this._forceReapplyVisualState())
        }
        ,
        i._onSetSpriteFrame = function(t) {
            this._isApplyingSprite || (this._storeDefaultSpriteFrame(t),
            this._forceReapplyVisualState())
        }
        ,
        i._onMouseEnter = function(t) {
            this._isHovering = !0,
            this._updateVisualState(),
            this._fireIfActive("mouseenter", t)
        }
        ,
        i._onMouseLeave = function(t) {
            this._isHovering = !1,
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("mouseleave", t)
        }
        ,
        i._onMouseDown = function(t) {
            this._isPressed = !0,
            this._updateVisualState(),
            this._fireIfActive("mousedown", t)
        }
        ,
        i._onMouseUp = function(t) {
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("mouseup", t)
        }
        ,
        i._onTouchStart = function(t) {
            this._isPressed = !0,
            this._updateVisualState(),
            this._fireIfActive("touchstart", t)
        }
        ,
        i._onTouchEnd = function(t) {
            t.event.preventDefault(),
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("touchend", t)
        }
        ,
        i._onTouchLeave = function(t) {
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("touchleave", t)
        }
        ,
        i._onTouchCancel = function(t) {
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("touchcancel", t)
        }
        ,
        i._onSelectStart = function(t) {
            this._isPressed = !0,
            this._updateVisualState(),
            this._fireIfActive("selectstart", t)
        }
        ,
        i._onSelectEnd = function(t) {
            this._isPressed = !1,
            this._updateVisualState(),
            this._fireIfActive("selectend", t)
        }
        ,
        i._onSelectEnter = function(t) {
            this._hoveringCounter++,
            1 === this._hoveringCounter && (this._isHovering = !0,
            this._updateVisualState()),
            this._fireIfActive("selectenter", t)
        }
        ,
        i._onSelectLeave = function(t) {
            this._hoveringCounter--,
            0 === this._hoveringCounter && (this._isHovering = !1,
            this._isPressed = !1,
            this._updateVisualState()),
            this._fireIfActive("selectleave", t)
        }
        ,
        i._onClick = function(t) {
            this._fireIfActive("click", t)
        }
        ,
        i._fireIfActive = function(t, e) {
            this.data.active && this.fire(t, e)
        }
        ,
        i._updateVisualState = function(t) {
            var e = this._visualState
              , i = this._determineVisualState();
            if ((e !== i || t) && this.enabled)
                switch (this._visualState = i,
                e === Bf && this._fireIfActive("hoverend"),
                e === Nf && this._fireIfActive("pressedend"),
                i === Bf && this._fireIfActive("hoverstart"),
                i === Nf && this._fireIfActive("pressedstart"),
                this.transitionMode) {
                case 0:
                    var n = this[zf[this._visualState]];
                    this._applyTint(n);
                    break;
                case 1:
                    var s = Vf[this._visualState]
                      , a = Gf[this._visualState]
                      , r = this[s]
                      , o = this[a];
                    this._applySprite(r, o)
                }
        }
        ,
        i._forceReapplyVisualState = function() {
            this._updateVisualState(!0)
        }
        ,
        i._resetToDefaultVisualState = function(t) {
            if (this._imageReference.hasComponent("element"))
                switch (t) {
                case 0:
                    this._cancelTween(),
                    this._applyTintImmediately(this._defaultTint);
                    break;
                case 1:
                    this._applySprite(this._defaultSpriteAsset, this._defaultSpriteFrame)
                }
        }
        ,
        i._determineVisualState = function() {
            return this.active ? this._isPressed ? Nf : this._isHovering ? Bf : Ff : Uf
        }
        ,
        i._applySprite = function(t, e) {
            e = e || 0,
            this._imageReference.hasComponent("element") && (this._isApplyingSprite = !0,
            this._imageReference.entity.element.spriteAsset !== t && (this._imageReference.entity.element.spriteAsset = t),
            this._imageReference.entity.element.spriteFrame !== e && (this._imageReference.entity.element.spriteFrame = e),
            this._isApplyingSprite = !1)
        }
        ,
        i._applyTint = function(t) {
            this._cancelTween(),
            0 === this.fadeDuration ? this._applyTintImmediately(t) : this._applyTintWithTween(t)
        }
        ,
        i._applyTintImmediately = function(t) {
            if (t && this._imageReference.hasComponent("element")) {
                var e = Hf(t);
                this._isApplyingTint = !0,
                e.equals(this._imageReference.entity.element.color) || (this._imageReference.entity.element.color = e),
                this._imageReference.entity.element.opacity != t.a && (this._imageReference.entity.element.opacity = t.a),
                this._isApplyingTint = !1
            }
        }
        ,
        i._applyTintWithTween = function(t) {
            if (t && this._imageReference.hasComponent("element")) {
                var e = Hf(t)
                  , i = this._imageReference.entity.element.color
                  , n = this._imageReference.entity.element.opacity;
                e.equals(i) && t.a == n || (this._tweenInfo = {
                    startTime: Q(),
                    from: new at(i.r,i.g,i.b,n),
                    to: t.clone(),
                    lerpColor: new at
                })
            }
        }
        ,
        i._updateTintTween = function() {
            var t = Q() - this._tweenInfo.startTime
              , e = 0 === this.fadeDuration ? 1 : t / this.fadeDuration;
            if (e = it.clamp(e, 0, 1),
            Math.abs(e - 1) > 1e-5) {
                var i = this._tweenInfo.lerpColor;
                i.lerp(this._tweenInfo.from, this._tweenInfo.to, e),
                this._applyTintImmediately(new at(i.r,i.g,i.b,i.a))
            } else
                this._applyTintImmediately(this._tweenInfo.to),
                this._cancelTween()
        }
        ,
        i._cancelTween = function() {
            delete this._tweenInfo
        }
        ,
        i.onUpdate = function() {
            this._tweenInfo && this._updateTintTween()
        }
        ,
        i.onEnable = function() {
            this._isHovering = !1,
            this._hoveringCounter = 0,
            this._isPressed = !1,
            this._imageReference.onParentComponentEnable(),
            this._toggleHitElementListeners("on"),
            this._forceReapplyVisualState()
        }
        ,
        i.onDisable = function() {
            this._toggleHitElementListeners("off"),
            this._resetToDefaultVisualState(this.transitionMode)
        }
        ,
        i.onRemove = function() {
            this._toggleLifecycleListeners("off", this.system),
            this.onDisable()
        }
        ,
        e
    }(gd);
    function Hf(t) {
        return new at(t.r,t.g,t.b)
    }
    var Xf, jf = function() {
        this.enabled = !0,
        this.active = !0,
        this.imageEntity = null,
        this.hitPadding = new dt,
        this.transitionMode = 0,
        this.hoverTint = new at(.75,.75,.75),
        this.pressedTint = new at(.5,.5,.5),
        this.inactiveTint = new at(.25,.25,.25),
        this.fadeDuration = 0,
        this.hoverSpriteAsset = null,
        this.hoverSpriteFrame = 0,
        this.pressedSpriteAsset = null,
        this.pressedSpriteFrame = 0,
        this.inactiveSpriteAsset = null,
        this.inactiveSpriteFrame = 0
    }, qf = ["enabled", "active", {
        name: "imageEntity",
        type: "entity"
    }, {
        name: "hitPadding",
        type: "vec4"
    }, "transitionMode", {
        name: "hoverTint",
        type: "rgba"
    }, {
        name: "pressedTint",
        type: "rgba"
    }, {
        name: "inactiveTint",
        type: "rgba"
    }, "fadeDuration", "hoverSpriteAsset", "hoverSpriteFrame", "pressedSpriteAsset", "pressedSpriteFrame", "inactiveSpriteAsset", "inactiveSpriteFrame"], Yf = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "button",
            i.ComponentType = Wf,
            i.DataType = jf,
            i.schema = qf,
            i.on("beforeremove", i._onRemoveComponent, j(i)),
            i.app.systems.on("update", i.onUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            t.prototype.initializeComponentData.call(this, e, i, qf)
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e) {
                var n = e[i].entity
                  , s = n.button;
                s.enabled && n.enabled && s.onUpdate()
            }
        }
        ,
        i._onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Wf.prototype, qf);
    var Kf = function(t, e) {
        this.effect = t,
        this.inputTarget = e,
        this.outputTarget = null,
        this.name = t.constructor.name
    }
      , Zf = function() {
        function t(t, e) {
            var i = this;
            this.app = t,
            this.camera = e,
            this.destinationRenderTarget = null,
            this.effects = [],
            this.enabled = !1,
            this.depthTarget = null,
            this.renderTargetScale = 1,
            this.resizeTimeout = null,
            this.resizeLast = 0,
            this._resizeTimeoutCallback = function() {
                i.resizeRenderTargets()
            }
            ,
            e.on("set:rect", this.onCameraRectChanged, this)
        }
        var e = t.prototype;
        return e._allocateColorBuffer = function(t, e) {
            var i = this.camera.rect
              , n = Math.floor(i.z * this.app.graphicsDevice.width * this.renderTargetScale)
              , s = Math.floor(i.w * this.app.graphicsDevice.height * this.renderTargetScale)
              , a = new Mi(this.app.graphicsDevice,{
                format: t,
                width: n,
                height: s,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            return a.name = e,
            a
        }
        ,
        e._createOffscreenTarget = function(t, e) {
            var i = this.app.graphicsDevice
              , n = e ? i.getHdrFormat() : 7
              , s = this.camera.entity.name + "-posteffect-" + this.effects.length
              , a = this._allocateColorBuffer(n, s)
              , r = this.app.graphicsDevice.supportsStencil
              , o = t ? i.samples : 1;
            return new ms({
                colorBuffer: a,
                depth: t,
                stencil: r,
                samples: o
            })
        }
        ,
        e._resizeOffscreenTarget = function(t) {
            var e = t.colorBuffer.format
              , i = t.colorBuffer.name;
            t.destroyFrameBuffers(),
            t.destroyTextureBuffers(),
            t._colorBuffer = this._allocateColorBuffer(e, i)
        }
        ,
        e._destroyOffscreenTarget = function(t) {
            t.destroyTextureBuffers(),
            t.destroy()
        }
        ,
        e.setRenderTargetScale = function(t) {
            this.renderTargetScale = t,
            this.resizeRenderTargets()
        }
        ,
        e.addEffect = function(t) {
            var e = this.effects
              , i = 0 === e.length
              , n = this._createOffscreenTarget(i, t.hdr)
              , s = new Kf(t,n);
            e.push(s),
            this._sourceTarget = s.inputTarget,
            e.length > 1 && (e[e.length - 2].outputTarget = s.inputTarget),
            this._newPostEffect = t,
            t.needsDepthBuffer && this._requestDepthMap(),
            this.enable(),
            this._newPostEffect = void 0
        }
        ,
        e.removeEffect = function(t) {
            for (var e = -1, i = 0, n = this.effects.length; i < n; i++)
                if (this.effects[i].effect === t) {
                    e = i;
                    break
                }
            e >= 0 && (e > 0 ? this.effects[e - 1].outputTarget = e + 1 < this.effects.length ? this.effects[e + 1].inputTarget : null : this.effects.length > 1 && (this.effects[1].inputTarget._depth || (this._destroyOffscreenTarget(this.effects[1].inputTarget),
            this.effects[1].inputTarget = this._createOffscreenTarget(!0, this.effects[1].hdr),
            this._sourceTarget = this.effects[1].inputTarget),
            this.camera.renderTarget = this.effects[1].inputTarget),
            this._destroyOffscreenTarget(this.effects[e].inputTarget),
            this.effects.splice(e, 1)),
            this.enabled && t.needsDepthBuffer && this._releaseDepthMap(),
            0 === this.effects.length && this.disable()
        }
        ,
        e._requestDepthMaps = function() {
            for (var t = 0, e = this.effects.length; t < e; t++) {
                var i = this.effects[t].effect;
                this._newPostEffect !== i && (i.needsDepthBuffer && this._requestDepthMap())
            }
        }
        ,
        e._releaseDepthMaps = function() {
            for (var t = 0, e = this.effects.length; t < e; t++) {
                this.effects[t].effect.needsDepthBuffer && this._releaseDepthMap()
            }
        }
        ,
        e._requestDepthMap = function() {
            Xf || (Xf = this.app.scene.layers.getLayerById(1)),
            Xf && Xf.incrementCounter()
        }
        ,
        e._releaseDepthMap = function() {
            Xf && Xf.decrementCounter()
        }
        ,
        e.destroy = function() {
            for (var t = 0, e = this.effects.length; t < e; t++)
                this.effects[t].inputTarget.destroy();
            this.effects.length = 0,
            this.disable()
        }
        ,
        e.enable = function() {
            var t = this;
            !this.enabled && this.effects.length && (this.enabled = !0,
            this._requestDepthMaps(),
            this.app.graphicsDevice.on("resizecanvas", this._onCanvasResized, this),
            this.destinationRenderTarget = this.camera.renderTarget,
            this.camera.renderTarget = this.effects[0].inputTarget,
            this.camera.onPostprocessing = function(e) {
                if (t.enabled) {
                    var i = null
                      , n = t.effects.length;
                    if (n)
                        for (var s = 0; s < n; s++) {
                            var a = t.effects[s]
                              , r = a.outputTarget;
                            s === n - 1 && (i = t.camera.rect,
                            t.destinationRenderTarget && (r = t.destinationRenderTarget)),
                            a.effect.render(a.inputTarget, r, i)
                        }
                }
            }
            )
        }
        ,
        e.disable = function() {
            this.enabled && (this.enabled = !1,
            this.app.graphicsDevice.off("resizecanvas", this._onCanvasResized, this),
            this._releaseDepthMaps(),
            this._destroyOffscreenTarget(this._sourceTarget),
            this.camera.renderTarget = null,
            this.camera.onPostprocessing = null)
        }
        ,
        e._onCanvasResized = function(t, e) {
            var i = this.camera.rect
              , n = this.app.graphicsDevice;
            this.camera.camera.aspectRatio = n.width * i.z / (n.height * i.w),
            this.resizeTimeout || (Q() - this.resizeLast > 100 ? this.resizeRenderTargets() : this.resizeTimeout = setTimeout(this._resizeTimeoutCallback, 100))
        }
        ,
        e.resizeRenderTargets = function() {
            this.resizeTimeout && (clearTimeout(this.resizeTimeout),
            this.resizeTimeout = null),
            this.resizeLast = Q();
            for (var t = this.camera.rect, e = Math.floor(t.z * this.app.graphicsDevice.width * this.renderTargetScale), i = Math.floor(t.w * this.app.graphicsDevice.height * this.renderTargetScale), n = this.effects, s = 0, a = n.length; s < a; s++) {
                var r = n[s];
                r.inputTarget.width === e && r.inputTarget.height === i || this._resizeOffscreenTarget(r.inputTarget)
            }
        }
        ,
        e.onCameraRectChanged = function(t, e, i) {
            this.enabled && this.resizeRenderTargets()
        }
        ,
        t
    }()
      , $f = [{
        name: "aspectRatio",
        readonly: !1
    }, {
        name: "aspectRatioMode",
        readonly: !1
    }, {
        name: "calculateProjection",
        readonly: !1
    }, {
        name: "calculateTransform",
        readonly: !1
    }, {
        name: "clearColor",
        readonly: !1
    }, {
        name: "cullFaces",
        readonly: !1
    }, {
        name: "farClip",
        readonly: !1
    }, {
        name: "flipFaces",
        readonly: !1
    }, {
        name: "fov",
        readonly: !1
    }, {
        name: "frustum",
        readonly: !0
    }, {
        name: "frustumCulling",
        readonly: !1
    }, {
        name: "horizontalFov",
        readonly: !1
    }, {
        name: "nearClip",
        readonly: !1
    }, {
        name: "orthoHeight",
        readonly: !1
    }, {
        name: "projection",
        readonly: !1
    }, {
        name: "projectionMatrix",
        readonly: !0
    }, {
        name: "scissorRect",
        readonly: !1
    }, {
        name: "viewMatrix",
        readonly: !0
    }, {
        name: "vrDisplay",
        readonly: !1
    }]
      , Qf = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._camera = new Ri,
            n._camera.node = i,
            n._priority = 0,
            n.onPostprocessing = null,
            n._disablePostEffectsLayer = 4,
            n._postEffects = new Zf(e.app,j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.dirtyLayerCompositionCameras = function() {
            this.system.app.scene.layers._dirtyCameras = !0
        }
        ,
        i.screenToWorld = function(t, e, i, n) {
            var s = this.system.app.graphicsDevice
              , a = s.clientRect.width
              , r = s.clientRect.height;
            return this._camera.screenToWorld(t, e, i, a, r, n)
        }
        ,
        i.worldToScreen = function(t, e) {
            var i = this.system.app.graphicsDevice
              , n = i.clientRect.width
              , s = i.clientRect.height;
            return this._camera.worldToScreen(t, n, s, e)
        }
        ,
        i.onAppPrerender = function() {
            this._camera._viewMatDirty = !0,
            this._camera._viewProjMatDirty = !0
        }
        ,
        i.addCameraToLayers = function() {
            for (var t = this.layers, e = 0; e < t.length; e++) {
                var i = this.system.app.scene.layers.getLayerById(t[e]);
                i && i.addCamera(this)
            }
        }
        ,
        i.removeCameraFromLayers = function() {
            for (var t = this.layers, e = 0; e < t.length; e++) {
                var i = this.system.app.scene.layers.getLayerById(t[e]);
                i && i.removeCamera(this)
            }
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.addCameraToLayers(),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.layers.indexOf(t.id) < 0 || t.addCamera(this)
        }
        ,
        i.onLayerRemoved = function(t) {
            this.layers.indexOf(t.id) < 0 || t.removeCamera(this)
        }
        ,
        i.onEnable = function() {
            var t = this.system
              , e = t.app.scene
              , i = e.layers;
            t.addCamera(this),
            e.on("set:layers", this.onLayersChanged, this),
            i && (i.on("add", this.onLayerAdded, this),
            i.on("remove", this.onLayerRemoved, this)),
            this.enabled && this.entity.enabled && this.addCameraToLayers(),
            this.postEffects.enable()
        }
        ,
        i.onDisable = function() {
            var t = this.system
              , e = t.app.scene
              , i = e.layers;
            this.postEffects.disable(),
            this.removeCameraFromLayers(),
            e.off("set:layers", this.onLayersChanged, this),
            i && (i.off("add", this.onLayerAdded, this),
            i.off("remove", this.onLayerRemoved, this)),
            t.removeCamera(this)
        }
        ,
        i.onRemove = function() {
            this.onDisable(),
            this.off()
        }
        ,
        i.calculateAspectRatio = function(t) {
            var e = t || this.system.app.graphicsDevice
              , i = this.rect;
            return e.width * i.z / (e.height * i.w)
        }
        ,
        i.frameBegin = function(t) {
            0 === this.aspectRatioMode && (this.aspectRatio = this.calculateAspectRatio(t))
        }
        ,
        i.frameEnd = function() {}
        ,
        i.enterVr = function(t, e) {
            if (t instanceof Function && !e && (e = t,
            t = null),
            this.system.app.vr)
                if (t || (t = this.system.app.vr.display),
                t) {
                    var i = this;
                    t.capabilities.canPresent ? t.requestPresent((function(n) {
                        n || (i.vrDisplay = t,
                        i.vrDisplay.once("beforepresentchange", (function(t) {
                            t.presenting || (i.vrDisplay = null)
                        }
                        ))),
                        e(n)
                    }
                    )) : (i.vrDisplay = t,
                    e())
                } else
                    e("No pc.VrDisplay to present");
            else
                e("VrManager not created. Enable VR in project settings.")
        }
        ,
        i.exitVr = function(t) {
            if (this.vrDisplay)
                if (this.vrDisplay.capabilities.canPresent) {
                    var e = this.vrDisplay;
                    this.vrDisplay = null,
                    e.exitPresent(t)
                } else
                    this.vrDisplay = null,
                    t();
            else
                t("Not presenting VR")
        }
        ,
        i.startXr = function(t, e, i) {
            this.system.app.xr.start(this, t, e, i)
        }
        ,
        i.endXr = function(t) {
            this._camera.xr ? this._camera.xr.end(t) : t && t(new Error("Camera is not in XR"))
        }
        ,
        i.copy = function(t) {
            var e = this;
            $f.forEach((function(i) {
                if (!i.readonly) {
                    var n = i.name;
                    e[n] = t[n]
                }
            }
            )),
            this.clearColorBuffer = t.clearColorBuffer,
            this.clearDepthBuffer = t.clearDepthBuffer,
            this.clearStencilBuffer = t.clearStencilBuffer,
            this.disablePostEffectsLayer = t.disablePostEffectsLayer,
            this.layers = t.layers,
            this.priority = t.priority,
            this.renderTarget = t.renderTarget,
            this.rect = t.rect
        }
        ,
        G(e, [{
            key: "camera",
            get: function() {
                return this._camera
            }
        }, {
            key: "disablePostEffectsLayer",
            get: function() {
                return this._disablePostEffectsLayer
            },
            set: function(t) {
                this._disablePostEffectsLayer = t,
                this.dirtyLayerCompositionCameras()
            }
        }, {
            key: "postEffectsEnabled",
            get: function() {
                return this._postEffects.enabled
            }
        }, {
            key: "layers",
            get: function() {
                return this._camera.layers
            },
            set: function(t) {
                for (var e = this._camera.layers, i = 0; i < e.length; i++) {
                    var n = this.system.app.scene.layers.getLayerById(e[i]);
                    n && n.removeCamera(this)
                }
                if (this._camera.layers = t,
                this.enabled && this.entity.enabled)
                    for (var s = 0; s < t.length; s++) {
                        var a = this.system.app.scene.layers.getLayerById(t[s]);
                        a && a.addCamera(this)
                    }
            }
        }, {
            key: "postEffects",
            get: function() {
                return this._postEffects
            }
        }, {
            key: "priority",
            get: function() {
                return this._priority
            },
            set: function(t) {
                this._priority = t,
                this.dirtyLayerCompositionCameras()
            }
        }, {
            key: "rect",
            get: function() {
                return this._camera.rect
            },
            set: function(t) {
                this._camera.rect = t,
                this.fire("set:rect", this._camera.rect)
            }
        }, {
            key: "clearColorBuffer",
            get: function() {
                return this._camera.clearColorBuffer
            },
            set: function(t) {
                this._camera.clearColorBuffer = t,
                this.dirtyLayerCompositionCameras()
            }
        }, {
            key: "clearDepthBuffer",
            get: function() {
                return this._camera.clearDepthBuffer
            },
            set: function(t) {
                this._camera.clearDepthBuffer = t,
                this.dirtyLayerCompositionCameras()
            }
        }, {
            key: "clearStencilBuffer",
            get: function() {
                return this._camera.clearStencilBuffer
            },
            set: function(t) {
                this._camera.clearStencilBuffer = t,
                this.dirtyLayerCompositionCameras()
            }
        }, {
            key: "renderTarget",
            get: function() {
                return this._camera.renderTarget
            },
            set: function(t) {
                this._camera.renderTarget = t,
                this.dirtyLayerCompositionCameras()
            }
        }]),
        e
    }(gd);
    $f.forEach((function(t) {
        var e = t.name
          , i = {
            get: function() {
                return this._camera[e]
            }
        };
        t.readonly || (i.set = function(t) {
            this._camera[e] = t
        }
        ),
        Object.defineProperty(Qf.prototype, e, i)
    }
    ));
    var Jf = function() {
        this.enabled = !0
    }
      , tp = ["enabled"]
      , ep = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "camera",
            i.ComponentType = Qf,
            i.DataType = Jf,
            i.schema = tp,
            i.cameras = [],
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.app.on("prerender", i.onAppPrerender, j(i)),
            i.app.systems.on("update", i.onUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["aspectRatio", "aspectRatioMode", "calculateProjection", "calculateTransform", "clearColor", "clearColorBuffer", "clearDepthBuffer", "clearStencilBuffer", "cullFaces", "farClip", "flipFaces", "fov", "frustumCulling", "horizontalFov", "layers", "renderTarget", "nearClip", "orthoHeight", "projection", "priority", "rect", "scissorRect"];
            for (var s = 0; s < n.length; s++) {
                var a = n[s];
                if (i.hasOwnProperty(a)) {
                    var r = i[a];
                    switch (a) {
                    case "rect":
                    case "scissorRect":
                        Array.isArray(r) ? e[a] = new dt(r[0],r[1],r[2],r[3]) : e[a] = r;
                        break;
                    case "clearColor":
                        Array.isArray(r) ? e[a] = new at(r[0],r[1],r[2],r[3]) : e[a] = r;
                        break;
                    default:
                        e[a] = r
                    }
                }
            }
            t.prototype.initializeComponentData.call(this, e, i, ["enabled"])
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.camera;
            this.addComponent(e, {
                aspectRatio: i.aspectRatio,
                aspectRatioMode: i.aspectRatioMode,
                calculateProjection: i.calculateProjection,
                calculateTransform: i.calculateTransform,
                clearColor: i.clearColor,
                clearColorBuffer: i.clearColorBuffer,
                clearDepthBuffer: i.clearDepthBuffer,
                clearStencilBuffer: i.clearStencilBuffer,
                cullFaces: i.cullFaces,
                enabled: i.enabled,
                farClip: i.farClip,
                flipFaces: i.flipFaces,
                fov: i.fov,
                frustumCulling: i.frustumCulling,
                horizontalFov: i.horizontalFov,
                layers: i.layers,
                renderTarget: i.renderTarget,
                nearClip: i.nearClip,
                orthoHeight: i.orthoHeight,
                projection: i.projection,
                priority: i.priority,
                rect: i.rect,
                scissorRect: i.scissorRect
            })
        }
        ,
        i.onBeforeRemove = function(t, e) {
            this.removeCamera(e)
        }
        ,
        i.onUpdate = function(t) {
            if (this.app.vr) {
                var e = this.store;
                for (var i in e) {
                    var n = e[i];
                    if (n.data.enabled && n.entity.enabled) {
                        var s = n.entity.camera
                          , a = s.vrDisplay;
                        a && (a.setClipPlanes(s.nearClip, s.farClip),
                        n.entity && (n.entity.localTransform.copy(a.combinedViewInv),
                        n.entity._dirtyLocal = !1,
                        n.entity._dirtifyWorld()))
                    }
                }
            }
        }
        ,
        i.onAppPrerender = function() {
            for (var t = 0, e = this.cameras.length; t < e; t++)
                this.cameras[t].onAppPrerender()
        }
        ,
        i.addCamera = function(t) {
            this.cameras.push(t),
            this.sortCamerasByPriority()
        }
        ,
        i.removeCamera = function(t) {
            var e = this.cameras.indexOf(t);
            e >= 0 && (this.cameras.splice(e, 1),
            this.sortCamerasByPriority())
        }
        ,
        i.sortCamerasByPriority = function() {
            this.cameras.sort((function(t, e) {
                return t.priority - e.priority
            }
            ))
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Qf.prototype, tp);
    var ip, np, sp, ap = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._compoundParent = null,
            n.entity.on("insert", n._onInsert, j(n)),
            n.on("set_type", n.onSetType, j(n)),
            n.on("set_halfExtents", n.onSetHalfExtents, j(n)),
            n.on("set_radius", n.onSetRadius, j(n)),
            n.on("set_height", n.onSetHeight, j(n)),
            n.on("set_axis", n.onSetAxis, j(n)),
            n.on("set_asset", n.onSetAsset, j(n)),
            n.on("set_renderAsset", n.onSetRenderAsset, j(n)),
            n.on("set_model", n.onSetModel, j(n)),
            n.on("set_render", n.onSetRender, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.onSetType = function(t, e, i) {
            e !== i && this.system.changeType(this, e, i)
        }
        ,
        i.onSetHalfExtents = function(t, e, i) {
            var n = this.data.type;
            this.data.initialized && "box" === n && this.system.recreatePhysicalShapes(this)
        }
        ,
        i.onSetRadius = function(t, e, i) {
            var n = this.data.type;
            !this.data.initialized || "sphere" !== n && "capsule" !== n && "cylinder" !== n && "cone" !== n || this.system.recreatePhysicalShapes(this)
        }
        ,
        i.onSetHeight = function(t, e, i) {
            var n = this.data.type;
            !this.data.initialized || "capsule" !== n && "cylinder" !== n && "cone" !== n || this.system.recreatePhysicalShapes(this)
        }
        ,
        i.onSetAxis = function(t, e, i) {
            var n = this.data.type;
            !this.data.initialized || "capsule" !== n && "cylinder" !== n && "cone" !== n || this.system.recreatePhysicalShapes(this)
        }
        ,
        i.onSetAsset = function(t, e, i) {
            var n = this.system.app.assets;
            if (e) {
                var s = n.get(e);
                s && s.off("remove", this.onAssetRemoved, this)
            }
            if (i) {
                i instanceof Kh && (this.data.asset = i.id);
                var a = n.get(this.data.asset);
                a && (a.off("remove", this.onAssetRemoved, this),
                a.on("remove", this.onAssetRemoved, this))
            }
            this.data.initialized && "mesh" === this.data.type && (i || (this.data.model = null),
            this.system.recreatePhysicalShapes(this))
        }
        ,
        i.onSetRenderAsset = function(t, e, i) {
            var n = this.system.app.assets;
            if (e) {
                var s = n.get(e);
                s && s.off("remove", this.onRenderAssetRemoved, this)
            }
            if (i) {
                i instanceof Kh && (this.data.renderAsset = i.id);
                var a = n.get(this.data.renderAsset);
                a && (a.off("remove", this.onRenderAssetRemoved, this),
                a.on("remove", this.onRenderAssetRemoved, this))
            }
            this.data.initialized && "mesh" === this.data.type && (i || (this.data.render = null),
            this.system.recreatePhysicalShapes(this))
        }
        ,
        i.onSetModel = function(t, e, i) {
            this.data.initialized && "mesh" === this.data.type && this.system.implementations.mesh.doRecreatePhysicalShape(this)
        }
        ,
        i.onSetRender = function(t, e, i) {
            this.onSetModel(t, e, i)
        }
        ,
        i.onAssetRemoved = function(t) {
            t.off("remove", this.onAssetRemoved, this),
            this.data.asset === t.id && (this.asset = null)
        }
        ,
        i.onRenderAssetRemoved = function(t) {
            t.off("remove", this.onRenderAssetRemoved, this),
            this.data.renderAsset === t.id && (this.renderAsset = null)
        }
        ,
        i._getCompoundChildShapeIndex = function(t) {
            for (var e = this.data.shape, i = e.getNumChildShapes(), n = 0; n < i; n++) {
                if (e.getChildShape(n).ptr === t.ptr)
                    return n
            }
            return null
        }
        ,
        i._onInsert = function(t) {
            if ("undefined" != typeof Ammo)
                if (this._compoundParent)
                    this.system.recreatePhysicalShapes(this);
                else if (!this.entity.rigidbody)
                    for (var e = this.entity.parent; e; ) {
                        if (e.collision && "compound" === e.collision.type) {
                            0 === e.collision.shape.getNumChildShapes() ? this.system.recreatePhysicalShapes(e.collision) : this.system.recreatePhysicalShapes(this);
                            break
                        }
                        e = e.parent
                    }
        }
        ,
        i._updateCompound = function() {
            var t = this.entity;
            if (t._dirtyWorld) {
                for (var e = t._dirtyLocal, i = t; i && !e && (!i.collision || i.collision !== this._compoundParent); )
                    i._dirtyLocal && (e = !0),
                    i = i.parent;
                if (e) {
                    t.forEach(this.system.implementations.compound._updateEachDescendantTransform, t);
                    var n = this._compoundParent.entity.rigidbody;
                    n && n.activate()
                }
            }
        }
        ,
        i.onEnable = function() {
            if ("mesh" === this.data.type && (this.data.asset || this.data.renderAsset) && this.data.initialized) {
                var t = this.system.app.assets.get(this.data.asset || this.data.renderAsset);
                if (t && (!t.resource || !this.data.shape))
                    return void this.system.recreatePhysicalShapes(this)
            }
            if (this.entity.rigidbody)
                this.entity.rigidbody.enabled && this.entity.rigidbody.enableSimulation();
            else if (this._compoundParent && this !== this._compoundParent)
                if (0 === this._compoundParent.shape.getNumChildShapes())
                    this.system.recreatePhysicalShapes(this._compoundParent);
                else {
                    var e = this.system._getNodeTransform(this.entity, this._compoundParent.entity);
                    this._compoundParent.shape.addChildShape(e, this.data.shape),
                    Ammo.destroy(e),
                    this._compoundParent.entity.rigidbody && this._compoundParent.entity.rigidbody.activate()
                }
            else
                this.entity.trigger && this.entity.trigger.enable()
        }
        ,
        i.onDisable = function() {
            this.entity.rigidbody ? this.entity.rigidbody.disableSimulation() : this._compoundParent && this !== this._compoundParent ? this._compoundParent.entity._destroying || (this.system._removeCompoundChild(this._compoundParent, this.data.shape),
            this._compoundParent.entity.rigidbody && this._compoundParent.entity.rigidbody.activate()) : this.entity.trigger && this.entity.trigger.disable()
        }
        ,
        i.onBeforeRemove = function() {
            this.asset && (this.asset = null),
            this.renderAsset && (this.renderAsset = null),
            this.entity.off("insert", this._onInsert, this),
            this.off()
        }
        ,
        e
    }(gd), rp = function() {
        this.enabled = !0,
        this.type = "box",
        this.halfExtents = new lt(.5,.5,.5),
        this.radius = .5,
        this.axis = 1,
        this.height = 2,
        this.asset = null,
        this.renderAsset = null,
        this.shape = null,
        this.model = null,
        this.render = null,
        this.initialized = !1
    }, op = "static", hp = "dynamic", lp = "kinematic", cp = 65535, up = 65533, dp = function() {
        function t(t, e, i) {
            this.entity = e.entity,
            this.component = e,
            this.app = t,
            "undefined" == typeof Ammo || ip || (ip = new Ammo.btVector3,
            np = new Ammo.btQuaternion,
            sp = new Ammo.btTransform),
            this.initialize(i)
        }
        var e = t.prototype;
        return e.initialize = function(t) {
            var e = this.entity
              , i = t.shape;
            if (i && "undefined" != typeof Ammo) {
                e.trigger && e.trigger.destroy();
                var n = e.getPosition()
                  , s = e.getRotation();
                ip.setValue(n.x, n.y, n.z),
                np.setValue(s.x, s.y, s.z, s.w),
                sp.setOrigin(ip),
                sp.setRotation(np);
                var a = this.app.systems.rigidbody.createBody(1, i, sp);
                a.setRestitution(0),
                a.setFriction(0),
                a.setDamping(0, 0),
                ip.setValue(0, 0, 0),
                a.setLinearFactor(ip),
                a.setAngularFactor(ip),
                a.setCollisionFlags(4 | a.getCollisionFlags()),
                a.entity = e,
                this.body = a,
                this.component.enabled && e.enabled && this.enable()
            }
        }
        ,
        e.destroy = function() {
            var t = this.body;
            t && (this.disable(),
            this.app.systems.rigidbody.destroyBody(t))
        }
        ,
        e._getEntityTransform = function(t) {
            var e = this.entity.getPosition()
              , i = this.entity.getRotation();
            ip.setValue(e.x, e.y, e.z),
            np.setValue(i.x, i.y, i.z, i.w),
            t.setOrigin(ip),
            t.setRotation(np)
        }
        ,
        e.updateTransform = function() {
            this._getEntityTransform(sp);
            var t = this.body;
            t.setWorldTransform(sp),
            t.activate()
        }
        ,
        e.enable = function() {
            var t = this.body;
            if (t) {
                var e = this.app.systems;
                e.rigidbody.addBody(t, 16, 65517),
                e.rigidbody._triggers.push(this),
                t.forceActivationState(1),
                this.updateTransform()
            }
        }
        ,
        e.disable = function() {
            var t = this.body;
            if (t) {
                var e = this.app.systems
                  , i = e.rigidbody._triggers.indexOf(this);
                i > -1 && e.rigidbody._triggers.splice(i, 1),
                e.rigidbody.removeBody(t),
                t.forceActivationState(5)
            }
        }
        ,
        t
    }(), fp = new vt, pp = new lt, mp = new yt, _p = new ji, gp = ["enabled", "type", "halfExtents", "radius", "axis", "height", "asset", "renderAsset", "shape", "model", "render"], vp = function() {
        function t(t) {
            this.system = t
        }
        var e = t.prototype;
        return e.beforeInitialize = function(t, e) {
            e.shape = null,
            e.model = new mh,
            e.model.graph = new ji
        }
        ,
        e.afterInitialize = function(t, e) {
            this.recreatePhysicalShapes(t),
            t.data.initialized = !0
        }
        ,
        e.reset = function(t, e) {
            this.beforeInitialize(t, e),
            this.afterInitialize(t, e)
        }
        ,
        e.recreatePhysicalShapes = function(t) {
            var e = t.entity
              , i = t.data;
            if ("undefined" != typeof Ammo) {
                e.trigger && (e.trigger.destroy(),
                delete e.trigger),
                i.shape && (t._compoundParent && (this.system._removeCompoundChild(t._compoundParent, i.shape),
                t._compoundParent.entity.rigidbody && t._compoundParent.entity.rigidbody.activate()),
                Ammo.destroy(i.shape),
                i.shape = null),
                i.shape = this.createPhysicalShape(t.entity, i);
                var n = !t._compoundParent;
                if ("compound" !== i.type || t._compoundParent && t !== t._compoundParent) {
                    if ("compound" !== i.type && (t._compoundParent && t === t._compoundParent && e.forEach(this.system.implementations.compound._updateEachDescendant, t),
                    !t.rigidbody)) {
                        t._compoundParent = null;
                        for (var s = e.parent; s; ) {
                            if (s.collision && "compound" === s.collision.type) {
                                t._compoundParent = s.collision;
                                break
                            }
                            s = s.parent
                        }
                    }
                } else
                    t._compoundParent = t,
                    e.forEach(this._addEachDescendant, t);
                t._compoundParent && t !== t._compoundParent && (n && 0 === t._compoundParent.shape.getNumChildShapes() ? this.system.recreatePhysicalShapes(t._compoundParent) : (this.system.updateCompoundChildTransform(e),
                t._compoundParent.entity.rigidbody && t._compoundParent.entity.rigidbody.activate())),
                e.rigidbody ? (e.rigidbody.disableSimulation(),
                e.rigidbody.createBody(),
                e.enabled && e.rigidbody.enabled && e.rigidbody.enableSimulation()) : t._compoundParent || (e.trigger ? e.trigger.initialize(i) : e.trigger = new dp(this.system.app,t,i))
            }
        }
        ,
        e.createPhysicalShape = function(t, e) {}
        ,
        e.updateTransform = function(t, e, i, n) {
            t.entity.trigger && t.entity.trigger.updateTransform()
        }
        ,
        e.beforeRemove = function(t, e) {
            e.data.shape && (e._compoundParent && !e._compoundParent.entity._destroying && (this.system._removeCompoundChild(e._compoundParent, e.data.shape),
            e._compoundParent.entity.rigidbody && e._compoundParent.entity.rigidbody.activate()),
            e._compoundParent = null,
            Ammo.destroy(e.data.shape),
            e.data.shape = null)
        }
        ,
        e.remove = function(t, e) {
            var i = this.system.app;
            t.rigidbody && t.rigidbody.body && t.rigidbody.disableSimulation(),
            t.trigger && (t.trigger.destroy(),
            delete t.trigger),
            i.scene.containsModel(e.model) && (i.root.removeChild(e.model.graph),
            i.scene.removeModel(e.model))
        }
        ,
        e.clone = function(t, e) {
            var i = this.system.store[t.getGuid()]
              , n = {
                enabled: i.data.enabled,
                type: i.data.type,
                halfExtents: [i.data.halfExtents.x, i.data.halfExtents.y, i.data.halfExtents.z],
                radius: i.data.radius,
                axis: i.data.axis,
                height: i.data.height,
                asset: i.data.asset,
                renderAsset: i.data.renderAsset,
                model: i.data.model,
                render: i.data.render
            };
            return this.system.addComponent(e, n)
        }
        ,
        t
    }(), yp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.createPhysicalShape = function(t, e) {
            if ("undefined" != typeof Ammo) {
                var i = e.halfExtents
                  , n = new Ammo.btVector3(i ? i.x : .5,i ? i.y : .5,i ? i.z : .5)
                  , s = new Ammo.btBoxShape(n);
                return Ammo.destroy(n),
                s
            }
        }
        ,
        e
    }(vp), xp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.createPhysicalShape = function(t, e) {
            if ("undefined" != typeof Ammo)
                return new Ammo.btSphereShape(e.radius)
        }
        ,
        e
    }(vp), bp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.createPhysicalShape = function(t, e) {
            var i = void 0 !== e.axis ? e.axis : 1
              , n = e.radius || .5
              , s = Math.max((e.height || 2) - 2 * n, 0)
              , a = null;
            if ("undefined" != typeof Ammo)
                switch (i) {
                case 0:
                    a = new Ammo.btCapsuleShapeX(n,s);
                    break;
                case 1:
                    a = new Ammo.btCapsuleShape(n,s);
                    break;
                case 2:
                    a = new Ammo.btCapsuleShapeZ(n,s)
                }
            return a
        }
        ,
        e
    }(vp), Sp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.createPhysicalShape = function(t, e) {
            var i = void 0 !== e.axis ? e.axis : 1
              , n = void 0 !== e.radius ? e.radius : .5
              , s = void 0 !== e.height ? e.height : 1
              , a = null
              , r = null;
            if ("undefined" != typeof Ammo)
                switch (i) {
                case 0:
                    a = new Ammo.btVector3(.5 * s,n,n),
                    r = new Ammo.btCylinderShapeX(a);
                    break;
                case 1:
                    a = new Ammo.btVector3(n,.5 * s,n),
                    r = new Ammo.btCylinderShape(a);
                    break;
                case 2:
                    a = new Ammo.btVector3(n,n,.5 * s),
                    r = new Ammo.btCylinderShapeZ(a)
                }
            return a && Ammo.destroy(a),
            r
        }
        ,
        e
    }(vp), Tp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        return H(e, t),
        e.prototype.createPhysicalShape = function(t, e) {
            var i = void 0 !== e.axis ? e.axis : 1
              , n = void 0 !== e.radius ? e.radius : .5
              , s = void 0 !== e.height ? e.height : 1
              , a = null;
            if ("undefined" != typeof Ammo)
                switch (i) {
                case 0:
                    a = new Ammo.btConeShapeX(n,s);
                    break;
                case 1:
                    a = new Ammo.btConeShape(n,s);
                    break;
                case 2:
                    a = new Ammo.btConeShapeZ(n,s)
                }
            return a
        }
        ,
        e
    }(vp), wp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.beforeInitialize = function(t, e) {}
        ,
        i.createAmmoMesh = function(t, e, i) {
            var n;
            if (this.system._triMeshCache[t.id])
                n = this.system._triMeshCache[t.id];
            else {
                for (var s, a, r = t.vertexBuffer, o = r.getFormat(), h = 0; h < o.elements.length; h++) {
                    var l = o.elements[h];
                    if (l.name === se) {
                        a = new Float32Array(r.lock(),l.offset),
                        s = l.stride / 4;
                        break
                    }
                }
                var c = [];
                t.getIndices(c);
                var u, d, f, p = t.primitive[0].count / 3, m = new Ammo.btVector3, _ = new Ammo.btVector3, g = new Ammo.btVector3, v = t.primitive[0].base;
                n = new Ammo.btTriangleMesh,
                this.system._triMeshCache[t.id] = n;
                for (var y = 0; y < p; y++)
                    u = c[v + 3 * y] * s,
                    d = c[v + 3 * y + 1] * s,
                    f = c[v + 3 * y + 2] * s,
                    m.setValue(a[u], a[u + 1], a[u + 2]),
                    _.setValue(a[d], a[d + 1], a[d + 2]),
                    g.setValue(a[f], a[f + 1], a[f + 2]),
                    n.addTriangle(m, _, g, !0);
                Ammo.destroy(m),
                Ammo.destroy(_),
                Ammo.destroy(g)
            }
            var x = new Ammo.btBvhTriangleMeshShape(n,!0)
              , b = this.system._getNodeScaling(e);
            x.setLocalScaling(b),
            Ammo.destroy(b);
            var S = this.system._getNodeTransform(e);
            i.addChildShape(S, x),
            Ammo.destroy(S)
        }
        ,
        i.createPhysicalShape = function(t, e) {
            if ("undefined" != typeof Ammo && (e.model || e.render)) {
                var i = new Ammo.btCompoundShape;
                if (e.model)
                    for (var n = e.model.meshInstances, s = 0; s < n.length; s++)
                        this.createAmmoMesh(n[s].mesh, n[s].node, i);
                else if (e.render)
                    for (var a = e.render.meshes, r = 0; r < a.length; r++)
                        this.createAmmoMesh(a[r], _p, i);
                var o = t.getWorldTransform().getScale()
                  , h = new Ammo.btVector3(o.x,o.y,o.z);
                return i.setLocalScaling(h),
                Ammo.destroy(h),
                i
            }
        }
        ,
        i.recreatePhysicalShapes = function(t) {
            var e = t.data;
            (e.renderAsset || e.asset) && t.enabled && t.entity.enabled ? this.loadAsset(t, e.renderAsset || e.asset, e.renderAsset ? "render" : "model") : this.doRecreatePhysicalShape(t)
        }
        ,
        i.loadAsset = function(t, e, i) {
            var n = this
              , s = t.data
              , a = this.system.app.assets
              , r = a.get(e);
            r ? (r.ready((function(e) {
                s[i] = e.resource,
                n.doRecreatePhysicalShape(t)
            }
            )),
            a.load(r)) : a.once("add:" + e, (function(e) {
                e.ready((function(e) {
                    s[i] = e.resource,
                    n.doRecreatePhysicalShape(t)
                }
                )),
                a.load(e)
            }
            ))
        }
        ,
        i.doRecreatePhysicalShape = function(t) {
            var e = t.entity
              , i = t.data;
            i.model || i.render ? (this.destroyShape(i),
            i.shape = this.createPhysicalShape(e, i),
            e.rigidbody ? (e.rigidbody.disableSimulation(),
            e.rigidbody.createBody(),
            e.enabled && e.rigidbody.enabled && e.rigidbody.enableSimulation()) : e.trigger ? e.trigger.initialize(i) : e.trigger = new dp(this.system.app,t,i)) : (this.beforeRemove(e, t),
            this.remove(e, i))
        }
        ,
        i.updateTransform = function(e, i, n, s) {
            if (e.shape) {
                var a = e.entity.getWorldTransform().getScale()
                  , r = e.shape.getLocalScaling();
                a.x === r.x() && a.y === r.y() && a.z === r.z() || this.doRecreatePhysicalShape(e)
            }
            t.prototype.updateTransform.call(this, e, i, n, s)
        }
        ,
        i.destroyShape = function(t) {
            if (t.shape) {
                for (var e = t.shape.getNumChildShapes(), i = 0; i < e; i++) {
                    var n = t.shape.getChildShape(i);
                    Ammo.destroy(n)
                }
                Ammo.destroy(t.shape),
                t.shape = null
            }
        }
        ,
        i.remove = function(e, i) {
            this.destroyShape(i),
            t.prototype.remove.call(this, e, i)
        }
        ,
        e
    }(vp), Mp = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        H(e, t);
        var i = e.prototype;
        return i.createPhysicalShape = function(t, e) {
            if ("undefined" != typeof Ammo)
                return new Ammo.btCompoundShape
        }
        ,
        i._addEachDescendant = function(t) {
            t.collision && !t.rigidbody && (t.collision._compoundParent = this,
            t !== this.entity && t.collision.system.recreatePhysicalShapes(t.collision))
        }
        ,
        i._updateEachDescendant = function(t) {
            t.collision && t.collision._compoundParent === this && (t.collision._compoundParent = null,
            t === this.entity || t.rigidbody || t.collision.system.recreatePhysicalShapes(t.collision))
        }
        ,
        i._updateEachDescendantTransform = function(t) {
            t.collision && t.collision._compoundParent === this.collision._compoundParent && this.collision.system.updateCompoundChildTransform(t)
        }
        ,
        e
    }(vp), Ap = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "collision",
            i.ComponentType = ap,
            i.DataType = rp,
            i.schema = gp,
            i.implementations = {},
            i._triMeshCache = {},
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.on("remove", i.onRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            for (var s, a = {}, r = 0, o = (n = ["type", "halfExtents", "radius", "axis", "height", "shape", "model", "asset", "render", "renderAsset", "enabled"]).length; r < o; r++) {
                var h = n[r];
                a[h] = i[h]
            }
            i.hasOwnProperty("asset") ? (-1 !== (s = n.indexOf("model")) && n.splice(s, 1),
            -1 !== (s = n.indexOf("render")) && n.splice(s, 1)) : i.hasOwnProperty("model") && -1 !== (s = n.indexOf("asset")) && n.splice(s, 1),
            a.type || (a.type = e.data.type),
            e.data.type = a.type,
            a.halfExtents && Array.isArray(a.halfExtents) && (a.halfExtents = new lt(a.halfExtents[0],a.halfExtents[1],a.halfExtents[2]));
            var l = this._createImplementation(a.type);
            l.beforeInitialize(e, a),
            t.prototype.initializeComponentData.call(this, e, a, n),
            l.afterInitialize(e, a)
        }
        ,
        i._createImplementation = function(t) {
            if (void 0 === this.implementations[t]) {
                var e;
                switch (t) {
                case "box":
                    e = new yp(this);
                    break;
                case "sphere":
                    e = new xp(this);
                    break;
                case "capsule":
                    e = new bp(this);
                    break;
                case "cylinder":
                    e = new Sp(this);
                    break;
                case "cone":
                    e = new Tp(this);
                    break;
                case "mesh":
                    e = new wp(this);
                    break;
                case "compound":
                    e = new Mp(this)
                }
                this.implementations[t] = e
            }
            return this.implementations[t]
        }
        ,
        i._getImplementation = function(t) {
            return this.implementations[t.collision.data.type]
        }
        ,
        i.cloneComponent = function(t, e) {
            return this._getImplementation(t).clone(t, e)
        }
        ,
        i.onBeforeRemove = function(t, e) {
            this.implementations[e.data.type].beforeRemove(t, e),
            e.onBeforeRemove()
        }
        ,
        i.onRemove = function(t, e) {
            this.implementations[e.type].remove(t, e)
        }
        ,
        i.updateCompoundChildTransform = function(t) {
            if (this._removeCompoundChild(t.collision._compoundParent, t.collision.data.shape),
            t.enabled && t.collision.enabled) {
                var e = this._getNodeTransform(t, t.collision._compoundParent.entity);
                t.collision._compoundParent.shape.addChildShape(e, t.collision.data.shape),
                Ammo.destroy(e)
            }
        }
        ,
        i._removeCompoundChild = function(t, e) {
            if (t.shape.removeChildShape)
                t.shape.removeChildShape(e);
            else {
                var i = t._getCompoundChildShapeIndex(e);
                null !== i && t.shape.removeChildShapeByIndex(i)
            }
        }
        ,
        i.onTransformChanged = function(t, e, i, n) {
            this.implementations[t.data.type].updateTransform(t, e, i, n)
        }
        ,
        i.changeType = function(t, e, i) {
            this.implementations[e].beforeRemove(t.entity, t),
            this.implementations[e].remove(t.entity, t.data),
            this._createImplementation(i).reset(t, t.data)
        }
        ,
        i.recreatePhysicalShapes = function(t) {
            this.implementations[t.data.type].recreatePhysicalShapes(t)
        }
        ,
        i._calculateNodeRelativeTransform = function(t, e) {
            if (t === e) {
                var i = t.getWorldTransform().getScale();
                fp.setScale(i.x, i.y, i.z)
            } else
                this._calculateNodeRelativeTransform(t.parent, e),
                fp.mul(t.getLocalTransform())
        }
        ,
        i._getNodeScaling = function(t) {
            var e = t.getWorldTransform().getScale();
            return new Ammo.btVector3(e.x,e.y,e.z)
        }
        ,
        i._getNodeTransform = function(t, e) {
            var i, n;
            e ? (this._calculateNodeRelativeTransform(t, e),
            i = pp,
            n = mp,
            fp.getTranslation(i),
            n.setFromMat4(fp)) : (i = t.getPosition(),
            n = t.getRotation());
            var s = new Ammo.btTransform;
            s.setIdentity();
            var a = s.getOrigin();
            a.setValue(i.x, i.y, i.z);
            var r = new Ammo.btQuaternion;
            return r.setValue(n.x, n.y, n.z, n.w),
            s.setRotation(r),
            Ammo.destroy(r),
            Ammo.destroy(a),
            s
        }
        ,
        i.destroy = function() {
            for (var e in this._triMeshCache)
                Ammo.destroy(this._triMeshCache[e]);
            this._triMeshCache = null,
            t.prototype.destroy.call(this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(ap.prototype, gp);
    var Cp = function(t) {
        function e() {
            var e;
            return (e = t.call(this) || this).list = [],
            e
        }
        H(e, t);
        var i = e.prototype;
        return i.add = function(t) {
            var e = t.id;
            if (this[e])
                throw new Error("ComponentSystem name '" + e + "' already registered or not allowed");
            this[e] = t,
            this.list.push(t)
        }
        ,
        i.remove = function(t) {
            var e = t.id;
            if (!this[e])
                throw new Error("No ComponentSystem named '" + e + "' registered");
            delete this[e];
            var i = this.list.indexOf(this[e]);
            -1 !== i && this.list.splice(i, 1)
        }
        ,
        i.destroy = function() {
            this.off();
            for (var t = 0; t < this.list.length; t++)
                this.list[t].destroy()
        }
        ,
        e
    }(u)
      , Ep = function() {
        function t(t) {
            this.func = void 0 === t.func ? 7 : t.func,
            this.ref = t.ref || 0,
            this.readMask = void 0 === t.readMask ? 255 : t.readMask,
            this.writeMask = void 0 === t.writeMask ? 255 : t.writeMask,
            this.fail = t.fail || 0,
            this.zfail = t.zfail || 0,
            this.zpass = t.zpass || 0
        }
        return t.prototype.clone = function() {
            return new t({
                func: this.func,
                ref: this.ref,
                readMask: this.readMask,
                writeMask: this.writeMask,
                fail: this.fail,
                zfail: this.zfail,
                zpass: this.zpass
            })
        }
        ,
        t
    }()
      , Pp = function() {
        function t(t, e, i) {
            this._entity = t,
            this._element = t.element,
            this.model = new mh,
            this.node = new ji,
            this.model.graph = this.node,
            this.mesh = e,
            this.meshInstance = new wa(this.mesh,i,this.node),
            this.meshInstance.name = "ImageElement: " + t.name,
            this.meshInstance.castShadow = !1,
            this.meshInstance.receiveShadow = !1,
            this._meshDirty = !1,
            this.model.meshInstances.push(this.meshInstance),
            this._entity.addChild(this.model.graph),
            this.model._entity = this._entity,
            this.unmaskMeshInstance = null
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.setMaterial(null),
            this._element.removeModelFromLayers(this.model),
            this.model.destroy(),
            this.model = null,
            this.node = null,
            this.mesh = null,
            this.meshInstance = null,
            this._entity = null,
            this._element = null
        }
        ,
        e.setMesh = function(t) {
            this.meshInstance && (this.mesh = t,
            this.meshInstance.mesh = t,
            this.meshInstance.visible = !!t,
            this.unmaskMeshInstance && (this.unmaskMeshInstance.mesh = t),
            this.forceUpdateAabb())
        }
        ,
        e.setMask = function(t) {
            if (this.meshInstance) {
                if (t)
                    for (var e in this.unmaskMeshInstance = new wa(this.mesh,this.meshInstance.material,this.node),
                    this.unmaskMeshInstance.name = "Unmask: " + this._entity.name,
                    this.unmaskMeshInstance.castShadow = !1,
                    this.unmaskMeshInstance.receiveShadow = !1,
                    this.unmaskMeshInstance.pick = !1,
                    this.model.meshInstances.push(this.unmaskMeshInstance),
                    this.meshInstance.parameters)
                        this.unmaskMeshInstance.setParameter(e, this.meshInstance.parameters[e].data);
                else {
                    var i = this.model.meshInstances.indexOf(this.unmaskMeshInstance);
                    i >= 0 && this.model.meshInstances.splice(i, 1),
                    this.unmaskMeshInstance = null
                }
                this._entity.enabled && this._element.enabled && (this._element.removeModelFromLayers(this.model),
                this._element.addModelToLayers(this.model))
            }
        }
        ,
        e.setMaterial = function(t) {
            this.meshInstance && (this.meshInstance.material = t,
            this.unmaskMeshInstance && (this.unmaskMeshInstance.material = t))
        }
        ,
        e.setParameter = function(t, e) {
            this.meshInstance && (this.meshInstance.setParameter(t, e),
            this.unmaskMeshInstance && this.unmaskMeshInstance.setParameter(t, e))
        }
        ,
        e.deleteParameter = function(t) {
            this.meshInstance && (this.meshInstance.deleteParameter(t),
            this.unmaskMeshInstance && this.unmaskMeshInstance.deleteParameter(t))
        }
        ,
        e.setUnmaskDrawOrder = function() {
            if (this.meshInstance) {
                if (this.unmaskMeshInstance) {
                    var t = function t(e) {
                        var i, n = e.children, s = n.length;
                        if (s) {
                            for (var a = 0; a < s; a++)
                                n[a].element && (i = n[a]);
                            return i ? t(i) || i : null
                        }
                        return null
                    }(this._entity);
                    t && t.element ? this.unmaskMeshInstance.drawOrder = t.element.drawOrder + t.element.getMaskOffset() : this.unmaskMeshInstance.drawOrder = this.meshInstance.drawOrder + this._element.getMaskOffset()
                }
            }
        }
        ,
        e.setDrawOrder = function(t) {
            this.meshInstance && (this.meshInstance.drawOrder = t)
        }
        ,
        e.setCull = function(t) {
            if (this.meshInstance) {
                var e = this._element
                  , i = null;
                t && e._isScreenCulled() && (i = function(t) {
                    return e.isVisibleForCamera(t)
                }
                ),
                this.meshInstance.cull = t,
                this.meshInstance.isVisibleFunc = i,
                this.unmaskMeshInstance && (this.unmaskMeshInstance.cull = t,
                this.unmaskMeshInstance.isVisibleFunc = i)
            }
        }
        ,
        e.setScreenSpace = function(t) {
            this.meshInstance && (this.meshInstance.screenSpace = t,
            this.unmaskMeshInstance && (this.unmaskMeshInstance.screenSpace = t))
        }
        ,
        e.setLayer = function(t) {
            this.meshInstance && (this.meshInstance.layer = t,
            this.unmaskMeshInstance && (this.unmaskMeshInstance.layer = t))
        }
        ,
        e.forceUpdateAabb = function(t) {
            this.meshInstance && (this.meshInstance._aabbVer = -1,
            this.unmaskMeshInstance && (this.unmaskMeshInstance._aabbVer = -1))
        }
        ,
        e.setAabbFunc = function(t) {
            this.meshInstance && (this.meshInstance._updateAabbFunc = t,
            this.unmaskMeshInstance && (this.unmaskMeshInstance._updateAabbFunc = t))
        }
        ,
        t
    }()
      , Rp = function() {
        function t(t) {
            this._element = t,
            this._entity = t.entity,
            this._system = t.system,
            this._textureAsset = null,
            this._texture = null,
            this._materialAsset = null,
            this._material = null,
            this._spriteAsset = null,
            this._sprite = null,
            this._spriteFrame = 0,
            this._pixelsPerUnit = null,
            this._rect = new dt(0,0,1,1),
            this._mask = !1,
            this._maskRef = 0,
            this._outerScale = new ut,
            this._outerScaleUniform = new Float32Array(2),
            this._innerOffset = new dt,
            this._innerOffsetUniform = new Float32Array(4),
            this._atlasRect = new dt,
            this._atlasRectUniform = new Float32Array(4),
            this._defaultMesh = this._createMesh(),
            this._renderable = new Pp(this._entity,this._defaultMesh,this._material),
            this._color = new at(1,1,1,1),
            this._colorUniform = new Float32Array([1, 1, 1]),
            this._renderable.setParameter("material_emissive", this._colorUniform),
            this._renderable.setParameter("material_opacity", 1),
            this._updateAabbFunc = this._updateAabb.bind(this),
            this._onScreenChange(this._element.screen),
            this._element.on("resize", this._onParentResizeOrPivotChange, this),
            this._element.on("set:pivot", this._onParentResizeOrPivotChange, this),
            this._element.on("screen:set:screenspace", this._onScreenSpaceChange, this),
            this._element.on("set:screen", this._onScreenChange, this),
            this._element.on("set:draworder", this._onDrawOrderChange, this),
            this._element.on("screen:set:resolution", this._onResolutionChange, this)
        }
        var e = t.prototype;
        return e.destroy = function() {
            this.textureAsset = null,
            this.spriteAsset = null,
            this.materialAsset = null,
            this._renderable.setMesh(this._defaultMesh),
            this._renderable.destroy(),
            this._defaultMesh = null,
            this._element.off("resize", this._onParentResizeOrPivotChange, this),
            this._element.off("set:pivot", this._onParentResizeOrPivotChange, this),
            this._element.off("screen:set:screenspace", this._onScreenSpaceChange, this),
            this._element.off("set:screen", this._onScreenChange, this),
            this._element.off("set:draworder", this._onDrawOrderChange, this),
            this._element.off("screen:set:resolution", this._onResolutionChange, this)
        }
        ,
        e._onResolutionChange = function(t) {}
        ,
        e._onParentResizeOrPivotChange = function() {
            this._renderable.mesh && this._updateMesh(this._renderable.mesh)
        }
        ,
        e._onScreenSpaceChange = function(t) {
            this._updateMaterial(t)
        }
        ,
        e._onScreenChange = function(t, e) {
            t ? this._updateMaterial(t.screen.screenSpace) : this._updateMaterial(!1)
        }
        ,
        e._onDrawOrderChange = function(t) {
            this._renderable.setDrawOrder(t),
            this.mask && this._element.screen && this._element.screen.screen.once("syncdraworder", (function() {
                this._renderable.setUnmaskDrawOrder()
            }
            ), this)
        }
        ,
        e._hasUserMaterial = function() {
            return !!this._materialAsset || !!this._material && -1 === this._system.defaultImageMaterials.indexOf(this._material)
        }
        ,
        e._use9Slicing = function() {
            return this.sprite && (1 === this.sprite.renderMode || 2 === this.sprite.renderMode)
        }
        ,
        e._updateMaterial = function(t) {
            var e = !!this._mask
              , i = !(!this.sprite || 1 !== this.sprite.renderMode)
              , n = !(!this.sprite || 2 !== this.sprite.renderMode);
            this._hasUserMaterial() || (this._material = this._system.getImageElementMaterial(t, e, i, n)),
            this._renderable && (this._renderable.setCull(!0),
            this._renderable.setMaterial(this._material),
            this._renderable.setScreenSpace(t),
            this._renderable.setLayer(t ? 0 : 15))
        }
        ,
        e._createMesh = function() {
            var t = this._element
              , e = t.calculatedWidth
              , i = t.calculatedHeight
              , n = this._rect
              , s = new ArrayBuffer(128)
              , a = new Float32Array(s);
            a[5] = 1,
            a[6] = n.x,
            a[7] = 1 - n.y,
            a[8] = e,
            a[13] = 1,
            a[14] = n.x + n.z,
            a[15] = 1 - n.y,
            a[16] = e,
            a[17] = i,
            a[21] = 1,
            a[22] = n.x + n.z,
            a[23] = 1 - (n.y + n.w),
            a[25] = i,
            a[29] = 1,
            a[30] = n.x,
            a[31] = 1 - (n.y + n.w);
            var r = [{
                semantic: se,
                components: 3,
                type: 6
            }, {
                semantic: ae,
                components: 3,
                type: 6
            }, {
                semantic: ue,
                components: 2,
                type: 6
            }]
              , o = this._system.app.graphicsDevice
              , h = new Qe(o,r)
              , l = new Ze(o,h,4,0,s)
              , c = new Ys(o);
            return c.vertexBuffer = l,
            c.primitive[0].type = 6,
            c.primitive[0].base = 0,
            c.primitive[0].count = 4,
            c.primitive[0].indexed = !1,
            c.aabb.setMinMax(lt.ZERO, new lt(e,i,0)),
            this._updateMesh(c),
            c
        }
        ,
        e._updateMesh = function(t) {
            var e = this._element
              , i = e.calculatedWidth
              , n = e.calculatedHeight
              , s = e._isScreenSpace();
            if (this._updateMaterial(s),
            this._renderable && this._renderable.forceUpdateAabb(),
            !this.sprite || 1 !== this.sprite.renderMode && 2 !== this.sprite.renderMode) {
                var a = t.vertexBuffer
                  , r = new Float32Array(a.lock())
                  , o = e.pivot.x
                  , h = e.pivot.y;
                r[0] = 0 - o * i,
                r[1] = 0 - h * n,
                r[8] = i - o * i,
                r[9] = 0 - h * n,
                r[16] = i - o * i,
                r[17] = n - h * n,
                r[24] = 0 - o * i,
                r[25] = n - h * n;
                var l = 1
                  , c = 1
                  , u = this._rect;
                if (this._sprite && this._sprite.frameKeys[this._spriteFrame] && this._sprite.atlas) {
                    var d = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];
                    d && (u = d.rect,
                    l = this._sprite.atlas.texture.width,
                    c = this._sprite.atlas.texture.height)
                }
                r[6] = u.x / l,
                r[7] = 1 - u.y / c,
                r[14] = (u.x + u.z) / l,
                r[15] = 1 - u.y / c,
                r[22] = (u.x + u.z) / l,
                r[23] = 1 - (u.y + u.w) / c,
                r[30] = u.x / l,
                r[31] = 1 - (u.y + u.w) / c,
                a.unlock();
                var f = new lt(0 - o * i,0 - h * n,0)
                  , p = new lt(i - o * i,n - h * n,0);
                t.aabb.setMinMax(f, p),
                this._renderable && (this._renderable.node.setLocalScale(1, 1, 1),
                this._renderable.node.setLocalPosition(0, 0, 0),
                this._renderable.setAabbFunc(null))
            } else {
                var m = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]]
                  , _ = 2 / m.rect.z
                  , g = 2 / m.rect.w;
                this._innerOffset.set(m.border.x * _, m.border.y * g, m.border.z * _, m.border.w * g);
                var v = this.sprite.atlas.texture;
                this._atlasRect.set(m.rect.x / v.width, m.rect.y / v.height, m.rect.z / v.width, m.rect.w / v.height);
                var y = null !== this._pixelsPerUnit ? this._pixelsPerUnit : this.sprite.pixelsPerUnit
                  , x = m.rect.z / y
                  , b = m.rect.w / y;
                this._outerScale.set(Math.max(i, this._innerOffset.x * x), Math.max(n, this._innerOffset.y * b));
                var S = x
                  , T = b;
                this._outerScale.x /= x,
                this._outerScale.y /= b,
                S *= it.clamp(i / (this._innerOffset.x * x), 1e-4, 1),
                T *= it.clamp(n / (this._innerOffset.y * b), 1e-4, 1),
                this._renderable && (this._innerOffsetUniform[0] = this._innerOffset.x,
                this._innerOffsetUniform[1] = this._innerOffset.y,
                this._innerOffsetUniform[2] = this._innerOffset.z,
                this._innerOffsetUniform[3] = this._innerOffset.w,
                this._renderable.setParameter("innerOffset", this._innerOffsetUniform),
                this._atlasRectUniform[0] = this._atlasRect.x,
                this._atlasRectUniform[1] = this._atlasRect.y,
                this._atlasRectUniform[2] = this._atlasRect.z,
                this._atlasRectUniform[3] = this._atlasRect.w,
                this._renderable.setParameter("atlasRect", this._atlasRectUniform),
                this._outerScaleUniform[0] = this._outerScale.x,
                this._outerScaleUniform[1] = this._outerScale.y,
                this._renderable.setParameter("outerScale", this._outerScaleUniform),
                this._renderable.setAabbFunc(this._updateAabbFunc),
                this._renderable.node.setLocalScale(S, T, 1),
                this._renderable.node.setLocalPosition((.5 - e.pivot.x) * i, (.5 - e.pivot.y) * n, 0))
            }
            this._meshDirty = !1
        }
        ,
        e._updateSprite = function() {
            var t = !1
              , e = null;
            this._sprite && this._sprite.atlas && (e = this._sprite.meshes[this.spriteFrame],
            t = 1 === this._sprite.renderMode || 2 === this._sprite.renderMode),
            this.mesh = t ? e : this._defaultMesh,
            this.mesh && (this._element._beingInitialized ? this._meshDirty = !0 : this._updateMesh(this.mesh))
        }
        ,
        e._updateAabb = function(t) {
            return t.center.set(0, 0, 0),
            t.halfExtents.set(.5 * this._outerScale.x, .5 * this._outerScale.y, .001),
            t.setFromTransformedAabb(t, this._renderable.node.getWorldTransform()),
            t
        }
        ,
        e._toggleMask = function() {
            this._element._dirtifyMask();
            var t = this._element._isScreenSpace();
            this._updateMaterial(t),
            this._renderable.setMask(!!this._mask)
        }
        ,
        e._onMaterialLoad = function(t) {
            this.material = t.resource
        }
        ,
        e._onMaterialAdded = function(t) {
            this._system.app.assets.off("add:" + t.id, this._onMaterialAdded, this),
            this._materialAsset === t.id && this._bindMaterialAsset(t)
        }
        ,
        e._bindMaterialAsset = function(t) {
            this._entity.enabled && (t.on("load", this._onMaterialLoad, this),
            t.on("change", this._onMaterialChange, this),
            t.on("remove", this._onMaterialRemove, this),
            t.resource ? this._onMaterialLoad(t) : this._system.app.assets.load(t))
        }
        ,
        e._unbindMaterialAsset = function(t) {
            t.off("load", this._onMaterialLoad, this),
            t.off("change", this._onMaterialChange, this),
            t.off("remove", this._onMaterialRemove, this)
        }
        ,
        e._onMaterialChange = function() {}
        ,
        e._onMaterialRemove = function() {}
        ,
        e._onTextureAdded = function(t) {
            this._system.app.assets.off("add:" + t.id, this._onTextureAdded, this),
            this._textureAsset === t.id && this._bindTextureAsset(t)
        }
        ,
        e._bindTextureAsset = function(t) {
            this._entity.enabled && (t.on("load", this._onTextureLoad, this),
            t.on("change", this._onTextureChange, this),
            t.on("remove", this._onTextureRemove, this),
            t.resource ? this._onTextureLoad(t) : this._system.app.assets.load(t))
        }
        ,
        e._unbindTextureAsset = function(t) {
            t.off("load", this._onTextureLoad, this),
            t.off("change", this._onTextureChange, this),
            t.off("remove", this._onTextureRemove, this)
        }
        ,
        e._onTextureLoad = function(t) {
            this.texture = t.resource
        }
        ,
        e._onTextureChange = function(t) {}
        ,
        e._onTextureRemove = function(t) {}
        ,
        e._onSpriteAssetAdded = function(t) {
            this._system.app.assets.off("add:" + t.id, this._onSpriteAssetAdded, this),
            this._spriteAsset === t.id && this._bindSpriteAsset(t)
        }
        ,
        e._bindSpriteAsset = function(t) {
            this._entity.enabled && (t.on("load", this._onSpriteAssetLoad, this),
            t.on("change", this._onSpriteAssetChange, this),
            t.on("remove", this._onSpriteAssetRemove, this),
            t.resource ? this._onSpriteAssetLoad(t) : this._system.app.assets.load(t))
        }
        ,
        e._unbindSpriteAsset = function(t) {
            t.off("load", this._onSpriteAssetLoad, this),
            t.off("change", this._onSpriteAssetChange, this),
            t.off("remove", this._onSpriteAssetRemove, this),
            t.data.textureAtlasAsset && this._system.app.assets.off("load:" + t.data.textureAtlasAsset, this._onTextureAtlasLoad, this)
        }
        ,
        e._onSpriteAssetLoad = function(t) {
            if (t && t.resource)
                if (t.resource.atlas)
                    this.sprite = t.resource;
                else {
                    var e = t.data.textureAtlasAsset;
                    if (e) {
                        var i = this._system.app.assets;
                        i.off("load:" + e, this._onTextureAtlasLoad, this),
                        i.once("load:" + e, this._onTextureAtlasLoad, this)
                    }
                }
            else
                this.sprite = null
        }
        ,
        e._onSpriteAssetChange = function(t) {
            this._onSpriteAssetLoad(t)
        }
        ,
        e._onSpriteAssetRemove = function(t) {}
        ,
        e._bindSprite = function(t) {
            t.on("set:meshes", this._onSpriteMeshesChange, this),
            t.on("set:pixelsPerUnit", this._onSpritePpuChange, this),
            t.on("set:atlas", this._onAtlasTextureChange, this),
            t.atlas && t.atlas.on("set:texture", this._onAtlasTextureChange, this)
        }
        ,
        e._unbindSprite = function(t) {
            t.off("set:meshes", this._onSpriteMeshesChange, this),
            t.off("set:pixelsPerUnit", this._onSpritePpuChange, this),
            t.off("set:atlas", this._onAtlasTextureChange, this),
            t.atlas && t.atlas.off("set:texture", this._onAtlasTextureChange, this)
        }
        ,
        e._onSpriteMeshesChange = function() {
            this._sprite && (this._spriteFrame = it.clamp(this._spriteFrame, 0, this._sprite.frameKeys.length - 1)),
            this._updateSprite()
        }
        ,
        e._onSpritePpuChange = function() {
            0 !== this.sprite.renderMode && null === this._pixelsPerUnit && this._updateSprite()
        }
        ,
        e._onAtlasTextureChange = function() {
            this.sprite && this.sprite.atlas && this.sprite.atlas.texture ? (this._renderable.setParameter("texture_emissiveMap", this._sprite.atlas.texture),
            this._renderable.setParameter("texture_opacityMap", this._sprite.atlas.texture)) : (this._renderable.deleteParameter("texture_emissiveMap"),
            this._renderable.deleteParameter("texture_opacityMap"))
        }
        ,
        e._onTextureAtlasLoad = function(t) {
            var e = this._spriteAsset;
            e instanceof Kh ? this._onSpriteAssetLoad(e) : this._onSpriteAssetLoad(this._system.app.assets.get(e))
        }
        ,
        e.onEnable = function() {
            if (this._materialAsset) {
                var t = this._system.app.assets.get(this._materialAsset);
                t && t.resource !== this._material && this._bindMaterialAsset(t)
            }
            if (this._textureAsset) {
                var e = this._system.app.assets.get(this._textureAsset);
                e && e.resource !== this._texture && this._bindTextureAsset(e)
            }
            if (this._spriteAsset) {
                var i = this._system.app.assets.get(this._spriteAsset);
                i && i.resource !== this._sprite && this._bindSpriteAsset(i)
            }
            this._element.addModelToLayers(this._renderable.model)
        }
        ,
        e.onDisable = function() {
            this._element.removeModelFromLayers(this._renderable.model)
        }
        ,
        e._setStencil = function(t) {
            this._renderable.meshInstance.stencilFront = t,
            this._renderable.meshInstance.stencilBack = t;
            var e = 0;
            if (this._element.maskedBy && (e = this._element.maskedBy.element._image._maskRef),
            this._renderable.unmaskMeshInstance) {
                var i = new Ep({
                    ref: e + 1,
                    func: 2,
                    zpass: 5
                });
                this._renderable.unmaskMeshInstance.stencilFront = i,
                this._renderable.unmaskMeshInstance.stencilBack = i
            }
        }
        ,
        G(t, [{
            key: "color",
            get: function() {
                return this._color
            },
            set: function(t) {
                var e = t.r
                  , i = t.g
                  , n = t.b;
                this._color.r === e && this._color.g === i && this._color.b === n || (this._color.r = e,
                this._color.g = i,
                this._color.b = n,
                this._colorUniform[0] = e,
                this._colorUniform[1] = i,
                this._colorUniform[2] = n,
                this._renderable.setParameter("material_emissive", this._colorUniform)),
                this._element && this._element.fire("set:color", this._color)
            }
        }, {
            key: "opacity",
            get: function() {
                return this._color.a
            },
            set: function(t) {
                t !== this._color.a && (this._color.a = t,
                this._renderable.setParameter("material_opacity", t)),
                this._element && this._element.fire("set:opacity", t)
            }
        }, {
            key: "rect",
            get: function() {
                return this._rect
            },
            set: function(t) {
                var e, i, n, s;
                t instanceof dt ? (e = t.x,
                i = t.y,
                n = t.z,
                s = t.w) : (e = t[0],
                i = t[1],
                n = t[2],
                s = t[3]),
                e === this._rect.x && i === this._rect.y && n === this._rect.z && s === this._rect.w || (this._rect.set(e, i, n, s),
                this._renderable.mesh && (this._element._beingInitialized ? this._meshDirty = !0 : this._updateMesh(this._renderable.mesh)))
            }
        }, {
            key: "material",
            get: function() {
                return this._material
            },
            set: function(t) {
                if (this._material !== t) {
                    if (!t) {
                        var e = this._element._isScreenSpace();
                        t = this.mask ? e ? this._system.defaultScreenSpaceImageMaskMaterial : this._system.defaultImageMaskMaterial : e ? this._system.defaultScreenSpaceImageMaterial : this._system.defaultImageMaterial
                    }
                    this._material = t,
                    t && (this._renderable.setMaterial(t),
                    this._hasUserMaterial() ? (this._renderable.deleteParameter("material_opacity"),
                    this._renderable.deleteParameter("material_emissive")) : (this._colorUniform[0] = this._color.r,
                    this._colorUniform[1] = this._color.g,
                    this._colorUniform[2] = this._color.b,
                    this._renderable.setParameter("material_emissive", this._colorUniform),
                    this._renderable.setParameter("material_opacity", this._color.a)))
                }
            }
        }, {
            key: "materialAsset",
            get: function() {
                return this._materialAsset
            },
            set: function(t) {
                var e = this._system.app.assets
                  , i = t;
                if (t instanceof Kh && (i = t.id),
                this._materialAsset !== i) {
                    if (this._materialAsset) {
                        e.off("add:" + this._materialAsset, this._onMaterialAdded, this);
                        var n = e.get(this._materialAsset);
                        n && (n.off("load", this._onMaterialLoad, this),
                        n.off("change", this._onMaterialChange, this),
                        n.off("remove", this._onMaterialRemove, this))
                    }
                    if (this._materialAsset = i,
                    this._materialAsset) {
                        var s = e.get(this._materialAsset);
                        s ? this._bindMaterialAsset(s) : (this.material = null,
                        e.on("add:" + this._materialAsset, this._onMaterialAdded, this))
                    } else
                        this.material = null
                }
            }
        }, {
            key: "texture",
            get: function() {
                return this._texture
            },
            set: function(t) {
                if (this._texture !== t) {
                    if (this._textureAsset) {
                        var e = this._system.app.assets.get(this._textureAsset);
                        e && e.resource !== t && (this.textureAsset = null)
                    }
                    this._texture = t,
                    t ? (this._spriteAsset && (this.spriteAsset = null),
                    this._renderable.setParameter("texture_emissiveMap", this._texture),
                    this._renderable.setParameter("texture_opacityMap", this._texture),
                    this._colorUniform[0] = this._color.r,
                    this._colorUniform[1] = this._color.g,
                    this._colorUniform[2] = this._color.b,
                    this._renderable.setParameter("material_emissive", this._colorUniform),
                    this._renderable.setParameter("material_opacity", this._color.a)) : (this._renderable.deleteParameter("texture_emissiveMap"),
                    this._renderable.deleteParameter("texture_opacityMap"))
                }
            }
        }, {
            key: "textureAsset",
            get: function() {
                return this._textureAsset
            },
            set: function(t) {
                var e = this._system.app.assets
                  , i = t;
                if (t instanceof Kh && (i = t.id),
                this._textureAsset !== i) {
                    if (this._textureAsset) {
                        e.off("add:" + this._textureAsset, this._onTextureAdded, this);
                        var n = e.get(this._textureAsset);
                        n && (n.off("load", this._onTextureLoad, this),
                        n.off("change", this._onTextureChange, this),
                        n.off("remove", this._onTextureRemove, this))
                    }
                    if (this._textureAsset = i,
                    this._textureAsset) {
                        var s = e.get(this._textureAsset);
                        s ? this._bindTextureAsset(s) : (this.texture = null,
                        e.on("add:" + this._textureAsset, this._onTextureAdded, this))
                    } else
                        this.texture = null
                }
            }
        }, {
            key: "spriteAsset",
            get: function() {
                return this._spriteAsset
            },
            set: function(t) {
                var e = this._system.app.assets
                  , i = t;
                if (t instanceof Kh && (i = t.id),
                this._spriteAsset !== i) {
                    if (this._spriteAsset) {
                        e.off("add:" + this._spriteAsset, this._onSpriteAssetAdded, this);
                        var n = e.get(this._spriteAsset);
                        n && this._unbindSpriteAsset(n)
                    }
                    if (this._spriteAsset = i,
                    this._spriteAsset) {
                        var s = e.get(this._spriteAsset);
                        s ? this._bindSpriteAsset(s) : (this.sprite = null,
                        e.on("add:" + this._spriteAsset, this._onSpriteAssetAdded, this))
                    } else
                        this.sprite = null
                }
                this._element && this._element.fire("set:spriteAsset", i)
            }
        }, {
            key: "sprite",
            get: function() {
                return this._sprite
            },
            set: function(t) {
                if (this._sprite !== t) {
                    if (this._sprite && this._unbindSprite(this._sprite),
                    this._spriteAsset) {
                        var e = this._system.app.assets.get(this._spriteAsset);
                        e && e.resource !== t && (this.spriteAsset = null)
                    }
                    this._sprite = t,
                    this._sprite && (this._bindSprite(this._sprite),
                    this._textureAsset && (this.textureAsset = null)),
                    this._sprite && this._sprite.atlas && this._sprite.atlas.texture ? (this._renderable.setParameter("texture_emissiveMap", this._sprite.atlas.texture),
                    this._renderable.setParameter("texture_opacityMap", this._sprite.atlas.texture)) : (this._renderable.deleteParameter("texture_emissiveMap"),
                    this._renderable.deleteParameter("texture_opacityMap")),
                    this._sprite && (this._spriteFrame = it.clamp(this._spriteFrame, 0, this._sprite.frameKeys.length - 1)),
                    this._updateSprite()
                }
            }
        }, {
            key: "spriteFrame",
            get: function() {
                return this._spriteFrame
            },
            set: function(t) {
                var e = this._spriteFrame;
                this._sprite ? this._spriteFrame = it.clamp(t, 0, this._sprite.frameKeys.length - 1) : this._spriteFrame = t,
                this._spriteFrame !== e && this._updateSprite(),
                this._element && this._element.fire("set:spriteFrame", t)
            }
        }, {
            key: "mesh",
            get: function() {
                return this._renderable.mesh
            },
            set: function(t) {
                this._renderable.setMesh(t),
                this._defaultMesh === t ? this._renderable.setAabbFunc(null) : this._renderable.setAabbFunc(this._updateAabbFunc)
            }
        }, {
            key: "mask",
            get: function() {
                return this._mask
            },
            set: function(t) {
                this._mask !== t && (this._mask = t,
                this._toggleMask())
            }
        }, {
            key: "pixelsPerUnit",
            get: function() {
                return this._pixelsPerUnit
            },
            set: function(t) {
                this._pixelsPerUnit !== t && (this._pixelsPerUnit = t,
                !this._sprite || 1 !== this._sprite.renderMode && 2 !== this._sprite.renderMode || this._updateSprite())
            }
        }, {
            key: "aabb",
            get: function() {
                return this._renderable.meshInstance ? this._renderable.meshInstance.aabb : null
            }
        }]),
        t
    }()
      , Ip = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._app = e,
            e.i18n.on("set:locale", i._onSetLocale, j(i)),
            i._autoLoad = !1,
            i._disableLocalization = !1,
            i._defaultAsset = null,
            i._localizedAsset = null,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i._bindDefaultAsset = function() {
            var t = this._app.assets.get(this._defaultAsset);
            t ? this._onDefaultAssetAdd(t) : this._app.assets.once("add:" + this._defaultAsset, this._onDefaultAssetAdd, this)
        }
        ,
        i._unbindDefaultAsset = function() {
            if (this._defaultAsset) {
                this._app.assets.off("add:" + this._defaultAsset, this._onDefaultAssetAdd, this);
                var t = this._app.assets.get(this._defaultAsset);
                t && (t.off("add:localized", this._onLocaleAdd, this),
                t.off("remove:localized", this._onLocaleRemove, this),
                t.off("remove", this._onDefaultAssetRemove, this))
            }
        }
        ,
        i._onDefaultAssetAdd = function(t) {
            this._defaultAsset === t.id && (t.on("add:localized", this._onLocaleAdd, this),
            t.on("remove:localized", this._onLocaleRemove, this),
            t.once("remove", this._onDefaultAssetRemove, this))
        }
        ,
        i._onDefaultAssetRemove = function(t) {
            this._defaultAsset === t.id && (t.off("add:localized", this._onLocaleAdd, this),
            t.off("remove:localized", this._onLocaleAdd, this),
            this._app.assets.once("add:" + this._defaultAsset, this._onDefaultAssetAdd, this))
        }
        ,
        i._bindLocalizedAsset = function() {
            if (this._autoLoad) {
                var t = this._app.assets.get(this._localizedAsset);
                t && (t.on("load", this._onLocalizedAssetLoad, this),
                t.on("change", this._onLocalizedAssetChange, this),
                t.on("remove", this._onLocalizedAssetRemove, this),
                t.resource ? this._onLocalizedAssetLoad(t) : this._app.assets.load(t))
            }
        }
        ,
        i._unbindLocalizedAsset = function() {
            var t = this._app.assets.get(this._localizedAsset);
            t && (t.off("load", this._onLocalizedAssetLoad, this),
            t.off("change", this._onLocalizedAssetChange, this),
            t.off("remove", this._onLocalizedAssetRemove, this))
        }
        ,
        i._onLocalizedAssetAdd = function(t) {
            this._localizedAsset === t.id && this._bindLocalizedAsset()
        }
        ,
        i._onLocalizedAssetLoad = function(t) {
            this.fire("load", t)
        }
        ,
        i._onLocalizedAssetChange = function(t, e, i, n) {
            this.fire("change", t, e, i, n)
        }
        ,
        i._onLocalizedAssetRemove = function(t) {
            this._localizedAsset === t.id && (this.localizedAsset = this._defaultAsset),
            this.fire("remove", t)
        }
        ,
        i._onLocaleAdd = function(t, e) {
            this._app.i18n.locale === t && this._onSetLocale(t)
        }
        ,
        i._onLocaleRemove = function(t, e) {
            this._app.i18n.locale === t && this._onSetLocale(t)
        }
        ,
        i._onSetLocale = function(t) {
            if (this._defaultAsset) {
                var e = this._app.assets.get(this._defaultAsset);
                if (e && !this._disableLocalization) {
                    var i = e.getLocalizedAssetId(t);
                    this.localizedAsset = i || this._defaultAsset
                } else
                    this.localizedAsset = this._defaultAsset
            } else
                this.localizedAsset = null
        }
        ,
        i.destroy = function() {
            this.defaultAsset = null,
            this._app.i18n.off("set:locale", this._onSetLocale, this),
            this.off()
        }
        ,
        G(e, [{
            key: "defaultAsset",
            get: function() {
                return this._defaultAsset
            },
            set: function(t) {
                var e = t instanceof Kh ? t.id : t;
                this._defaultAsset !== e && (this._defaultAsset && this._unbindDefaultAsset(),
                this._defaultAsset = e,
                this._defaultAsset && this._bindDefaultAsset(),
                this._onSetLocale(this._app.i18n.locale))
            }
        }, {
            key: "localizedAsset",
            get: function() {
                return this._localizedAsset
            },
            set: function(t) {
                var e = t instanceof Kh ? t.id : t;
                this._localizedAsset !== e && (this._localizedAsset && (this._app.assets.off("add:" + this._localizedAsset, this._onLocalizedAssetAdd, this),
                this._unbindLocalizedAsset(),
                this._localizedAsset = null),
                this._localizedAsset = e,
                this._localizedAsset && (this._app.assets.get(this._localizedAsset) ? this._bindLocalizedAsset() : this._app.assets.once("add:" + this._localizedAsset, this._onLocalizedAssetAdd, this)))
            }
        }, {
            key: "autoLoad",
            get: function() {
                return this._autoLoad
            },
            set: function(t) {
                this._autoLoad !== t && (this._autoLoad = t,
                this._autoLoad && this._localizedAsset && (this._unbindLocalizedAsset(),
                this._bindLocalizedAsset()))
            }
        }, {
            key: "disableLocalization",
            get: function() {
                return this._disableLocalization
            },
            set: function(t) {
                this._disableLocalization !== t && (this._disableLocalization = t,
                this._onSetLocale(this._app.i18n.locale))
            }
        }]),
        e
    }(u)
      , Lp = /[A-Z|a-z|0-9|_|-|/]/
      , Dp = function() {
        function t(t) {
            this._symbols = t,
            this._index = 0,
            this._last = 0,
            this._cur = this._symbols.length > 0 ? this._symbols[0] : null,
            this._buf = [],
            this._mode = "text",
            this._error = null
        }
        var e = t.prototype;
        return e.read = function() {
            for (var t = this._read(); 8 === t; )
                t = this._read();
            return 0 !== t && 1 !== t && (this._last = this._index),
            t
        }
        ,
        e.buf = function() {
            return this._buf
        }
        ,
        e.last = function() {
            return this._last
        }
        ,
        e.error = function() {
            return this._error
        }
        ,
        e.debugPrint = function() {
            for (var t = ["EOF", "ERROR", "TEXT", "OPEN_BRACKET", "CLOSE_BRACKET", "EQUALS", "STRING", "IDENTIFIER", "WHITESPACE"], e = this.read(), i = ""; i += (i.length > 0 ? "\n" : "") + t[e] + " '" + this.buf().join("") + "'",
            0 !== e && 1 !== e; )
                e = this.read();
            return i
        }
        ,
        e._read = function() {
            return this._buf = [],
            this._eof() ? 0 : "text" === this._mode ? this._text() : this._tag()
        }
        ,
        e._text = function() {
            for (; ; )
                switch (this._cur) {
                case null:
                    return this._buf.length > 0 ? 2 : 0;
                case "[":
                    return this._mode = "tag",
                    this._buf.length > 0 ? 2 : this._tag();
                case "\\":
                    switch (this._next(),
                    this._cur) {
                    case "[":
                        this._store();
                        break;
                    default:
                        this._output("\\")
                    }
                    break;
                default:
                    this._store()
                }
        }
        ,
        e._tag = function() {
            switch (this._cur) {
            case null:
                return this._error = "unexpected end of input reading tag",
                1;
            case "[":
                return this._store(),
                3;
            case "]":
                return this._store(),
                this._mode = "text",
                4;
            case "=":
                return this._store(),
                5;
            case " ":
            case "\t":
            case "\n":
            case "\r":
            case "\v":
            case "\f":
                return this._whitespace();
            case '"':
                return this._string();
            default:
                return this._isIdentifierSymbol(this._cur) ? this._identifier() : (this._error = "unrecognized character",
                1)
            }
        }
        ,
        e._whitespace = function() {
            for (this._store(); -1 !== " \t\n\r\v\f".indexOf(this._cur); )
                this._store();
            return 8
        }
        ,
        e._string = function() {
            for (this._next(); ; )
                switch (this._cur) {
                case null:
                    return this._error = "unexpected end of input reading string",
                    1;
                case '"':
                    return this._next(),
                    6;
                default:
                    this._store()
                }
        }
        ,
        e._identifier = function() {
            for (this._store(); null !== this._cur && this._isIdentifierSymbol(this._cur); )
                this._store();
            return 7
        }
        ,
        e._isIdentifierSymbol = function(t) {
            return 1 === t.length && null !== t.match(Lp)
        }
        ,
        e._eof = function() {
            return null === this._cur
        }
        ,
        e._next = function() {
            return this._eof() || (this._index++,
            this._cur = this._index < this._symbols.length ? this._symbols[this._index] : null),
            this._cur
        }
        ,
        e._store = function() {
            return this._buf.push(this._cur),
            this._next()
        }
        ,
        e._output = function(t) {
            this._buf.push(t)
        }
        ,
        t
    }()
      , kp = function() {
        function t(t) {
            this._scanner = new Dp(t),
            this._error = null
        }
        var e = t.prototype;
        return e.parse = function(t, e) {
            for (; ; ) {
                switch (this._scanner.read()) {
                case 0:
                    return !0;
                case 1:
                    return !1;
                case 2:
                    Array.prototype.push.apply(t, this._scanner.buf());
                    break;
                case 3:
                    if (!this._parseTag(t, e))
                        return !1;
                    break;
                default:
                    return !1
                }
            }
        }
        ,
        e.error = function() {
            return "Error evaluating markup at #" + this._scanner.last().toString() + " (" + (this._scanner.error() || this._error) + ")"
        }
        ,
        e._parseTag = function(t, e) {
            var i = this._scanner.read();
            if (7 !== i)
                return this._error = "expected identifier",
                !1;
            var n = this._scanner.buf().join("");
            if ("/" === n[0]) {
                for (var s = e.length - 1; s >= 0; --s)
                    if (n === "/" + e[s].name && null === e[s].end)
                        return e[s].end = t.length,
                        4 === (i = this._scanner.read()) || (this._error = "expected close bracket",
                        !1);
                return this._error = "failed to find matching tag",
                !1
            }
            var a = {
                name: n,
                value: null,
                attributes: {},
                start: t.length,
                end: null
            };
            if (5 === (i = this._scanner.read())) {
                if (6 !== (i = this._scanner.read()))
                    return this._error = "expected string",
                    !1;
                a.value = this._scanner.buf().join(""),
                i = this._scanner.read()
            }
            for (; ; ) {
                switch (i) {
                case 4:
                    return e.push(a),
                    !0;
                case 7:
                    var r = this._scanner.buf().join("");
                    if (5 !== (i = this._scanner.read()))
                        return this._error = "expected equals",
                        !1;
                    if (6 !== (i = this._scanner.read()))
                        return this._error = "expected string",
                        !1;
                    var o = this._scanner.buf().join("");
                    a.attributes[r] = o;
                    break;
                default:
                    return this._error = "expected close bracket or identifier",
                    !1
                }
                i = this._scanner.read()
            }
        }
        ,
        t
    }();
    function Op(t, e) {
        for (var i in e)
            if (e.hasOwnProperty(i)) {
                var n = e[i];
                n instanceof Object ? (t.hasOwnProperty(i) || (t[i] = {}),
                Op(t[i], e[i])) : t[i] = n
            }
    }
    function Fp(t) {
        if (0 === t.length)
            return null;
        for (var e = {}, i = 0; i < t.length; ++i) {
            var n = t[i]
              , s = {};
            s[n.name] = {
                value: n.value,
                attributes: n.attributes
            },
            Op(e, s)
        }
        return e
    }
    function Bp(t) {
        var e = new kp(t)
          , i = []
          , n = [];
        if (!e.parse(i, n))
            return console.warn(e.error()),
            {
                symbols: t,
                tags: null
            };
        var s = n.find((function(t) {
            return null === t.end
        }
        ));
        return s ? (console.warn("Markup error: found unclosed tag='" + s.name + "'"),
        {
            symbols: t,
            tags: null
        }) : {
            symbols: i,
            tags: function(t, e) {
                if (0 === t.length)
                    return null;
                for (var i = {}, n = 0; n < t.length; ++n) {
                    var s = t[n];
                    i.hasOwnProperty(s.start) ? null === i[s.start].open ? i[s.start].open = [s] : i[s.start].open.push(s) : i[s.start] = {
                        open: [s],
                        close: null
                    },
                    i.hasOwnProperty(s.end) ? null === i[s.end].close ? i[s.end].close = [s] : i[s.end].close.push(s) : i[s.end] = {
                        open: null,
                        close: [s]
                    }
                }
                var a = [];
                function r(t) {
                    a = a.filter((function(e) {
                        return void 0 === t.find((function(t) {
                            return t === e
                        }
                        ))
                    }
                    ))
                }
                function o(t) {
                    for (var e = 0; e < t.length; ++e)
                        a.push(t[e])
                }
                for (var h = Object.keys(i).sort((function(t, e) {
                    return t - e
                }
                )), l = [], c = 0; c < h.length; ++c) {
                    var u = i[h[c]];
                    null !== u.close && r(u.close),
                    null !== u.open && o(u.open),
                    l.push({
                        start: h[c],
                        tags: Fp(a)
                    })
                }
                for (var d = [], f = null, p = 0; p < l.length; ++p) {
                    for (var m = l[p]; d.length < m.start; )
                        d.push(f ? f.tags : null);
                    f = m
                }
                for (; d.length < e; )
                    d.push(null);
                return d
            }(n, i.length)
        }
    }
    var Np = function() {
        function t() {}
        return t.evaluate = function(t) {
            return Bp(t)
        }
        ,
        t
    }()
      , Up = function() {
        this.count = 0,
        this.quad = 0,
        this.lines = {},
        this.positions = [],
        this.normals = [],
        this.uvs = [],
        this.colors = [],
        this.indices = [],
        this.meshInstance = null
    }
      , zp = /^[\r\n]$/
      , Vp = /^[ \t]$/
      , Gp = /^[ \t\-]|[\u200b]$/
      , Wp = /^[a-z0-9]$/i
      , Hp = /^[\u1100-\u11ff]|[\u3000-\u9fff]|[\ua960-\ua97f]|[\uac00-\ud7ff]$/
      , Xp = /^[〕〉》」』】〙〗〟ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻]$/
      , jp = ["​", "؜", "‎", "‏", "‪", "‫", "‬", "‭", "‮", "⁦", "⁧", "⁨", "⁩"]
      , qp = {
        width: 0,
        height: 0,
        xadvance: 0,
        xoffset: 0,
        yoffset: 0
    }
      , Yp = function() {
        function t(t) {
            this._element = t,
            this._system = t.system,
            this._entity = t.entity,
            this._text = "",
            this._symbols = [],
            this._colorPalette = [],
            this._symbolColors = null,
            this._i18nKey = null,
            this._fontAsset = new Ip(this._system.app),
            this._fontAsset.disableLocalization = !0,
            this._fontAsset.on("load", this._onFontLoad, this),
            this._fontAsset.on("change", this._onFontChange, this),
            this._fontAsset.on("remove", this._onFontRemove, this),
            this._font = null,
            this._color = new at(1,1,1,1),
            this._colorUniform = new Float32Array(3),
            this._spacing = 1,
            this._fontSize = 32,
            this._fontMinY = 0,
            this._fontMaxY = 0,
            this._originalFontSize = 32,
            this._maxFontSize = 32,
            this._minFontSize = 8,
            this._autoFitWidth = !1,
            this._autoFitHeight = !1,
            this._maxLines = -1,
            this._lineHeight = 32,
            this._scaledLineHeight = 32,
            this._wrapLines = !1,
            this._drawOrder = 0,
            this._alignment = new ut(.5,.5),
            this._autoWidth = !0,
            this._autoHeight = !0,
            this.width = 0,
            this.height = 0,
            this._node = new ji,
            this._model = new mh,
            this._model.graph = this._node,
            this._entity.addChild(this._node),
            this._meshInfo = [],
            this._material = null,
            this._aabbDirty = !0,
            this._aabb = new Mt,
            this._noResize = !1,
            this._currentMaterialType = null,
            this._maskedMaterialSrc = null,
            this._rtlReorder = !1,
            this._unicodeConverter = !1,
            this._rtl = !1,
            this._outlineColor = new at(0,0,0,1),
            this._outlineColorUniform = new Float32Array(4),
            this._outlineThicknessScale = .2,
            this._outlineThickness = 0,
            this._shadowColor = new at(0,0,0,1),
            this._shadowColorUniform = new Float32Array(4),
            this._shadowOffsetScale = .005,
            this._shadowOffset = new ut(0,0),
            this._shadowOffsetUniform = new Float32Array(2),
            this._enableMarkup = !1,
            this._onScreenChange(this._element.screen),
            t.on("resize", this._onParentResize, this),
            t.on("set:screen", this._onScreenChange, this),
            t.on("screen:set:screenspace", this._onScreenSpaceChange, this),
            t.on("set:draworder", this._onDrawOrderChange, this),
            t.on("set:pivot", this._onPivotChange, this),
            this._system.app.i18n.on("set:locale", this._onLocaleSet, this),
            this._system.app.i18n.on("data:add", this._onLocalizationData, this),
            this._system.app.i18n.on("data:remove", this._onLocalizationData, this),
            this._rangeStart = 0,
            this._rangeEnd = 0
        }
        var e = t.prototype;
        return e.destroy = function() {
            this._setMaterial(null),
            this._model && (this._element.removeModelFromLayers(this._model),
            this._model.destroy(),
            this._model = null),
            this._fontAsset.destroy(),
            this.font = null,
            this._element.off("resize", this._onParentResize, this),
            this._element.off("set:screen", this._onScreenChange, this),
            this._element.off("screen:set:screenspace", this._onScreenSpaceChange, this),
            this._element.off("set:draworder", this._onDrawOrderChange, this),
            this._element.off("set:pivot", this._onPivotChange, this),
            this._system.app.i18n.off("set:locale", this._onLocaleSet, this),
            this._system.app.i18n.off("data:add", this._onLocalizationData, this),
            this._system.app.i18n.off("data:remove", this._onLocalizationData, this)
        }
        ,
        e._onParentResize = function(t, e) {
            this._noResize || this._font && this._updateText()
        }
        ,
        e._onScreenChange = function(t) {
            t ? this._updateMaterial(t.screen.screenSpace) : this._updateMaterial(!1)
        }
        ,
        e._onScreenSpaceChange = function(t) {
            this._updateMaterial(t)
        }
        ,
        e._onDrawOrderChange = function(t) {
            if (this._drawOrder = t,
            this._model)
                for (var e = 0, i = this._model.meshInstances.length; e < i; e++)
                    this._model.meshInstances[e].drawOrder = t
        }
        ,
        e._onPivotChange = function(t) {
            this._font && this._updateText()
        }
        ,
        e._onLocaleSet = function(t) {
            if (this._i18nKey) {
                if (this.fontAsset) {
                    var e = this._system.app.assets.get(this.fontAsset);
                    e && e.resource && e.resource === this._font || (this.font = null)
                }
                this._resetLocalizedText()
            }
        }
        ,
        e._onLocalizationData = function(t, e) {
            this._i18nKey && e[this._i18nKey] && this._resetLocalizedText()
        }
        ,
        e._resetLocalizedText = function() {
            this._setText(this._system.app.i18n.getText(this._i18nKey))
        }
        ,
        e._setText = function(t) {
            if (this.unicodeConverter) {
                var e = this._system.getUnicodeConverter();
                e ? t = e(t) : console.warn("Element created with unicodeConverter option but no unicodeConverter function registered")
            }
            this._text !== t && (this._font && this._updateText(t),
            this._text = t)
        }
        ,
        e._updateText = function(t) {
            var e;
            if (void 0 === t && (t = this._text),
            this._symbols = U.getSymbols(t.normalize ? t.normalize("NFC") : t),
            0 === this._symbols.length && (this._symbols = [" "]),
            this._enableMarkup) {
                var i = Np.evaluate(this._symbols);
                this._symbols = i.symbols,
                e = i.tags
            }
            if (this._rtlReorder) {
                var n = this._system.app.systems.element.getRtlReorder();
                if (n) {
                    var s = n(this._symbols);
                    this._rtl = s.rtl,
                    this._symbols = s.mapping.map((function(t) {
                        return this._symbols[t]
                    }
                    ), this),
                    e && (e = s.mapping.map((function(t) {
                        return e[t]
                    }
                    )))
                } else
                    console.warn("Element created with rtlReorder option but no rtlReorder function registered")
            } else
                this._rtl = !1;
            if (e) {
                var a = {};
                this._colorPalette = [Math.round(255 * this._color.r), Math.round(255 * this._color.g), Math.round(255 * this._color.b)],
                this._symbolColors = [],
                a[this._color.toString(!1).toLowerCase()] = 0;
                for (var r = 0, o = this._symbols.length; r < o; ++r) {
                    var h = e[r]
                      , l = 0;
                    if (h && h.color && h.color.value) {
                        var c = h.color.value;
                        if (7 === c.length && "#" === c[0]) {
                            var u = c.substring(1).toLowerCase();
                            a.hasOwnProperty(u) ? l = a[u] : /^([0-9a-f]{2}){3}$/.test(u) && (l = this._colorPalette.length / 3,
                            a[u] = l,
                            this._colorPalette.push(parseInt(u.substring(0, 2), 16)),
                            this._colorPalette.push(parseInt(u.substring(2, 4), 16)),
                            this._colorPalette.push(parseInt(u.substring(4, 6), 16)))
                        }
                    }
                    this._symbolColors.push(l)
                }
            } else
                this._colorPalette = [],
                this._symbolColors = null;
            for (var d = this._calculateCharsPerTexture(), f = !1, p = this._element, m = p._isScreenSpace(), _ = p._isScreenCulled(), g = function(t) {
                return p.isVisibleForCamera(t)
            }, v = 0, y = this._meshInfo.length; v < y; v++) {
                var x = d[v] || 0
                  , b = this._meshInfo[v];
                if (b.count !== x) {
                    if (f || (p.removeModelFromLayers(this._model),
                    f = !0),
                    b.count = x,
                    b.positions.length = b.normals.length = 3 * x * 4,
                    b.indices.length = 3 * x * 2,
                    b.uvs.length = 2 * x * 4,
                    b.colors.length = 4 * x * 4,
                    b.meshInstance && this._removeMeshInstance(b.meshInstance),
                    0 === x) {
                        b.meshInstance = null;
                        continue
                    }
                    for (var S = 0; S < x; S++)
                        b.indices[3 * S * 2 + 0] = 4 * S,
                        b.indices[3 * S * 2 + 1] = 4 * S + 1,
                        b.indices[3 * S * 2 + 2] = 4 * S + 3,
                        b.indices[3 * S * 2 + 3] = 4 * S + 2,
                        b.indices[3 * S * 2 + 4] = 4 * S + 3,
                        b.indices[3 * S * 2 + 5] = 4 * S + 1,
                        b.normals[4 * S * 3 + 0] = 0,
                        b.normals[4 * S * 3 + 1] = 0,
                        b.normals[4 * S * 3 + 2] = -1,
                        b.normals[4 * S * 3 + 3] = 0,
                        b.normals[4 * S * 3 + 4] = 0,
                        b.normals[4 * S * 3 + 5] = -1,
                        b.normals[4 * S * 3 + 6] = 0,
                        b.normals[4 * S * 3 + 7] = 0,
                        b.normals[4 * S * 3 + 8] = -1,
                        b.normals[4 * S * 3 + 9] = 0,
                        b.normals[4 * S * 3 + 10] = 0,
                        b.normals[4 * S * 3 + 11] = -1;
                    var T = ta(this._system.app.graphicsDevice, b.positions, {
                        uvs: b.uvs,
                        normals: b.normals,
                        colors: b.colors,
                        indices: b.indices
                    })
                      , w = new wa(T,this._material,this._node);
                    w.name = "Text Element: " + this._entity.name,
                    w.castShadow = !1,
                    w.receiveShadow = !1,
                    w.cull = !m,
                    w.screenSpace = m,
                    w.drawOrder = this._drawOrder,
                    _ && (w.cull = !0,
                    w.isVisibleFunc = g),
                    this._setTextureParams(w, this._font.textures[v]),
                    this._symbolColors ? (this._colorUniform[0] = 1,
                    this._colorUniform[1] = 1,
                    this._colorUniform[2] = 1) : (this._colorUniform[0] = this._color.r,
                    this._colorUniform[1] = this._color.g,
                    this._colorUniform[2] = this._color.b),
                    w.setParameter("material_emissive", this._colorUniform),
                    w.setParameter("material_opacity", this._color.a),
                    w.setParameter("font_sdfIntensity", this._font.intensity),
                    w.setParameter("font_pxrange", this._getPxRange(this._font)),
                    w.setParameter("font_textureWidth", this._font.data.info.maps[v].width),
                    this._outlineColorUniform[0] = this._outlineColor.r,
                    this._outlineColorUniform[1] = this._outlineColor.g,
                    this._outlineColorUniform[2] = this._outlineColor.b,
                    this._outlineColorUniform[3] = this._outlineColor.a,
                    w.setParameter("outline_color", this._outlineColorUniform),
                    w.setParameter("outline_thickness", this._outlineThicknessScale * this._outlineThickness),
                    this._shadowColorUniform[0] = this._shadowColor.r,
                    this._shadowColorUniform[1] = this._shadowColor.g,
                    this._shadowColorUniform[2] = this._shadowColor.b,
                    this._shadowColorUniform[3] = this._shadowColor.a,
                    w.setParameter("shadow_color", this._shadowColorUniform);
                    var M = -this._font.data.info.maps[v].width / this._font.data.info.maps[v].height;
                    this._shadowOffsetUniform[0] = this._shadowOffsetScale * this._shadowOffset.x,
                    this._shadowOffsetUniform[1] = M * this._shadowOffsetScale * this._shadowOffset.y,
                    w.setParameter("shadow_offset", this._shadowOffsetUniform),
                    b.meshInstance = w,
                    this._model.meshInstances.push(w)
                }
            }
            this._element.maskedBy && this._element._setMaskedBy(this._element.maskedBy),
            f && this._element.enabled && this._entity.enabled && this._element.addModelToLayers(this._model),
            this._updateMeshes(),
            this._rangeStart = 0,
            this._rangeEnd = this._symbols.length,
            this._updateRenderRange()
        }
        ,
        e._removeMeshInstance = function(t) {
            t.destroy();
            var e = this._model.meshInstances.indexOf(t);
            -1 !== e && this._model.meshInstances.splice(e, 1)
        }
        ,
        e._setMaterial = function(t) {
            if (this._material = t,
            this._model)
                for (var e = 0, i = this._model.meshInstances.length; e < i; e++) {
                    this._model.meshInstances[e].material = t
                }
        }
        ,
        e._updateMaterial = function(t) {
            var e = this._element
              , i = e._isScreenCulled()
              , n = function(t) {
                return e.isVisibleForCamera(t)
            }
              , s = this._font && this._font.type === Yl;
            if (this._material = this._system.getTextElementMaterial(t, s),
            this._model)
                for (var a = 0, r = this._model.meshInstances.length; a < r; a++) {
                    var o = this._model.meshInstances[a];
                    o.cull = !t,
                    o.material = this._material,
                    o.screenSpace = t,
                    i ? (o.cull = !0,
                    o.isVisibleFunc = n) : o.isVisibleFunc = null
                }
        }
        ,
        e._isWordBoundary = function(t) {
            return Gp.test(t)
        }
        ,
        e._isValidNextChar = function(t) {
            return null !== t && !Xp.test(t)
        }
        ,
        e._isNextCJKBoundary = function(t, e) {
            return Hp.test(t) && (Gp.test(e) || Wp.test(e))
        }
        ,
        e._isNextCJKWholeWord = function(t) {
            return Hp.test(t)
        }
        ,
        e._updateMeshes = function() {
            var t = this._font.data
              , e = this
              , i = Math.min(this._minFontSize, this._maxFontSize)
              , n = this._maxFontSize
              , s = this._shouldAutoFit();
            s && (this._fontSize = this._maxFontSize);
            var a = this._symbols.length
              , r = 0
              , o = 0
              , h = 0
              , l = 0
              , c = 1
              , u = 0
              , d = 0
              , f = 0
              , p = 0
              , m = 0
              , _ = 0
              , g = Math.abs(this._element.anchor.x - this._element.anchor.z) >= 1e-4
              , v = this._element.calculatedWidth;
            (this.autoWidth && !g || !this._wrapLines) && (v = Number.POSITIVE_INFINITY);
            var y, x, b, S, T = 0, w = 0, M = 1;
            function A(t, i, n) {
                e._lineWidths.push(Math.abs(n));
                var s = f > i ? i + 1 : f
                  , a = f > i ? f + 1 : i
                  , h = t.slice(s, a);
                if (_)
                    for (var l = h.length; l-- && _ > 0; )
                        zp.test(h[l]) && (h.splice(l, 1),
                        _--);
                e._lineContents.push(h.join("")),
                r = 0,
                o -= e._scaledLineHeight,
                c++,
                p = 0,
                m = 0,
                _ = 0,
                u = 0,
                f = i
            }
            for (var C = !0; C; ) {
                C = !1,
                this._scaledLineHeight = s ? this._lineHeight * this._fontSize / (this._maxFontSize || 1e-4) : this._lineHeight,
                this.width = 0,
                this.height = 0,
                this._lineWidths = [],
                this._lineContents = [],
                r = 0,
                o = 0,
                h = 0,
                l = 0,
                c = 1,
                u = 0,
                d = 0,
                f = 0,
                p = 0,
                m = 0,
                _ = 0,
                M = this._fontSize / 32,
                T = this._fontMinY * M,
                w = this._fontMaxY * M;
                for (var E = 0; E < this._meshInfo.length; E++)
                    this._meshInfo[E].quad = 0,
                    this._meshInfo[E].lines = {};
                for (var P = 255, R = 255, I = 255, L = 0; L < a; L++) {
                    if (y = this._symbols[L],
                    S = L + 1 >= a ? null : this._symbols[L + 1],
                    zp.test(y))
                        _++,
                        (!this._wrapLines || this._maxLines < 0 || c < this._maxLines) && (A(this._symbols, L, l),
                        d = L + 1,
                        f = L + 1);
                    else {
                        var D = 0
                          , k = 0
                          , O = 0
                          , F = 1
                          , B = void 0;
                        if (!(x = t.chars[y]))
                            if (-1 !== jp.indexOf(y))
                                x = qp;
                            else if (t.chars[" "])
                                x = t.chars[" "];
                            else
                                for (var N in t.chars) {
                                    x = t.chars[N];
                                    break
                                }
                        if (x) {
                            var z = 0;
                            if (m > 0) {
                                var V = this._font.data.kerning;
                                if (V) {
                                    var G = V[U.getCodePoint(this._symbols[L - 1]) || 0];
                                    G && (z = G[U.getCodePoint(this._symbols[L]) || 0] || 0)
                                }
                            }
                            B = x.scale || 1,
                            F = M * ((x.width + x.height) / 2) / B,
                            O = (x.xadvance + z) * M,
                            D = (x.xoffset - z) * M,
                            k = x.yoffset * M
                        } else
                            console.error("Couldn't substitute missing character: '" + y + "'");
                        var W = Vp.test(y)
                          , H = this._meshInfo[x && x.map || 0]
                          , X = r + this._spacing * O;
                        if (X > v && m > 0 && !W && (this._maxLines < 0 || c < this._maxLines)) {
                            if (0 !== p) {
                                var j = Math.max(L - d, 0);
                                if (this._meshInfo.length <= 1)
                                    H.lines[c - 1] -= j,
                                    H.quad -= j;
                                else
                                    for (var q = L, Y = d; Y < q; Y++) {
                                        var K = this._symbols[Y]
                                          , Z = t.chars[K]
                                          , $ = this._meshInfo[Z && Z.map || 0];
                                        $.lines[c - 1] -= 1,
                                        $.quad -= 1
                                    }
                                L -= j + 1,
                                A(this._symbols, d, u);
                                continue
                            }
                            d = L,
                            A(this._symbols, L, l)
                        }
                        b = H.quad,
                        H.lines[c - 1] = b;
                        var Q = r - D
                          , J = Q + F
                          , tt = o - k
                          , et = tt + F;
                        if (this._rtl) {
                            var nt = F - D - this._spacing * O - D;
                            Q -= nt,
                            J -= nt
                        }
                        H.positions[4 * b * 3 + 0] = Q,
                        H.positions[4 * b * 3 + 1] = tt,
                        H.positions[4 * b * 3 + 2] = h,
                        H.positions[4 * b * 3 + 3] = J,
                        H.positions[4 * b * 3 + 4] = tt,
                        H.positions[4 * b * 3 + 5] = h,
                        H.positions[4 * b * 3 + 6] = J,
                        H.positions[4 * b * 3 + 7] = et,
                        H.positions[4 * b * 3 + 8] = h,
                        H.positions[4 * b * 3 + 9] = Q,
                        H.positions[4 * b * 3 + 10] = et,
                        H.positions[4 * b * 3 + 11] = h,
                        this.width = Math.max(this.width, X);
                        var st = void 0;
                        if (this._shouldAutoFitWidth() && this.width > this._element.calculatedWidth && (st = Math.floor(this._element.fontSize * this._element.calculatedWidth / (this.width || 1e-4)),
                        (st = it.clamp(st, i, n)) !== this._element.fontSize)) {
                            this._fontSize = st,
                            C = !0;
                            break
                        }
                        if (this.height = Math.max(this.height, w - (o + T)),
                        this._shouldAutoFitHeight() && this.height > this._element.calculatedHeight && (st = it.clamp(this._fontSize - 1, i, n)) !== this._element.fontSize) {
                            this._fontSize = st,
                            C = !0;
                            break
                        }
                        r += this._spacing * O,
                        W || (l = r),
                        (this._isWordBoundary(y) || this._isValidNextChar(S) && (this._isNextCJKBoundary(y, S) || this._isNextCJKWholeWord(S))) && (p++,
                        u = l,
                        d = L + 1),
                        m++;
                        var at = this._getUv(y);
                        if (H.uvs[4 * b * 2 + 0] = at[0],
                        H.uvs[4 * b * 2 + 1] = 1 - at[1],
                        H.uvs[4 * b * 2 + 2] = at[2],
                        H.uvs[4 * b * 2 + 3] = 1 - at[1],
                        H.uvs[4 * b * 2 + 4] = at[2],
                        H.uvs[4 * b * 2 + 5] = 1 - at[3],
                        H.uvs[4 * b * 2 + 6] = at[0],
                        H.uvs[4 * b * 2 + 7] = 1 - at[3],
                        this._symbolColors) {
                            var rt = 3 * this._symbolColors[L];
                            P = this._colorPalette[rt],
                            R = this._colorPalette[rt + 1],
                            I = this._colorPalette[rt + 2]
                        }
                        H.colors[4 * b * 4 + 0] = P,
                        H.colors[4 * b * 4 + 1] = R,
                        H.colors[4 * b * 4 + 2] = I,
                        H.colors[4 * b * 4 + 3] = 255,
                        H.colors[4 * b * 4 + 4] = P,
                        H.colors[4 * b * 4 + 5] = R,
                        H.colors[4 * b * 4 + 6] = I,
                        H.colors[4 * b * 4 + 7] = 255,
                        H.colors[4 * b * 4 + 8] = P,
                        H.colors[4 * b * 4 + 9] = R,
                        H.colors[4 * b * 4 + 10] = I,
                        H.colors[4 * b * 4 + 11] = 255,
                        H.colors[4 * b * 4 + 12] = P,
                        H.colors[4 * b * 4 + 13] = R,
                        H.colors[4 * b * 4 + 14] = I,
                        H.colors[4 * b * 4 + 15] = 255,
                        H.quad++
                    }
                }
                C || f < a && A(this._symbols, a, r)
            }
            this._noResize = !0,
            this.autoWidth = this._autoWidth,
            this.autoHeight = this._autoHeight,
            this._noResize = !1;
            for (var ot = this._element.pivot.x, ht = this._element.pivot.y, lt = this._alignment.x, ct = this._alignment.y, ut = 0; ut < this._meshInfo.length; ut++)
                if (0 !== this._meshInfo[ut].count) {
                    var dt = 0;
                    for (var ft in this._meshInfo[ut].lines) {
                        for (var pt = this._meshInfo[ut].lines[ft], mt = this._lineWidths[parseInt(ft, 10)], _t = -ot * this._element.calculatedWidth + lt * (this._element.calculatedWidth - mt) * (this._rtl ? -1 : 1), gt = (1 - ht) * this._element.calculatedHeight - w - (1 - ct) * (this._element.calculatedHeight - this.height), vt = dt; vt <= pt; vt++)
                            this._meshInfo[ut].positions[4 * vt * 3] += _t,
                            this._meshInfo[ut].positions[4 * vt * 3 + 3] += _t,
                            this._meshInfo[ut].positions[4 * vt * 3 + 6] += _t,
                            this._meshInfo[ut].positions[4 * vt * 3 + 9] += _t,
                            this._meshInfo[ut].positions[4 * vt * 3 + 1] += gt,
                            this._meshInfo[ut].positions[4 * vt * 3 + 4] += gt,
                            this._meshInfo[ut].positions[4 * vt * 3 + 7] += gt,
                            this._meshInfo[ut].positions[4 * vt * 3 + 10] += gt;
                        if (this._rtl)
                            for (var yt = dt; yt <= pt; yt++) {
                                for (var xt = 4 * yt * 3, bt = 0; bt < 4; ++bt)
                                    this._meshInfo[ut].positions[xt + 3 * bt] = this._element.calculatedWidth - this._meshInfo[ut].positions[xt + 3 * bt] + 2 * _t;
                                var St = this._meshInfo[ut].positions[xt + 3]
                                  , Tt = this._meshInfo[ut].positions[xt + 6];
                                this._meshInfo[ut].positions[xt + 3] = this._meshInfo[ut].positions[xt + 0],
                                this._meshInfo[ut].positions[xt + 6] = this._meshInfo[ut].positions[xt + 9],
                                this._meshInfo[ut].positions[xt + 0] = St,
                                this._meshInfo[ut].positions[xt + 9] = Tt
                            }
                        dt = pt + 1
                    }
                    for (var wt = 4 * this._meshInfo[ut].count, Mt = 4 * this._meshInfo[ut].quad, At = new Ns(this._meshInfo[ut].meshInstance.mesh.vertexBuffer), Ct = 0; Ct < wt; Ct++)
                        Ct >= Mt ? (At.element.POSITION.set(0, 0, 0),
                        At.element.TEXCOORD0.set(0, 0),
                        At.element.COLOR.set(0, 0, 0, 0)) : (At.element.POSITION.set(this._meshInfo[ut].positions[3 * Ct + 0], this._meshInfo[ut].positions[3 * Ct + 1], this._meshInfo[ut].positions[3 * Ct + 2]),
                        At.element.TEXCOORD0.set(this._meshInfo[ut].uvs[2 * Ct + 0], this._meshInfo[ut].uvs[2 * Ct + 1]),
                        At.element.COLOR.set(this._meshInfo[ut].colors[4 * Ct + 0], this._meshInfo[ut].colors[4 * Ct + 1], this._meshInfo[ut].colors[4 * Ct + 2], this._meshInfo[ut].colors[4 * Ct + 3])),
                        At.next();
                    At.end(),
                    this._meshInfo[ut].meshInstance.mesh.aabb.compute(this._meshInfo[ut].positions),
                    this._meshInfo[ut].meshInstance._aabbVer = -1
                }
            this._aabbDirty = !0
        }
        ,
        e._onFontRender = function() {
            this.font = this._font
        }
        ,
        e._onFontLoad = function(t) {
            this.font !== t.resource && (this.font = t.resource)
        }
        ,
        e._onFontChange = function(t, e, i, n) {
            if ("data" === e) {
                this._font.data = i;
                for (var s = this._font.data.info.maps.length, a = 0; a < s; a++)
                    if (this._meshInfo[a]) {
                        var r = this._meshInfo[a].meshInstance;
                        r && (r.setParameter("font_sdfIntensity", this._font.intensity),
                        r.setParameter("font_pxrange", this._getPxRange(this._font)),
                        r.setParameter("font_textureWidth", this._font.data.info.maps[a].width))
                    }
            }
        }
        ,
        e._onFontRemove = function(t) {}
        ,
        e._setTextureParams = function(t, e) {
            this._font && (this._font.type === Yl ? (t.deleteParameter("texture_emissiveMap"),
            t.deleteParameter("texture_opacityMap"),
            t.setParameter("texture_msdfMap", e)) : this._font.type === Kl && (t.deleteParameter("texture_msdfMap"),
            t.setParameter("texture_emissiveMap", e),
            t.setParameter("texture_opacityMap", e)))
        }
        ,
        e._getPxRange = function(t) {
            for (var e = Object.keys(this._font.data.chars), i = 0; i < e.length; i++) {
                var n = this._font.data.chars[e[i]];
                if (n.range)
                    return (n.scale || 1) * n.range
            }
            return 2
        }
        ,
        e._getUv = function(t) {
            var e = this._font.data;
            if (!e.chars[t]) {
                return e.chars[" "] ? this._getUv(" ") : [0, 0, 0, 0]
            }
            var i = e.chars[t].map
              , n = e.info.maps[i].width
              , s = e.info.maps[i].height
              , a = e.chars[t].x
              , r = e.chars[t].y
              , o = a
              , h = r
              , l = a + e.chars[t].width
              , c = r - e.chars[t].height
              , u = 1 - e.chars[t].height / s;
            return [o / n, u - h / s, l / n, u - c / s]
        }
        ,
        e.onEnable = function() {
            this._fontAsset.autoLoad = !0,
            this._model && this._element.addModelToLayers(this._model)
        }
        ,
        e.onDisable = function() {
            this._fontAsset.autoLoad = !1,
            this._model && this._element.removeModelFromLayers(this._model)
        }
        ,
        e._setStencil = function(t) {
            if (this._model)
                for (var e = this._model.meshInstances, i = 0; i < e.length; i++)
                    e[i].stencilFront = t,
                    e[i].stencilBack = t
        }
        ,
        e._shouldAutoFitWidth = function() {
            return this._autoFitWidth && !this._autoWidth
        }
        ,
        e._shouldAutoFitHeight = function() {
            return this._autoFitHeight && !this._autoHeight
        }
        ,
        e._shouldAutoFit = function() {
            return this._autoFitWidth && !this._autoWidth || this._autoFitHeight && !this._autoHeight
        }
        ,
        e._calculateCharsPerTexture = function(t) {
            var e = {};
            void 0 === t && (t = this._symbols.length);
            for (var i = 0, n = t; i < n; i++) {
                var s = this._symbols[i]
                  , a = this._font.data.chars[s];
                a || (a = this._font.data.chars[" "]) || (a = this._font.data.chars[Object.keys(this._font.data.chars)[0]]);
                var r = a.map;
                e[r] ? e[r]++ : e[r] = 1
            }
            return e
        }
        ,
        e._updateRenderRange = function() {
            for (var t = 0 === this._rangeStart ? 0 : this._calculateCharsPerTexture(this._rangeStart), e = 0 === this._rangeEnd ? 0 : this._calculateCharsPerTexture(this._rangeEnd), i = 0, n = this._meshInfo.length; i < n; i++) {
                var s = t[i] || 0
                  , a = e[i] || 0
                  , r = this._meshInfo[i].meshInstance;
                if (r) {
                    var o = r.mesh;
                    o && (o.primitive[0].base = 3 * s * 2,
                    o.primitive[0].count = 3 * (a - s) * 2)
                }
            }
        }
        ,
        G(t, [{
            key: "text",
            get: function() {
                return this._text
            },
            set: function(t) {
                this._i18nKey = null;
                var e = null != t && t.toString() || "";
                this._setText(e)
            }
        }, {
            key: "key",
            get: function() {
                return this._i18nKey
            },
            set: function(t) {
                var e = null !== t ? t.toString() : null;
                this._i18nKey !== e && (this._i18nKey = e,
                e ? (this._fontAsset.disableLocalization = !1,
                this._resetLocalizedText()) : this._fontAsset.disableLocalization = !0)
            }
        }, {
            key: "color",
            get: function() {
                return this._color
            },
            set: function(t) {
                var e = t.r
                  , i = t.g
                  , n = t.b;
                if (this._color.r !== e || this._color.g !== i || this._color.b !== n)
                    if (this._color.r = e,
                    this._color.g = i,
                    this._color.b = n,
                    this._symbolColors)
                        this._font && this._updateText();
                    else {
                        this._colorUniform[0] = this._color.r,
                        this._colorUniform[1] = this._color.g,
                        this._colorUniform[2] = this._color.b;
                        for (var s = 0, a = this._model.meshInstances.length; s < a; s++) {
                            this._model.meshInstances[s].setParameter("material_emissive", this._colorUniform)
                        }
                    }
            }
        }, {
            key: "opacity",
            get: function() {
                return this._color.a
            },
            set: function(t) {
                if (this._color.a !== t && (this._color.a = t,
                this._model))
                    for (var e = 0, i = this._model.meshInstances.length; e < i; e++) {
                        this._model.meshInstances[e].setParameter("material_opacity", t)
                    }
            }
        }, {
            key: "lineHeight",
            get: function() {
                return this._lineHeight
            },
            set: function(t) {
                var e = this._lineHeight;
                this._lineHeight = t,
                this._scaledLineHeight = t,
                e !== t && this._font && this._updateText()
            }
        }, {
            key: "wrapLines",
            get: function() {
                return this._wrapLines
            },
            set: function(t) {
                var e = this._wrapLines;
                this._wrapLines = t,
                e !== t && this._font && this._updateText()
            }
        }, {
            key: "lines",
            get: function() {
                return this._lineContents
            }
        }, {
            key: "spacing",
            get: function() {
                return this._spacing
            },
            set: function(t) {
                var e = this._spacing;
                this._spacing = t,
                e !== t && this._font && this._updateText()
            }
        }, {
            key: "fontSize",
            get: function() {
                return this._fontSize
            },
            set: function(t) {
                var e = this._fontSize;
                this._fontSize = t,
                this._originalFontSize = t,
                e !== t && this._font && this._updateText()
            }
        }, {
            key: "fontAsset",
            get: function() {
                return this._fontAsset.localizedAsset
            },
            set: function(t) {
                this._fontAsset.defaultAsset = t
            }
        }, {
            key: "font",
            get: function() {
                return this._font
            },
            set: function(t) {
                var e;
                if (this._font && (e = this._font.type,
                this._font.off && this._font.off("render", this._onFontRender, this)),
                this._font = t,
                this._fontMinY = 0,
                this._fontMaxY = 0,
                t) {
                    var i = this._font.data;
                    for (var n in i.chars) {
                        var s = i.chars[n];
                        s.bounds && (this._fontMinY = Math.min(this._fontMinY, s.bounds[1]),
                        this._fontMaxY = Math.max(this._fontMaxY, s.bounds[3]))
                    }
                    if (this._font.on && this._font.on("render", this._onFontRender, this),
                    this._fontAsset.localizedAsset)
                        this._system.app.assets.get(this._fontAsset.localizedAsset).resource !== this._font && (this._fontAsset.defaultAsset = null);
                    if (t.type !== e) {
                        var a = this._element._isScreenSpace();
                        this._updateMaterial(a)
                    }
                    for (var r = 0, o = this._font.textures.length; r < o; r++)
                        if (this._meshInfo[r]) {
                            var h = this._meshInfo[r].meshInstance;
                            h && (h.setParameter("font_sdfIntensity", this._font.intensity),
                            h.setParameter("font_pxrange", this._getPxRange(this._font)),
                            h.setParameter("font_textureWidth", this._font.data.info.maps[r].width),
                            this._setTextureParams(h, this._font.textures[r]))
                        } else
                            this._meshInfo[r] = new Up;
                    for (var l = !1, c = this._font.textures.length; c < this._meshInfo.length; c++)
                        this._meshInfo[c].meshInstance && (l || (this._element.removeModelFromLayers(this._model),
                        l = !0),
                        this._removeMeshInstance(this._meshInfo[c].meshInstance));
                    this._meshInfo.length > this._font.textures.length && (this._meshInfo.length = this._font.textures.length),
                    this._updateText()
                }
            }
        }, {
            key: "alignment",
            get: function() {
                return this._alignment
            },
            set: function(t) {
                t instanceof ut ? this._alignment.set(t.x, t.y) : this._alignment.set(t[0], t[1]),
                this._font && this._updateText()
            }
        }, {
            key: "autoWidth",
            get: function() {
                return this._autoWidth
            },
            set: function(t) {
                var e = this._autoWidth;
                if (this._autoWidth = t,
                t && Math.abs(this._element.anchor.x - this._element.anchor.z) < 1e-4 && (this._element.width = this.width),
                e !== t) {
                    var i = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;
                    i !== this._fontSize && (this._fontSize = i,
                    this._font && this._updateText())
                }
            }
        }, {
            key: "autoHeight",
            get: function() {
                return this._autoHeight
            },
            set: function(t) {
                var e = this._autoHeight;
                if (this._autoHeight = t,
                t && Math.abs(this._element.anchor.y - this._element.anchor.w) < 1e-4 && (this._element.height = this.height),
                e !== t) {
                    var i = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize;
                    i !== this._fontSize && (this._fontSize = i,
                    this._font && this._updateText())
                }
            }
        }, {
            key: "rtlReorder",
            get: function() {
                return this._rtlReorder
            },
            set: function(t) {
                this._rtlReorder !== t && (this._rtlReorder = t,
                this._font && this._updateText())
            }
        }, {
            key: "unicodeConverter",
            get: function() {
                return this._unicodeConverter
            },
            set: function(t) {
                this._unicodeConverter !== t && (this._unicodeConverter = t,
                this._setText(this._text))
            }
        }, {
            key: "aabb",
            get: function() {
                if (this._aabbDirty) {
                    for (var t = !1, e = 0; e < this._meshInfo.length; e++)
                        this._meshInfo[e].meshInstance && (t ? this._aabb.add(this._meshInfo[e].meshInstance.aabb) : (this._aabb.copy(this._meshInfo[e].meshInstance.aabb),
                        t = !0));
                    this._aabbDirty = !1
                }
                return this._aabb
            }
        }, {
            key: "outlineColor",
            get: function() {
                return this._outlineColor
            },
            set: function(t) {
                var e = t instanceof at ? t.r : t[0]
                  , i = t instanceof at ? t.g : t[1]
                  , n = t instanceof at ? t.b : t[2]
                  , s = t instanceof at ? t.a : t[3];
                if ((this._outlineColor.r !== e || this._outlineColor.g !== i || this._outlineColor.b !== n || this._outlineColor.a !== s) && (this._outlineColor.r = e,
                this._outlineColor.g = i,
                this._outlineColor.b = n,
                this._outlineColor.a = s,
                this._model)) {
                    this._outlineColorUniform[0] = this._outlineColor.r,
                    this._outlineColorUniform[1] = this._outlineColor.g,
                    this._outlineColorUniform[2] = this._outlineColor.b,
                    this._outlineColorUniform[3] = this._outlineColor.a;
                    for (var a = 0, r = this._model.meshInstances.length; a < r; a++) {
                        this._model.meshInstances[a].setParameter("outline_color", this._outlineColorUniform)
                    }
                }
            }
        }, {
            key: "outlineThickness",
            get: function() {
                return this._outlineThickness
            },
            set: function(t) {
                var e = this._outlineThickness;
                if (this._outlineThickness = t,
                e !== t && this._font && this._model)
                    for (var i = 0, n = this._model.meshInstances.length; i < n; i++) {
                        this._model.meshInstances[i].setParameter("outline_thickness", this._outlineThicknessScale * this._outlineThickness)
                    }
            }
        }, {
            key: "shadowColor",
            get: function() {
                return this._shadowColor
            },
            set: function(t) {
                var e = t instanceof at ? t.r : t[0]
                  , i = t instanceof at ? t.g : t[1]
                  , n = t instanceof at ? t.b : t[2]
                  , s = t instanceof at ? t.a : t[3];
                if ((this._shadowColor.r !== e || this._shadowColor.g !== i || this._shadowColor.b !== n || this._shadowColor.a !== s) && (this._shadowColor.r = e,
                this._shadowColor.g = i,
                this._shadowColor.b = n,
                this._shadowColor.a = s,
                this._model)) {
                    this._shadowColorUniform[0] = this._shadowColor.r,
                    this._shadowColorUniform[1] = this._shadowColor.g,
                    this._shadowColorUniform[2] = this._shadowColor.b,
                    this._shadowColorUniform[3] = this._shadowColor.a;
                    for (var a = 0, r = this._model.meshInstances.length; a < r; a++) {
                        this._model.meshInstances[a].setParameter("shadow_color", this._shadowColorUniform)
                    }
                }
            }
        }, {
            key: "shadowOffset",
            get: function() {
                return this._shadowOffset
            },
            set: function(t) {
                var e = t instanceof ut ? t.x : t[0]
                  , i = t instanceof ut ? t.y : t[1];
                if ((this._shadowOffset.x !== e || this._shadowOffset.y !== i) && (this._shadowOffset.set(e, i),
                this._font && this._model))
                    for (var n = 0, s = this._model.meshInstances.length; n < s; n++) {
                        var a = -this._font.data.info.maps[n].width / this._font.data.info.maps[n].height;
                        this._shadowOffsetUniform[0] = this._shadowOffsetScale * this._shadowOffset.x,
                        this._shadowOffsetUniform[1] = a * this._shadowOffsetScale * this._shadowOffset.y,
                        this._model.meshInstances[n].setParameter("shadow_offset", this._shadowOffsetUniform)
                    }
            }
        }, {
            key: "minFontSize",
            get: function() {
                return this._minFontSize
            },
            set: function(t) {
                this._minFontSize !== t && (this._minFontSize = t,
                this.font && this._shouldAutoFit() && this._updateText())
            }
        }, {
            key: "maxFontSize",
            get: function() {
                return this._maxFontSize
            },
            set: function(t) {
                this._maxFontSize !== t && (this._maxFontSize = t,
                this.font && this._shouldAutoFit() && this._updateText())
            }
        }, {
            key: "autoFitWidth",
            get: function() {
                return this._autoFitWidth
            },
            set: function(t) {
                this._autoFitWidth !== t && (this._autoFitWidth = t,
                this._fontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize,
                this.font && this._updateText())
            }
        }, {
            key: "autoFitHeight",
            get: function() {
                return this._autoFitHeight
            },
            set: function(t) {
                this._autoFitHeight !== t && (this._autoFitHeight = t,
                this._fontSize = this._shouldAutoFit() ? this._maxFontSize : this._originalFontSize,
                this.font && this._updateText())
            }
        }, {
            key: "maxLines",
            get: function() {
                return this._maxLines
            },
            set: function(t) {
                this._maxLines !== t && (null === t && -1 === this._maxLines || (this._maxLines = null === t ? -1 : t,
                this.font && this._wrapLines && this._updateText()))
            }
        }, {
            key: "enableMarkup",
            get: function() {
                return this._enableMarkup
            },
            set: function(t) {
                t = !!t,
                this._enableMarkup !== t && (this._enableMarkup = t,
                this.font && this._updateText())
            }
        }, {
            key: "symbols",
            get: function() {
                return this._symbols
            }
        }, {
            key: "symbolColors",
            get: function() {
                return null === this._symbolColors ? null : this._symbolColors.map((function(t) {
                    return this._colorPalette.slice(3 * t, 3 * t + 3)
                }
                ), this)
            }
        }, {
            key: "rtl",
            get: function() {
                return this._rtl
            }
        }, {
            key: "rangeStart",
            get: function() {
                return this._rangeStart
            },
            set: function(t) {
                (t = Math.max(0, Math.min(t, this._symbols.length))) !== this._rangeStart && (this._rangeStart = t,
                this._updateRenderRange())
            }
        }, {
            key: "rangeEnd",
            get: function() {
                return this._rangeEnd
            },
            set: function(t) {
                (t = Math.max(this._rangeStart, Math.min(t, this._symbols.length))) !== this._rangeEnd && (this._rangeEnd = t,
                this._updateRenderRange())
            }
        }]),
        t
    }()
      , Kp = new lt
      , Zp = new vt
      , $p = new lt
      , Qp = new lt
      , Jp = new vt
      , tm = new vt
      , em = new vt
      , im = new vt
      , nm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._beingInitialized = !1,
            n._anchor = new dt,
            n._localAnchor = new dt,
            n._pivot = new ut,
            n._width = n._calculatedWidth = 32,
            n._height = n._calculatedHeight = 32,
            n._margin = new dt(0,0,-32,-32),
            n._modelTransform = new vt,
            n._screenToWorld = new vt,
            n._anchorTransform = new vt,
            n._anchorDirty = !0,
            n._parentWorldTransform = new vt,
            n._screenTransform = new vt,
            n._screenCorners = [new lt, new lt, new lt, new lt],
            n._canvasCorners = [new ut, new ut, new ut, new ut],
            n._worldCorners = [new lt, new lt, new lt, new lt],
            n._cornersDirty = !0,
            n._canvasCornersDirty = !0,
            n._worldCornersDirty = !0,
            n.entity.on("insert", n._onInsert, j(n)),
            n._patch(),
            n.screen = null,
            n._type = Df,
            n._image = null,
            n._text = null,
            n._group = null,
            n._drawOrder = 0,
            n._useInput = !1,
            n._layers = [4],
            n._addedModels = [],
            n._batchGroupId = -1,
            n._offsetReadAt = 0,
            n._maskOffset = .5,
            n._maskedBy = null,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._patch = function() {
            this.entity._sync = this._sync,
            this.entity.setPosition = this._setPosition,
            this.entity.setLocalPosition = this._setLocalPosition
        }
        ,
        i._unpatch = function() {
            this.entity._sync = nv.prototype._sync,
            this.entity.setPosition = nv.prototype.setPosition,
            this.entity.setLocalPosition = nv.prototype.setLocalPosition
        }
        ,
        i._setPosition = function(t, e, i) {
            if (!this.element.screen)
                return nv.prototype.setPosition.call(this, t, e, i);
            t instanceof lt ? Kp.copy(t) : Kp.set(t, e, i),
            this.getWorldTransform(),
            Zp.copy(this.element._screenToWorld).invert(),
            Zp.transformPoint(Kp, this.localPosition),
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i._setLocalPosition = function(t, e, i) {
            t instanceof lt ? this.localPosition.copy(t) : this.localPosition.set(t, e, i);
            var n = this.element
              , s = this.localPosition
              , a = n._pivot;
            n._margin.x = s.x - n._calculatedWidth * a.x,
            n._margin.z = n._localAnchor.z - n._localAnchor.x - n._calculatedWidth - n._margin.x,
            n._margin.y = s.y - n._calculatedHeight * a.y,
            n._margin.w = n._localAnchor.w - n._localAnchor.y - n._calculatedHeight - n._margin.y,
            this._dirtyLocal || this._dirtifyLocal()
        }
        ,
        i._sync = function() {
            var t = this.element
              , e = t.screen;
            if (e) {
                if (t._anchorDirty) {
                    var i = 0
                      , n = 0
                      , s = 0
                      , a = 1;
                    if (this._parent && this._parent.element)
                        i = this._parent.element.calculatedWidth,
                        n = this._parent.element.calculatedHeight,
                        s = this._parent.element.pivot.x,
                        a = this._parent.element.pivot.y;
                    else {
                        var r = e.screen.resolution;
                        i = r.x / e.screen.scale,
                        n = r.y / e.screen.scale
                    }
                    t._anchorTransform.setTranslate(i * (t.anchor.x - s), -n * (a - t.anchor.y), 0),
                    t._anchorDirty = !1,
                    t._calculateLocalAnchors()
                }
                t._sizeDirty && t._calculateSize(!1, !1)
            }
            if (this._dirtyLocal) {
                this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
                var o = this.localPosition
                  , h = t._pivot;
                t._margin.x = o.x - t._calculatedWidth * h.x,
                t._margin.z = t._localAnchor.z - t._localAnchor.x - t._calculatedWidth - t._margin.x,
                t._margin.y = o.y - t._calculatedHeight * h.y,
                t._margin.w = t._localAnchor.w - t._localAnchor.y - t._calculatedHeight - t._margin.y,
                this._dirtyLocal = !1
            }
            if (!e)
                return this._dirtyWorld && (t._cornersDirty = !0,
                t._canvasCornersDirty = !0,
                t._worldCornersDirty = !0),
                nv.prototype._sync.call(this);
            if (this._dirtyWorld) {
                if (null === this._parent)
                    this.worldTransform.copy(this.localTransform);
                else if (this._parent.element ? t._screenToWorld.mul2(this._parent.element._modelTransform, t._anchorTransform) : t._screenToWorld.copy(t._anchorTransform),
                t._modelTransform.mul2(t._screenToWorld, this.localTransform),
                e) {
                    t._screenToWorld.mul2(e.screen._screenMatrix, t._screenToWorld),
                    e.screen.screenSpace || t._screenToWorld.mul2(e.worldTransform, t._screenToWorld),
                    this.worldTransform.mul2(t._screenToWorld, this.localTransform);
                    var l = t._parentWorldTransform;
                    l.setIdentity();
                    var c = this._parent;
                    c && c.element && c !== e && (Jp.setTRS(lt.ZERO, c.getLocalRotation(), c.getLocalScale()),
                    l.mul2(c.element._parentWorldTransform, Jp));
                    var u = $p;
                    u.set(0, 0, this.localPosition.z);
                    var d = Qp;
                    d.set(t._absLeft + t._pivot.x * t.calculatedWidth, t._absBottom + t._pivot.y * t.calculatedHeight, 0),
                    Jp.setTranslate(-d.x, -d.y, -d.z),
                    tm.setTRS(u, this.getLocalRotation(), this.getLocalScale()),
                    em.setTranslate(d.x, d.y, d.z),
                    t._screenTransform.mul2(t._parentWorldTransform, em).mul(tm).mul(Jp),
                    t._cornersDirty = !0,
                    t._canvasCornersDirty = !0,
                    t._worldCornersDirty = !0
                } else
                    this.worldTransform.copy(t._modelTransform);
                this._dirtyWorld = !1
            }
        }
        ,
        i._onInsert = function(t) {
            var e = this._parseUpToScreen();
            this.entity._dirtifyWorld(),
            this._updateScreen(e.screen),
            this._dirtifyMask()
        }
        ,
        i._dirtifyMask = function() {
            for (var t = this.entity; t; ) {
                var e = t.parent;
                if ((null === e || e.screen) && t.element) {
                    this.system._prerender && this.system._prerender.length || (this.system._prerender = [],
                    this.system.app.once("prerender", this._onPrerender, this));
                    var i = this.system._prerender.indexOf(this.entity);
                    i >= 0 && this.system._prerender.splice(i, 1),
                    this.system._prerender.indexOf(t) < 0 && this.system._prerender.push(t)
                }
                t = e
            }
        }
        ,
        i._onPrerender = function() {
            for (var t = 0; t < this.system._prerender.length; t++) {
                var e = this.system._prerender[t];
                if (e.element) {
                    e.element.syncMask(1)
                }
            }
            this.system._prerender.length = 0
        }
        ,
        i._bindScreen = function(t) {
            t._bindElement(this)
        }
        ,
        i._unbindScreen = function(t) {
            t._unbindElement(this)
        }
        ,
        i._updateScreen = function(t) {
            this.screen && this.screen !== t && this._unbindScreen(this.screen.screen);
            var e = this.screen;
            this.screen = t,
            this.screen && this._bindScreen(this.screen.screen),
            this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY),
            this.fire("set:screen", this.screen, e),
            this._anchorDirty = !0;
            for (var i = this.entity.children, n = 0, s = i.length; n < s; n++)
                i[n].element && i[n].element._updateScreen(t);
            this.screen && this.screen.screen.syncDrawOrder()
        }
        ,
        i.syncMask = function(t) {
            var e = this._parseUpToScreen();
            this._updateMask(e.mask, t)
        }
        ,
        i._setMaskedBy = function(t) {
            var e = this._image || this._text;
            if (t) {
                var i = t.element._image._maskRef
                  , n = new Ep({
                    ref: i,
                    func: 2
                });
                e && e._setStencil && e._setStencil(n),
                this._maskedBy = t
            } else
                e && e._setStencil && e._setStencil(null),
                this._maskedBy = null
        }
        ,
        i._updateMask = function(t, e) {
            if (t) {
                if (this._setMaskedBy(t),
                this.mask) {
                    var i = t.element._image._maskRef
                      , n = new Ep({
                        ref: i,
                        func: 2,
                        zpass: 3
                    });
                    this._image._setStencil(n),
                    this._image._maskRef = e,
                    e++,
                    t = this.entity
                }
                for (var s = this.entity.children, a = 0, r = s.length; a < r; a++)
                    s[a].element && s[a].element._updateMask(t, e);
                this.mask && e--
            } else {
                if (this._setMaskedBy(null),
                this.mask) {
                    var o = new Ep({
                        ref: e,
                        func: 7,
                        zpass: 2
                    });
                    this._image._setStencil(o),
                    this._image._maskRef = e,
                    e++,
                    t = this.entity
                }
                for (var h = this.entity.children, l = 0, c = h.length; l < c; l++)
                    h[l].element && h[l].element._updateMask(t, e);
                this.mask && e--
            }
        }
        ,
        i._parseUpToScreen = function() {
            for (var t = {
                screen: null,
                mask: null
            }, e = this.entity._parent; e && !e.screen; )
                e.element && e.element.mask && (t.mask || (t.mask = e)),
                e = e.parent;
            return e && e.screen && (t.screen = e),
            t
        }
        ,
        i._onScreenResize = function(t) {
            this._anchorDirty = !0,
            this._cornersDirty = !0,
            this._worldCornersDirty = !0,
            this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY),
            this.fire("screen:set:resolution", t)
        }
        ,
        i._onScreenSpaceChange = function() {
            this.fire("screen:set:screenspace", this.screen.screen.screenSpace)
        }
        ,
        i._onScreenRemove = function() {
            this.screen && (this.screen._destroying ? this.screen = null : this._updateScreen(null))
        }
        ,
        i._calculateLocalAnchors = function() {
            var t = 1e3
              , e = 1e3
              , i = this.entity._parent;
            if (i && i.element)
                t = i.element.calculatedWidth,
                e = i.element.calculatedHeight;
            else if (this.screen) {
                var n = this.screen.screen.resolution
                  , s = this.screen.screen.scale;
                t = n.x / s,
                e = n.y / s
            }
            this._localAnchor.set(this._anchor.x * t, this._anchor.y * e, this._anchor.z * t, this._anchor.w * e)
        }
        ,
        i.getOffsetPosition = function(t, e) {
            var i = this.entity.getLocalPosition().clone();
            return i.x += t,
            i.y += e,
            this._screenToWorld.transformPoint(i, i),
            i
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.addModelToLayers(this._image ? this._image._renderable.model : this._text._model),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.layers.indexOf(t.id) < 0 || (this._image ? t.addMeshInstances(this._image._renderable.model.meshInstances) : this._text && t.addMeshInstances(this._text._model.meshInstances))
        }
        ,
        i.onLayerRemoved = function(t) {
            this.layers.indexOf(t.id) < 0 || (this._image ? t.removeMeshInstances(this._image._renderable.model.meshInstances) : this._text && t.removeMeshInstances(this._text._model.meshInstances))
        }
        ,
        i.onEnable = function() {
            this._image && this._image.onEnable(),
            this._text && this._text.onEnable(),
            this._group && this._group.onEnable(),
            this.useInput && this.system.app.elementInput && this.system.app.elementInput.addElement(this),
            this.system.app.scene.on("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.on("add", this.onLayerAdded, this),
            this.system.app.scene.layers.on("remove", this.onLayerRemoved, this)),
            this._batchGroupId >= 0 && this.system.app.batcher.insert(da.ELEMENT, this.batchGroupId, this.entity),
            this.fire("enableelement")
        }
        ,
        i.onDisable = function() {
            this.system.app.scene.off("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.off("add", this.onLayerAdded, this),
            this.system.app.scene.layers.off("remove", this.onLayerRemoved, this)),
            this._image && this._image.onDisable(),
            this._text && this._text.onDisable(),
            this._group && this._group.onDisable(),
            this.system.app.elementInput && this.useInput && this.system.app.elementInput.removeElement(this),
            this._batchGroupId >= 0 && this.system.app.batcher.remove(da.ELEMENT, this.batchGroupId, this.entity),
            this.fire("disableelement")
        }
        ,
        i.onRemove = function() {
            this.entity.off("insert", this._onInsert, this),
            this._unpatch(),
            this._image && this._image.destroy(),
            this._text && this._text.destroy(),
            this.system.app.elementInput && this.useInput && this.system.app.elementInput.removeElement(this),
            this.screen && this.screen.screen && (this._unbindScreen(this.screen.screen),
            this.screen.screen.syncDrawOrder()),
            this.off()
        }
        ,
        i._calculateSize = function(t, e) {
            if (this.entity._parent || this.screen) {
                this._calculateLocalAnchors();
                var i = this._absRight - this._absLeft
                  , n = this._absTop - this._absBottom;
                t ? this._setWidth(i) : this._setCalculatedWidth(i, !1),
                e ? this._setHeight(n) : this._setCalculatedHeight(n, !1);
                var s = this.entity.getLocalPosition();
                s.x = this._margin.x + this._calculatedWidth * this._pivot.x,
                s.y = this._margin.y + this._calculatedHeight * this._pivot.y,
                this.entity.setLocalPosition(s),
                this._sizeDirty = !1
            }
        }
        ,
        i._setWidth = function(t) {
            this._width = t,
            this._setCalculatedWidth(t, !1),
            this.fire("set:width", this._width)
        }
        ,
        i._setHeight = function(t) {
            this._height = t,
            this._setCalculatedHeight(t, !1),
            this.fire("set:height", this._height)
        }
        ,
        i._setCalculatedWidth = function(t, e) {
            if (!(Math.abs(t - this._calculatedWidth) <= 1e-4)) {
                if (this._calculatedWidth = t,
                this.entity._dirtifyLocal(),
                e) {
                    var i = this.entity.getLocalPosition()
                      , n = this._pivot;
                    this._margin.x = i.x - this._calculatedWidth * n.x,
                    this._margin.z = this._localAnchor.z - this._localAnchor.x - this._calculatedWidth - this._margin.x
                }
                this._flagChildrenAsDirty(),
                this.fire("set:calculatedWidth", this._calculatedWidth),
                this.fire("resize", this._calculatedWidth, this._calculatedHeight)
            }
        }
        ,
        i._setCalculatedHeight = function(t, e) {
            if (!(Math.abs(t - this._calculatedHeight) <= 1e-4)) {
                if (this._calculatedHeight = t,
                this.entity._dirtifyLocal(),
                e) {
                    var i = this.entity.getLocalPosition()
                      , n = this._pivot;
                    this._margin.y = i.y - this._calculatedHeight * n.y,
                    this._margin.w = this._localAnchor.w - this._localAnchor.y - this._calculatedHeight - this._margin.y
                }
                this._flagChildrenAsDirty(),
                this.fire("set:calculatedHeight", this._calculatedHeight),
                this.fire("resize", this._calculatedWidth, this._calculatedHeight)
            }
        }
        ,
        i._flagChildrenAsDirty = function() {
            for (var t = this.entity._children, e = 0, i = t.length; e < i; e++)
                t[e].element && (t[e].element._anchorDirty = !0,
                t[e].element._sizeDirty = !0)
        }
        ,
        i.addModelToLayers = function(t) {
            this._addedModels.push(t);
            for (var e = 0; e < this.layers.length; e++) {
                var i = this.system.app.scene.layers.getLayerById(this.layers[e]);
                i && i.addMeshInstances(t.meshInstances)
            }
        }
        ,
        i.removeModelFromLayers = function(t) {
            var e = this._addedModels.indexOf(t);
            e >= 0 && this._addedModels.splice(e, 1);
            for (var i = 0; i < this.layers.length; i++) {
                var n = this.system.app.scene.layers.getLayerById(this.layers[i]);
                n && n.removeMeshInstances(t.meshInstances)
            }
        }
        ,
        i.getMaskOffset = function() {
            var t = this.system.app.frame;
            this._offsetReadAt !== t && (this._maskOffset = .5,
            this._offsetReadAt = t);
            var e = this._maskOffset;
            return this._maskOffset -= .001,
            e
        }
        ,
        i.isVisibleForCamera = function(t) {
            var e, i, n, s;
            if (this.maskedBy) {
                var a = this.maskedBy.element.screenCorners;
                e = Math.min(Math.min(a[0].x, a[1].x), Math.min(a[2].x, a[3].x)),
                i = Math.max(Math.max(a[0].x, a[1].x), Math.max(a[2].x, a[3].x)),
                s = Math.min(Math.min(a[0].y, a[1].y), Math.min(a[2].y, a[3].y)),
                n = Math.max(Math.max(a[0].y, a[1].y), Math.max(a[2].y, a[3].y))
            } else {
                var r = this.system.app.graphicsDevice.width
                  , o = this.system.app.graphicsDevice.height
                  , h = t._rect.z * r
                  , l = t._rect.w * o;
                i = (e = t._rect.x * r) + h,
                s = (n = (1 - t._rect.y) * o) - l
            }
            var c = this.screenCorners
              , u = Math.min(Math.min(c[0].x, c[1].x), Math.min(c[2].x, c[3].x))
              , d = Math.max(Math.max(c[0].x, c[1].x), Math.max(c[2].x, c[3].x))
              , f = Math.min(Math.min(c[0].y, c[1].y), Math.min(c[2].y, c[3].y))
              , p = Math.max(Math.max(c[0].y, c[1].y), Math.max(c[2].y, c[3].y));
            return !(d < e || u > i || f > n || p < s)
        }
        ,
        i._isScreenSpace = function() {
            return !(!this.screen || !this.screen.screen) && this.screen.screen.screenSpace
        }
        ,
        i._isScreenCulled = function() {
            return !(!this.screen || !this.screen.screen) && this.screen.screen.cull
        }
        ,
        e
    }(gd);
    function sm(t) {
        Object.defineProperty(nm.prototype, t, {
            get: function() {
                return this._text ? this._text[t] : this._image ? this._image[t] : null
            },
            set: function(e) {
                this._text ? this._text[t] = e : this._image && (this._image[t] = e)
            }
        })
    }
    Object.defineProperty(nm.prototype, "type", {
        get: function() {
            return this._type
        },
        set: function(t) {
            t !== this._type && (this._type = t,
            this._image && (this._image.destroy(),
            this._image = null),
            this._text && (this._text.destroy(),
            this._text = null),
            t === kf ? this._image = new Rp(this) : t === Of && (this._text = new Yp(this)))
        }
    }),
    Object.defineProperty(nm.prototype, "layers", {
        get: function() {
            return this._layers
        },
        set: function(t) {
            if (this._addedModels.length)
                for (var e = 0; e < this._layers.length; e++) {
                    var i = this.system.app.scene.layers.getLayerById(this._layers[e]);
                    if (i)
                        for (var n = 0; n < this._addedModels.length; n++)
                            i.removeMeshInstances(this._addedModels[n].meshInstances)
                }
            if (this._layers = t,
            this.enabled && this.entity.enabled && this._addedModels.length)
                for (var s = 0; s < this._layers.length; s++) {
                    var a = this.system.app.scene.layers.getLayerById(this._layers[s]);
                    if (a)
                        for (var r = 0; r < this._addedModels.length; r++)
                            a.addMeshInstances(this._addedModels[r].meshInstances)
                }
        }
    }),
    Object.defineProperty(nm.prototype, "drawOrder", {
        get: function() {
            return this._drawOrder
        },
        set: function(t) {
            var e = 0;
            this.screen && (e = this.screen.screen.priority),
            t > 16777215 && (t = 16777215),
            this._drawOrder = (e << 24) + t,
            this.fire("set:draworder", this._drawOrder)
        }
    }),
    Object.defineProperty(nm.prototype, "_absLeft", {
        get: function() {
            return this._localAnchor.x + this._margin.x
        }
    }),
    Object.defineProperty(nm.prototype, "_absRight", {
        get: function() {
            return this._localAnchor.z - this._margin.z
        }
    }),
    Object.defineProperty(nm.prototype, "_absTop", {
        get: function() {
            return this._localAnchor.w - this._margin.w
        }
    }),
    Object.defineProperty(nm.prototype, "_absBottom", {
        get: function() {
            return this._localAnchor.y + this._margin.y
        }
    }),
    Object.defineProperty(nm.prototype, "margin", {
        get: function() {
            return this._margin
        },
        set: function(t) {
            this._margin.copy(t),
            this._calculateSize(!0, !0),
            this.fire("set:margin", this._margin)
        }
    }),
    Object.defineProperty(nm.prototype, "left", {
        get: function() {
            return this._margin.x
        },
        set: function(t) {
            this._margin.x = t;
            var e = this.entity.getLocalPosition()
              , i = this._absRight
              , n = this._localAnchor.x + t;
            this._setWidth(i - n),
            e.x = t + this._calculatedWidth * this._pivot.x,
            this.entity.setLocalPosition(e)
        }
    }),
    Object.defineProperty(nm.prototype, "right", {
        get: function() {
            return this._margin.z
        },
        set: function(t) {
            this._margin.z = t;
            var e = this.entity.getLocalPosition()
              , i = this._absLeft
              , n = this._localAnchor.z - t;
            this._setWidth(n - i),
            e.x = this._localAnchor.z - this._localAnchor.x - t - this._calculatedWidth * (1 - this._pivot.x),
            this.entity.setLocalPosition(e)
        }
    }),
    Object.defineProperty(nm.prototype, "top", {
        get: function() {
            return this._margin.w
        },
        set: function(t) {
            this._margin.w = t;
            var e = this.entity.getLocalPosition()
              , i = this._absBottom
              , n = this._localAnchor.w - t;
            this._setHeight(n - i),
            e.y = this._localAnchor.w - this._localAnchor.y - t - this._calculatedHeight * (1 - this._pivot.y),
            this.entity.setLocalPosition(e)
        }
    }),
    Object.defineProperty(nm.prototype, "bottom", {
        get: function() {
            return this._margin.y
        },
        set: function(t) {
            this._margin.y = t;
            var e = this.entity.getLocalPosition()
              , i = this._absTop
              , n = this._localAnchor.y + t;
            this._setHeight(i - n),
            e.y = t + this._calculatedHeight * this._pivot.y,
            this.entity.setLocalPosition(e)
        }
    }),
    Object.defineProperty(nm.prototype, "width", {
        get: function() {
            return this._width
        },
        set: function(t) {
            this._width = t,
            this._hasSplitAnchorsX || this._setCalculatedWidth(t, !0),
            this.fire("set:width", this._width)
        }
    }),
    Object.defineProperty(nm.prototype, "height", {
        get: function() {
            return this._height
        },
        set: function(t) {
            this._height = t,
            this._hasSplitAnchorsY || this._setCalculatedHeight(t, !0),
            this.fire("set:height", this._height)
        }
    }),
    Object.defineProperty(nm.prototype, "calculatedWidth", {
        get: function() {
            return this._calculatedWidth
        },
        set: function(t) {
            this._setCalculatedWidth(t, !0)
        }
    }),
    Object.defineProperty(nm.prototype, "calculatedHeight", {
        get: function() {
            return this._calculatedHeight
        },
        set: function(t) {
            this._setCalculatedHeight(t, !0)
        }
    }),
    Object.defineProperty(nm.prototype, "pivot", {
        get: function() {
            return this._pivot
        },
        set: function(t) {
            var e = this._pivot.x
              , i = this._pivot.y;
            t instanceof ut ? this._pivot.set(t.x, t.y) : this._pivot.set(t[0], t[1]);
            var n = this._margin.x + this._margin.z
              , s = this._pivot.x - e;
            this._margin.x += n * s,
            this._margin.z -= n * s;
            var a = this._margin.y + this._margin.w
              , r = this._pivot.y - i;
            this._margin.y += a * r,
            this._margin.w -= a * r,
            this._anchorDirty = !0,
            this._cornersDirty = !0,
            this._worldCornersDirty = !0,
            this._calculateSize(!1, !1),
            this._flagChildrenAsDirty(),
            this.fire("set:pivot", this._pivot)
        }
    }),
    Object.defineProperty(nm.prototype, "anchor", {
        get: function() {
            return this._anchor
        },
        set: function(t) {
            t instanceof dt ? this._anchor.set(t.x, t.y, t.z, t.w) : this._anchor.set(t[0], t[1], t[2], t[3]),
            this.entity._parent || this.screen ? this._calculateSize(this._hasSplitAnchorsX, this._hasSplitAnchorsY) : this._calculateLocalAnchors(),
            this._anchorDirty = !0,
            this.entity._dirtyLocal || this.entity._dirtifyLocal(),
            this.fire("set:anchor", this._anchor)
        }
    }),
    Object.defineProperty(nm.prototype, "_hasSplitAnchorsX", {
        get: function() {
            return Math.abs(this._anchor.x - this._anchor.z) > .001
        }
    }),
    Object.defineProperty(nm.prototype, "_hasSplitAnchorsY", {
        get: function() {
            return Math.abs(this._anchor.y - this._anchor.w) > .001
        }
    }),
    Object.defineProperty(nm.prototype, "aabb", {
        get: function() {
            return this._image ? this._image.aabb : this._text ? this._text.aabb : null
        }
    }),
    Object.defineProperty(nm.prototype, "screenCorners", {
        get: function() {
            if (!this._cornersDirty || !this.screen)
                return this._screenCorners;
            var t = this.entity.parent && this.entity.parent.element && this.entity.parent.element.screenCorners[0];
            this._screenCorners[0].set(this._absLeft, this._absBottom, 0),
            this._screenCorners[1].set(this._absRight, this._absBottom, 0),
            this._screenCorners[2].set(this._absRight, this._absTop, 0),
            this._screenCorners[3].set(this._absLeft, this._absTop, 0);
            for (var e = this.screen.screen.screenSpace, i = 0; i < 4; i++)
                this._screenTransform.transformPoint(this._screenCorners[i], this._screenCorners[i]),
                e && this._screenCorners[i].mulScalar(this.screen.screen.scale),
                t && this._screenCorners[i].add(t);
            return this._cornersDirty = !1,
            this._canvasCornersDirty = !0,
            this._worldCornersDirty = !0,
            this._screenCorners
        }
    }),
    Object.defineProperty(nm.prototype, "canvasCorners", {
        get: function() {
            if (!this._canvasCornersDirty || !this.screen || !this.screen.screen.screenSpace)
                return this._canvasCorners;
            for (var t = this.system.app.graphicsDevice, e = this.screenCorners, i = t.canvas.clientWidth / t.width, n = t.canvas.clientHeight / t.height, s = 0; s < 4; s++)
                this._canvasCorners[s].set(e[s].x * i, (t.height - e[s].y) * n);
            return this._canvasCornersDirty = !1,
            this._canvasCorners
        }
    }),
    Object.defineProperty(nm.prototype, "worldCorners", {
        get: function() {
            if (!this._worldCornersDirty)
                return this._worldCorners;
            if (this.screen) {
                var t = this.screenCorners;
                if (!this.screen.screen.screenSpace) {
                    Jp.copy(this.screen.screen._screenMatrix),
                    Jp.data[13] = -Jp.data[13],
                    Jp.mul2(this.screen.getWorldTransform(), Jp);
                    for (var e = 0; e < 4; e++)
                        Jp.transformPoint(t[e], this._worldCorners[e])
                }
            } else {
                var i = this.entity.getLocalPosition();
                Jp.setTranslate(-i.x, -i.y, -i.z),
                tm.setTRS(lt.ZERO, this.entity.getLocalRotation(), this.entity.getLocalScale()),
                em.setTranslate(i.x, i.y, i.z);
                var n = this.entity.parent ? this.entity.parent : this.entity;
                im.copy(n.getWorldTransform()),
                im.mul(em).mul(tm).mul(Jp),
                $p.set(i.x - this.pivot.x * this.calculatedWidth, i.y - this.pivot.y * this.calculatedHeight, i.z),
                im.transformPoint($p, this._worldCorners[0]),
                $p.set(i.x + (1 - this.pivot.x) * this.calculatedWidth, i.y - this.pivot.y * this.calculatedHeight, i.z),
                im.transformPoint($p, this._worldCorners[1]),
                $p.set(i.x + (1 - this.pivot.x) * this.calculatedWidth, i.y + (1 - this.pivot.y) * this.calculatedHeight, i.z),
                im.transformPoint($p, this._worldCorners[2]),
                $p.set(i.x - this.pivot.x * this.calculatedWidth, i.y + (1 - this.pivot.y) * this.calculatedHeight, i.z),
                im.transformPoint($p, this._worldCorners[3])
            }
            return this._worldCornersDirty = !1,
            this._worldCorners
        }
    }),
    Object.defineProperty(nm.prototype, "textWidth", {
        get: function() {
            return this._text ? this._text.width : 0
        }
    }),
    Object.defineProperty(nm.prototype, "textHeight", {
        get: function() {
            return this._text ? this._text.height : 0
        }
    }),
    Object.defineProperty(nm.prototype, "useInput", {
        get: function() {
            return this._useInput
        },
        set: function(t) {
            this._useInput !== t && (this._useInput = t,
            this.system.app.elementInput ? t ? this.enabled && this.entity.enabled && this.system.app.elementInput.addElement(this) : this.system.app.elementInput.removeElement(this) : !0 === this._useInput && console.warn("Elements will not get any input events because this.system.app.elementInput is not created"),
            this.fire("set:useInput", t))
        }
    }),
    Object.defineProperty(nm.prototype, "batchGroupId", {
        get: function() {
            return this._batchGroupId
        },
        set: function(t) {
            this._batchGroupId !== t && (this.entity.enabled && this._batchGroupId >= 0 && this.system.app.batcher.remove(da.ELEMENT, this.batchGroupId, this.entity),
            this.entity.enabled && t >= 0 && this.system.app.batcher.insert(da.ELEMENT, t, this.entity),
            t < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled && (this._image && this._image._renderable.model ? this.addModelToLayers(this._image._renderable.model) : this._text && this._text._model && this.addModelToLayers(this._text._model)),
            this._batchGroupId = t)
        }
    }),
    Object.defineProperty(nm.prototype, "maskedBy", {
        get: function() {
            return this._maskedBy
        }
    }),
    sm("fontSize"),
    sm("minFontSize"),
    sm("maxFontSize"),
    sm("maxLines"),
    sm("autoFitWidth"),
    sm("autoFitHeight"),
    sm("color"),
    sm("font"),
    sm("fontAsset"),
    sm("spacing"),
    sm("lineHeight"),
    sm("wrapLines"),
    sm("lines"),
    sm("alignment"),
    sm("autoWidth"),
    sm("autoHeight"),
    sm("rtlReorder"),
    sm("unicodeConverter"),
    sm("text"),
    sm("key"),
    sm("texture"),
    sm("textureAsset"),
    sm("material"),
    sm("materialAsset"),
    sm("sprite"),
    sm("spriteAsset"),
    sm("spriteFrame"),
    sm("pixelsPerUnit"),
    sm("opacity"),
    sm("rect"),
    sm("mask"),
    sm("outlineColor"),
    sm("outlineThickness"),
    sm("shadowColor"),
    sm("shadowOffset"),
    sm("enableMarkup"),
    sm("rangeStart"),
    sm("rangeEnd");
    var am = function() {
        this.enabled = !0
    }
      , rm = ["enabled"]
      , om = function(t) {
        function e(e) {
            var i;
            (i = t.call(this, e) || this).id = "element",
            i.ComponentType = nm,
            i.DataType = am,
            i.schema = rm,
            i._unicodeConverter = null,
            i._rtlReorder = null,
            i._defaultTexture = new Mi(e.graphicsDevice,{
                width: 1,
                height: 1,
                format: 7
            }),
            i._defaultTexture.name = "element-system";
            var n = i._defaultTexture.lock()
              , s = new Uint8Array(4);
            return s[0] = 255,
            s[1] = 255,
            s[2] = 255,
            s[3] = 255,
            n.set(s),
            i._defaultTexture.unlock(),
            i.defaultImageMaterial = null,
            i.defaultImage9SlicedMaterial = null,
            i.defaultImage9TiledMaterial = null,
            i.defaultImageMaskMaterial = null,
            i.defaultImage9SlicedMaskMaterial = null,
            i.defaultImage9TiledMaskMaterial = null,
            i.defaultScreenSpaceImageMaterial = null,
            i.defaultScreenSpaceImage9SlicedMaterial = null,
            i.defaultScreenSpaceImage9TiledMaterial = null,
            i.defaultScreenSpaceImageMask9SlicedMaterial = null,
            i.defaultScreenSpaceImageMask9TiledMaterial = null,
            i.defaultScreenSpaceImageMaskMaterial = null,
            i.defaultTextMaterial = null,
            i.defaultBitmapTextMaterial = null,
            i.defaultScreenSpaceTextMaterial = null,
            i.defaultScreenSpaceBitmapTextMaterial = null,
            i.defaultImageMaterials = [],
            i.on("beforeremove", i.onRemoveComponent, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            t.prototype.destroy.call(this),
            this._defaultTexture.destroy()
        }
        ,
        i.initializeComponentData = function(e, i, n) {
            e._beingInitialized = !0,
            void 0 !== i.anchor && (i.anchor instanceof dt ? e.anchor.copy(i.anchor) : e.anchor.set(i.anchor[0], i.anchor[1], i.anchor[2], i.anchor[3])),
            void 0 !== i.pivot && (i.pivot instanceof ut ? e.pivot.copy(i.pivot) : e.pivot.set(i.pivot[0], i.pivot[1]));
            var s, a = Math.abs(e.anchor.x - e.anchor.z) > .001, r = Math.abs(e.anchor.y - e.anchor.w) > .001, o = !1;
            void 0 !== i.margin && (i.margin instanceof dt ? e.margin.copy(i.margin) : e._margin.set(i.margin[0], i.margin[1], i.margin[2], i.margin[3]),
            o = !0),
            void 0 !== i.left && (e._margin.x = i.left,
            o = !0),
            void 0 !== i.bottom && (e._margin.y = i.bottom,
            o = !0),
            void 0 !== i.right && (e._margin.z = i.right,
            o = !0),
            void 0 !== i.top && (e._margin.w = i.top,
            o = !0),
            o && (e.margin = e._margin);
            var h = !1;
            void 0 === i.width || a ? a && (h = !0) : e.width = i.width,
            void 0 === i.height || r ? r && (h = !0) : e.height = i.height,
            h && (e.anchor = e.anchor),
            void 0 !== i.enabled && (e.enabled = i.enabled),
            void 0 !== i.useInput && (e.useInput = i.useInput),
            e.batchGroupId = void 0 === i.batchGroupId || null === i.batchGroupId ? -1 : i.batchGroupId,
            i.layers && Array.isArray(i.layers) && (e.layers = i.layers.slice(0)),
            void 0 !== i.type && (e.type = i.type),
            e.type === kf ? (void 0 !== i.rect && (e.rect = i.rect),
            void 0 !== i.color && ((s = i.color)instanceof at || (s = new at(i.color[0],i.color[1],i.color[2])),
            e.color = s),
            void 0 !== i.opacity && (e.opacity = i.opacity),
            void 0 !== i.textureAsset && (e.textureAsset = i.textureAsset),
            i.texture && (e.texture = i.texture),
            void 0 !== i.spriteAsset && (e.spriteAsset = i.spriteAsset),
            i.sprite && (e.sprite = i.sprite),
            void 0 !== i.spriteFrame && (e.spriteFrame = i.spriteFrame),
            void 0 !== i.pixelsPerUnit && null !== i.pixelsPerUnit && (e.pixelsPerUnit = i.pixelsPerUnit),
            void 0 !== i.materialAsset && (e.materialAsset = i.materialAsset),
            i.material && (e.material = i.material),
            void 0 !== i.mask && (e.mask = i.mask)) : e.type === Of && (void 0 !== i.autoWidth && (e.autoWidth = i.autoWidth),
            void 0 !== i.autoHeight && (e.autoHeight = i.autoHeight),
            void 0 !== i.rtlReorder && (e.rtlReorder = i.rtlReorder),
            void 0 !== i.unicodeConverter && (e.unicodeConverter = i.unicodeConverter),
            null !== i.text && void 0 !== i.text ? e.text = i.text : null !== i.key && void 0 !== i.key && (e.key = i.key),
            void 0 !== i.color && ((s = i.color)instanceof at || (s = new at(s[0],s[1],s[2])),
            e.color = s),
            void 0 !== i.opacity && (e.opacity = i.opacity),
            void 0 !== i.spacing && (e.spacing = i.spacing),
            void 0 !== i.fontSize && (e.fontSize = i.fontSize,
            i.lineHeight || (e.lineHeight = i.fontSize)),
            void 0 !== i.lineHeight && (e.lineHeight = i.lineHeight),
            void 0 !== i.maxLines && (e.maxLines = i.maxLines),
            void 0 !== i.wrapLines && (e.wrapLines = i.wrapLines),
            void 0 !== i.minFontSize && (e.minFontSize = i.minFontSize),
            void 0 !== i.maxFontSize && (e.maxFontSize = i.maxFontSize),
            i.autoFitWidth && (e.autoFitWidth = i.autoFitWidth),
            i.autoFitHeight && (e.autoFitHeight = i.autoFitHeight),
            void 0 !== i.fontAsset && (e.fontAsset = i.fontAsset),
            void 0 !== i.font && (e.font = i.font),
            void 0 !== i.alignment && (e.alignment = i.alignment),
            void 0 !== i.outlineColor && (e.outlineColor = i.outlineColor),
            void 0 !== i.outlineThickness && (e.outlineThickness = i.outlineThickness),
            void 0 !== i.shadowColor && (e.shadowColor = i.shadowColor),
            void 0 !== i.shadowOffset && (e.shadowOffset = i.shadowOffset),
            void 0 !== i.enableMarkup && (e.enableMarkup = i.enableMarkup));
            var l = e._parseUpToScreen();
            l.screen && e._updateScreen(l.screen),
            t.prototype.initializeComponentData.call(this, e, i, n),
            e._beingInitialized = !1,
            e.type === kf && e._image._meshDirty && e._image._updateMesh(e._image.mesh)
        }
        ,
        i.onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.element
              , n = {
                enabled: i.enabled,
                width: i.width,
                height: i.height,
                anchor: i.anchor.clone(),
                pivot: i.pivot.clone(),
                margin: i.margin.clone(),
                alignment: i.alignment && i.alignment.clone() || i.alignment,
                autoWidth: i.autoWidth,
                autoHeight: i.autoHeight,
                type: i.type,
                rect: i.rect && i.rect.clone() || i.rect,
                rtlReorder: i.rtlReorder,
                unicodeConverter: i.unicodeConverter,
                materialAsset: i.materialAsset,
                material: i.material,
                color: i.color && i.color.clone() || i.color,
                opacity: i.opacity,
                textureAsset: i.textureAsset,
                texture: i.texture,
                spriteAsset: i.spriteAsset,
                sprite: i.sprite,
                spriteFrame: i.spriteFrame,
                pixelsPerUnit: i.pixelsPerUnit,
                spacing: i.spacing,
                lineHeight: i.lineHeight,
                wrapLines: i.wrapLines,
                layers: i.layers,
                fontSize: i.fontSize,
                minFontSize: i.minFontSize,
                maxFontSize: i.maxFontSize,
                autoFitWidth: i.autoFitWidth,
                autoFitHeight: i.autoFitHeight,
                maxLines: i.maxLines,
                fontAsset: i.fontAsset,
                font: i.font,
                useInput: i.useInput,
                batchGroupId: i.batchGroupId,
                mask: i.mask,
                outlineColor: i.outlineColor && i.outlineColor.clone() || i.outlineColor,
                outlineThickness: i.outlineThickness,
                shadowColor: i.shadowColor && i.shadowColor.clone() || i.shadowColor,
                shadowOffset: i.shadowOffset && i.shadowOffset.clone() || i.shadowOffset,
                enableMarkup: i.enableMarkup
            };
            return void 0 !== i.key && null !== i.key ? n.key = i.key : n.text = i.text,
            this.addComponent(e, n)
        }
        ,
        i.getTextElementMaterial = function(t, e) {
            return t ? e ? (this.defaultScreenSpaceTextMaterial || (this.defaultScreenSpaceTextMaterial = new qn,
            this.defaultScreenSpaceTextMaterial.name = "defaultScreenSpaceTextMaterial",
            this.defaultScreenSpaceTextMaterial.msdfMap = this._defaultTexture,
            this.defaultScreenSpaceTextMaterial.useLighting = !1,
            this.defaultScreenSpaceTextMaterial.useGammaTonemap = !1,
            this.defaultScreenSpaceTextMaterial.useFog = !1,
            this.defaultScreenSpaceTextMaterial.useSkybox = !1,
            this.defaultScreenSpaceTextMaterial.diffuse.set(0, 0, 0),
            this.defaultScreenSpaceTextMaterial.emissive.set(1, 1, 1),
            this.defaultScreenSpaceTextMaterial.opacity = .5,
            this.defaultScreenSpaceTextMaterial.blendType = 4,
            this.defaultScreenSpaceTextMaterial.depthWrite = !1,
            this.defaultScreenSpaceTextMaterial.depthTest = !1,
            this.defaultScreenSpaceTextMaterial.emissiveVertexColor = !0,
            this.defaultScreenSpaceTextMaterial.update()),
            this.defaultScreenSpaceTextMaterial) : (this.defaultScreenSpaceBitmapTextMaterial || (this.defaultScreenSpaceBitmapTextMaterial = new qn,
            this.defaultScreenSpaceBitmapTextMaterial.name = "defaultScreenSpaceBitmapTextMaterial",
            this.defaultScreenSpaceBitmapTextMaterial.emissive.set(.5, .5, .5),
            this.defaultScreenSpaceBitmapTextMaterial.emissiveMap = this._defaultTexture,
            this.defaultScreenSpaceBitmapTextMaterial.emissiveTint = !0,
            this.defaultScreenSpaceBitmapTextMaterial.opacity = .5,
            this.defaultScreenSpaceBitmapTextMaterial.opacityMap = this._defaultTexture,
            this.defaultScreenSpaceBitmapTextMaterial.opacityMapChannel = "a",
            this.defaultScreenSpaceBitmapTextMaterial.useLighting = !1,
            this.defaultScreenSpaceBitmapTextMaterial.useGammaTonemap = !1,
            this.defaultScreenSpaceBitmapTextMaterial.useFog = !1,
            this.defaultScreenSpaceBitmapTextMaterial.useSkybox = !1,
            this.defaultScreenSpaceBitmapTextMaterial.diffuse.set(0, 0, 0),
            this.defaultScreenSpaceBitmapTextMaterial.blendType = 4,
            this.defaultScreenSpaceBitmapTextMaterial.depthWrite = !1,
            this.defaultScreenSpaceBitmapTextMaterial.depthTest = !1,
            this.defaultScreenSpaceBitmapTextMaterial.emissiveVertexColor = !0,
            this.defaultScreenSpaceBitmapTextMaterial.update()),
            this.defaultScreenSpaceBitmapTextMaterial) : e ? (this.defaultTextMaterial || (this.defaultTextMaterial = new qn,
            this.defaultTextMaterial.name = "defaultTextMaterial",
            this.defaultTextMaterial.msdfMap = this._defaultTexture,
            this.defaultTextMaterial.useLighting = !1,
            this.defaultTextMaterial.useGammaTonemap = !1,
            this.defaultTextMaterial.useFog = !1,
            this.defaultTextMaterial.useSkybox = !1,
            this.defaultTextMaterial.diffuse.set(0, 0, 0),
            this.defaultTextMaterial.emissive.set(1, 1, 1),
            this.defaultTextMaterial.opacity = .5,
            this.defaultTextMaterial.blendType = 4,
            this.defaultTextMaterial.depthWrite = !1,
            this.defaultTextMaterial.emissiveVertexColor = !0,
            this.defaultTextMaterial.update()),
            this.defaultTextMaterial) : (this.defaultBitmapTextMaterial || (this.defaultBitmapTextMaterial = new qn,
            this.defaultBitmapTextMaterial.name = "defaultBitmapTextMaterial",
            this.defaultBitmapTextMaterial.emissive.set(.5, .5, .5),
            this.defaultBitmapTextMaterial.emissiveTint = !0,
            this.defaultBitmapTextMaterial.emissiveMap = this._defaultTexture,
            this.defaultBitmapTextMaterial.opacity = .5,
            this.defaultBitmapTextMaterial.opacityMap = this._defaultTexture,
            this.defaultBitmapTextMaterial.opacityMapChannel = "a",
            this.defaultBitmapTextMaterial.useLighting = !1,
            this.defaultBitmapTextMaterial.useGammaTonemap = !1,
            this.defaultBitmapTextMaterial.useFog = !1,
            this.defaultBitmapTextMaterial.useSkybox = !1,
            this.defaultBitmapTextMaterial.diffuse.set(0, 0, 0),
            this.defaultBitmapTextMaterial.blendType = 4,
            this.defaultBitmapTextMaterial.depthWrite = !1,
            this.defaultBitmapTextMaterial.emissiveVertexColor = !0,
            this.defaultBitmapTextMaterial.update()),
            this.defaultBitmapTextMaterial)
        }
        ,
        i._createBaseImageMaterial = function() {
            var t = new qn;
            return t.diffuse.set(0, 0, 0),
            t.emissive.set(.5, .5, .5),
            t.emissiveMap = this._defaultTexture,
            t.emissiveTint = !0,
            t.opacityMap = this._defaultTexture,
            t.opacityMapChannel = "a",
            t.opacityTint = !0,
            t.opacity = 0,
            t.useLighting = !1,
            t.useGammaTonemap = !1,
            t.useFog = !1,
            t.useSkybox = !1,
            t.blendType = 4,
            t.depthWrite = !1,
            t
        }
        ,
        i.getImageElementMaterial = function(t, e, i, n) {
            return t ? e ? i ? (this.defaultScreenSpaceImageMask9SlicedMaterial || (this.defaultScreenSpaceImageMask9SlicedMaterial = this._createBaseImageMaterial(),
            this.defaultScreenSpaceImageMask9SlicedMaterial.name = "defaultScreenSpaceImageMask9SlicedMaterial",
            this.defaultScreenSpaceImageMask9SlicedMaterial.nineSlicedMode = 1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.depthTest = !1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest = 1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite = !1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite = !1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite = !1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite = !1,
            this.defaultScreenSpaceImageMask9SlicedMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9SlicedMaterial)),
            this.defaultScreenSpaceImageMask9SlicedMaterial) : n ? (this.defaultScreenSpaceImageMask9TiledMaterial || (this.defaultScreenSpaceImageMask9TiledMaterial = this.defaultScreenSpaceImage9TiledMaterial.clone(),
            this.defaultScreenSpaceImageMask9TiledMaterial.name = "defaultScreenSpaceImageMask9TiledMaterial",
            this.defaultScreenSpaceImageMask9TiledMaterial.nineSlicedMode = 2,
            this.defaultScreenSpaceImageMask9TiledMaterial.depthTest = !1,
            this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest = 1,
            this.defaultScreenSpaceImageMask9TiledMaterial.redWrite = !1,
            this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite = !1,
            this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite = !1,
            this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite = !1,
            this.defaultScreenSpaceImageMask9TiledMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9TiledMaterial)),
            this.defaultScreenSpaceImageMask9TiledMaterial) : (this.defaultScreenSpaceImageMaskMaterial || (this.defaultScreenSpaceImageMaskMaterial = this._createBaseImageMaterial(),
            this.defaultScreenSpaceImageMaskMaterial.name = "defaultScreenSpaceImageMaskMaterial",
            this.defaultScreenSpaceImageMaskMaterial.depthTest = !1,
            this.defaultScreenSpaceImageMaskMaterial.alphaTest = 1,
            this.defaultScreenSpaceImageMaskMaterial.redWrite = !1,
            this.defaultScreenSpaceImageMaskMaterial.greenWrite = !1,
            this.defaultScreenSpaceImageMaskMaterial.blueWrite = !1,
            this.defaultScreenSpaceImageMaskMaterial.alphaWrite = !1,
            this.defaultScreenSpaceImageMaskMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaskMaterial)),
            this.defaultScreenSpaceImageMaskMaterial) : i ? (this.defaultScreenSpaceImage9SlicedMaterial || (this.defaultScreenSpaceImage9SlicedMaterial = this._createBaseImageMaterial(),
            this.defaultScreenSpaceImage9SlicedMaterial.name = "defaultScreenSpaceImage9SlicedMaterial",
            this.defaultScreenSpaceImage9SlicedMaterial.nineSlicedMode = 1,
            this.defaultScreenSpaceImage9SlicedMaterial.depthTest = !1,
            this.defaultScreenSpaceImage9SlicedMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImage9SlicedMaterial)),
            this.defaultScreenSpaceImage9SlicedMaterial) : n ? (this.defaultScreenSpaceImage9TiledMaterial || (this.defaultScreenSpaceImage9TiledMaterial = this._createBaseImageMaterial(),
            this.defaultScreenSpaceImage9TiledMaterial.name = "defaultScreenSpaceImage9TiledMaterial",
            this.defaultScreenSpaceImage9TiledMaterial.nineSlicedMode = 2,
            this.defaultScreenSpaceImage9TiledMaterial.depthTest = !1,
            this.defaultScreenSpaceImage9TiledMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImage9TiledMaterial)),
            this.defaultScreenSpaceImage9TiledMaterial) : (this.defaultScreenSpaceImageMaterial || (this.defaultScreenSpaceImageMaterial = this._createBaseImageMaterial(),
            this.defaultScreenSpaceImageMaterial.name = "defaultScreenSpaceImageMaterial",
            this.defaultScreenSpaceImageMaterial.depthTest = !1,
            this.defaultScreenSpaceImageMaterial.update(),
            this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaterial)),
            this.defaultScreenSpaceImageMaterial) : e ? i ? (this.defaultImage9SlicedMaskMaterial || (this.defaultImage9SlicedMaskMaterial = this._createBaseImageMaterial(),
            this.defaultImage9SlicedMaskMaterial.name = "defaultImage9SlicedMaskMaterial",
            this.defaultImage9SlicedMaskMaterial.nineSlicedMode = 1,
            this.defaultImage9SlicedMaskMaterial.alphaTest = 1,
            this.defaultImage9SlicedMaskMaterial.redWrite = !1,
            this.defaultImage9SlicedMaskMaterial.greenWrite = !1,
            this.defaultImage9SlicedMaskMaterial.blueWrite = !1,
            this.defaultImage9SlicedMaskMaterial.alphaWrite = !1,
            this.defaultImage9SlicedMaskMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImage9SlicedMaskMaterial)),
            this.defaultImage9SlicedMaskMaterial) : n ? (this.defaultImage9TiledMaskMaterial || (this.defaultImage9TiledMaskMaterial = this._createBaseImageMaterial(),
            this.defaultImage9TiledMaskMaterial.name = "defaultImage9TiledMaskMaterial",
            this.defaultImage9TiledMaskMaterial.nineSlicedMode = 2,
            this.defaultImage9TiledMaskMaterial.alphaTest = 1,
            this.defaultImage9TiledMaskMaterial.redWrite = !1,
            this.defaultImage9TiledMaskMaterial.greenWrite = !1,
            this.defaultImage9TiledMaskMaterial.blueWrite = !1,
            this.defaultImage9TiledMaskMaterial.alphaWrite = !1,
            this.defaultImage9TiledMaskMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImage9TiledMaskMaterial)),
            this.defaultImage9TiledMaskMaterial) : (this.defaultImageMaskMaterial || (this.defaultImageMaskMaterial = this._createBaseImageMaterial(),
            this.defaultImageMaskMaterial.name = "defaultImageMaskMaterial",
            this.defaultImageMaskMaterial.alphaTest = 1,
            this.defaultImageMaskMaterial.redWrite = !1,
            this.defaultImageMaskMaterial.greenWrite = !1,
            this.defaultImageMaskMaterial.blueWrite = !1,
            this.defaultImageMaskMaterial.alphaWrite = !1,
            this.defaultImageMaskMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImageMaskMaterial)),
            this.defaultImageMaskMaterial) : i ? (this.defaultImage9SlicedMaterial || (this.defaultImage9SlicedMaterial = this._createBaseImageMaterial(),
            this.defaultImage9SlicedMaterial.name = "defaultImage9SlicedMaterial",
            this.defaultImage9SlicedMaterial.nineSlicedMode = 1,
            this.defaultImage9SlicedMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImage9SlicedMaterial)),
            this.defaultImage9SlicedMaterial) : n ? (this.defaultImage9TiledMaterial || (this.defaultImage9TiledMaterial = this._createBaseImageMaterial(),
            this.defaultImage9TiledMaterial.name = "defaultImage9TiledMaterial",
            this.defaultImage9TiledMaterial.nineSlicedMode = 2,
            this.defaultImage9TiledMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImage9TiledMaterial)),
            this.defaultImage9TiledMaterial) : (this.defaultImageMaterial || (this.defaultImageMaterial = this._createBaseImageMaterial(),
            this.defaultImageMaterial.name = "defaultImageMaterial",
            this.defaultImageMaterial.update(),
            this.defaultImageMaterials.push(this.defaultImageMaterial)),
            this.defaultImageMaterial)
        }
        ,
        i.registerUnicodeConverter = function(t) {
            this._unicodeConverter = t
        }
        ,
        i.registerRtlReorder = function(t) {
            this._rtlReorder = t
        }
        ,
        i.getUnicodeConverter = function() {
            return this._unicodeConverter
        }
        ,
        i.getRtlReorder = function() {
            return this._rtlReorder
        }
        ,
        e
    }(vd);
    gd._buildAccessors(nm.prototype, rm);
    var hm = "free"
      , lm = "limited"
      , cm = "locked"
      , um = ["angularDampingX", "angularDampingY", "angularDampingZ", "angularEquilibriumX", "angularEquilibriumY", "angularEquilibriumZ", "angularLimitsX", "angularLimitsY", "angularLimitsZ", "angularMotionX", "angularMotionY", "angularMotionZ", "angularSpringX", "angularSpringY", "angularSpringZ", "angularStiffnessX", "angularStiffnessY", "angularStiffnessZ", "breakForce", "enableCollision", "enabled", "entityA", "entityB", "linearDampingX", "linearDampingY", "linearDampingZ", "linearEquilibriumX", "linearEquilibriumY", "linearEquilibriumZ", "linearLimitsX", "linearLimitsY", "linearLimitsZ", "linearMotionX", "linearMotionY", "linearMotionZ", "linearSpringX", "linearSpringY", "linearSpringZ", "linearStiffnessX", "linearStiffnessY", "linearStiffnessZ"]
      , dm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._constraint = null,
            n._entityA = null,
            n._entityB = null,
            n._breakForce = 34e37,
            n._enableCollision = !0,
            n._linearMotionX = cm,
            n._linearLimitsX = new ut(0,0),
            n._linearSpringX = !1,
            n._linearStiffnessX = 0,
            n._linearDampingX = 1,
            n._linearEquilibriumX = 0,
            n._linearMotionY = cm,
            n._linearLimitsY = new ut(0,0),
            n._linearSpringY = !1,
            n._linearStiffnessY = 0,
            n._linearDampingY = 1,
            n._linearEquilibriumY = 0,
            n._linearMotionZ = cm,
            n._linearLimitsZ = new ut(0,0),
            n._linearSpringZ = !1,
            n._linearStiffnessZ = 0,
            n._linearDampingZ = 1,
            n._linearEquilibriumZ = 0,
            n._angularMotionX = cm,
            n._angularLimitsX = new ut(0,0),
            n._angularSpringX = !1,
            n._angularStiffnessX = 0,
            n._angularDampingX = 1,
            n._angularEquilibriumX = 0,
            n._angularMotionY = cm,
            n._angularLimitsY = new ut(0,0),
            n._angularSpringY = !1,
            n._angularStiffnessY = 0,
            n._angularDampingY = 1,
            n._angularEquilibriumY = 0,
            n._angularMotionZ = cm,
            n._angularLimitsZ = new ut(0,0),
            n._angularSpringZ = !1,
            n._angularEquilibriumZ = 0,
            n._angularDampingZ = 1,
            n._angularStiffnessZ = 0,
            n.on("set_enabled", n._onSetEnabled, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._convertTransform = function(t, e) {
            var i = t.getTranslation()
              , n = new yt;
            n.setFromMat4(t);
            var s = new Ammo.btVector3(i.x,i.y,i.z)
              , a = new Ammo.btQuaternion(n.x,n.y,n.z,n.w);
            e.setOrigin(s),
            e.setRotation(a),
            Ammo.destroy(s),
            Ammo.destroy(a)
        }
        ,
        i._updateAngularLimits = function() {
            var t = this._constraint;
            if (t) {
                var e, i, n, s, a, r;
                this._angularMotionX === lm ? (e = this._angularLimitsX.x * it.DEG_TO_RAD,
                s = this._angularLimitsX.y * it.DEG_TO_RAD) : this._angularMotionX === hm ? (e = 1,
                s = 0) : e = s = 0,
                this._angularMotionY === lm ? (i = this._angularLimitsY.x * it.DEG_TO_RAD,
                a = this._angularLimitsY.y * it.DEG_TO_RAD) : this._angularMotionY === hm ? (i = 1,
                a = 0) : i = a = 0,
                this._angularMotionZ === lm ? (n = this._angularLimitsZ.x * it.DEG_TO_RAD,
                r = this._angularLimitsZ.y * it.DEG_TO_RAD) : this._angularMotionZ === hm ? (n = 1,
                r = 0) : n = r = 0;
                var o = new Ammo.btVector3(e,i,n);
                t.setAngularLowerLimit(o),
                o.setValue(s, a, r),
                t.setAngularUpperLimit(o),
                Ammo.destroy(o)
            }
        }
        ,
        i._updateLinearLimits = function() {
            var t = this._constraint;
            if (t) {
                var e, i, n, s, a, r;
                this._linearMotionX === lm ? (e = this._linearLimitsX.x,
                s = this._linearLimitsX.y) : this._linearMotionX === hm ? (e = 1,
                s = 0) : e = s = 0,
                this._linearMotionY === lm ? (i = this._linearLimitsY.x,
                a = this._linearLimitsY.y) : this._linearMotionY === hm ? (i = 1,
                a = 0) : i = a = 0,
                this._linearMotionZ === lm ? (n = this._linearLimitsZ.x,
                r = this._linearLimitsZ.y) : this._linearMotionZ === hm ? (n = 1,
                r = 0) : n = r = 0;
                var o = new Ammo.btVector3(e,i,n);
                t.setLinearLowerLimit(o),
                o.setValue(s, a, r),
                t.setLinearUpperLimit(o),
                Ammo.destroy(o)
            }
        }
        ,
        i._createConstraint = function() {
            if (this._entityA && this._entityA.rigidbody) {
                this._destroyConstraint();
                var t = new vt
                  , e = this._entityA.rigidbody.body;
                e.activate();
                var i = this.entity.getWorldTransform()
                  , n = this._entityA.getWorldTransform().clone().invert();
                t.mul2(n, i);
                var s = new Ammo.btTransform;
                if (this._convertTransform(t, s),
                this._entityB && this._entityB.rigidbody) {
                    var a = this._entityB.rigidbody.body;
                    a.activate();
                    var r = this._entityB.getWorldTransform().clone().invert();
                    t.mul2(r, i);
                    var o = new Ammo.btTransform;
                    this._convertTransform(t, o),
                    this._constraint = new Ammo.btGeneric6DofSpringConstraint(e,a,s,o,!this._enableCollision),
                    Ammo.destroy(o)
                } else
                    this._constraint = new Ammo.btGeneric6DofSpringConstraint(e,s,!this._enableCollision);
                Ammo.destroy(s);
                for (var h = ["X", "Y", "Z", "X", "Y", "Z"], l = 0; l < 6; l++) {
                    var c = l < 3 ? "_linear" : "_angular";
                    this._constraint.enableSpring(l, this[c + "Spring" + h[l]]),
                    this._constraint.setDamping(l, this[c + "Damping" + h[l]]),
                    this._constraint.setEquilibriumPoint(l, this[c + "Equilibrium" + h[l]]),
                    this._constraint.setStiffness(l, this[c + "Stiffness" + h[l]])
                }
                this._constraint.setBreakingImpulseThreshold(this._breakForce),
                this._updateLinearLimits(),
                this._updateAngularLimits(),
                this.system.app.systems.rigidbody.dynamicsWorld.addConstraint(this._constraint, !this._enableCollision)
            }
        }
        ,
        i._destroyConstraint = function() {
            this._constraint && (this.system.app.systems.rigidbody.dynamicsWorld.removeConstraint(this._constraint),
            Ammo.destroy(this._constraint),
            this._constraint = null)
        }
        ,
        i.initFromData = function(t) {
            for (var e, i = Y(um); !(e = i()).done; ) {
                var n = e.value;
                t.hasOwnProperty(n) && (t[n]instanceof ut ? this["_" + n].copy(t[n]) : this["_" + n] = t[n])
            }
            this._createConstraint()
        }
        ,
        i.onEnable = function() {
            this._createConstraint()
        }
        ,
        i.onDisable = function() {
            this._destroyConstraint()
        }
        ,
        i._onSetEnabled = function(t, e, i) {}
        ,
        i._onBeforeRemove = function() {
            this.fire("remove")
        }
        ,
        G(e, [{
            key: "entityA",
            get: function() {
                return this._entityA
            },
            set: function(t) {
                this._destroyConstraint(),
                this._entityA = t,
                this._createConstraint()
            }
        }, {
            key: "entityB",
            get: function() {
                return this._entityB
            },
            set: function(t) {
                this._destroyConstraint(),
                this._entityB = t,
                this._createConstraint()
            }
        }, {
            key: "breakForce",
            get: function() {
                return this._breakForce
            },
            set: function(t) {
                this._constraint && this._breakForce !== t && (this._constraint.setBreakingImpulseThreshold(t),
                this._breakForce = t)
            }
        }, {
            key: "enableCollision",
            get: function() {
                return this._enableCollision
            },
            set: function(t) {
                this._destroyConstraint(),
                this._enableCollision = t,
                this._createConstraint()
            }
        }, {
            key: "angularLimitsX",
            get: function() {
                return this._angularLimitsX
            },
            set: function(t) {
                this._angularLimitsX.equals(t) || (this._angularLimitsX.copy(t),
                this._updateAngularLimits())
            }
        }, {
            key: "angularMotionX",
            get: function() {
                return this._angularMotionX
            },
            set: function(t) {
                this._angularMotionX !== t && (this._angularMotionX = t,
                this._updateAngularLimits())
            }
        }, {
            key: "angularLimitsY",
            get: function() {
                return this._angularLimitsY
            },
            set: function(t) {
                this._angularLimitsY.equals(t) || (this._angularLimitsY.copy(t),
                this._updateAngularLimits())
            }
        }, {
            key: "angularMotionY",
            get: function() {
                return this._angularMotionY
            },
            set: function(t) {
                this._angularMotionY !== t && (this._angularMotionY = t,
                this._updateAngularLimits())
            }
        }, {
            key: "angularLimitsZ",
            get: function() {
                return this._angularLimitsZ
            },
            set: function(t) {
                this._angularLimitsZ.equals(t) || (this._angularLimitsZ.copy(t),
                this._updateAngularLimits())
            }
        }, {
            key: "angularMotionZ",
            get: function() {
                return this._angularMotionZ
            },
            set: function(t) {
                this._angularMotionZ !== t && (this._angularMotionZ = t,
                this._updateAngularLimits())
            }
        }, {
            key: "linearLimitsX",
            get: function() {
                return this._linearLimitsX
            },
            set: function(t) {
                this._linearLimitsX.equals(t) || (this._linearLimitsX.copy(t),
                this._updateLinearLimits())
            }
        }, {
            key: "linearMotionX",
            get: function() {
                return this._linearMotionX
            },
            set: function(t) {
                this._linearMotionX !== t && (this._linearMotionX = t,
                this._updateLinearLimits())
            }
        }, {
            key: "linearLimitsY",
            get: function() {
                return this._linearLimitsY
            },
            set: function(t) {
                this._linearLimitsY.equals(t) || (this._linearLimitsY.copy(t),
                this._updateLinearLimits())
            }
        }, {
            key: "linearMotionY",
            get: function() {
                return this._linearMotionY
            },
            set: function(t) {
                this._linearMotionY !== t && (this._linearMotionY = t,
                this._updateLinearLimits())
            }
        }, {
            key: "linearLimitsZ",
            get: function() {
                return this._linearLimitsZ
            },
            set: function(t) {
                this._linearLimitsZ.equals(t) || (this._linearLimitsZ.copy(t),
                this._updateLinearLimits())
            }
        }, {
            key: "linearMotionZ",
            get: function() {
                return this._linearMotionZ
            },
            set: function(t) {
                this._linearMotionZ !== t && (this._linearMotionZ = t,
                this._updateLinearLimits())
            }
        }]),
        e
    }(gd)
      , fm = {
        Damping: "setDamping",
        Equilibrium: "setEquilibriumPoint",
        Spring: "enableSpring",
        Stiffness: "setStiffness"
    };
    ["linear", "angular"].forEach((function(t) {
        ["Damping", "Equilibrium", "Spring", "Stiffness"].forEach((function(e) {
            ["X", "Y", "Z"].forEach((function(i) {
                var n = t + e + i
                  , s = "_" + n
                  , a = "linear" === t ? 0 : 3;
                "Y" === i && (a += 1),
                "Z" === i && (a += 2),
                Object.defineProperty(dm.prototype, n, {
                    get: function() {
                        return this[s]
                    },
                    set: function(t) {
                        this[s] !== t && (this[s] = t,
                        this._constraint[fm[e]](a, t))
                    }
                })
            }
            ))
        }
        ))
    }
    ));
    var pm = function() {
        this.enabled = !0
    }
      , mm = ["enabled"]
      , _m = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "joint",
            i.app = e,
            i.ComponentType = dm,
            i.DataType = pm,
            i.schema = mm,
            i
        }
        return H(e, t),
        e.prototype.initializeComponentData = function(t, e, i) {
            t.initFromData(e)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(dm.prototype, mm);
    var gm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._minWidth = 0,
            n._minHeight = 0,
            n._maxWidth = null,
            n._maxHeight = null,
            n._fitWidthProportion = 0,
            n._fitHeightProportion = 0,
            n._excludeFromLayout = !1,
            n
        }
        return H(e, t),
        e
    }(gd);
    function vm(t) {
        var e = "_" + t;
        Object.defineProperty(gm.prototype, t, {
            get: function() {
                return this[e]
            },
            set: function(t) {
                this[e] !== t && (this[e] = t,
                this.fire("resize"))
            }
        })
    }
    vm("minWidth"),
    vm("minHeight"),
    vm("maxWidth"),
    vm("maxHeight"),
    vm("fitWidthProportion"),
    vm("fitHeightProportion"),
    vm("excludeFromLayout");
    var ym = function() {
        this.enabled = !0
    }
      , xm = ["enabled"]
      , bm = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "layoutchild",
            i.ComponentType = gm,
            i.DataType = ym,
            i.schema = xm,
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            void 0 !== i.enabled && (e.enabled = i.enabled),
            void 0 !== i.minWidth && (e.minWidth = i.minWidth),
            void 0 !== i.minHeight && (e.minHeight = i.minHeight),
            void 0 !== i.maxWidth && (e.maxWidth = i.maxWidth),
            void 0 !== i.maxHeight && (e.maxHeight = i.maxHeight),
            void 0 !== i.fitWidthProportion && (e.fitWidthProportion = i.fitWidthProportion),
            void 0 !== i.fitHeightProportion && (e.fitHeightProportion = i.fitHeightProportion),
            void 0 !== i.excludeFromLayout && (e.excludeFromLayout = i.excludeFromLayout),
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.layoutchild;
            return this.addComponent(e, {
                enabled: i.enabled,
                minWidth: i.minWidth,
                minHeight: i.minHeight,
                maxWidth: i.maxWidth,
                maxHeight: i.maxHeight,
                fitWidthProportion: i.fitWidthProportion,
                fitHeightProportion: i.fitHeightProportion,
                excludeFromLayout: i.excludeFromLayout
            })
        }
        ,
        e
    }(vd);
    gd._buildAccessors(gm.prototype, xm);
    var Sm = {
        0: {
            axis: "x",
            size: "width",
            calculatedSize: "calculatedWidth",
            minSize: "minWidth",
            maxSize: "maxWidth",
            fitting: "widthFitting",
            fittingProportion: "fitWidthProportion"
        },
        1: {
            axis: "y",
            size: "height",
            calculatedSize: "calculatedHeight",
            minSize: "minHeight",
            maxSize: "maxHeight",
            fitting: "heightFitting",
            fittingProportion: "fitHeightProportion"
        }
    }
      , Tm = {
        0: 1,
        1: 0
    }
      , wm = {
        minWidth: 0,
        minHeight: 0,
        maxWidth: Number.POSITIVE_INFINITY,
        maxHeight: Number.POSITIVE_INFINITY,
        width: null,
        height: null,
        fitWidthProportion: 0,
        fitHeightProportion: 0
    }
      , Mm = "NONE"
      , Am = "APPLY_STRETCHING"
      , Cm = "APPLY_SHRINKING"
      , Em = new ut;
    function Pm(t) {
        var e, i = Sm[t], n = Sm[Tm[t]];
        function s(t, e) {
            return -e[i.size] * t.pivot[i.axis]
        }
        function a(t, e) {
            return -e[n.size] * t.pivot[n.axis]
        }
        function r(t, e) {
            return e[i.size] * (1 - t.pivot[i.axis])
        }
        function o(t) {
            var e = t.entity.layoutchild;
            return !e || !e.enabled || !e.excludeFromLayout
        }
        function h(t, e, i) {
            switch (t) {
            case 0:
                return Mm;
            case 1:
                return e < i ? Am : Mm;
            case 2:
                return e >= i ? Cm : Mm;
            case 3:
                return e < i ? Am : e >= i ? Cm : Mm;
            default:
                throw new Error("Unrecognized fitting mode: " + t)
            }
        }
        function l(t, i) {
            return _(t, i.size) + (t.length - 1) * e.spacing[i.axis]
        }
        function c(t, e, i) {
            for (var n = v(t, i.maxSize), s = g(t, i.fittingProportion), a = b(s, n), r = Em[i.axis] - e, o = 0; o < t.length; ++o) {
                var h = n[o]
                  , l = d(h, r, s, a)
                  , c = t[h][i.size] + l
                  , u = t[h][i.maxSize]
                  , f = Math.min(c, u);
                t[h][i.size] = f,
                r -= l - Math.max(c - f, 0)
            }
        }
        function u(t, e, i) {
            for (var n = v(t, i.minSize, !0), s = function(t) {
                if (1 === t.length)
                    return [1];
                for (var e = [], i = t.length, n = 0; n < i; ++n)
                    e.push((1 - t[n]) / (i - 1));
                return e
            }(g(t, i.fittingProportion)), a = b(s, n), r = e - Em[i.axis], o = 0; o < t.length; ++o) {
                var h = n[o]
                  , l = d(h, r, s, a)
                  , c = t[h][i.size] - l
                  , u = t[h][i.minSize]
                  , f = Math.max(c, u);
                t[h][i.size] = f,
                r -= l - Math.max(f - c, 0)
            }
        }
        function d(t, e, i, n) {
            var s = i[t]
              , a = n[t];
            return Math.abs(s) < 1e-5 && Math.abs(a) < 1e-5 ? e : e * s / a
        }
        function f(t) {
            for (var e = [], i = 0; i < t.length; ++i) {
                var n = t[i]
                  , s = Math.max(p(n, "minWidth"), 0)
                  , a = Math.max(p(n, "minHeight"), 0)
                  , r = Math.max(p(n, "maxWidth"), s)
                  , o = Math.max(p(n, "maxHeight"), a)
                  , h = m(p(n, "width"), s, r)
                  , l = m(p(n, "height"), a, o)
                  , c = p(n, "fitWidthProportion")
                  , u = p(n, "fitHeightProportion");
                e.push({
                    minWidth: s,
                    minHeight: a,
                    maxWidth: r,
                    maxHeight: o,
                    width: h,
                    height: l,
                    fitWidthProportion: c,
                    fitHeightProportion: u
                })
            }
            return e
        }
        function p(t, e) {
            var i = t.entity.layoutchild;
            return i && i.enabled && void 0 !== i[e] && null !== i[e] ? i[e] : void 0 !== t[e] ? t[e] : wm[e]
        }
        function m(t, e, i) {
            return Math.min(Math.max(t, e), i)
        }
        function _(t, e) {
            return t.reduce((function(t, i) {
                return t + i[e]
            }
            ), 0)
        }
        function g(t, e) {
            var i = _(t, e)
              , n = []
              , s = t.length;
            if (0 === i)
                for (var a = 0; a < s; ++a)
                    n.push(1 / s);
            else
                for (var r = 0; r < s; ++r)
                    n.push(t[r][e] / i);
            return n
        }
        function v(t, e, i) {
            return t.forEach(y),
            t.slice().sort((function(t, n) {
                return i ? n[e] - t[e] : t[e] - n[e]
            }
            )).map(x)
        }
        function y(t, e) {
            t.index = e
        }
        function x(t) {
            return t.index
        }
        function b(t, e) {
            var i = [];
            i[e[t.length - 1]] = t[e[t.length - 1]];
            for (var n = t.length - 2; n >= 0; --n)
                i[e[n]] = i[e[n + 1]] + t[e[n]];
            return i
        }
        return function(t, d) {
            t = t.filter(o),
            e = d,
            Em.x = e.containerSize.x - e.padding.x - e.padding.z,
            Em.y = e.containerSize.y - e.padding.y - e.padding.w,
            function(t) {
                for (var e = 0; e < t.length; ++e) {
                    var i = t[e]
                      , n = i.anchor;
                    0 === n.x && 0 === n.y && 0 === n.z && 0 === n.w || (i.anchor = dt.ZERO)
                }
            }(t);
            var p = function(t) {
                var i = 0 === e.orientation && e.reverseX || 1 === e.orientation && e.reverseY
                  , n = 0 === e.orientation && e.reverseY || 1 === e.orientation && e.reverseX;
                if (i)
                    for (var s = 0; s < t.length; ++s)
                        i && t[s].reverse();
                n && t.reverse();
                return t
            }(function(t) {
                if (!e.wrap)
                    return [t];
                for (var n = [[]], s = f(t), a = 0, r = 2 === e[i.fitting], o = 0; o < t.length; ++o) {
                    n[n.length - 1].length > 0 && (a += e.spacing[i.axis]);
                    var h = s[o][i.size];
                    a += h,
                    !r && a > Em[i.axis] && 0 !== n[n.length - 1].length && (a = h,
                    n.push([])),
                    n[n.length - 1].push(t[o]),
                    r && a > Em[i.axis] && o !== t.length - 1 && (a = 0,
                    n.push([]))
                }
                return n
            }(t))
              , m = function(t, i) {
                for (var s = [], a = [], r = 0; r < t.length; ++r) {
                    var o = t[r];
                    o.largestElement = null,
                    o.largestSize = {
                        width: Number.NEGATIVE_INFINITY,
                        height: Number.NEGATIVE_INFINITY
                    };
                    for (var d = 0; d < o.length; ++d) {
                        var f = i[r][d];
                        f[n.size] > o.largestSize[n.size] && (o.largestElement = o[d],
                        o.largestSize = f)
                    }
                    s.push(o.largestElement),
                    a.push(o.largestSize)
                }
                var p = l(a, n)
                  , m = h(e[n.fitting], p, Em[n.axis]);
                m === Am ? c(a, p, n) : m === Cm && u(a, p, n);
                for (var _ = 0; _ < t.length; ++_)
                    for (var g = t[_], v = 0; v < g.length; ++v) {
                        var y = i[_][v]
                          , x = y[n.size]
                          , b = 1 === t.length ? Em[n.axis] : g.largestSize[n.size]
                          , S = h(e[n.fitting], x, b);
                        S === Am ? y[n.size] = Math.min(b, y[n.maxSize]) : S === Cm && (y[n.size] = Math.max(b, y[n.minSize]))
                    }
                return i
            }(p, function(t) {
                for (var n = [], s = 0; s < t.length; ++s) {
                    var a = f(t[s])
                      , r = l(a, i)
                      , o = h(e[i.fitting], r, Em[i.axis]);
                    o === Am ? c(a, r, i) : o === Cm && u(a, r, i),
                    n.push(a)
                }
                return n
            }(p))
              , _ = function(t, o) {
                var h = {};
                h[i.axis] = 0,
                h[n.axis] = 0,
                t[i.size] = Number.NEGATIVE_INFINITY;
                for (var l = [], c = 0; c < t.length; ++c) {
                    var u = t[c];
                    if (0 !== u.length) {
                        for (var d = [], f = o[c], p = 0; p < u.length; ++p) {
                            var m = u[p]
                              , _ = f[p];
                            h[n.axis] -= a(m, _),
                            h[i.axis] -= s(m, _),
                            d[p] = {},
                            d[p][i.axis] = h[i.axis],
                            d[p][n.axis] = h[n.axis],
                            h[n.axis] += a(m, _),
                            h[i.axis] += r(m, _) + e.spacing[i.axis]
                        }
                        u[i.size] = h[i.axis] - e.spacing[i.axis],
                        u[n.size] = u.largestSize[n.size],
                        t[i.size] = Math.max(t[i.size], u[i.size]),
                        h[i.axis] = 0,
                        h[n.axis] += u[n.size] + e.spacing[n.axis],
                        l.push(d)
                    } else
                        l.push([])
                }
                return t[n.size] = h[n.axis] - e.spacing[n.axis],
                l
            }(p, m);
            return function(t, s, a) {
                for (var r = e.alignment[i.axis], o = e.alignment[n.axis], h = e.padding[i.axis], l = e.padding[n.axis], c = 0; c < t.length; ++c)
                    for (var u = t[c], d = s[c], f = a[c], p = (Em[i.axis] - u[i.size]) * r + h, m = (Em[n.axis] - t[n.size]) * o + l, _ = 0; _ < u.length; ++_) {
                        var g = (u[n.size] - d[_][n.size]) * e.alignment[n.axis];
                        f[_][i.axis] += p,
                        f[_][n.axis] += m + g
                    }
            }(p, m, _),
            function(t, s, a) {
                for (var r = 0; r < t.length; ++r)
                    for (var o = t[r], h = s[r], l = a[r], c = 0; c < o.length; ++c) {
                        var u = o[c];
                        u[i.calculatedSize] = h[c][i.size],
                        u[n.calculatedSize] = h[c][n.size],
                        0 === e.orientation ? u.entity.setLocalPosition(l[c][i.axis], l[c][n.axis], u.entity.getLocalPosition().z) : u.entity.setLocalPosition(l[c][n.axis], l[c][i.axis], u.entity.getLocalPosition().z)
                    }
            }(p, m, _),
            function(t) {
                var i = t.width
                  , n = t.height
                  , s = (Em.x - i) * e.alignment.x + e.padding.x
                  , a = (Em.y - n) * e.alignment.y + e.padding.y;
                return {
                    bounds: new dt(s,a,i,n)
                }
            }(p)
        }
    }
    var Rm = {};
    Rm[0] = Pm(0),
    Rm[1] = Pm(1);
    var Im = function() {
        function t() {}
        return t.prototype.calculateLayout = function(t, e) {
            var i = Rm[e.orientation];
            if (i)
                return i(t, e);
            throw new Error("Unrecognized orientation value: " + e.orientation)
        }
        ,
        t
    }();
    function Lm(t) {
        return t.element
    }
    function Dm(t) {
        return t.enabled && t.element && t.element.enabled
    }
    var km = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._orientation = 0,
            n._reverseX = !1,
            n._reverseY = !0,
            n._alignment = new ut(0,1),
            n._padding = new dt,
            n._spacing = new ut,
            n._widthFitting = 0,
            n._heightFitting = 0,
            n._wrap = !1,
            n._layoutCalculator = new Im,
            n._listenForReflowEvents(n.entity, "on"),
            n.entity.children.forEach((function(t) {
                n._listenForReflowEvents(t, "on")
            }
            )),
            n.entity.on("childinsert", n._onChildInsert, j(n)),
            n.entity.on("childremove", n._onChildRemove, j(n)),
            e.app.systems.element.on("add", n._onElementOrLayoutComponentAdd, j(n)),
            e.app.systems.element.on("beforeremove", n._onElementOrLayoutComponentRemove, j(n)),
            e.app.systems.layoutchild.on("add", n._onElementOrLayoutComponentAdd, j(n)),
            e.app.systems.layoutchild.on("beforeremove", n._onElementOrLayoutComponentRemove, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._isSelfOrChild = function(t) {
            return t === this.entity || -1 !== this.entity.children.indexOf(t)
        }
        ,
        i._listenForReflowEvents = function(t, e) {
            t.element && (t.element[e]("enableelement", this._scheduleReflow, this),
            t.element[e]("disableelement", this._scheduleReflow, this),
            t.element[e]("resize", this._scheduleReflow, this),
            t.element[e]("set:pivot", this._scheduleReflow, this)),
            t.layoutchild && (t.layoutchild[e]("set_enabled", this._scheduleReflow, this),
            t.layoutchild[e]("resize", this._scheduleReflow, this))
        }
        ,
        i._onElementOrLayoutComponentAdd = function(t) {
            this._isSelfOrChild(t) && (this._listenForReflowEvents(t, "on"),
            this._scheduleReflow())
        }
        ,
        i._onElementOrLayoutComponentRemove = function(t) {
            this._isSelfOrChild(t) && (this._listenForReflowEvents(t, "off"),
            this._scheduleReflow())
        }
        ,
        i._onChildInsert = function(t) {
            this._listenForReflowEvents(t, "on"),
            this._scheduleReflow()
        }
        ,
        i._onChildRemove = function(t) {
            this._listenForReflowEvents(t, "off"),
            this._scheduleReflow()
        }
        ,
        i._scheduleReflow = function() {
            this.enabled && this.entity && this.entity.enabled && !this._isPerformingReflow && this.system.scheduleReflow(this)
        }
        ,
        i.reflow = function() {
            var t = Lm(this.entity)
              , e = this.entity.children.filter(Dm).map(Lm);
            if (t && 0 !== e.length) {
                var i = Math.max(t.calculatedWidth, 0)
                  , n = Math.max(t.calculatedHeight, 0)
                  , s = {
                    orientation: this._orientation,
                    reverseX: this._reverseX,
                    reverseY: this._reverseY,
                    alignment: this._alignment,
                    padding: this._padding,
                    spacing: this._spacing,
                    widthFitting: this._widthFitting,
                    heightFitting: this._heightFitting,
                    wrap: this._wrap,
                    containerSize: new ut(i,n)
                };
                this._isPerformingReflow = !0;
                var a = this._layoutCalculator.calculateLayout(e, s);
                this._isPerformingReflow = !1,
                this.fire("reflow", a)
            }
        }
        ,
        i.onEnable = function() {
            this._scheduleReflow()
        }
        ,
        i.onRemove = function() {
            var t = this;
            this.entity.off("childinsert", this._onChildInsert, this),
            this.entity.off("childremove", this._onChildRemove, this),
            this._listenForReflowEvents(this.entity, "off"),
            this.entity.children.forEach((function(e) {
                t._listenForReflowEvents(e, "off")
            }
            )),
            this.system.app.systems.element.off("add", this._onElementOrLayoutComponentAdd, this),
            this.system.app.systems.element.off("beforeremove", this._onElementOrLayoutComponentRemove, this),
            this.system.app.systems.layoutchild.off("add", this._onElementOrLayoutComponentAdd, this),
            this.system.app.systems.layoutchild.off("beforeremove", this._onElementOrLayoutComponentRemove, this)
        }
        ,
        e
    }(gd);
    function Om(t) {
        var e = "_" + t;
        Object.defineProperty(km.prototype, t, {
            get: function() {
                return this[e]
            },
            set: function(t) {
                this[e] !== t && (this[e] = t,
                this._scheduleReflow())
            }
        })
    }
    Om("orientation"),
    Om("reverseX"),
    Om("reverseY"),
    Om("alignment"),
    Om("padding"),
    Om("spacing"),
    Om("widthFitting"),
    Om("heightFitting"),
    Om("wrap");
    var Fm = function() {
        this.enabled = !0
    }
      , Bm = ["enabled"]
      , Nm = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "layoutgroup",
            i.ComponentType = km,
            i.DataType = Fm,
            i.schema = Bm,
            i._reflowQueue = [],
            i.on("beforeremove", i._onRemoveComponent, j(i)),
            i.app.systems.on("postUpdate", i._onPostUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            void 0 !== i.enabled && (e.enabled = i.enabled),
            void 0 !== i.orientation && (e.orientation = i.orientation),
            void 0 !== i.reverseX && (e.reverseX = i.reverseX),
            void 0 !== i.reverseY && (e.reverseY = i.reverseY),
            void 0 !== i.alignment && (i.alignment instanceof ut ? e.alignment.copy(i.alignment) : e.alignment.set(i.alignment[0], i.alignment[1]),
            e.alignment = e.alignment),
            void 0 !== i.padding && (i.padding instanceof dt ? e.padding.copy(i.padding) : e.padding.set(i.padding[0], i.padding[1], i.padding[2], i.padding[3]),
            e.padding = e.padding),
            void 0 !== i.spacing && (i.spacing instanceof ut ? e.spacing.copy(i.spacing) : e.spacing.set(i.spacing[0], i.spacing[1]),
            e.spacing = e.spacing),
            void 0 !== i.widthFitting && (e.widthFitting = i.widthFitting),
            void 0 !== i.heightFitting && (e.heightFitting = i.heightFitting),
            void 0 !== i.wrap && (e.wrap = i.wrap),
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.layoutgroup;
            return this.addComponent(e, {
                enabled: i.enabled,
                orientation: i.orientation,
                reverseX: i.reverseX,
                reverseY: i.reverseY,
                alignment: i.alignment,
                padding: i.padding,
                spacing: i.spacing,
                widthFitting: i.widthFitting,
                heightFitting: i.heightFitting,
                wrap: i.wrap
            })
        }
        ,
        i.scheduleReflow = function(t) {
            -1 === this._reflowQueue.indexOf(t) && this._reflowQueue.push(t)
        }
        ,
        i._onPostUpdate = function() {
            this._processReflowQueue()
        }
        ,
        i._processReflowQueue = function() {
            if (0 !== this._reflowQueue.length)
                for (var t = 0; this._reflowQueue.length > 0; ) {
                    var e = this._reflowQueue.slice();
                    this._reflowQueue.length = 0,
                    e.sort((function(t, e) {
                        return t.entity.graphDepth - e.entity.graphDepth
                    }
                    ));
                    for (var i = 0; i < e.length; ++i)
                        e[i].reflow();
                    if (++t >= 100) {
                        console.warn("Max reflow iterations limit reached, bailing.");
                        break
                    }
                }
        }
        ,
        i._onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("postUpdate", this._onPostUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(km.prototype, Bm);
    var Um = []
      , zm = []
      , Vm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._cookieAsset = null,
            n._cookieAssetId = null,
            n._cookieAssetAdd = !1,
            n._cookieMatrix = null,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.addLightToLayers = function() {
            for (var t = 0; t < this.layers.length; t++) {
                var e = this.system.app.scene.layers.getLayerById(this.layers[t]);
                e && e.addLight(this)
            }
        }
        ,
        i.removeLightFromLayers = function() {
            for (var t = 0; t < this.layers.length; t++) {
                var e = this.system.app.scene.layers.getLayerById(this.layers[t]);
                e && e.removeLight(this)
            }
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.enabled && this.entity.enabled && this.addLightToLayers(),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.layers.indexOf(t.id) >= 0 && this.enabled && this.entity.enabled && t.addLight(this)
        }
        ,
        i.onLayerRemoved = function(t) {
            this.layers.indexOf(t.id) >= 0 && t.removeLight(this)
        }
        ,
        i.refreshProperties = function() {
            for (var t = 0; t < Um.length; t++) {
                var e = Um[t];
                this[e] = this[e]
            }
            this.enabled && this.entity.enabled && this.onEnable()
        }
        ,
        i.updateShadow = function() {
            this.light.updateShadow()
        }
        ,
        i.onCookieAssetSet = function() {
            var t = !1;
            "cubemap" !== this._cookieAsset.type || this._cookieAsset.loadFaces || (this._cookieAsset.loadFaces = !0,
            t = !0),
            this._cookieAsset.resource && !t || this.system.app.assets.load(this._cookieAsset),
            this._cookieAsset.resource && this.onCookieAssetLoad()
        }
        ,
        i.onCookieAssetAdd = function(t) {
            this._cookieAssetId === t.id && (this._cookieAsset = t,
            this.light.enabled && this.onCookieAssetSet(),
            this._cookieAsset.on("load", this.onCookieAssetLoad, this),
            this._cookieAsset.on("remove", this.onCookieAssetRemove, this))
        }
        ,
        i.onCookieAssetLoad = function() {
            this._cookieAsset && this._cookieAsset.resource && (this.cookie = this._cookieAsset.resource)
        }
        ,
        i.onCookieAssetRemove = function() {
            this._cookieAssetId && (this._cookieAssetAdd && (this.system.app.assets.off("add:" + this._cookieAssetId, this.onCookieAssetAdd, this),
            this._cookieAssetAdd = !1),
            this._cookieAsset && (this._cookieAsset.off("load", this.onCookieAssetLoad, this),
            this._cookieAsset.off("remove", this.onCookieAssetRemove, this),
            this._cookieAsset = null),
            this.cookie = null)
        }
        ,
        i.onEnable = function() {
            this.light.enabled = !0,
            this.system.app.scene.on("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.on("add", this.onLayerAdded, this),
            this.system.app.scene.layers.on("remove", this.onLayerRemoved, this)),
            this.enabled && this.entity.enabled && this.addLightToLayers(),
            this._cookieAsset && !this.cookie && this.onCookieAssetSet()
        }
        ,
        i.onDisable = function() {
            this.light.enabled = !1,
            this.system.app.scene.off("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.off("add", this.onLayerAdded, this),
            this.system.app.scene.layers.off("remove", this.onLayerRemoved, this)),
            this.removeLightFromLayers()
        }
        ,
        i.onRemove = function() {
            this.onDisable(),
            this.light.destroy(),
            this.cookieAsset = null
        }
        ,
        e
    }(gd);
    function Gm(t, e, i, n) {
        var s = Vm.prototype;
        Um.push(t),
        zm.push(e),
        Object.defineProperty(s, t, {
            get: function() {
                return this.data[t]
            },
            set: function(e) {
                var s = this.data
                  , a = s[t];
                (n || a !== e) && (s[t] = e,
                i && i.call(this, e, a))
            },
            configurable: !0
        })
    }
    Gm("enabled", !0, (function(t, e) {
        this.onSetEnabled(null, e, t)
    }
    )),
    Gm("light", null),
    Gm("type", "directional", (function(t, e) {
        this.system.changeType(this, e, t),
        this.refreshProperties()
    }
    )),
    Gm("color", new at(1,1,1), (function(t, e) {
        this.light.setColor(t)
    }
    ), !0),
    Gm("intensity", 1, (function(t, e) {
        this.light.intensity = t
    }
    )),
    Gm("shape", 0, (function(t, e) {
        this.light.shape = t
    }
    )),
    Gm("castShadows", !1, (function(t, e) {
        this.light.castShadows = t
    }
    )),
    Gm("shadowDistance", 40, (function(t, e) {
        this.light.shadowDistance = t
    }
    )),
    Gm("shadowResolution", 1024, (function(t, e) {
        this.light.shadowResolution = t
    }
    )),
    Gm("shadowBias", .05, (function(t, e) {
        this.light.shadowBias = -.01 * it.clamp(t, 0, 1)
    }
    )),
    Gm("numCascades", 1, (function(t, e) {
        this.light.numCascades = it.clamp(Math.floor(t), 1, 4)
    }
    )),
    Gm("bakeNumSamples", 1, (function(t, e) {
        this.light.bakeNumSamples = it.clamp(Math.floor(t), 1, 255)
    }
    )),
    Gm("bakeArea", 0, (function(t, e) {
        this.light.bakeArea = it.clamp(t, 0, 180)
    }
    )),
    Gm("cascadeDistribution", .5, (function(t, e) {
        this.light.cascadeDistribution = it.clamp(t, 0, 1)
    }
    )),
    Gm("normalOffsetBias", 0, (function(t, e) {
        this.light.normalOffsetBias = it.clamp(t, 0, 1)
    }
    )),
    Gm("range", 10, (function(t, e) {
        this.light.attenuationEnd = t
    }
    )),
    Gm("innerConeAngle", 40, (function(t, e) {
        this.light.innerConeAngle = t
    }
    )),
    Gm("outerConeAngle", 45, (function(t, e) {
        this.light.outerConeAngle = t
    }
    )),
    Gm("falloffMode", 0, (function(t, e) {
        this.light.falloffMode = t
    }
    )),
    Gm("shadowType", 0, (function(t, e) {
        this.light.shadowType = t
    }
    )),
    Gm("vsmBlurSize", 11, (function(t, e) {
        this.light.vsmBlurSize = t
    }
    )),
    Gm("vsmBlurMode", 1, (function(t, e) {
        this.light.vsmBlurMode = t
    }
    )),
    Gm("vsmBias", .0025, (function(t, e) {
        this.light.vsmBias = it.clamp(t, 0, 1)
    }
    )),
    Gm("cookieAsset", null, (function(t, e) {
        if (!this._cookieAssetId || !(t instanceof Kh && t.id === this._cookieAssetId || t === this._cookieAssetId))
            if (this.onCookieAssetRemove(),
            this._cookieAssetId = null,
            t instanceof Kh)
                this.data.cookieAsset = t.id,
                this._cookieAssetId = t.id,
                this.onCookieAssetAdd(t);
            else if ("number" == typeof t) {
                this._cookieAssetId = t;
                var i = this.system.app.assets.get(t);
                i ? this.onCookieAssetAdd(i) : (this._cookieAssetAdd = !0,
                this.system.app.assets.on("add:" + this._cookieAssetId, this.onCookieAssetAdd, this))
            }
    }
    )),
    Gm("cookie", null, (function(t, e) {
        this.light.cookie = t
    }
    )),
    Gm("cookieIntensity", 1, (function(t, e) {
        this.light.cookieIntensity = it.clamp(t, 0, 1)
    }
    )),
    Gm("cookieFalloff", !0, (function(t, e) {
        this.light.cookieFalloff = t
    }
    )),
    Gm("cookieChannel", "rgb", (function(t, e) {
        this.light.cookieChannel = t
    }
    )),
    Gm("cookieAngle", 0, (function(t, e) {
        if (0 !== t || null !== this.cookieScale) {
            this._cookieMatrix || (this._cookieMatrix = new dt);
            var i = 1
              , n = 1;
            this.cookieScale && (i = this.cookieScale.x,
            n = this.cookieScale.y);
            var s = Math.cos(t * it.DEG_TO_RAD)
              , a = Math.sin(t * it.DEG_TO_RAD);
            this._cookieMatrix.set(s / i, -a / i, a / n, s / n),
            this.light.cookieTransform = this._cookieMatrix
        } else
            this.light.cookieTransform = null
    }
    )),
    Gm("cookieScale", null, (function(t, e) {
        if (null !== t || 0 !== this.cookieAngle) {
            this._cookieMatrix || (this._cookieMatrix = new dt);
            var i = t.x
              , n = t.y
              , s = Math.cos(this.cookieAngle * it.DEG_TO_RAD)
              , a = Math.sin(this.cookieAngle * it.DEG_TO_RAD);
            this._cookieMatrix.set(s / i, -a / i, a / n, s / n),
            this.light.cookieTransform = this._cookieMatrix
        } else
            this.light.cookieTransform = null
    }
    ), !0),
    Gm("cookieOffset", null, (function(t, e) {
        this.light.cookieOffset = t
    }
    ), !0),
    Gm("shadowUpdateMode", 2, (function(t, e) {
        this.light.shadowUpdateMode = t
    }
    ), !0),
    Gm("mask", 1, (function(t, e) {
        this.light.mask = t
    }
    )),
    Gm("affectDynamic", !0, (function(t, e) {
        t ? this.light.mask |= 1 : this.light.mask &= -2,
        this.light.layersDirty()
    }
    )),
    Gm("affectLightmapped", !1, (function(t, e) {
        t ? (this.light.mask |= 2,
        this.bake && (this.light.mask &= -5)) : (this.light.mask &= -3,
        this.bake && (this.light.mask |= 4))
    }
    )),
    Gm("bake", !1, (function(t, e) {
        t ? (this.light.mask |= 4,
        this.affectLightmapped && (this.light.mask &= -3)) : (this.light.mask &= -5,
        this.affectLightmapped && (this.light.mask |= 2)),
        this.light.layersDirty()
    }
    )),
    Gm("bakeDir", !0, (function(t, e) {
        this.light.bakeDir = t
    }
    )),
    Gm("isStatic", !1, (function(t, e) {
        this.light.isStatic = t
    }
    )),
    Gm("layers", [0], (function(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = this.system.app.scene.layers.getLayerById(e[i]);
            n && n.removeLight(this)
        }
        for (var s = 0; s < t.length; s++) {
            var a = this.system.app.scene.layers.getLayerById(t[s]);
            a && this.enabled && this.entity.enabled && a.addLight(this)
        }
    }
    ));
    var Wm = function() {
        for (var t = Um, e = zm, i = 0; i < t.length; i++) {
            var n = e[i];
            n && n.clone ? this[t[i]] = n.clone() : this[t[i]] = n
        }
    }
      , Hm = {
        directional: 0,
        omni: 1,
        point: 1,
        spot: 2
    }
      , Xm = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "light",
            i.ComponentType = Vm,
            i.DataType = Wm,
            i.on("beforeremove", i._onRemoveComponent, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i) {
            for (var n = Um, s = {}, a = 0, r = n.length; a < r; a++) {
                var o = n[a];
                s[o] = i[o]
            }
            s.type || (s.type = e.data.type),
            e.data.type = s.type,
            s.layers && Array.isArray(s.layers) && (s.layers = s.layers.slice(0)),
            s.color && Array.isArray(s.color) && (s.color = new at(s.color[0],s.color[1],s.color[2])),
            s.cookieOffset && s.cookieOffset instanceof Array && (s.cookieOffset = new ut(s.cookieOffset[0],s.cookieOffset[1])),
            s.cookieScale && s.cookieScale instanceof Array && (s.cookieScale = new ut(s.cookieScale[0],s.cookieScale[1])),
            s.enable && (console.warn("WARNING: enable: Property is deprecated. Set enabled property instead."),
            s.enabled = s.enable),
            s.shape || (s.shape = 0);
            var h = new ro(this.app.graphicsDevice);
            h.type = Hm[s.type],
            h._node = e.entity,
            h._scene = this.app.scene,
            e.data.light = h,
            t.prototype.initializeComponentData.call(this, e, s, n)
        }
        ,
        i._onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.cloneComponent = function(t, e) {
            for (var i, n = t.light, s = [], a = Um, r = 0; r < a.length; r++)
                "light" !== (i = a[r]) && (n[i] && n[i].clone ? s[i] = n[i].clone() : s[i] = n[i]);
            this.addComponent(e, s)
        }
        ,
        i.changeType = function(t, e, i) {
            e !== i && (t.light.type = Hm[i])
        }
        ,
        e
    }(vd)
      , jm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._type = "asset",
            n._asset = null,
            n._model = null,
            n._mapping = {},
            n._castShadows = !0,
            n._receiveShadows = !0,
            n._materialAsset = null,
            n._material = e.defaultMaterial,
            n._castShadowsLightmap = !0,
            n._lightmapped = !1,
            n._lightmapSizeMultiplier = 1,
            n._isStatic = !1,
            n._layers = [0],
            n._batchGroupId = -1,
            n._customAabb = null,
            n._area = null,
            n._assetOld = 0,
            n._materialEvents = null,
            n._dirtyModelAsset = !1,
            n._dirtyMaterialAsset = !1,
            n._clonedModel = !1,
            i.on("remove", n.onRemoveChild, j(n)),
            i.on("removehierarchy", n.onRemoveChild, j(n)),
            i.on("insert", n.onInsertChild, j(n)),
            i.on("inserthierarchy", n.onInsertChild, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.addModelToLayers = function() {
            for (var t = this.system.app.scene.layers, e = 0; e < this._layers.length; e++) {
                var i = t.getLayerById(this._layers[e]);
                i && i.addMeshInstances(this.meshInstances)
            }
        }
        ,
        i.removeModelFromLayers = function() {
            for (var t = this.system.app.scene.layers, e = 0; e < this._layers.length; e++) {
                var i = t.getLayerById(this._layers[e]);
                i && i.removeMeshInstances(this.meshInstances)
            }
        }
        ,
        i.onRemoveChild = function() {
            this._model && this.removeModelFromLayers()
        }
        ,
        i.onInsertChild = function() {
            this._model && this.enabled && this.entity.enabled && this.addModelToLayers()
        }
        ,
        i.onRemove = function() {
            this.asset = null,
            this.model = null,
            this.materialAsset = null,
            this._unsetMaterialEvents(),
            this.entity.off("remove", this.onRemoveChild, this),
            this.entity.off("insert", this.onInsertChild, this)
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.addModelToLayers(),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.layers.indexOf(t.id) < 0 || t.addMeshInstances(this.meshInstances)
        }
        ,
        i.onLayerRemoved = function(t) {
            this.layers.indexOf(t.id) < 0 || t.removeMeshInstances(this.meshInstances)
        }
        ,
        i._setMaterialEvent = function(t, e, i, n) {
            var s = e + ":" + i;
            this.system.app.assets.on(s, n, this),
            this._materialEvents || (this._materialEvents = []),
            this._materialEvents[t] || (this._materialEvents[t] = {}),
            this._materialEvents[t][s] = {
                id: i,
                handler: n
            }
        }
        ,
        i._unsetMaterialEvents = function() {
            var t = this.system.app.assets
              , e = this._materialEvents;
            if (e) {
                for (var i = 0, n = e.length; i < n; i++)
                    if (e[i]) {
                        var s = e[i];
                        for (var a in s)
                            t.off(a, s[a].handler, this)
                    }
                this._materialEvents = null
            }
        }
        ,
        i._getAssetByIdOrPath = function(t) {
            var e = null;
            if (isNaN(parseInt(t, 10))) {
                if (this.asset) {
                    var i = this._getMaterialAssetUrl(t);
                    i && (e = this.system.app.assets.getByUrl(i))
                }
            } else
                e = this.system.app.assets.get(t);
            return e
        }
        ,
        i._getMaterialAssetUrl = function(t) {
            if (!this.asset)
                return null;
            var e = this.system.app.assets.get(this.asset);
            return e ? e.getAbsoluteUrl(t) : null
        }
        ,
        i._loadAndSetMeshInstanceMaterial = function(t, e, i) {
            var n = this.system.app.assets;
            t && (t.resource ? (e.material = t.resource,
            this._setMaterialEvent(i, "remove", t.id, (function() {
                e.material = this.system.defaultMaterial
            }
            ))) : (this._setMaterialEvent(i, "load", t.id, (function(n) {
                e.material = n.resource,
                this._setMaterialEvent(i, "remove", t.id, (function() {
                    e.material = this.system.defaultMaterial
                }
                ))
            }
            )),
            this.enabled && this.entity.enabled && n.load(t)))
        }
        ,
        i.onEnable = function() {
            var t = this.system.app
              , e = t.scene;
            e.on("set:layers", this.onLayersChanged, this),
            e.layers && (e.layers.on("add", this.onLayerAdded, this),
            e.layers.on("remove", this.onLayerRemoved, this));
            var i, n = "asset" === this._type;
            if (this._model ? this.addModelToLayers() : n && this._asset && (i = t.assets.get(this._asset)) && i.resource !== this._model && this._bindModelAsset(i),
            this._materialAsset && (i = t.assets.get(this._materialAsset)) && i.resource !== this._material && this._bindMaterialAsset(i),
            n && this._mapping)
                for (var s in this._mapping)
                    this._mapping[s] && (i = this._getAssetByIdOrPath(this._mapping[s])) && !i.resource && t.assets.load(i);
            this._batchGroupId >= 0 && t.batcher.insert(da.MODEL, this.batchGroupId, this.entity)
        }
        ,
        i.onDisable = function() {
            var t = this.system.app
              , e = t.scene;
            e.off("set:layers", this.onLayersChanged, this),
            e.layers && (e.layers.off("add", this.onLayerAdded, this),
            e.layers.off("remove", this.onLayerRemoved, this)),
            this._batchGroupId >= 0 && t.batcher.remove(da.MODEL, this.batchGroupId, this.entity),
            this._model && this.removeModelFromLayers()
        }
        ,
        i.hide = function() {
            if (this._model)
                for (var t = this._model.meshInstances, e = 0, i = t.length; e < i; e++)
                    t[e].visible = !1
        }
        ,
        i.show = function() {
            if (this._model)
                for (var t = this._model.meshInstances, e = 0, i = t.length; e < i; e++)
                    t[e].visible = !0
        }
        ,
        i._bindMaterialAsset = function(t) {
            if (t.on("load", this._onMaterialAssetLoad, this),
            t.on("unload", this._onMaterialAssetUnload, this),
            t.on("remove", this._onMaterialAssetRemove, this),
            t.on("change", this._onMaterialAssetChange, this),
            t.resource)
                this._onMaterialAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindMaterialAsset = function(t) {
            t.off("load", this._onMaterialAssetLoad, this),
            t.off("unload", this._onMaterialAssetUnload, this),
            t.off("remove", this._onMaterialAssetRemove, this),
            t.off("change", this._onMaterialAssetChange, this)
        }
        ,
        i._onMaterialAssetAdd = function(t) {
            this.system.app.assets.off("add:" + t.id, this._onMaterialAssetAdd, this),
            this._materialAsset === t.id && this._bindMaterialAsset(t)
        }
        ,
        i._onMaterialAssetLoad = function(t) {
            this._setMaterial(t.resource)
        }
        ,
        i._onMaterialAssetUnload = function(t) {
            this._setMaterial(this.system.defaultMaterial)
        }
        ,
        i._onMaterialAssetRemove = function(t) {
            this._onMaterialAssetUnload(t)
        }
        ,
        i._onMaterialAssetChange = function(t) {}
        ,
        i._bindModelAsset = function(t) {
            if (this._unbindModelAsset(t),
            t.on("load", this._onModelAssetLoad, this),
            t.on("unload", this._onModelAssetUnload, this),
            t.on("change", this._onModelAssetChange, this),
            t.on("remove", this._onModelAssetRemove, this),
            t.resource)
                this._onModelAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindModelAsset = function(t) {
            t.off("load", this._onModelAssetLoad, this),
            t.off("unload", this._onModelAssetUnload, this),
            t.off("change", this._onModelAssetChange, this),
            t.off("remove", this._onModelAssetRemove, this)
        }
        ,
        i._onModelAssetAdded = function(t) {
            this.system.app.assets.off("add:" + t.id, this._onModelAssetAdded, this),
            t.id === this._asset && this._bindModelAsset(t)
        }
        ,
        i._onModelAssetLoad = function(t) {
            this.model = t.resource.clone(),
            this._clonedModel = !0
        }
        ,
        i._onModelAssetUnload = function(t) {
            this.model = null
        }
        ,
        i._onModelAssetChange = function(t, e, i, n) {
            "data" === e && (this.mapping = this._mapping)
        }
        ,
        i._onModelAssetRemove = function(t) {
            this.model = null
        }
        ,
        i._setMaterial = function(t) {
            if (this._material !== t) {
                this._material = t;
                var e = this._model;
                if (e && "asset" !== this._type)
                    for (var i = e.meshInstances, n = 0, s = i.length; n < s; n++)
                        i[n].material = t
            }
        }
        ,
        G(e, [{
            key: "meshInstances",
            get: function() {
                return this._model ? this._model.meshInstances : null
            },
            set: function(t) {
                this._model && (this._model.meshInstances = t)
            }
        }, {
            key: "customAabb",
            get: function() {
                return this._customAabb
            },
            set: function(t) {
                if (this._customAabb = t,
                this._model) {
                    var e = this._model.meshInstances;
                    if (e)
                        for (var i = 0; i < e.length; i++)
                            e[i].setCustomAabb(this._customAabb)
                }
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                if (this._type !== t)
                    if (this._area = null,
                    this._type = t,
                    "asset" === t)
                        null !== this._asset ? this._bindModelAsset(this._asset) : this.model = null;
                    else {
                        var e = la(this.system.app.graphicsDevice, t);
                        this._area = e.area;
                        var i = e.mesh
                          , n = new ji
                          , s = new mh;
                        s.graph = n,
                        s.meshInstances = [new wa(i,this._material,n)],
                        this.model = s,
                        this._asset = null
                    }
            }
        }, {
            key: "asset",
            get: function() {
                return this._asset
            },
            set: function(t) {
                var e = this.system.app.assets
                  , i = t;
                if (t instanceof Kh && (i = t.id),
                this._asset !== i) {
                    if (this._asset) {
                        e.off("add:" + this._asset, this._onModelAssetAdded, this);
                        var n = e.get(this._asset);
                        n && this._unbindModelAsset(n)
                    }
                    if (this._asset = i,
                    this._asset) {
                        var s = e.get(this._asset);
                        s ? this._bindModelAsset(s) : (this.model = null,
                        e.on("add:" + this._asset, this._onModelAssetAdded, this))
                    } else
                        this.model = null
                }
            }
        }, {
            key: "model",
            get: function() {
                return this._model
            },
            set: function(t) {
                if (this._model !== t && (!t || !t._immutable) && (this._model && (this._model._immutable = !1,
                this.removeModelFromLayers(),
                this.entity.removeChild(this._model.getGraph()),
                delete this._model._entity,
                this._clonedModel && (this._model.destroy(),
                this._clonedModel = !1)),
                this._model = t,
                this._model)) {
                    this._model._immutable = !0;
                    for (var e = this._model.meshInstances, i = 0; i < e.length; i++)
                        e[i].castShadow = this._castShadows,
                        e[i].receiveShadow = this._receiveShadows,
                        e[i].isStatic = this._isStatic,
                        e[i].setCustomAabb(this._customAabb);
                    this.lightmapped = this._lightmapped,
                    this.entity.addChild(this._model.graph),
                    this.enabled && this.entity.enabled && this.addModelToLayers(),
                    this._model._entity = this.entity,
                    this.entity.animation && this.entity.animation.setModel(this._model),
                    this.entity.anim && (this.entity.anim.playing ? this.entity.anim.rebind() : this.entity.anim.resetStateGraph()),
                    "asset" === this.type ? this.mapping = this._mapping : this._unsetMaterialEvents()
                }
            }
        }, {
            key: "lightmapped",
            get: function() {
                return this._lightmapped
            },
            set: function(t) {
                if (t !== this._lightmapped && (this._lightmapped = t,
                this._model))
                    for (var e = this._model.meshInstances, i = 0; i < e.length; i++)
                        e[i].setLightmapped(t)
            }
        }, {
            key: "castShadows",
            get: function() {
                return this._castShadows
            },
            set: function(t) {
                if (this._castShadows !== t) {
                    var e = this._model;
                    if (e) {
                        var i = this.layers
                          , n = this.system.app.scene;
                        if (this._castShadows && !t)
                            for (var s = 0; s < i.length; s++) {
                                var a = this.system.app.scene.layers.getLayerById(this.layers[s]);
                                a && a.removeShadowCasters(e.meshInstances)
                            }
                        for (var r = e.meshInstances, o = 0; o < r.length; o++)
                            r[o].castShadow = t;
                        if (!this._castShadows && t)
                            for (var h = 0; h < i.length; h++) {
                                var l = n.layers.getLayerById(i[h]);
                                l && l.addShadowCasters(e.meshInstances)
                            }
                    }
                    this._castShadows = t
                }
            }
        }, {
            key: "receiveShadows",
            get: function() {
                return this._receiveShadows
            },
            set: function(t) {
                if (this._receiveShadows !== t && (this._receiveShadows = t,
                this._model))
                    for (var e = this._model.meshInstances, i = 0, n = e.length; i < n; i++)
                        e[i].receiveShadow = t
            }
        }, {
            key: "castShadowsLightmap",
            get: function() {
                return this._castShadowsLightmap
            },
            set: function(t) {
                this._castShadowsLightmap = t
            }
        }, {
            key: "lightmapSizeMultiplier",
            get: function() {
                return this._lightmapSizeMultiplier
            },
            set: function(t) {
                this._lightmapSizeMultiplier = t
            }
        }, {
            key: "isStatic",
            get: function() {
                return this._isStatic
            },
            set: function(t) {
                if (this._isStatic !== t && (this._isStatic = t,
                this._model))
                    for (var e = this._model.meshInstances, i = 0; i < e.length; i++) {
                        e[i].isStatic = t
                    }
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                var e = this.system.app.scene.layers;
                if (this.meshInstances)
                    for (var i = 0; i < this._layers.length; i++) {
                        var n = e.getLayerById(this._layers[i]);
                        n && n.removeMeshInstances(this.meshInstances)
                    }
                this._layers.length = 0;
                for (var s = 0; s < t.length; s++)
                    this._layers[s] = t[s];
                if (this.enabled && this.entity.enabled && this.meshInstances)
                    for (var a = 0; a < this._layers.length; a++) {
                        var r = e.getLayerById(this._layers[a]);
                        r && r.addMeshInstances(this.meshInstances)
                    }
            }
        }, {
            key: "batchGroupId",
            get: function() {
                return this._batchGroupId
            },
            set: function(t) {
                if (this._batchGroupId !== t) {
                    var e = this.system.app.batcher;
                    this.entity.enabled && this._batchGroupId >= 0 && e.remove(da.MODEL, this.batchGroupId, this.entity),
                    this.entity.enabled && t >= 0 && e.insert(da.MODEL, t, this.entity),
                    t < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled && this.addModelToLayers(),
                    this._batchGroupId = t
                }
            }
        }, {
            key: "materialAsset",
            get: function() {
                return this._materialAsset
            },
            set: function(t) {
                var e = t;
                t instanceof Kh && (e = t.id);
                var i = this.system.app.assets;
                if (e !== this._materialAsset) {
                    if (this._materialAsset) {
                        i.off("add:" + this._materialAsset, this._onMaterialAssetAdd, this);
                        var n = i.get(this._materialAsset);
                        n && this._unbindMaterialAsset(n)
                    }
                    if (this._materialAsset = e,
                    this._materialAsset) {
                        var s = i.get(this._materialAsset);
                        s ? this._bindMaterialAsset(s) : (this._setMaterial(this.system.defaultMaterial),
                        i.on("add:" + this._materialAsset, this._onMaterialAssetAdd, this))
                    } else
                        this._setMaterial(this.system.defaultMaterial)
                }
            }
        }, {
            key: "material",
            get: function() {
                return this._material
            },
            set: function(t) {
                this._material !== t && (this.materialAsset = null,
                this._setMaterial(t))
            }
        }, {
            key: "mapping",
            get: function() {
                return this._mapping
            },
            set: function(t) {
                if ("asset" === this._type && (this._unsetMaterialEvents(),
                t || (t = {}),
                this._mapping = t,
                this._model))
                    for (var e = this._model.meshInstances, i = this.asset ? this.system.app.assets.get(this.asset) : null, n = i ? i.data.mapping : null, s = null, a = 0, r = e.length; a < r; a++)
                        if (void 0 !== t[a])
                            t[a] ? (s = this.system.app.assets.get(t[a]),
                            this._loadAndSetMeshInstanceMaterial(s, e[a], a)) : e[a].material = this.system.defaultMaterial;
                        else if (n)
                            if (n[a] && (n[a].material || n[a].path)) {
                                if (void 0 !== n[a].material)
                                    s = this.system.app.assets.get(n[a].material);
                                else if (void 0 !== n[a].path) {
                                    var o = this._getMaterialAssetUrl(n[a].path);
                                    o && (s = this.system.app.assets.getByUrl(o))
                                }
                                this._loadAndSetMeshInstanceMaterial(s, e[a], a)
                            } else
                                e[a].material = this.system.defaultMaterial
            }
        }]),
        e
    }(gd)
      , qm = function() {
        this.enabled = !0
    }
      , Ym = ["enabled"]
      , Km = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "model",
            i.ComponentType = jm,
            i.DataType = qm,
            i.schema = Ym,
            i.defaultMaterial = kn.get(e.graphicsDevice),
            i.on("beforeremove", i.onRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["material", "materialAsset", "asset", "castShadows", "receiveShadows", "castShadowsLightmap", "lightmapped", "lightmapSizeMultiplier", "type", "mapping", "layers", "isStatic", "batchGroupId"],
            null !== i.batchGroupId && void 0 !== i.batchGroupId || (i.batchGroupId = -1),
            i.layers && i.layers.length && (i.layers = i.layers.slice(0));
            for (var s = 0; s < n.length; s++)
                i.hasOwnProperty(n[s]) && (e[n[s]] = i[n[s]]);
            i.aabbCenter && i.aabbHalfExtents && (e.customAabb = new Mt(new lt(i.aabbCenter),new lt(i.aabbHalfExtents))),
            t.prototype.initializeComponentData.call(this, e, i, ["enabled"])
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = {
                type: t.model.type,
                asset: t.model.asset,
                castShadows: t.model.castShadows,
                receiveShadows: t.model.receiveShadows,
                castShadowsLightmap: t.model.castShadowsLightmap,
                lightmapped: t.model.lightmapped,
                lightmapSizeMultiplier: t.model.lightmapSizeMultiplier,
                isStatic: t.model.isStatic,
                enabled: t.model.enabled,
                layers: t.model.layers,
                batchGroupId: t.model.batchGroupId,
                mapping: l({}, t.model.mapping)
            }
              , n = t.model.materialAsset;
            n instanceof Kh || null == n || (n = this.app.assets.get(n));
            var s = t.model.material;
            s && s !== this.defaultMaterial && n && s !== n.resource || (i.materialAsset = n);
            var a = this.addComponent(e, i);
            if (t.model.model && "asset" === t.model.type && !t.model.asset && (a.model = t.model.model.clone(),
            a._clonedModel = !0),
            i.materialAsset || (a.material = s),
            t.model.model)
                for (var r = t.model.model.meshInstances, o = a.model.meshInstances, h = 0; h < r.length; h++)
                    o[h].mask = r[h].mask,
                    o[h].material = r[h].material,
                    o[h].layer = r[h].layer,
                    o[h].receiveShadow = r[h].receiveShadow;
            t.model.customAabb && (a.customAabb = t.model.customAabb.clone())
        }
        ,
        i.onRemove = function(t, e) {
            e.onRemove()
        }
        ,
        e
    }(vd);
    gd._buildAccessors(jm.prototype, Ym);
    var Zm = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._type = "asset",
            n._castShadows = !0,
            n._receiveShadows = !0,
            n._castShadowsLightmap = !0,
            n._lightmapped = !1,
            n._lightmapSizeMultiplier = 1,
            n._isStatic = !1,
            n._batchGroupId = -1,
            n._meshInstances = [],
            n._layers = [0],
            n._renderStyle = 0,
            n._customAabb = null,
            n._area = null,
            n._rootBone = new Lf(j(n),"rootBone"),
            n._rootBone.on("set:entity", n._onSetRootBone, j(n)),
            n._assetReference = new hc("asset",j(n),e.app.assets,{
                add: n._onRenderAssetAdded,
                load: n._onRenderAssetLoad,
                remove: n._onRenderAssetRemove,
                unload: n._onRenderAssetUnload
            },j(n)),
            n._material = e.defaultMaterial,
            n._materialReferences = [],
            i.on("remove", n.onRemoveChild, j(n)),
            i.on("removehierarchy", n.onRemoveChild, j(n)),
            i.on("insert", n.onInsertChild, j(n)),
            i.on("inserthierarchy", n.onInsertChild, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._onSetRootBone = function(t) {
            t && this._onRootBoneChanged()
        }
        ,
        i._onRootBoneChanged = function() {
            this._clearSkinInstances(),
            this.enabled && this.entity.enabled && this._cloneSkinInstances()
        }
        ,
        i.destroyMeshInstances = function() {
            var t = this._meshInstances;
            if (t) {
                this.removeFromLayers(),
                this._clearSkinInstances();
                for (var e = 0; e < t.length; e++)
                    t[e].destroy();
                this._meshInstances.length = 0
            }
        }
        ,
        i.addToLayers = function() {
            for (var t = this.system.app.scene.layers, e = 0; e < this._layers.length; e++) {
                var i = t.getLayerById(this._layers[e]);
                i && i.addMeshInstances(this._meshInstances)
            }
        }
        ,
        i.removeFromLayers = function() {
            if (this._meshInstances && this._meshInstances.length)
                for (var t = this.system.app.scene.layers, e = 0; e < this._layers.length; e++) {
                    var i = t.getLayerById(this._layers[e]);
                    i && i.removeMeshInstances(this._meshInstances)
                }
        }
        ,
        i.onRemoveChild = function() {
            this.removeFromLayers()
        }
        ,
        i.onInsertChild = function() {
            this._meshInstances && this.enabled && this.entity.enabled && this.addToLayers()
        }
        ,
        i.onRemove = function() {
            this.destroyMeshInstances(),
            this.asset = null,
            this.materialAsset = null,
            this.entity.off("remove", this.onRemoveChild, this),
            this.entity.off("insert", this.onInsertChild, this)
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.addToLayers(),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.layers.indexOf(t.id) < 0 || t.addMeshInstances(this._meshInstances)
        }
        ,
        i.onLayerRemoved = function(t) {
            this.layers.indexOf(t.id) < 0 || t.removeMeshInstances(this._meshInstances)
        }
        ,
        i.onEnable = function() {
            var t = this.system.app
              , e = t.scene;
            this._rootBone.onParentComponentEnable(),
            this._cloneSkinInstances(),
            e.on("set:layers", this.onLayersChanged, this),
            e.layers && (e.layers.on("add", this.onLayerAdded, this),
            e.layers.on("remove", this.onLayerRemoved, this));
            var i = "asset" === this._type;
            this._meshInstances && this._meshInstances.length ? this.addToLayers() : i && this.asset && this._onRenderAssetAdded();
            for (var n = 0; n < this._materialReferences.length; n++)
                this._materialReferences[n].asset && this.system.app.assets.load(this._materialReferences[n].asset);
            this._batchGroupId >= 0 && t.batcher.insert(da.RENDER, this.batchGroupId, this.entity)
        }
        ,
        i.onDisable = function() {
            var t = this.system.app
              , e = t.scene;
            e.off("set:layers", this.onLayersChanged, this),
            e.layers && (e.layers.off("add", this.onLayerAdded, this),
            e.layers.off("remove", this.onLayerRemoved, this)),
            this._batchGroupId >= 0 && t.batcher.remove(da.RENDER, this.batchGroupId, this.entity),
            this.removeFromLayers()
        }
        ,
        i.hide = function() {
            if (this._meshInstances)
                for (var t = 0; t < this._meshInstances.length; t++)
                    this._meshInstances[t].visible = !1
        }
        ,
        i.show = function() {
            if (this._meshInstances)
                for (var t = 0; t < this._meshInstances.length; t++)
                    this._meshInstances[t].visible = !0
        }
        ,
        i._onRenderAssetAdded = function() {
            this._assetReference.asset && (this._assetReference.asset.resource ? this._onRenderAssetLoad() : this.enabled && this.entity.enabled && this.system.app.assets.load(this._assetReference.asset))
        }
        ,
        i._onRenderAssetLoad = function() {
            if (this.destroyMeshInstances(),
            this._assetReference.asset) {
                var t = this._assetReference.asset.resource;
                t.off("set:meshes", this._onSetMeshes, this),
                t.on("set:meshes", this._onSetMeshes, this),
                t.meshes && this._onSetMeshes(t.meshes)
            }
        }
        ,
        i._onSetMeshes = function(t) {
            this._cloneMeshes(t)
        }
        ,
        i._clearSkinInstances = function() {
            for (var t = 0; t < this._meshInstances.length; t++) {
                var e = this._meshInstances[t];
                $h.removeCachedSkinInstance(e.skinInstance),
                e.skinInstance = null
            }
        }
        ,
        i._cloneSkinInstances = function() {
            if (this._meshInstances.length && this._rootBone.entity instanceof ji)
                for (var t = 0; t < this._meshInstances.length; t++) {
                    var e = this._meshInstances[t]
                      , i = e.mesh;
                    i.skin && !i.skinInstance && (e.skinInstance = $h.createCachedSkinedInstance(i.skin, this._rootBone.entity, this.entity))
                }
        }
        ,
        i._cloneMeshes = function(t) {
            if (t && t.length) {
                for (var e = [], i = 0; i < t.length; i++) {
                    var n = t[i]
                      , s = this._materialReferences[i] && this._materialReferences[i].asset && this._materialReferences[i].asset.resource
                      , a = new wa(n,s || this.system.defaultMaterial,this.entity);
                    e.push(a),
                    n.morph && (a.morphInstance = new ph(n.morph))
                }
                this.meshInstances = e,
                this._cloneSkinInstances()
            }
        }
        ,
        i._onRenderAssetUnload = function() {
            "asset" === this._type && this.destroyMeshInstances()
        }
        ,
        i._onRenderAssetRemove = function() {
            this._assetReference.asset && this._assetReference.asset.resource && this._assetReference.asset.resource.off("set:meshes", this._onSetMeshes, this),
            this._onRenderAssetUnload()
        }
        ,
        i._onMaterialAdded = function(t, e, i) {
            i.resource ? this._onMaterialLoad(t, e, i) : this.enabled && this.entity.enabled && this.system.app.assets.load(i)
        }
        ,
        i._updateMainMaterial = function(t, e) {
            0 === t && (this.material = e)
        }
        ,
        i._onMaterialLoad = function(t, e, i) {
            this._meshInstances[t] && (this._meshInstances[t].material = i.resource),
            this._updateMainMaterial(t, i.resource)
        }
        ,
        i._onMaterialRemove = function(t, e, i) {
            this._meshInstances[t] && (this._meshInstances[t].material = this.system.defaultMaterial),
            this._updateMainMaterial(t, this.system.defaultMaterial)
        }
        ,
        i._onMaterialUnload = function(t, e, i) {
            this._meshInstances[t] && (this._meshInstances[t].material = this.system.defaultMaterial),
            this._updateMainMaterial(t, this.system.defaultMaterial)
        }
        ,
        i.resolveDuplicatedEntityReferenceProperties = function(t, e) {
            t.rootBone && e[t.rootBone] && (this.rootBone = e[t.rootBone]),
            this._clearSkinInstances()
        }
        ,
        G(e, [{
            key: "renderStyle",
            get: function() {
                return this._renderStyle
            },
            set: function(t) {
                this._renderStyle !== t && (this._renderStyle = t,
                wa._prepareRenderStyleForArray(this._meshInstances, t))
            }
        }, {
            key: "customAabb",
            get: function() {
                return this._customAabb
            },
            set: function(t) {
                this._customAabb = t;
                var e = this._meshInstances;
                if (e)
                    for (var i = 0; i < e.length; i++)
                        e[i].setCustomAabb(this._customAabb)
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                if (this._type !== t && (this._area = null,
                this._type = t,
                this.destroyMeshInstances(),
                "asset" !== t)) {
                    var e = this._material;
                    e && e !== this.system.defaultMaterial || (e = this._materialReferences[0] && this._materialReferences[0].asset && this._materialReferences[0].asset.resource);
                    var i = la(this.system.app.graphicsDevice, t);
                    this._area = i.area,
                    this.meshInstances = [new wa(i.mesh,e || this.system.defaultMaterial,this.entity)]
                }
            }
        }, {
            key: "meshInstances",
            get: function() {
                return this._meshInstances
            },
            set: function(t) {
                if (this.destroyMeshInstances(),
                this._meshInstances = t,
                this._meshInstances) {
                    for (var e = this._meshInstances, i = 0; i < e.length; i++)
                        e[i].node || (e[i].node = this.entity),
                        e[i].castShadow = this._castShadows,
                        e[i].receiveShadow = this._receiveShadows,
                        e[i].isStatic = this._isStatic,
                        e[i].renderStyle = this._renderStyle,
                        e[i].setLightmapped(this._lightmapped),
                        e[i].setCustomAabb(this._customAabb);
                    this.enabled && this.entity.enabled && this.addToLayers()
                }
            }
        }, {
            key: "lightmapped",
            get: function() {
                return this._lightmapped
            },
            set: function(t) {
                if (t !== this._lightmapped) {
                    this._lightmapped = t;
                    var e = this._meshInstances;
                    if (e)
                        for (var i = 0; i < e.length; i++)
                            e[i].setLightmapped(t)
                }
            }
        }, {
            key: "castShadows",
            get: function() {
                return this._castShadows
            },
            set: function(t) {
                if (this._castShadows !== t) {
                    var e = this._meshInstances;
                    if (e) {
                        var i = this.layers
                          , n = this.system.app.scene;
                        if (this._castShadows && !t)
                            for (var s = 0; s < i.length; s++) {
                                var a = n.layers.getLayerById(this.layers[s]);
                                a && a.removeShadowCasters(e)
                            }
                        for (var r = 0; r < e.length; r++)
                            e[r].castShadow = t;
                        if (!this._castShadows && t)
                            for (var o = 0; o < i.length; o++) {
                                var h = n.layers.getLayerById(i[o]);
                                h && h.addShadowCasters(e)
                            }
                    }
                    this._castShadows = t
                }
            }
        }, {
            key: "receiveShadows",
            get: function() {
                return this._receiveShadows
            },
            set: function(t) {
                if (this._receiveShadows !== t) {
                    this._receiveShadows = t;
                    var e = this._meshInstances;
                    if (e)
                        for (var i = 0; i < e.length; i++)
                            e[i].receiveShadow = t
                }
            }
        }, {
            key: "castShadowsLightmap",
            get: function() {
                return this._castShadowsLightmap
            },
            set: function(t) {
                this._castShadowsLightmap = t
            }
        }, {
            key: "lightmapSizeMultiplier",
            get: function() {
                return this._lightmapSizeMultiplier
            },
            set: function(t) {
                this._lightmapSizeMultiplier = t
            }
        }, {
            key: "isStatic",
            get: function() {
                return this._isStatic
            },
            set: function(t) {
                if (this._isStatic !== t) {
                    this._isStatic = t;
                    var e = this._meshInstances;
                    if (e)
                        for (var i = 0; i < e.length; i++)
                            e[i].isStatic = t
                }
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                var e, i = this.system.app.scene.layers;
                if (this._meshInstances)
                    for (var n = 0; n < this._layers.length; n++)
                        (e = i.getLayerById(this._layers[n])) && e.removeMeshInstances(this._meshInstances);
                this._layers.length = 0;
                for (var s = 0; s < t.length; s++)
                    this._layers[s] = t[s];
                if (this.enabled && this.entity.enabled && this._meshInstances)
                    for (var a = 0; a < this._layers.length; a++)
                        (e = i.getLayerById(this._layers[a])) && e.addMeshInstances(this._meshInstances)
            }
        }, {
            key: "batchGroupId",
            get: function() {
                return this._batchGroupId
            },
            set: function(t) {
                if (this._batchGroupId !== t) {
                    var e = this.system.app.batcher;
                    this.entity.enabled && this._batchGroupId >= 0 && e.remove(da.RENDER, this.batchGroupId, this.entity),
                    this.entity.enabled && t >= 0 && e.insert(da.RENDER, t, this.entity),
                    t < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled && this.addToLayers(),
                    this._batchGroupId = t
                }
            }
        }, {
            key: "material",
            get: function() {
                return this._material
            },
            set: function(t) {
                if (this._material !== t && (this._material = t,
                this._meshInstances && "asset" !== this._type))
                    for (var e = 0; e < this._meshInstances.length; e++)
                        this._meshInstances[e].material = t
            }
        }, {
            key: "materialAssets",
            get: function() {
                return this._materialReferences.map((function(t) {
                    return t.id
                }
                ))
            },
            set: function(t) {
                if (void 0 === t && (t = []),
                this._materialReferences.length > t.length) {
                    for (var e = t.length; e < this._materialReferences.length; e++)
                        this._materialReferences[e].id = null;
                    this._materialReferences.length = t.length
                }
                for (var i = 0; i < t.length; i++)
                    if (this._materialReferences[i] || this._materialReferences.push(new hc(i,this,this.system.app.assets,{
                        add: this._onMaterialAdded,
                        load: this._onMaterialLoad,
                        remove: this._onMaterialRemove,
                        unload: this._onMaterialUnload
                    },this)),
                    t[i]) {
                        var n = t[i]instanceof Kh ? t[i].id : t[i];
                        this._materialReferences[i].id !== n && (this._materialReferences[i].id = n),
                        this._materialReferences[i].asset && this._onMaterialAdded(i, this, this._materialReferences[i].asset)
                    } else
                        this._materialReferences[i].id = null,
                        this._meshInstances[i] && (this._meshInstances[i].material = this.system.defaultMaterial)
            }
        }, {
            key: "asset",
            get: function() {
                return this._assetReference.id
            },
            set: function(t) {
                var e = t instanceof Kh ? t.id : t;
                this._assetReference.id !== e && (this._assetReference.asset && this._assetReference.asset.resource && this._onRenderAssetRemove(),
                this._assetReference.id = e,
                this._assetReference.asset && this._onRenderAssetAdded())
            }
        }]),
        e
    }(gd)
      , $m = function() {
        this.enabled = !0,
        this.rootBone = null
    }
      , Qm = [{
        name: "rootBone",
        type: "entity"
    }, "enabled"]
      , Jm = ["material", "meshInstances", "asset", "materialAssets", "castShadows", "receiveShadows", "castShadowsLightmap", "lightmapped", "lightmapSizeMultiplier", "renderStyle", "type", "layers", "isStatic", "batchGroupId"]
      , t_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "render",
            i.ComponentType = Zm,
            i.DataType = $m,
            i.schema = Qm,
            i.defaultMaterial = kn.get(e.graphicsDevice),
            i.on("beforeremove", i.onRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            null !== i.batchGroupId && void 0 !== i.batchGroupId || (i.batchGroupId = -1),
            i.layers && i.layers.length && (i.layers = i.layers.slice(0));
            for (var s = 0; s < Jm.length; s++)
                i.hasOwnProperty(Jm[s]) && (e[Jm[s]] = i[Jm[s]]);
            i.aabbCenter && i.aabbHalfExtents && (e.customAabb = new Mt(new lt(i.aabbCenter),new lt(i.aabbHalfExtents))),
            t.prototype.initializeComponentData.call(this, e, i, Qm)
        }
        ,
        i.cloneComponent = function(t, e) {
            for (var i = {}, n = 0; n < Jm.length; n++)
                i[Jm[n]] = t.render[Jm[n]];
            delete i.meshInstances;
            var s = this.addComponent(e, i)
              , a = t.render.meshInstances
              , r = a.map((function(t) {
                return t.mesh
            }
            ));
            s._onSetMeshes(r);
            for (var o = 0; o < a.length; o++)
                s.meshInstances[o].material = a[o].material;
            t.render.customAabb && (s.customAabb = t.render.customAabb.clone())
        }
        ,
        i.onRemove = function(t, e) {
            e.onRemove()
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Zm.prototype, Qm);
    var e_, i_ = ["emitterExtents", "emitterRadius", "emitterExtentsInner", "emitterRadiusInner", "loop", "initialVelocity", "animSpeed", "normalMap", "particleNormal"], n_ = ["numParticles", "lifetime", "rate", "rate2", "startAngle", "startAngle2", "lighting", "halfLambert", "intensity", "wrap", "wrapBounds", "depthWrite", "noFog", "sort", "stretch", "alignToMotion", "preWarm", "emitterShape", "animTilesX", "animTilesY", "animStartFrame", "animNumFrames", "animNumAnimations", "animIndex", "randomizeAnimIndex", "animLoop", "colorMap", "localSpace", "screenSpace", "orientation"], s_ = ["scaleGraph", "scaleGraph2", "colorGraph", "colorGraph2", "alphaGraph", "alphaGraph2", "velocityGraph", "velocityGraph2", "localVelocityGraph", "localVelocityGraph2", "rotationSpeedGraph", "rotationSpeedGraph2", "radialSpeedGraph", "radialSpeedGraph2"], a_ = ["colorMapAsset", "normalMapAsset", "meshAsset", "renderAsset"], r_ = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this).on("set_colorMapAsset", n.onSetColorMapAsset, j(n)),
            n.on("set_normalMapAsset", n.onSetNormalMapAsset, j(n)),
            n.on("set_meshAsset", n.onSetMeshAsset, j(n)),
            n.on("set_mesh", n.onSetMesh, j(n)),
            n.on("set_renderAsset", n.onSetRenderAsset, j(n)),
            n.on("set_loop", n.onSetLoop, j(n)),
            n.on("set_blendType", n.onSetBlendType, j(n)),
            n.on("set_depthSoftening", n.onSetDepthSoftening, j(n)),
            n.on("set_layers", n.onSetLayers, j(n)),
            i_.forEach((function(t) {
                n.on("set_" + t, n.onSetSimpleProperty, j(n))
            }
            )),
            n_.forEach((function(t) {
                n.on("set_" + t, n.onSetComplexProperty, j(n))
            }
            )),
            s_.forEach((function(t) {
                n.on("set_" + t, n.onSetGraphProperty, j(n))
            }
            )),
            n._requestedDepth = !1,
            n._drawOrder = 0,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.addModelToLayers = function() {
            if (this.data.model)
                for (var t = 0; t < this.layers.length; t++) {
                    var e = this.system.app.scene.layers.getLayerById(this.layers[t]);
                    e && (e.addMeshInstances(this.data.model.meshInstances),
                    this.emitter._layer = e)
                }
        }
        ,
        i.removeModelFromLayers = function(t) {
            if (this.data.model)
                for (var e = 0; e < this.layers.length; e++) {
                    var i = this.system.app.scene.layers.getLayerById(this.layers[e]);
                    i && i.removeMeshInstances(this.data.model.meshInstances)
                }
        }
        ,
        i.onSetLayers = function(t, e, i) {
            if (this.data.model) {
                for (var n = 0; n < e.length; n++) {
                    var s = this.system.app.scene.layers.getLayerById(e[n]);
                    s && s.removeMeshInstances(this.data.model.meshInstances)
                }
                if (this.enabled && this.entity.enabled)
                    for (var a = 0; a < i.length; a++) {
                        var r = this.system.app.scene.layers.getLayerById(i[a]);
                        r && r.addMeshInstances(this.data.model.meshInstances)
                    }
            }
        }
        ,
        i.onLayersChanged = function(t, e) {
            this.addModelToLayers(),
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this)
        }
        ,
        i.onLayerAdded = function(t) {
            this.data.model && (this.layers.indexOf(t.id) < 0 || t.addMeshInstances(this.data.model.meshInstances))
        }
        ,
        i.onLayerRemoved = function(t) {
            this.data.model && (this.layers.indexOf(t.id) < 0 || t.removeMeshInstances(this.data.model.meshInstances))
        }
        ,
        i._bindColorMapAsset = function(t) {
            if (t.on("load", this._onColorMapAssetLoad, this),
            t.on("unload", this._onColorMapAssetUnload, this),
            t.on("remove", this._onColorMapAssetRemove, this),
            t.on("change", this._onColorMapAssetChange, this),
            t.resource)
                this._onColorMapAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindColorMapAsset = function(t) {
            t.off("load", this._onColorMapAssetLoad, this),
            t.off("unload", this._onColorMapAssetUnload, this),
            t.off("remove", this._onColorMapAssetRemove, this),
            t.off("change", this._onColorMapAssetChange, this)
        }
        ,
        i._onColorMapAssetLoad = function(t) {
            this.colorMap = t.resource
        }
        ,
        i._onColorMapAssetUnload = function(t) {
            this.colorMap = null
        }
        ,
        i._onColorMapAssetRemove = function(t) {
            this._onColorMapAssetUnload(t)
        }
        ,
        i._onColorMapAssetChange = function(t) {}
        ,
        i.onSetColorMapAsset = function(t, e, i) {
            var n = this
              , s = this.system.app.assets;
            if (e) {
                var a = s.get(e);
                a && this._unbindColorMapAsset(a)
            }
            if (i) {
                i instanceof Kh && (this.data.colorMapAsset = i.id,
                i = i.id);
                var r = s.get(i);
                r ? this._bindColorMapAsset(r) : s.once("add:" + i, (function(t) {
                    n._bindColorMapAsset(t)
                }
                ))
            } else
                this.colorMap = null
        }
        ,
        i._bindNormalMapAsset = function(t) {
            if (t.on("load", this._onNormalMapAssetLoad, this),
            t.on("unload", this._onNormalMapAssetUnload, this),
            t.on("remove", this._onNormalMapAssetRemove, this),
            t.on("change", this._onNormalMapAssetChange, this),
            t.resource)
                this._onNormalMapAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindNormalMapAsset = function(t) {
            t.off("load", this._onNormalMapAssetLoad, this),
            t.off("unload", this._onNormalMapAssetUnload, this),
            t.off("remove", this._onNormalMapAssetRemove, this),
            t.off("change", this._onNormalMapAssetChange, this)
        }
        ,
        i._onNormalMapAssetLoad = function(t) {
            this.normalMap = t.resource
        }
        ,
        i._onNormalMapAssetUnload = function(t) {
            this.normalMap = null
        }
        ,
        i._onNormalMapAssetRemove = function(t) {
            this._onNormalMapAssetUnload(t)
        }
        ,
        i._onNormalMapAssetChange = function(t) {}
        ,
        i.onSetNormalMapAsset = function(t, e, i) {
            var n = this
              , s = this.system.app.assets;
            if (e) {
                var a = s.get(e);
                a && this._unbindNormalMapAsset(a)
            }
            if (i) {
                i instanceof Kh && (this.data.normalMapAsset = i.id,
                i = i.id);
                var r = s.get(i);
                r ? this._bindNormalMapAsset(r) : s.once("add:" + i, (function(t) {
                    n._bindNormalMapAsset(t)
                }
                ))
            } else
                this.normalMap = null
        }
        ,
        i._bindMeshAsset = function(t) {
            if (t.on("load", this._onMeshAssetLoad, this),
            t.on("unload", this._onMeshAssetUnload, this),
            t.on("remove", this._onMeshAssetRemove, this),
            t.on("change", this._onMeshAssetChange, this),
            t.resource)
                this._onMeshAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindMeshAsset = function(t) {
            t.off("load", this._onMeshAssetLoad, this),
            t.off("unload", this._onMeshAssetUnload, this),
            t.off("remove", this._onMeshAssetRemove, this),
            t.off("change", this._onMeshAssetChange, this)
        }
        ,
        i._onMeshAssetLoad = function(t) {
            this._onMeshChanged(t.resource)
        }
        ,
        i._onMeshAssetUnload = function(t) {
            this.mesh = null
        }
        ,
        i._onMeshAssetRemove = function(t) {
            this._onMeshAssetUnload(t)
        }
        ,
        i._onMeshAssetChange = function(t) {}
        ,
        i.onSetMeshAsset = function(t, e, i) {
            var n = this.system.app.assets;
            if (e) {
                var s = n.get(e);
                s && this._unbindMeshAsset(s)
            }
            if (i) {
                i instanceof Kh && (this.data.meshAsset = i.id,
                i = i.id);
                var a = n.get(i);
                a && this._bindMeshAsset(a)
            } else
                this._onMeshChanged(null)
        }
        ,
        i.onSetMesh = function(t, e, i) {
            !i || i instanceof Kh || "number" == typeof i ? this.meshAsset = i : this._onMeshChanged(i)
        }
        ,
        i._onMeshChanged = function(t) {
            !t || t instanceof Ys || (t = t.meshInstances[0] ? t.meshInstances[0].mesh : null),
            this.data.mesh = t,
            this.emitter && (this.emitter.mesh = t,
            this.emitter.resetMaterial(),
            this.rebuild())
        }
        ,
        i.onSetRenderAsset = function(t, e, i) {
            var n = this.system.app.assets;
            if (e) {
                var s = n.get(e);
                s && this._unbindRenderAsset(s)
            }
            if (i) {
                i instanceof Kh && (this.data.renderAsset = i.id,
                i = i.id);
                var a = n.get(i);
                a && this._bindRenderAsset(a)
            } else
                this._onRenderChanged(null)
        }
        ,
        i._bindRenderAsset = function(t) {
            if (t.on("load", this._onRenderAssetLoad, this),
            t.on("unload", this._onRenderAssetUnload, this),
            t.on("remove", this._onRenderAssetRemove, this),
            t.resource)
                this._onRenderAssetLoad(t);
            else {
                if (!this.enabled || !this.entity.enabled)
                    return;
                this.system.app.assets.load(t)
            }
        }
        ,
        i._unbindRenderAsset = function(t) {
            t.off("load", this._onRenderAssetLoad, this),
            t.off("unload", this._onRenderAssetUnload, this),
            t.off("remove", this._onRenderAssetRemove, this),
            t.resource && t.resource.off("set:meshes", this._onRenderSetMeshes, this)
        }
        ,
        i._onRenderAssetLoad = function(t) {
            this._onRenderChanged(t.resource)
        }
        ,
        i._onRenderAssetUnload = function(t) {
            this._onRenderChanged(null)
        }
        ,
        i._onRenderAssetRemove = function(t) {
            this._onRenderAssetUnload(t)
        }
        ,
        i._onRenderChanged = function(t) {
            t ? (t.off("set:meshes", this._onRenderSetMeshes, this),
            t.on("set:meshes", this._onRenderSetMeshes, this),
            t.meshes && this._onRenderSetMeshes(t.meshes)) : this._onMeshChanged(null)
        }
        ,
        i._onRenderSetMeshes = function(t) {
            this._onMeshChanged(t && t[0])
        }
        ,
        i.onSetLoop = function(t, e, i) {
            this.emitter && (this.emitter[t] = i,
            this.emitter.resetTime())
        }
        ,
        i.onSetBlendType = function(t, e, i) {
            this.emitter && (this.emitter[t] = i,
            this.emitter.material.blendType = i,
            this.emitter.resetMaterial(),
            this.rebuild())
        }
        ,
        i._requestDepth = function() {
            this._requestedDepth || (e_ || (e_ = this.system.app.scene.layers.getLayerById(1)),
            e_ && (e_.incrementCounter(),
            this._requestedDepth = !0))
        }
        ,
        i._releaseDepth = function() {
            this._requestedDepth && e_ && (e_.decrementCounter(),
            this._requestedDepth = !1)
        }
        ,
        i.onSetDepthSoftening = function(t, e, i) {
            e !== i && (i ? (this.enabled && this.entity.enabled && this._requestDepth(),
            this.emitter && (this.emitter[t] = i)) : (this.enabled && this.entity.enabled && this._releaseDepth(),
            this.emitter && (this.emitter[t] = i)),
            this.emitter && (this.reset(),
            this.emitter.resetMaterial(),
            this.rebuild()))
        }
        ,
        i.onSetSimpleProperty = function(t, e, i) {
            this.emitter && (this.emitter[t] = i,
            this.emitter.resetMaterial())
        }
        ,
        i.onSetComplexProperty = function(t, e, i) {
            this.emitter && (this.emitter[t] = i,
            this.emitter.resetMaterial(),
            this.rebuild(),
            this.reset())
        }
        ,
        i.onSetGraphProperty = function(t, e, i) {
            this.emitter && (this.emitter[t] = i,
            this.emitter.rebuildGraphs(),
            this.emitter.resetMaterial())
        }
        ,
        i.onEnable = function() {
            for (var t = this.data, e = 0, i = a_.length; e < i; e++) {
                var n = t[a_[e]];
                if (n) {
                    if (!(n instanceof Kh)) {
                        if (!(parseInt(n, 10) >= 0))
                            continue;
                        n = this.system.app.assets.get(n)
                    }
                    n && !n.resource && this.system.app.assets.load(n)
                }
            }
            if (!this.emitter) {
                var s = t.mesh;
                s instanceof Ys || (s = null),
                this.emitter = new dh(this.system.app.graphicsDevice,{
                    numParticles: t.numParticles,
                    emitterExtents: t.emitterExtents,
                    emitterExtentsInner: t.emitterExtentsInner,
                    emitterRadius: t.emitterRadius,
                    emitterRadiusInner: t.emitterRadiusInner,
                    emitterShape: t.emitterShape,
                    initialVelocity: t.initialVelocity,
                    wrap: t.wrap,
                    localSpace: t.localSpace,
                    screenSpace: t.screenSpace,
                    wrapBounds: t.wrapBounds,
                    lifetime: t.lifetime,
                    rate: t.rate,
                    rate2: t.rate2,
                    orientation: t.orientation,
                    particleNormal: t.particleNormal,
                    animTilesX: t.animTilesX,
                    animTilesY: t.animTilesY,
                    animStartFrame: t.animStartFrame,
                    animNumFrames: t.animNumFrames,
                    animNumAnimations: t.animNumAnimations,
                    animIndex: t.animIndex,
                    randomizeAnimIndex: t.randomizeAnimIndex,
                    animSpeed: t.animSpeed,
                    animLoop: t.animLoop,
                    startAngle: t.startAngle,
                    startAngle2: t.startAngle2,
                    scaleGraph: t.scaleGraph,
                    scaleGraph2: t.scaleGraph2,
                    colorGraph: t.colorGraph,
                    colorGraph2: t.colorGraph2,
                    alphaGraph: t.alphaGraph,
                    alphaGraph2: t.alphaGraph2,
                    localVelocityGraph: t.localVelocityGraph,
                    localVelocityGraph2: t.localVelocityGraph2,
                    velocityGraph: t.velocityGraph,
                    velocityGraph2: t.velocityGraph2,
                    rotationSpeedGraph: t.rotationSpeedGraph,
                    rotationSpeedGraph2: t.rotationSpeedGraph2,
                    radialSpeedGraph: t.radialSpeedGraph,
                    radialSpeedGraph2: t.radialSpeedGraph2,
                    colorMap: t.colorMap,
                    normalMap: t.normalMap,
                    loop: t.loop,
                    preWarm: t.preWarm,
                    sort: t.sort,
                    stretch: t.stretch,
                    alignToMotion: t.alignToMotion,
                    lighting: t.lighting,
                    halfLambert: t.halfLambert,
                    intensity: t.intensity,
                    depthSoftening: t.depthSoftening,
                    scene: this.system.app.scene,
                    mesh: s,
                    depthWrite: t.depthWrite,
                    noFog: t.noFog,
                    node: this.entity,
                    blendType: t.blendType
                }),
                this.emitter.meshInstance.node = this.entity,
                this.emitter.drawOrder = this.drawOrder,
                this.psys = new mh,
                this.psys.graph = this.entity,
                this.psys.emitter = this.emitter,
                this.psys.meshInstances = [this.emitter.meshInstance],
                t.model = this.psys,
                this.emitter.psys = this.psys,
                t.autoPlay || (this.pause(),
                this.emitter.meshInstance.visible = !1)
            }
            t.model && this.emitter.colorMap && this.addModelToLayers(),
            this.system.app.scene.on("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.on("add", this.onLayerAdded, this),
            this.system.app.scene.layers.on("remove", this.onLayerRemoved, this)),
            this.enabled && this.entity.enabled && t.depthSoftening && this._requestDepth()
        }
        ,
        i.onDisable = function() {
            this.system.app.scene.off("set:layers", this.onLayersChanged, this),
            this.system.app.scene.layers && (this.system.app.scene.layers.off("add", this.onLayerAdded, this),
            this.system.app.scene.layers.off("remove", this.onLayerRemoved, this)),
            this.data.model && (this.removeModelFromLayers(),
            this.data.depthSoftening && this._releaseDepth()),
            this.emitter && (this.emitter.camera = null)
        }
        ,
        i.onBeforeRemove = function() {
            this.enabled && (this.enabled = !1);
            var t = this.data;
            t.model && (this.entity.removeChild(t.model.getGraph()),
            t.model.destroy(),
            t.model = null),
            this.emitter && (this.emitter.destroy(),
            this.emitter = null);
            for (var e = 0; e < a_.length; e++) {
                var i = a_[e];
                t[i] && (this[i] = null)
            }
            this.off()
        }
        ,
        i.reset = function() {
            this.emitter && this.emitter.reset()
        }
        ,
        i.stop = function() {
            this.emitter && (this.emitter.loop = !1,
            this.emitter.resetTime(),
            this.emitter.addTime(0, !0))
        }
        ,
        i.pause = function() {
            this.data.paused = !0
        }
        ,
        i.unpause = function() {
            this.data.paused = !1
        }
        ,
        i.play = function() {
            this.data.paused = !1,
            this.emitter && (this.emitter.meshInstance.visible = !0,
            this.emitter.loop = this.data.loop,
            this.emitter.resetTime())
        }
        ,
        i.isPlaying = function() {
            return !this.data.paused && (!(!this.emitter || !this.emitter.loop) || Date.now() <= this.emitter.endTime)
        }
        ,
        i.rebuild = function() {
            var t = this.enabled;
            this.enabled = !1,
            this.emitter && (this.emitter.rebuild(),
            this.emitter.meshInstance.node = this.entity,
            this.data.model.meshInstances = [this.emitter.meshInstance]),
            this.enabled = t
        }
        ,
        G(e, [{
            key: "drawOrder",
            get: function() {
                return this._drawOrder
            },
            set: function(t) {
                this._drawOrder = t,
                this.emitter && (this.emitter.drawOrder = t)
            }
        }]),
        e
    }(gd), o_ = function() {
        this.numParticles = 1,
        this.rate = 1,
        this.rate2 = null,
        this.startAngle = 0,
        this.startAngle2 = null,
        this.lifetime = 50,
        this.emitterExtents = new lt,
        this.emitterExtentsInner = new lt,
        this.emitterRadius = 0,
        this.emitterRadiusInner = 0,
        this.emitterShape = 0,
        this.initialVelocity = 0,
        this.wrapBounds = new lt,
        this.localSpace = !1,
        this.screenSpace = !1,
        this.colorMap = null,
        this.colorMapAsset = null,
        this.normalMap = null,
        this.normalMapAsset = null,
        this.loop = !0,
        this.preWarm = !1,
        this.sort = 0,
        this.mode = 0,
        this.scene = null,
        this.lighting = !1,
        this.halfLambert = !1,
        this.intensity = 1,
        this.stretch = 0,
        this.alignToMotion = !1,
        this.depthSoftening = 0,
        this.meshAsset = null,
        this.mesh = null,
        this.depthWrite = !1,
        this.noFog = !1,
        this.orientation = 0,
        this.particleNormal = new lt(0,1,0),
        this.animTilesX = 1,
        this.animTilesY = 1,
        this.animStartFrame = 0,
        this.animNumFrames = 1,
        this.animNumAnimations = 1,
        this.animIndex = 0,
        this.randomizeAnimIndex = !1,
        this.animSpeed = 1,
        this.animLoop = !0,
        this.scaleGraph = null,
        this.scaleGraph2 = null,
        this.colorGraph = null,
        this.colorGraph2 = null,
        this.alphaGraph = null,
        this.alphaGraph2 = null,
        this.localVelocityGraph = null,
        this.localVelocityGraph2 = null,
        this.velocityGraph = null,
        this.velocityGraph2 = null,
        this.rotationSpeedGraph = null,
        this.rotationSpeedGraph2 = null,
        this.radialSpeedGraph = null,
        this.radialSpeedGraph2 = null,
        this.blendType = 2,
        this.model = null,
        this.enabled = !0,
        this.paused = !1,
        this.autoPlay = !0,
        this.layers = [0]
    }, h_ = ["enabled", "autoPlay", "numParticles", "lifetime", "rate", "rate2", "startAngle", "startAngle2", "loop", "preWarm", "lighting", "halfLambert", "intensity", "depthWrite", "noFog", "depthSoftening", "sort", "blendType", "stretch", "alignToMotion", "emitterShape", "emitterExtents", "emitterExtentsInner", "emitterRadius", "emitterRadiusInner", "initialVelocity", "wrap", "wrapBounds", "localSpace", "screenSpace", "colorMapAsset", "normalMapAsset", "mesh", "meshAsset", "renderAsset", "orientation", "particleNormal", "localVelocityGraph", "localVelocityGraph2", "velocityGraph", "velocityGraph2", "rotationSpeedGraph", "rotationSpeedGraph2", "radialSpeedGraph", "radialSpeedGraph2", "scaleGraph", "scaleGraph2", "colorGraph", "colorGraph2", "alphaGraph", "alphaGraph2", "colorMap", "normalMap", "animTilesX", "animTilesY", "animStartFrame", "animNumFrames", "animNumAnimations", "animIndex", "randomizeAnimIndex", "animSpeed", "animLoop", "layers"], l_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "particlesystem",
            i.ComponentType = r_,
            i.DataType = o_,
            i.schema = h_,
            i.propertyTypes = {
                emitterExtents: "vec3",
                emitterExtentsInner: "vec3",
                particleNormal: "vec3",
                wrapBounds: "vec3",
                localVelocityGraph: "curveset",
                localVelocityGraph2: "curveset",
                velocityGraph: "curveset",
                velocityGraph2: "curveset",
                colorGraph: "curveset",
                colorGraph2: "curveset",
                alphaGraph: "curve",
                alphaGraph2: "curve",
                rotationSpeedGraph: "curve",
                rotationSpeedGraph2: "curve",
                radialSpeedGraph: "curve",
                radialSpeedGraph2: "curve",
                scaleGraph: "curve",
                scaleGraph2: "curve"
            },
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.app.systems.on("update", i.onUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            var s = {};
            n = [];
            var a = this.propertyTypes;
            for (var r in (i.mesh instanceof Kh || "number" == typeof i.mesh) && (i.meshAsset = i.mesh,
            delete i.mesh),
            i) {
                if (i.hasOwnProperty(r) && (n.push(r),
                s[r] = i[r]),
                "vec3" === a[r])
                    Array.isArray(s[r]) && (s[r] = new lt(s[r][0],s[r][1],s[r][2]));
                else if ("curve" === a[r]) {
                    if (!(s[r]instanceof ot)) {
                        var o = s[r].type;
                        s[r] = new ot(s[r].keys),
                        s[r].type = o
                    }
                } else if ("curveset" === a[r] && !(s[r]instanceof ht)) {
                    var h = s[r].type;
                    s[r] = new ht(s[r].keys),
                    s[r].type = h
                }
                s.layers && Array.isArray(s.layers) && (s.layers = s.layers.slice(0))
            }
            t.prototype.initializeComponentData.call(this, e, s, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            for (var i = t.particlesystem.data, n = this.schema, s = {}, a = 0, r = n.length; a < r; a++) {
                var o = n[a]
                  , h = i[o];
                h instanceof lt || h instanceof ot || h instanceof ht ? (h = h.clone(),
                s[o] = h) : "layers" === o ? s.layers = i.layers.slice(0) : null != h && (s[o] = h)
            }
            return this.addComponent(e, s)
        }
        ,
        i.onUpdate = function(t) {
            var e, i = this.store, n = this.app.stats.particles;
            for (var s in i)
                if (i.hasOwnProperty(s)) {
                    var a = i[s]
                      , r = a.entity
                      , o = a.data;
                    if (o.enabled && r.enabled) {
                        var h = o.model.emitter;
                        if (!h.meshInstance.visible)
                            continue;
                        if (h.lighting) {
                            for (var l = o.layers, c = void 0, u = 0; u < l.length; u++) {
                                var d = this.app.scene.layers.getLayerById(l[u]);
                                if (d) {
                                    d._lightCube || (d._lightCube = new Float32Array(18)),
                                    c = d._lightCube;
                                    for (var f = 0; f < 6; f++)
                                        c[3 * f] = this.app.scene.ambientLight.r,
                                        c[3 * f + 1] = this.app.scene.ambientLight.g,
                                        c[3 * f + 2] = this.app.scene.ambientLight.b;
                                    for (var p = d._splitLights[0], m = 0; m < p.length; m++)
                                        for (var _ = 0; _ < 6; _++) {
                                            var g = Math.max(h.lightCubeDir[_].dot(p[m]._direction), 0) * p[m]._intensity;
                                            c[3 * _] += p[m]._color.r * g,
                                            c[3 * _ + 1] += p[m]._color.g * g,
                                            c[3 * _ + 2] += p[m]._color.b * g
                                        }
                                }
                            }
                            h.constantLightCube.setValue(c)
                        }
                        if (!o.paused) {
                            if (h.simTime += t,
                            h.simTime > h.fixedTimeStep && (e = Math.floor(h.simTime / h.fixedTimeStep),
                            h.simTime -= e * h.fixedTimeStep),
                            e) {
                                e = Math.min(e, h.maxSubSteps);
                                for (var v = 0; v < e; v++)
                                    h.addTime(h.fixedTimeStep, !1);
                                n._updatesPerFrame += e,
                                n._frameTime += h._addTimeTime,
                                h._addTimeTime = 0
                            }
                            h.finishFrame()
                        }
                    }
                }
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.onBeforeRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(r_.prototype, h_);
    var c_, u_, d_, f_, p_, m_, __, g_ = function() {
        function t(t, e) {
            this._constructor = t,
            this._pool = [],
            this._count = 0,
            this._resize(e)
        }
        var e = t.prototype;
        return e._resize = function(t) {
            if (t > this._pool.length)
                for (var e = this._pool.length; e < t; e++)
                    this._pool[e] = new this._constructor
        }
        ,
        e.allocate = function() {
            return this._count >= this._pool.length && this._resize(2 * this._pool.length),
            this._pool[this._count++]
        }
        ,
        e.freeAll = function() {
            this._count = 0
        }
        ,
        t
    }(), v_ = function(t) {
        function e(e, i) {
            var n;
            return n = t.call(this, e, i) || this,
            "undefined" == typeof Ammo || c_ || (c_ = new Ammo.btTransform,
            u_ = new Ammo.btVector3,
            d_ = new Ammo.btVector3,
            f_ = new Ammo.btQuaternion,
            p_ = new Ammo.btVector3(0,0,0)),
            n._angularDamping = 0,
            n._angularFactor = new lt(1,1,1),
            n._angularVelocity = new lt,
            n._body = null,
            n._friction = .5,
            n._group = 2,
            n._linearDamping = 0,
            n._linearFactor = new lt(1,1,1),
            n._linearVelocity = new lt,
            n._mask = up,
            n._mass = 1,
            n._restitution = 0,
            n._rollingFriction = 0,
            n._simulationEnabled = !1,
            n._type = op,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.createBody = function() {
            var t, e = this.entity;
            if (e.collision && (t = e.collision.shape,
            e.trigger && (e.trigger.destroy(),
            delete e.trigger)),
            t) {
                this._body && this.system.onRemove(e, this);
                var i = this._type === hp ? this._mass : 0;
                this._getEntityTransform(c_);
                var n = this.system.createBody(i, t, c_);
                if (n.setRestitution(this._restitution),
                n.setFriction(this._friction),
                n.setRollingFriction(this._rollingFriction),
                n.setDamping(this._linearDamping, this._angularDamping),
                this._type === hp) {
                    var s = this._linearFactor;
                    u_.setValue(s.x, s.y, s.z),
                    n.setLinearFactor(u_);
                    var a = this._angularFactor;
                    u_.setValue(a.x, a.y, a.z),
                    n.setAngularFactor(u_)
                } else
                    this._type === lp && (n.setCollisionFlags(2 | n.getCollisionFlags()),
                    n.setActivationState(4));
                n.entity = e,
                this.body = n,
                this.enabled && e.enabled && this.enableSimulation()
            }
        }
        ,
        i.isActive = function() {
            return !!this._body && this._body.isActive()
        }
        ,
        i.activate = function() {
            this._body && this._body.activate()
        }
        ,
        i.enableSimulation = function() {
            var t = this.entity;
            if (t.collision && t.collision.enabled && !this._simulationEnabled) {
                var e = this._body;
                if (e) {
                    switch (this.system.addBody(e, this._group, this._mask),
                    this._type) {
                    case hp:
                        this.system._dynamic.push(this),
                        e.forceActivationState(1),
                        this.syncEntityToBody();
                        break;
                    case lp:
                        this.system._kinematic.push(this),
                        e.forceActivationState(4);
                        break;
                    case op:
                        e.forceActivationState(1),
                        this.syncEntityToBody()
                    }
                    "compound" === t.collision.type && this.system._compounds.push(t.collision),
                    e.activate(),
                    this._simulationEnabled = !0
                }
            }
        }
        ,
        i.disableSimulation = function() {
            var t = this._body;
            if (t && this._simulationEnabled) {
                var e = this.system
                  , i = e._compounds.indexOf(this.entity.collision);
                i > -1 && e._compounds.splice(i, 1),
                (i = e._dynamic.indexOf(this)) > -1 && e._dynamic.splice(i, 1),
                (i = e._kinematic.indexOf(this)) > -1 && e._kinematic.splice(i, 1),
                e.removeBody(t),
                t.forceActivationState(5),
                this._simulationEnabled = !1
            }
        }
        ,
        i.applyForce = function() {
            var t, e, i, n, s, a;
            switch (arguments.length) {
            case 1:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z;
                break;
            case 2:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z,
                n = arguments[1].x,
                s = arguments[1].y,
                a = arguments[1].z;
                break;
            case 3:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2];
                break;
            case 6:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2],
                n = arguments[3],
                s = arguments[4],
                a = arguments[5]
            }
            var r = this._body;
            r && (r.activate(),
            u_.setValue(t, e, i),
            void 0 !== n ? (d_.setValue(n, s, a),
            r.applyForce(u_, d_)) : r.applyForce(u_, p_))
        }
        ,
        i.applyTorque = function() {
            var t, e, i;
            switch (arguments.length) {
            case 1:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z;
                break;
            case 3:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2];
                break;
            default:
                return
            }
            var n = this._body;
            n && (n.activate(),
            u_.setValue(t, e, i),
            n.applyTorque(u_))
        }
        ,
        i.applyImpulse = function() {
            var t, e, i, n, s, a;
            switch (arguments.length) {
            case 1:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z;
                break;
            case 2:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z,
                n = arguments[1].x,
                s = arguments[1].y,
                a = arguments[1].z;
                break;
            case 3:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2];
                break;
            case 6:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2],
                n = arguments[3],
                s = arguments[4],
                a = arguments[5];
                break;
            default:
                return
            }
            var r = this._body;
            r && (r.activate(),
            u_.setValue(t, e, i),
            void 0 !== n ? (d_.setValue(n, s, a),
            r.applyImpulse(u_, d_)) : r.applyImpulse(u_, p_))
        }
        ,
        i.applyTorqueImpulse = function() {
            var t, e, i;
            switch (arguments.length) {
            case 1:
                t = arguments[0].x,
                e = arguments[0].y,
                i = arguments[0].z;
                break;
            case 3:
                t = arguments[0],
                e = arguments[1],
                i = arguments[2];
                break;
            default:
                return
            }
            var n = this._body;
            n && (n.activate(),
            u_.setValue(t, e, i),
            n.applyTorqueImpulse(u_))
        }
        ,
        i.isStatic = function() {
            return this._type === op
        }
        ,
        i.isStaticOrKinematic = function() {
            return this._type === op || this._type === lp
        }
        ,
        i.isKinematic = function() {
            return this._type === lp
        }
        ,
        i._getEntityTransform = function(t) {
            var e = this.entity
              , i = e.getPosition()
              , n = e.getRotation();
            u_.setValue(i.x, i.y, i.z),
            f_.setValue(n.x, n.y, n.z, n.w),
            t.setOrigin(u_),
            t.setRotation(f_)
        }
        ,
        i.syncEntityToBody = function() {
            var t = this._body;
            if (t) {
                if (this._getEntityTransform(c_),
                t.setWorldTransform(c_),
                this._type === lp) {
                    var e = t.getMotionState();
                    e && e.setWorldTransform(c_)
                }
                t.activate()
            }
        }
        ,
        i._updateDynamic = function() {
            var t = this._body;
            if (t.isActive()) {
                var e = t.getMotionState();
                if (e) {
                    e.getWorldTransform(c_);
                    var i = c_.getOrigin()
                      , n = c_.getRotation();
                    this.entity.setPosition(i.x(), i.y(), i.z()),
                    this.entity.setRotation(n.x(), n.y(), n.z(), n.w())
                }
            }
        }
        ,
        i._updateKinematic = function() {
            var t = this._body.getMotionState();
            t && (this._getEntityTransform(c_),
            t.setWorldTransform(c_))
        }
        ,
        i.teleport = function() {
            arguments.length < 3 ? (arguments[0] && this.entity.setPosition(arguments[0]),
            arguments[1] && (arguments[1]instanceof yt ? this.entity.setRotation(arguments[1]) : this.entity.setEulerAngles(arguments[1]))) : (6 === arguments.length && this.entity.setEulerAngles(arguments[3], arguments[4], arguments[5]),
            this.entity.setPosition(arguments[0], arguments[1], arguments[2])),
            this.syncEntityToBody()
        }
        ,
        i.onEnable = function() {
            this._body || this.createBody(),
            this.enableSimulation()
        }
        ,
        i.onDisable = function() {
            this.disableSimulation()
        }
        ,
        G(e, [{
            key: "angularDamping",
            get: function() {
                return this._angularDamping
            },
            set: function(t) {
                this._angularDamping !== t && (this._angularDamping = t,
                this._body && this._body.setDamping(this._linearDamping, t))
            }
        }, {
            key: "angularFactor",
            get: function() {
                return this._angularFactor
            },
            set: function(t) {
                this._angularFactor.equals(t) || (this._angularFactor.copy(t),
                this._body && this._type === hp && (u_.setValue(t.x, t.y, t.z),
                this._body.setAngularFactor(u_)))
            }
        }, {
            key: "angularVelocity",
            get: function() {
                if (this._body && this._type === hp) {
                    var t = this._body.getAngularVelocity();
                    this._angularVelocity.set(t.x(), t.y(), t.z())
                }
                return this._angularVelocity
            },
            set: function(t) {
                this._body && this._type === hp && (this._body.activate(),
                u_.setValue(t.x, t.y, t.z),
                this._body.setAngularVelocity(u_),
                this._angularVelocity.copy(t))
            }
        }, {
            key: "body",
            get: function() {
                return this._body
            },
            set: function(t) {
                this._body !== t && (this._body = t,
                t && this._simulationEnabled && t.activate())
            }
        }, {
            key: "friction",
            get: function() {
                return this._friction
            },
            set: function(t) {
                this._friction !== t && (this._friction = t,
                this._body && this._body.setFriction(t))
            }
        }, {
            key: "group",
            get: function() {
                return this._group
            },
            set: function(t) {
                this._group !== t && (this._group = t,
                this.enabled && this.entity.enabled && (this.disableSimulation(),
                this.enableSimulation()))
            }
        }, {
            key: "linearDamping",
            get: function() {
                return this._linearDamping
            },
            set: function(t) {
                this._linearDamping !== t && (this._linearDamping = t,
                this._body && this._body.setDamping(t, this._angularDamping))
            }
        }, {
            key: "linearFactor",
            get: function() {
                return this._linearFactor
            },
            set: function(t) {
                this._linearFactor.equals(t) || (this._linearFactor.copy(t),
                this._body && this._type === hp && (u_.setValue(t.x, t.y, t.z),
                this._body.setLinearFactor(u_)))
            }
        }, {
            key: "linearVelocity",
            get: function() {
                if (this._body && this._type === hp) {
                    var t = this._body.getLinearVelocity();
                    this._linearVelocity.set(t.x(), t.y(), t.z())
                }
                return this._linearVelocity
            },
            set: function(t) {
                this._body && this._type === hp && (this._body.activate(),
                u_.setValue(t.x, t.y, t.z),
                this._body.setLinearVelocity(u_),
                this._linearVelocity.copy(t))
            }
        }, {
            key: "mask",
            get: function() {
                return this._mask
            },
            set: function(t) {
                this._mask !== t && (this._mask = t,
                this.enabled && this.entity.enabled && (this.disableSimulation(),
                this.enableSimulation()))
            }
        }, {
            key: "mass",
            get: function() {
                return this._mass
            },
            set: function(t) {
                if (this._mass !== t && (this._mass = t,
                this._body && this._type === hp)) {
                    var e = this.enabled && this.entity.enabled;
                    e && this.disableSimulation(),
                    this._body.getCollisionShape().calculateLocalInertia(t, u_),
                    this._body.setMassProps(t, u_),
                    this._body.updateInertiaTensor(),
                    e && this.enableSimulation()
                }
            }
        }, {
            key: "restitution",
            get: function() {
                return this._restitution
            },
            set: function(t) {
                this._restitution !== t && (this._restitution = t,
                this._body && this._body.setRestitution(t))
            }
        }, {
            key: "rollingFriction",
            get: function() {
                return this._rollingFriction
            },
            set: function(t) {
                this._rollingFriction !== t && (this._rollingFriction = t,
                this._body && this._body.setRollingFriction(t))
            }
        }, {
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                if (this._type !== t) {
                    switch (this._type = t,
                    this.disableSimulation(),
                    t) {
                    case hp:
                        this._group = 1,
                        this._mask = cp;
                        break;
                    case lp:
                        this._group = 4,
                        this._mask = cp;
                        break;
                    case op:
                    default:
                        this._group = 2,
                        this._mask = up
                    }
                    this.createBody()
                }
            }
        }]),
        e
    }(gd), y_ = function() {
        this.enabled = !0
    }, x_ = function(t, e, i) {
        this.entity = t,
        this.point = e,
        this.normal = i
    }, b_ = function(t, e, i) {
        0 === arguments.length ? (this.a = null,
        this.b = null,
        this.impulse = 0,
        this.localPointA = new lt,
        this.localPointB = new lt,
        this.pointA = new lt,
        this.pointB = new lt,
        this.normal = new lt) : (this.a = t,
        this.b = e,
        this.impulse = i.impulse,
        this.localPointA = i.localPoint,
        this.localPointB = i.localPointOther,
        this.pointA = i.point,
        this.pointB = i.pointOther,
        this.normal = i.normal)
    }, S_ = function(t, e, i, n, s, a) {
        void 0 === t && (t = new lt),
        void 0 === e && (e = new lt),
        void 0 === i && (i = new lt),
        void 0 === n && (n = new lt),
        void 0 === s && (s = new lt),
        void 0 === a && (a = 0),
        this.localPoint = t,
        this.localPointOther = e,
        this.point = i,
        this.pointOther = n,
        this.normal = s,
        this.impulse = a
    }, T_ = function(t, e) {
        this.other = t,
        this.contacts = e
    }, w_ = ["enabled"], M_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "rigidbody",
            i._stats = e.stats.frame,
            i.ComponentType = v_,
            i.DataType = y_,
            i.contactPointPool = null,
            i.contactResultPool = null,
            i.singleContactResultPool = null,
            i.schema = w_,
            i.maxSubSteps = 10,
            i.fixedTimeStep = 1 / 60,
            i.gravity = new lt(0,-9.81,0),
            i._dynamic = [],
            i._kinematic = [],
            i._triggers = [],
            i._compounds = [],
            i.collisions = {},
            i.frameCollisions = {},
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.on("remove", i.onRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.onLibraryLoaded = function() {
            if ("undefined" != typeof Ammo) {
                if (this.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration,
                this.dispatcher = new Ammo.btCollisionDispatcher(this.collisionConfiguration),
                this.overlappingPairCache = new Ammo.btDbvtBroadphase,
                this.solver = new Ammo.btSequentialImpulseConstraintSolver,
                this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(this.dispatcher,this.overlappingPairCache,this.solver,this.collisionConfiguration),
                this.dynamicsWorld.setInternalTickCallback) {
                    var t = Ammo.addFunction(this._checkForCollisions.bind(this), "vif");
                    this.dynamicsWorld.setInternalTickCallback(t)
                }
                m_ = new Ammo.btVector3,
                __ = new Ammo.btVector3,
                this.contactPointPool = new g_(S_,1),
                this.contactResultPool = new g_(T_,1),
                this.singleContactResultPool = new g_(b_,1),
                this.app.systems.on("update", this.onUpdate, this)
            } else
                this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        i.initializeComponentData = function(e, i, n) {
            for (var s = 0, a = ["mass", "linearDamping", "angularDamping", "linearFactor", "angularFactor", "friction", "rollingFriction", "restitution", "type", "group", "mask"]; s < a.length; s++) {
                var r = a[s];
                if (i.hasOwnProperty(r)) {
                    var o = i[r];
                    Array.isArray(o) ? e[r] = new lt(o[0],o[1],o[2]) : e[r] = o
                }
            }
            t.prototype.initializeComponentData.call(this, e, i, ["enabled"])
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.rigidbody
              , n = {
                enabled: i.enabled,
                mass: i.mass,
                linearDamping: i.linearDamping,
                angularDamping: i.angularDamping,
                linearFactor: [i.linearFactor.x, i.linearFactor.y, i.linearFactor.z],
                angularFactor: [i.angularFactor.x, i.angularFactor.y, i.angularFactor.z],
                friction: i.friction,
                rollingFriction: i.rollingFriction,
                restitution: i.restitution,
                type: i.type,
                group: i.group,
                mask: i.mask
            };
            this.addComponent(e, n)
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.enabled && (e.enabled = !1)
        }
        ,
        i.onRemove = function(t, e) {
            var i = e.body;
            i && (this.removeBody(i),
            this.destroyBody(i),
            e.body = null)
        }
        ,
        i.addBody = function(t, e, i) {
            void 0 !== e && void 0 !== i ? this.dynamicsWorld.addRigidBody(t, e, i) : this.dynamicsWorld.addRigidBody(t)
        }
        ,
        i.removeBody = function(t) {
            this.dynamicsWorld.removeRigidBody(t)
        }
        ,
        i.createBody = function(t, e, i) {
            var n = new Ammo.btVector3(0,0,0);
            0 !== t && e.calculateLocalInertia(t, n);
            var s = new Ammo.btDefaultMotionState(i)
              , a = new Ammo.btRigidBodyConstructionInfo(t,s,e,n)
              , r = new Ammo.btRigidBody(a);
            return Ammo.destroy(a),
            Ammo.destroy(n),
            r
        }
        ,
        i.destroyBody = function(t) {
            var e = t.getMotionState();
            e && Ammo.destroy(e),
            Ammo.destroy(t)
        }
        ,
        i.raycastFirst = function(t, e) {
            var i = null;
            m_.setValue(t.x, t.y, t.z),
            __.setValue(e.x, e.y, e.z);
            var n = new Ammo.ClosestRayResultCallback(m_,__);
            if (this.dynamicsWorld.rayTest(m_, __, n),
            n.hasHit()) {
                var s = n.get_m_collisionObject()
                  , a = Ammo.castObject(s, Ammo.btRigidBody);
                if (a) {
                    var r = n.get_m_hitPointWorld()
                      , o = n.get_m_hitNormalWorld();
                    if (i = new x_(a.entity,new lt(r.x(),r.y(),r.z()),new lt(o.x(),o.y(),o.z())),
                    arguments.length > 2) {
                        var h = arguments[2];
                        h(i)
                    }
                }
            }
            return Ammo.destroy(n),
            i
        }
        ,
        i.raycastAll = function(t, e) {
            var i = [];
            m_.setValue(t.x, t.y, t.z),
            __.setValue(e.x, e.y, e.z);
            var n = new Ammo.AllHitsRayResultCallback(m_,__);
            if (this.dynamicsWorld.rayTest(m_, __, n),
            n.hasHit())
                for (var s = n.get_m_collisionObjects(), a = n.get_m_hitPointWorld(), r = n.get_m_hitNormalWorld(), o = s.size(), h = 0; h < o; h++) {
                    var l = Ammo.castObject(s.at(h), Ammo.btRigidBody);
                    if (l) {
                        var c = a.at(h)
                          , u = r.at(h)
                          , d = new x_(l.entity,new lt(c.x(),c.y(),c.z()),new lt(u.x(),u.y(),u.z()));
                        i.push(d)
                    }
                }
            return Ammo.destroy(n),
            i
        }
        ,
        i._storeCollision = function(t, e) {
            var i = !1
              , n = t.getGuid();
            return this.collisions[n] = this.collisions[n] || {
                others: [],
                entity: t
            },
            this.collisions[n].others.indexOf(e) < 0 && (this.collisions[n].others.push(e),
            i = !0),
            this.frameCollisions[n] = this.frameCollisions[n] || {
                others: [],
                entity: t
            },
            this.frameCollisions[n].others.push(e),
            i
        }
        ,
        i._createContactPointFromAmmo = function(t) {
            var e = t.get_m_localPointA()
              , i = t.get_m_localPointB()
              , n = t.getPositionWorldOnA()
              , s = t.getPositionWorldOnB()
              , a = t.get_m_normalWorldOnB()
              , r = this.contactPointPool.allocate();
            return r.localPoint.set(e.x(), e.y(), e.z()),
            r.localPointOther.set(i.x(), i.y(), i.z()),
            r.point.set(n.x(), n.y(), n.z()),
            r.pointOther.set(s.x(), s.y(), s.z()),
            r.normal.set(a.x(), a.y(), a.z()),
            r.impulse = t.getAppliedImpulse(),
            r
        }
        ,
        i._createReverseContactPointFromAmmo = function(t) {
            var e = t.get_m_localPointA()
              , i = t.get_m_localPointB()
              , n = t.getPositionWorldOnA()
              , s = t.getPositionWorldOnB()
              , a = t.get_m_normalWorldOnB()
              , r = this.contactPointPool.allocate();
            return r.localPointOther.set(e.x(), e.y(), e.z()),
            r.localPoint.set(i.x(), i.y(), i.z()),
            r.pointOther.set(n.x(), n.y(), n.z()),
            r.point.set(s.x(), s.y(), s.z()),
            r.normal.set(a.x(), a.y(), a.z()),
            r.impulse = t.getAppliedImpulse(),
            r
        }
        ,
        i._createSingleContactResult = function(t, e, i) {
            var n = this.singleContactResultPool.allocate();
            return n.a = t,
            n.b = e,
            n.localPointA = i.localPoint,
            n.localPointB = i.localPointOther,
            n.pointA = i.point,
            n.pointB = i.pointOther,
            n.normal = i.normal,
            n.impulse = i.impulse,
            n
        }
        ,
        i._createContactResult = function(t, e) {
            var i = this.contactResultPool.allocate();
            return i.other = t,
            i.contacts = e,
            i
        }
        ,
        i._cleanOldCollisions = function() {
            for (var t in this.collisions)
                if (this.collisions.hasOwnProperty(t)) {
                    for (var e = this.frameCollisions[t], i = this.collisions[t], n = i.entity, s = n.collision, a = n.rigidbody, r = i.others, o = r.length; o--; ) {
                        var h = r[o];
                        (!e || e.others.indexOf(h) < 0) && (r.splice(o, 1),
                        n.trigger ? (s && s.fire("triggerleave", h),
                        h.rigidbody && h.rigidbody.fire("triggerleave", n)) : h.trigger || (a && a.fire("collisionend", h),
                        s && s.fire("collisionend", h)))
                    }
                    0 === r.length && delete this.collisions[t]
                }
        }
        ,
        i._hasContactEvent = function(t) {
            var e = t.collision;
            if (e && (e.hasEvent("collisionstart") || e.hasEvent("collisionend") || e.hasEvent("contact")))
                return !0;
            var i = t.rigidbody;
            return i && (i.hasEvent("collisionstart") || i.hasEvent("collisionend") || i.hasEvent("contact"))
        }
        ,
        i._checkForCollisions = function(t, e) {
            var i = Ammo.wrapPointer(t, Ammo.btDynamicsWorld).getDispatcher()
              , n = i.getNumManifolds();
            this.frameCollisions = {};
            for (var s = 0; s < n; s++) {
                var a = i.getManifoldByIndexInternal(s)
                  , r = a.getBody0()
                  , o = a.getBody1()
                  , h = Ammo.castObject(r, Ammo.btRigidBody)
                  , l = Ammo.castObject(o, Ammo.btRigidBody)
                  , c = h.entity
                  , u = l.entity;
                if (c && u) {
                    var d = h.getCollisionFlags()
                      , f = l.getCollisionFlags()
                      , p = a.getNumContacts()
                      , m = []
                      , _ = []
                      , g = void 0;
                    if (p > 0)
                        if (4 & d || 4 & f) {
                            var v = c.collision && (c.collision.hasEvent("triggerenter") || c.collision.hasEvent("triggerleave"))
                              , y = u.collision && (u.collision.hasEvent("triggerenter") || u.collision.hasEvent("triggerleave"))
                              , x = c.rigidbody && (c.rigidbody.hasEvent("triggerenter") || c.rigidbody.hasEvent("triggerleave"))
                              , b = u.rigidbody && (u.rigidbody.hasEvent("triggerenter") || u.rigidbody.hasEvent("triggerleave"));
                            v && (!(g = this._storeCollision(c, u)) || 4 & f || c.collision.fire("triggerenter", u)),
                            y && (!(g = this._storeCollision(u, c)) || 4 & d || u.collision.fire("triggerenter", c)),
                            x && (g || (g = this._storeCollision(u, c)),
                            g && c.rigidbody.fire("triggerenter", u)),
                            b && (g || (g = this._storeCollision(c, u)),
                            g && u.rigidbody.fire("triggerenter", c))
                        } else {
                            var S = this._hasContactEvent(c)
                              , T = this._hasContactEvent(u)
                              , w = this.hasEvent("contact");
                            if (w || S || T) {
                                for (var M = 0; M < p; M++) {
                                    var A = a.getContactPoint(M)
                                      , C = this._createContactPointFromAmmo(A);
                                    if (S || T) {
                                        m.push(C);
                                        var E = this._createReverseContactPointFromAmmo(A);
                                        _.push(E)
                                    }
                                    if (w) {
                                        var P = this._createSingleContactResult(c, u, C);
                                        this.fire("contact", P)
                                    }
                                }
                                if (S) {
                                    var R = this._createContactResult(u, m);
                                    g = this._storeCollision(c, u),
                                    c.collision && (c.collision.fire("contact", R),
                                    g && c.collision.fire("collisionstart", R)),
                                    c.rigidbody && (c.rigidbody.fire("contact", R),
                                    g && c.rigidbody.fire("collisionstart", R))
                                }
                                if (T) {
                                    var I = this._createContactResult(c, _);
                                    g = this._storeCollision(u, c),
                                    u.collision && (u.collision.fire("contact", I),
                                    g && u.collision.fire("collisionstart", I)),
                                    u.rigidbody && (u.rigidbody.fire("contact", I),
                                    g && u.rigidbody.fire("collisionstart", I))
                                }
                            }
                        }
                }
            }
            this._cleanOldCollisions(),
            this.contactPointPool.freeAll(),
            this.contactResultPool.freeAll(),
            this.singleContactResultPool.freeAll()
        }
        ,
        i.onUpdate = function(t) {
            var e, i, n = this.dynamicsWorld.getGravity();
            n.x() === this.gravity.x && n.y() === this.gravity.y && n.z() === this.gravity.z || (n.setValue(this.gravity.x, this.gravity.y, this.gravity.z),
            this.dynamicsWorld.setGravity(n));
            var s = this._triggers;
            for (e = 0,
            i = s.length; e < i; e++)
                s[e].updateTransform();
            var a = this._compounds;
            for (e = 0,
            i = a.length; e < i; e++)
                a[e]._updateCompound();
            var r = this._kinematic;
            for (e = 0,
            i = r.length; e < i; e++)
                r[e]._updateKinematic();
            this.dynamicsWorld.stepSimulation(t, this.maxSubSteps, this.fixedTimeStep);
            var o = this._dynamic;
            for (e = 0,
            i = o.length; e < i; e++)
                o[e]._updateDynamic();
            this.dynamicsWorld.setInternalTickCallback || this._checkForCollisions(Ammo.getPointer(this.dynamicsWorld), t)
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this),
            "undefined" != typeof Ammo && (Ammo.destroy(this.dynamicsWorld),
            Ammo.destroy(this.solver),
            Ammo.destroy(this.overlappingPairCache),
            Ammo.destroy(this.dispatcher),
            Ammo.destroy(this.collisionConfiguration),
            this.dynamicsWorld = null,
            this.solver = null,
            this.overlappingPairCache = null,
            this.dispatcher = null,
            this.collisionConfiguration = null)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(v_.prototype, w_);
    var A_ = "none"
      , C_ = "blend"
      , E_ = new vt
      , P_ = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._resolution = new ut(640,320),
            n._referenceResolution = new ut(640,320),
            n._scaleMode = A_,
            n.scale = 1,
            n._scaleBlend = .5,
            n._priority = 0,
            n._screenSpace = !1,
            n.cull = n._screenSpace,
            n._screenMatrix = new vt,
            n._elements = new Set,
            e.app.graphicsDevice.on("resizecanvas", n._onResize, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.syncDrawOrder = function() {
            this.system.queueDrawOrderSync(this.entity.getGuid(), this._processDrawOrderSync, this)
        }
        ,
        i._recurseDrawOrderSync = function(t, e) {
            if (!(t instanceof nv))
                return e;
            if (t.element) {
                var i = t.element.drawOrder;
                t.element.drawOrder = e++,
                t.element._batchGroupId >= 0 && i !== t.element.drawOrder && this.system.app.batcher.markGroupDirty(t.element._batchGroupId)
            }
            t.particlesystem && (t.particlesystem.drawOrder = e++);
            for (var n = t.children, s = 0; s < n.length; s++)
                e = this._recurseDrawOrderSync(n[s], e);
            return e
        }
        ,
        i._processDrawOrderSync = function() {
            this._recurseDrawOrderSync(this.entity, 1),
            this.fire("syncdraworder")
        }
        ,
        i._calcProjectionMatrix = function() {
            var t = this._resolution.x / this.scale
              , e = this._resolution.y / this.scale
              , i = t
              , n = -e;
            this._screenMatrix.setOrtho(0, i, n, 0, 1, -1),
            this._screenSpace || (E_.setScale(.5 * t, .5 * e, 1),
            this._screenMatrix.mul2(E_, this._screenMatrix))
        }
        ,
        i._updateScale = function() {
            this.scale = this._calcScale(this._resolution, this.referenceResolution)
        }
        ,
        i._calcScale = function(t, e) {
            var i = Math.log2(t.x / e.x)
              , n = Math.log2(t.y / e.y);
            return Math.pow(2, i * (1 - this._scaleBlend) + n * this._scaleBlend)
        }
        ,
        i._onResize = function(t, e) {
            this._screenSpace && (this._resolution.set(t, e),
            this.resolution = this._resolution)
        }
        ,
        i._bindElement = function(t) {
            this._elements.add(t)
        }
        ,
        i._unbindElement = function(t) {
            this._elements.delete(t)
        }
        ,
        i.onRemove = function() {
            this.system.app.graphicsDevice.off("resizecanvas", this._onResize, this),
            this.fire("remove"),
            this._elements.forEach((function(t) {
                return t._onScreenRemove()
            }
            )),
            this._elements.clear(),
            this.off()
        }
        ,
        G(e, [{
            key: "resolution",
            get: function() {
                return this._resolution
            },
            set: function(t) {
                var e = this;
                this._screenSpace ? this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height) : this._resolution.set(t.x, t.y),
                this._updateScale(),
                this._calcProjectionMatrix(),
                this.entity._dirtyLocal || this.entity._dirtifyLocal(),
                this.fire("set:resolution", this._resolution),
                this._elements.forEach((function(t) {
                    return t._onScreenResize(e._resolution)
                }
                ))
            }
        }, {
            key: "referenceResolution",
            get: function() {
                return this._scaleMode === A_ ? this._resolution : this._referenceResolution
            },
            set: function(t) {
                var e = this;
                this._referenceResolution.set(t.x, t.y),
                this._updateScale(),
                this._calcProjectionMatrix(),
                this.entity._dirtyLocal || this.entity._dirtifyLocal(),
                this.fire("set:referenceresolution", this._resolution),
                this._elements.forEach((function(t) {
                    return t._onScreenResize(e._resolution)
                }
                ))
            }
        }, {
            key: "screenSpace",
            get: function() {
                return this._screenSpace
            },
            set: function(t) {
                this._screenSpace = t,
                this._screenSpace && this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height),
                this.resolution = this._resolution,
                this.entity._dirtyLocal || this.entity._dirtifyLocal(),
                this.fire("set:screenspace", this._screenSpace),
                this._elements.forEach((function(t) {
                    return t._onScreenSpaceChange()
                }
                ))
            }
        }, {
            key: "scaleMode",
            get: function() {
                return this._scaleMode
            },
            set: function(t) {
                t !== A_ && t !== C_ && (t = A_),
                this._screenSpace || t === A_ || (t = A_),
                this._scaleMode = t,
                this.resolution = this._resolution,
                this.fire("set:scalemode", this._scaleMode)
            }
        }, {
            key: "scaleBlend",
            get: function() {
                return this._scaleBlend
            },
            set: function(t) {
                var e = this;
                this._scaleBlend = t,
                this._updateScale(),
                this._calcProjectionMatrix(),
                this.entity._dirtyLocal || this.entity._dirtifyLocal(),
                this.fire("set:scaleblend", this._scaleBlend),
                this._elements.forEach((function(t) {
                    return t._onScreenResize(e._resolution)
                }
                ))
            }
        }, {
            key: "priority",
            get: function() {
                return this._priority
            },
            set: function(t) {
                t > 255 && (t = 255),
                this._priority = t
            }
        }]),
        e
    }(gd)
      , R_ = function() {
        this.enabled = !0
    }
      , I_ = ["enabled"]
      , L_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "screen",
            i.ComponentType = P_,
            i.DataType = R_,
            i.schema = I_,
            i.windowResolution = new ut,
            i._drawOrderSyncQueue = new z,
            i.app.graphicsDevice.on("resizecanvas", i._onResize, j(i)),
            i.app.systems.on("update", i._onUpdate, j(i)),
            i.on("beforeremove", i.onRemoveComponent, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            void 0 !== i.priority && (e.priority = i.priority),
            void 0 !== i.screenSpace && (e.screenSpace = i.screenSpace),
            e.cull = e.screenSpace,
            void 0 !== i.scaleMode && (e.scaleMode = i.scaleMode),
            void 0 !== i.scaleBlend && (e.scaleBlend = i.scaleBlend),
            void 0 !== i.resolution && (i.resolution instanceof ut ? e._resolution.copy(i.resolution) : e._resolution.set(i.resolution[0], i.resolution[1]),
            e.resolution = e._resolution),
            void 0 !== i.referenceResolution && (i.referenceResolution instanceof ut ? e._referenceResolution.copy(i.referenceResolution) : e._referenceResolution.set(i.referenceResolution[0], i.referenceResolution[1]),
            e.referenceResolution = e._referenceResolution),
            e.syncDrawOrder(),
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.graphicsDevice.off("resizecanvas", this._onResize, this),
            this.app.systems.off("update", this._onUpdate, this)
        }
        ,
        i._onUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                e[i].entity.screen.update && e[i].entity.screen.update(t)
        }
        ,
        i._onResize = function(t, e) {
            this.windowResolution.x = t,
            this.windowResolution.y = e
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.screen;
            return this.addComponent(e, {
                enabled: i.enabled,
                screenSpace: i.screenSpace,
                scaleMode: i.scaleMode,
                resolution: i.resolution.clone(),
                referenceResolution: i.referenceResolution.clone()
            })
        }
        ,
        i.onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.processDrawOrderSyncQueue = function() {
            for (var t = this._drawOrderSyncQueue.list(), e = 0; e < t.length; e++) {
                var i = t[e];
                i.callback.call(i.scope)
            }
            this._drawOrderSyncQueue.clear()
        }
        ,
        i.queueDrawOrderSync = function(t, e, i) {
            this._drawOrderSyncQueue.list().length || this.app.once("prerender", this.processDrawOrderSyncQueue, this),
            this._drawOrderSyncQueue.has(t) || this._drawOrderSyncQueue.push(t, {
                callback: e,
                scope: i
            })
        }
        ,
        e
    }(vd);
    gd._buildAccessors(P_.prototype, I_);
    var D_ = ["x", "y", "z", "w"]
      , k_ = [void 0, void 0, ut, lt, dt];
    function O_(t, e, i, n) {
        switch (e.type) {
        case "boolean":
            return !!i;
        case "number":
            if ("number" == typeof i)
                return i;
            if ("string" == typeof i) {
                var s = parseInt(i, 10);
                return isNaN(s) ? null : s
            }
            return "boolean" == typeof i ? 0 + i : null;
        case "json":
            var a = {};
            if (Array.isArray(e.schema)) {
                i && "object" == typeof i || (i = {});
                for (var r = 0; r < e.schema.length; r++) {
                    var o = e.schema[r];
                    if (o.name)
                        if (o.array) {
                            a[o.name] = [];
                            for (var h = Array.isArray(i[o.name]) ? i[o.name] : [], l = 0; l < h.length; l++)
                                a[o.name].push(O_(t, o, h[l]))
                        } else {
                            var c = i.hasOwnProperty(o.name) ? i[o.name] : o.default;
                            a[o.name] = O_(t, o, c)
                        }
                }
            }
            return a;
        case "asset":
            return i instanceof Kh ? i : "number" == typeof i ? t.assets.get(i) || null : "string" == typeof i && t.assets.get(parseInt(i, 10)) || null;
        case "entity":
            return i instanceof ji ? i : "string" == typeof i ? t.getEntityFromIndex(i) : null;
        case "rgb":
        case "rgba":
            if (i instanceof at)
                return n instanceof at ? (n.copy(i),
                n) : i.clone();
            if (i instanceof Array && i.length >= 3 && i.length <= 4) {
                for (var u = 0; u < i.length; u++)
                    if ("number" != typeof i[u])
                        return null;
                return n || (n = new at),
                n.r = i[0],
                n.g = i[1],
                n.b = i[2],
                n.a = 3 === i.length ? 1 : i[3],
                n
            }
            return "string" == typeof i && /#([0-9abcdef]{2}){3,4}/i.test(i) ? (n || (n = new at),
            n.fromString(i),
            n) : null;
        case "vec2":
        case "vec3":
        case "vec4":
            var d = parseInt(e.type.slice(3), 10)
              , f = k_[d];
            if (i instanceof f)
                return n instanceof f ? (n.copy(i),
                n) : i.clone();
            if (i instanceof Array && i.length === d) {
                for (var p = 0; p < i.length; p++)
                    if ("number" != typeof i[p])
                        return null;
                n || (n = new f);
                for (var m = 0; m < d; m++)
                    n[D_[m]] = i[m];
                return n
            }
            return null;
        case "curve":
            if (i) {
                var _;
                if (i instanceof ot || i instanceof ht)
                    _ = i.clone();
                else
                    (_ = new (i.keys[0]instanceof Array ? ht : ot)(i.keys)).type = i.type;
                return _
            }
        }
        return i
    }
    var F_ = function() {
        function t(t) {
            this.scriptType = t,
            this.index = {}
        }
        var e = t.prototype;
        return e.add = function(e, i) {
            this.index[e] || t.reservedNames.has(e) || (this.index[e] = i,
            Object.defineProperty(this.scriptType.prototype, e, {
                get: function() {
                    return this.__attributes[e]
                },
                set: function(t) {
                    var n = "attr"
                      , s = "attr:" + e
                      , a = this.__attributes[e]
                      , r = a;
                    if (a && "json" !== i.type && a.clone && (this._callbacks.attr || this._callbacks[s]) && (r = a.clone()),
                    i.array) {
                        if (this.__attributes[e] = [],
                        t)
                            for (var o = 0, h = t.length; o < h; o++)
                                this.__attributes[e].push(O_(this.app, i, t[o], a ? a[o] : null))
                    } else
                        this.__attributes[e] = O_(this.app, i, t, a);
                    this.fire(n, e, this.__attributes[e], r),
                    this.fire(s, this.__attributes[e], r)
                }
            }))
        }
        ,
        e.remove = function(t) {
            return !!this.index[t] && (delete this.index[t],
            delete this.scriptType.prototype[t],
            !0)
        }
        ,
        e.has = function(t) {
            return !!this.index[t]
        }
        ,
        e.get = function(t) {
            return this.index[t] || null
        }
        ,
        t
    }();
    F_.reservedNames = new Set(["app", "entity", "enabled", "_enabled", "_enabledOld", "_destroyed", "__attributes", "__attributesRaw", "__scriptType", "__executionOrder", "_callbacks", "has", "get", "on", "off", "fire", "once", "hasEvent"]);
    var B_ = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._scripts = [],
            n._updateList = new Z({
                sortBy: "__executionOrder"
            }),
            n._postUpdateList = new Z({
                sortBy: "__executionOrder"
            }),
            n._scriptsIndex = {},
            n._destroyedScripts = [],
            n._destroyed = !1,
            n._scriptsData = null,
            n._oldState = !0,
            n._enabled = !0,
            n._beingEnabled = !1,
            n._isLoopingThroughScripts = !1,
            n._executionOrder = -1,
            n.on("set_enabled", n._onSetEnabled, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.onEnable = function() {
            this._beingEnabled = !0,
            this._checkState(),
            this.entity._beingEnabled || this.onPostStateChange(),
            this._beingEnabled = !1
        }
        ,
        i.onDisable = function() {
            this._checkState()
        }
        ,
        i.onPostStateChange = function() {
            for (var t = this._beginLooping(), i = 0, n = this.scripts.length; i < n; i++) {
                var s = this.scripts[i];
                s._initialized && !s._postInitialized && s.enabled && (s._postInitialized = !0,
                s.postInitialize && this._scriptMethod(s, e.scriptMethods.postInitialize))
            }
            this._endLooping(t)
        }
        ,
        i._beginLooping = function() {
            var t = this._isLoopingThroughScripts;
            return this._isLoopingThroughScripts = !0,
            t
        }
        ,
        i._endLooping = function(t) {
            this._isLoopingThroughScripts = t,
            this._isLoopingThroughScripts || this._removeDestroyedScripts()
        }
        ,
        i._onSetEnabled = function(t, e, i) {
            this._beingEnabled = !0,
            this._checkState(),
            this._beingEnabled = !1
        }
        ,
        i._checkState = function() {
            var t = this.enabled && this.entity.enabled;
            if (t !== this._oldState) {
                this._oldState = t,
                this.fire(t ? "enable" : "disable"),
                this.fire("state", t),
                t ? this.system._addComponentToEnabled(this) : this.system._removeComponentFromEnabled(this);
                for (var e = this._beginLooping(), i = 0, n = this.scripts.length; i < n; i++) {
                    var s = this.scripts[i];
                    s.enabled = s._enabled
                }
                this._endLooping(e)
            }
        }
        ,
        i._onBeforeRemove = function() {
            this.fire("remove");
            for (var t = this._beginLooping(), e = 0; e < this.scripts.length; e++) {
                var i = this.scripts[e];
                i && this.destroy(i.__scriptType.__name)
            }
            this._endLooping(t)
        }
        ,
        i._removeDestroyedScripts = function() {
            var t = this._destroyedScripts.length;
            if (t) {
                for (var e = 0; e < t; e++) {
                    var i = this._destroyedScripts[e];
                    this._removeScriptInstance(i)
                }
                this._destroyedScripts.length = 0,
                this._resetExecutionOrder(0, this._scripts.length)
            }
        }
        ,
        i._onInitializeAttributes = function() {
            for (var t = 0, e = this.scripts.length; t < e; t++)
                this.scripts[t].__initializeAttributes()
        }
        ,
        i._scriptMethod = function(t, e, i) {
            t[e](i)
        }
        ,
        i._onInitialize = function() {
            for (var t = this._scripts, i = this._beginLooping(), n = 0, s = t.length; n < s; n++) {
                var a = t[n];
                !a._initialized && a.enabled && (a._initialized = !0,
                a.initialize && this._scriptMethod(a, e.scriptMethods.initialize))
            }
            this._endLooping(i)
        }
        ,
        i._onPostInitialize = function() {
            this.onPostStateChange()
        }
        ,
        i._onUpdate = function(t) {
            var i = this._updateList;
            if (i.length) {
                var n = this._beginLooping();
                for (i.loopIndex = 0; i.loopIndex < i.length; i.loopIndex++) {
                    var s = i.items[i.loopIndex];
                    s.enabled && this._scriptMethod(s, e.scriptMethods.update, t)
                }
                this._endLooping(n)
            }
        }
        ,
        i._onPostUpdate = function(t) {
            var i = this._postUpdateList;
            if (i.length) {
                var n = this._beginLooping();
                for (i.loopIndex = 0; i.loopIndex < i.length; i.loopIndex++) {
                    var s = i.items[i.loopIndex];
                    s.enabled && this._scriptMethod(s, e.scriptMethods.postUpdate, t)
                }
                this._endLooping(n)
            }
        }
        ,
        i._insertScriptInstance = function(t, e, i) {
            -1 === e ? (this._scripts.push(t),
            t.__executionOrder = i,
            t.update && this._updateList.append(t),
            t.postUpdate && this._postUpdateList.append(t)) : (this._scripts.splice(e, 0, t),
            t.__executionOrder = e,
            this._resetExecutionOrder(e + 1, i + 1),
            t.update && this._updateList.insert(t),
            t.postUpdate && this._postUpdateList.insert(t))
        }
        ,
        i._removeScriptInstance = function(t) {
            var e = this._scripts.indexOf(t);
            return -1 === e || (this._scripts.splice(e, 1),
            t.update && this._updateList.remove(t),
            t.postUpdate && this._postUpdateList.remove(t)),
            e
        }
        ,
        i._resetExecutionOrder = function(t, e) {
            for (var i = t; i < e; i++)
                this._scripts[i].__executionOrder = i
        }
        ,
        i._resolveEntityScriptAttribute = function(t, e, i, n, s, a) {
            if (t.array) {
                var r = i.length;
                if (!r)
                    return;
                for (var o = i.slice(), h = 0; h < r; h++) {
                    var l = o[h]instanceof nv ? o[h].getGuid() : o[h];
                    a[l] && (o[h] = n ? a[l].getGuid() : a[l])
                }
                s[e] = o
            } else {
                if (i instanceof nv)
                    i = i.getGuid();
                else if ("string" != typeof i)
                    return;
                a[i] && (s[e] = a[i])
            }
        }
        ,
        i.has = function(t) {
            if ("string" == typeof t)
                return !!this._scriptsIndex[t];
            if (!t)
                return !1;
            var e = t
              , i = e.__name
              , n = this._scriptsIndex[i];
            return (n && n.instance)instanceof e
        }
        ,
        i.get = function(t) {
            if ("string" == typeof t) {
                var e = this._scriptsIndex[t];
                return e ? e.instance : null
            }
            if (!t)
                return null;
            var i = t
              , n = i.__name
              , s = this._scriptsIndex[n]
              , a = s && s.instance;
            return a instanceof i ? a : null
        }
        ,
        i.create = function(t, i) {
            void 0 === i && (i = {});
            var n = this
              , s = t
              , a = t;
            if ("string" == typeof s ? s = this.system.app.scripts.get(s) : s && (a = s.__name),
            s) {
                if (!this._scriptsIndex[a] || !this._scriptsIndex[a].instance) {
                    var r = new s({
                        app: this.system.app,
                        entity: this.entity,
                        enabled: !i.hasOwnProperty("enabled") || i.enabled,
                        attributes: i.attributes
                    })
                      , o = this._scripts.length
                      , h = -1;
                    return "number" == typeof i.ind && -1 !== i.ind && o > i.ind && (h = i.ind),
                    this._insertScriptInstance(r, h, o),
                    this._scriptsIndex[a] = {
                        instance: r,
                        onSwap: function() {
                            n.swap(a)
                        }
                    },
                    this[a] = r,
                    i.preloading || r.__initializeAttributes(),
                    this.fire("create", a, r),
                    this.fire("create:" + a, r),
                    this.system.app.scripts.on("swap:" + a, this._scriptsIndex[a].onSwap),
                    i.preloading || (r.enabled && !r._initialized && (r._initialized = !0,
                    r.initialize && this._scriptMethod(r, e.scriptMethods.initialize)),
                    r.enabled && !r._postInitialized && (r._postInitialized = !0,
                    r.postInitialize && this._scriptMethod(r, e.scriptMethods.postInitialize))),
                    r
                }
                console.warn("script '" + a + "' is already added to entity '" + this.entity.name + "'")
            } else
                this._scriptsIndex[a] = {
                    awaiting: !0,
                    ind: this._scripts.length
                },
                console.warn("script '" + a + "' is not found, awaiting it to be added to registry");
            return null
        }
        ,
        i.destroy = function(t) {
            var e = t
              , i = t;
            "string" == typeof i ? i = this.system.app.scripts.get(i) : i && (e = i.__name);
            var n = this._scriptsIndex[e];
            if (delete this._scriptsIndex[e],
            !n)
                return !1;
            var s = n.instance;
            if (s && !s._destroyed)
                if (s.enabled = !1,
                s._destroyed = !0,
                this._isLoopingThroughScripts)
                    this._destroyedScripts.push(s);
                else {
                    var a = this._removeScriptInstance(s);
                    a >= 0 && this._resetExecutionOrder(a, this._scripts.length)
                }
            return this.system.app.scripts.off("swap:" + e, n.onSwap),
            delete this[e],
            this.fire("destroy", e, s || null),
            this.fire("destroy:" + e, s || null),
            s && s.fire("destroy"),
            !0
        }
        ,
        i.swap = function(t) {
            var i = t
              , n = t;
            "string" == typeof n ? n = this.system.app.scripts.get(n) : n && (i = n.__name);
            var s = this._scriptsIndex[i];
            if (!s || !s.instance)
                return !1;
            var a = s.instance
              , r = this._scripts.indexOf(a)
              , o = new n({
                app: this.system.app,
                entity: this.entity,
                enabled: a.enabled,
                attributes: a.__attributes
            });
            return !!o.swap && (o.__initializeAttributes(),
            this._scripts[r] = o,
            this._scriptsIndex[i].instance = o,
            this[i] = o,
            o.__executionOrder = r,
            a.update && this._updateList.remove(a),
            a.postUpdate && this._postUpdateList.remove(a),
            o.update && this._updateList.insert(o),
            o.postUpdate && this._postUpdateList.insert(o),
            this._scriptMethod(o, e.scriptMethods.swap, a),
            this.fire("swap", i, o),
            this.fire("swap:" + i, o),
            !0)
        }
        ,
        i.resolveDuplicatedEntityReferenceProperties = function(t, e) {
            var i = this.entity.script;
            for (var n in t._scriptsIndex) {
                var s = this.system.app.scripts.get(n);
                if (s) {
                    var a = t._scriptsIndex[n];
                    if (a && a.instance) {
                        var r = i[n].__attributesRaw
                          , o = i[n].__attributes;
                        if (r || o) {
                            var h = !!r
                              , l = a.instance.__attributes;
                            for (var c in l)
                                if (l[c]) {
                                    var u = s.attributes.get(c);
                                    if (u)
                                        if ("entity" === u.type)
                                            this._resolveEntityScriptAttribute(u, c, l[c], h, r || o, e);
                                        else if ("json" === u.type && Array.isArray(u.schema))
                                            for (var d = l[c], f = r ? r[c] : o[c], p = 0; p < u.schema.length; p++) {
                                                var m = u.schema[p];
                                                if ("entity" === m.type)
                                                    if (u.array)
                                                        for (var _ = 0; _ < d.length; _++)
                                                            this._resolveEntityScriptAttribute(m, m.name, d[_][m.name], h, f[_], e);
                                                    else
                                                        this._resolveEntityScriptAttribute(m, m.name, d[m.name], h, f, e)
                                            }
                                }
                        }
                    }
                }
            }
        }
        ,
        i.move = function(t, e) {
            var i = this._scripts.length;
            if (e >= i || e < 0)
                return !1;
            var n = t
              , s = t;
            "string" != typeof s ? s = t.__name : n = null;
            var a = this._scriptsIndex[s];
            if (!a || !a.instance)
                return !1;
            var r = a.instance;
            if (n && !(r instanceof n))
                return !1;
            var o = this._scripts.indexOf(r);
            return -1 !== o && o !== e && (this._scripts.splice(e, 0, this._scripts.splice(o, 1)[0]),
            this._resetExecutionOrder(0, i),
            this._updateList.sort(),
            this._postUpdateList.sort(),
            this.fire("move", s, r, e, o),
            this.fire("move:" + s, r, e, o),
            !0)
        }
        ,
        G(e, [{
            key: "enabled",
            get: function() {
                return this._enabled
            },
            set: function(t) {
                var e = this._enabled;
                this._enabled = t,
                this.fire("set", "enabled", e, t)
            }
        }, {
            key: "scripts",
            get: function() {
                return this._scripts
            },
            set: function(t) {
                for (var e in this._scriptsData = t,
                t)
                    if (t.hasOwnProperty(e)) {
                        var i = this._scriptsIndex[e];
                        if (i) {
                            if ("boolean" == typeof t[e].enabled && (i.enabled = !!t[e].enabled),
                            "object" == typeof t[e].attributes)
                                for (var n in t[e].attributes)
                                    if (!F_.reservedNames.has(n)) {
                                        if (!i.__attributes.hasOwnProperty(n)) {
                                            var s = this.system.app.scripts.get(e);
                                            s && s.attributes.add(n, {})
                                        }
                                        i[n] = t[e].attributes[n]
                                    }
                        } else
                            console.log(this.order)
                    }
            }
        }]),
        e
    }(gd);
    B_.scriptMethods = {
        initialize: "initialize",
        postInitialize: "postInitialize",
        update: "update",
        postUpdate: "postUpdate",
        swap: "swap"
    };
    var N_ = function() {
        this.enabled = !0
    }
      , U_ = 0
      , z_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "script",
            i.ComponentType = B_,
            i.DataType = N_,
            i._components = new Z({
                sortBy: "_executionOrder"
            }),
            i._enabledComponents = new Z({
                sortBy: "_executionOrder"
            }),
            i.preloading = !0,
            i.on("beforeremove", i._onBeforeRemove, j(i)),
            i.app.systems.on("initialize", i._onInitialize, j(i)),
            i.app.systems.on("postInitialize", i._onPostInitialize, j(i)),
            i.app.systems.on("update", i._onUpdate, j(i)),
            i.app.systems.on("postUpdate", i._onPostUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(t, e) {
            if (t._executionOrder = U_++,
            this._components.append(t),
            U_ > Number.MAX_SAFE_INTEGER && this._resetExecutionOrder(),
            t.enabled = !e.hasOwnProperty("enabled") || !!e.enabled,
            t.enabled && t.entity.enabled && this._enabledComponents.append(t),
            e.hasOwnProperty("order") && e.hasOwnProperty("scripts")) {
                t._scriptsData = e.scripts;
                for (var i = 0; i < e.order.length; i++)
                    t.create(e.order[i], {
                        enabled: e.scripts[e.order[i]].enabled,
                        attributes: e.scripts[e.order[i]].attributes,
                        preloading: this.preloading
                    })
            }
        }
        ,
        i.cloneComponent = function(t, e) {
            for (var i = [], n = {}, s = 0; s < t.script._scripts.length; s++) {
                var a = t.script._scripts[s]
                  , r = a.__scriptType.__name;
                i.push(r);
                var o = {};
                for (var h in a.__attributes)
                    o[h] = a.__attributes[h];
                n[r] = {
                    enabled: a._enabled,
                    attributes: o
                }
            }
            for (var l in t.script._scriptsIndex)
                l.awaiting && i.splice(l.ind, 0, l);
            var c = {
                enabled: t.script.enabled,
                order: i,
                scripts: n
            };
            return this.addComponent(e, c)
        }
        ,
        i._resetExecutionOrder = function() {
            U_ = 0;
            for (var t = 0, e = this._components.length; t < e; t++)
                this._components.items[t]._executionOrder = U_++
        }
        ,
        i._callComponentMethod = function(t, e, i) {
            for (t.loopIndex = 0; t.loopIndex < t.length; t.loopIndex++)
                t.items[t.loopIndex][e](i)
        }
        ,
        i._onInitialize = function() {
            this.preloading = !1,
            this._callComponentMethod(this._components, "_onInitializeAttributes"),
            this._callComponentMethod(this._enabledComponents, "_onInitialize")
        }
        ,
        i._onPostInitialize = function() {
            this._callComponentMethod(this._enabledComponents, "_onPostInitialize")
        }
        ,
        i._onUpdate = function(t) {
            this._callComponentMethod(this._enabledComponents, "_onUpdate", t)
        }
        ,
        i._onPostUpdate = function(t) {
            this._callComponentMethod(this._enabledComponents, "_onPostUpdate", t)
        }
        ,
        i._addComponentToEnabled = function(t) {
            this._enabledComponents.insert(t)
        }
        ,
        i._removeComponentFromEnabled = function(t) {
            this._enabledComponents.remove(t)
        }
        ,
        i._onBeforeRemove = function(t, e) {
            this._components.items.indexOf(e) >= 0 && e._onBeforeRemove(),
            this._removeComponentFromEnabled(e),
            this._components.remove(e)
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("initialize", this._onInitialize, this),
            this.app.systems.off("postInitialize", this._onPostInitialize, this),
            this.app.systems.off("update", this._onUpdate, this),
            this.app.systems.off("postUpdate", this._onPostUpdate, this)
        }
        ,
        e
    }(vd)
      , V_ = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this).on("set_scripts", n.onSetScripts, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.send = function(t, e) {
            var i, n = Array.prototype.slice.call(arguments, 2), s = this.entity.script.instances;
            if (s && s[t] && (i = s[t].instance[e]))
                return i.apply(s[t].instance, n)
        }
        ,
        i.onEnable = function() {
            this.data.areScriptsLoaded && !this.system.preloading && (this.data.initialized ? this.system._enableScriptComponent(this) : this.system._initializeScriptComponent(this),
            this.data.postInitialized || this.system._postInitializeScriptComponent(this))
        }
        ,
        i.onDisable = function() {
            this.system._disableScriptComponent(this)
        }
        ,
        i.onSetScripts = function(t, e, i) {
            if (!this.system._inTools || this.runInTools) {
                if (this._updateScriptAttributes(e, i))
                    return;
                this.enabled && this.system._disableScriptComponent(this),
                this.system._destroyScriptComponent(this),
                this.data.areScriptsLoaded = !1;
                var n = i.map((function(t) {
                    return t.url
                }
                ));
                if (this._loadFromCache(n))
                    return;
                this._loadScripts(n)
            }
        }
        ,
        i._updateScriptAttributes = function(t, e) {
            var i = !0;
            if (t.length !== e.length)
                i = !1;
            else
                for (var n = 0, s = e.length; n < s; n++)
                    if (t[n].url !== e[n].url) {
                        i = !1;
                        break
                    }
            if (i)
                for (var a in this.instances)
                    this.instances.hasOwnProperty(a) && this.system._updateAccessors(this.entity, this.instances[a]);
            return i
        }
        ,
        i._loadFromCache = function(t) {
            for (var e = [], i = this.system.app._scriptPrefix || "", n = /^http(s)?:\/\//i, s = 0, a = t.length; s < a; s++) {
                var r = t[s];
                n.test(r) || (r = p.join(i, r));
                var o = this.system.app.loader.getFromCache(r, "script");
                if (!o)
                    return !1;
                e.push(o)
            }
            for (var h = 0, l = e.length; h < l; h++) {
                var c = e[h];
                if (!0 !== c && (c && this.entity.script && !this.entity.script.instances[c._pcScriptName])) {
                    var u = new c(this.entity);
                    this.system._preRegisterInstance(this.entity, t[h], c._pcScriptName, u)
                }
            }
            return this.data && (this.data.areScriptsLoaded = !0),
            this.system.preloading || (this.system.onInitialize(this.entity),
            this.system.onPostInitialize(this.entity)),
            !0
        }
        ,
        i._loadScripts = function(t) {
            var e = this
              , i = t.length
              , n = this.system.app._scriptPrefix || "";
            t.forEach((function(t) {
                var s = null
                  , a = null;
                t.toLowerCase().startsWith("http://") || t.toLowerCase().startsWith("https://") ? (a = t,
                s = t) : (a = t,
                s = p.join(n, t)),
                e.system.app.loader.load(s, "script", (function(t, n) {
                    if (i--,
                    t)
                        console.error(t);
                    else if (n && e.entity.script && !e.entity.script.instances[n._pcScriptName]) {
                        var s = new n(e.entity);
                        e.system._preRegisterInstance(e.entity, a, n._pcScriptName, s)
                    }
                    0 === i && (e.data.areScriptsLoaded = !0,
                    e.system.preloading || (e.system.onInitialize(e.entity),
                    e.system.onPostInitialize(e.entity)))
                }
                ))
            }
            ))
        }
        ,
        e
    }(gd)
      , G_ = function() {
        this.scripts = [],
        this.enabled = !0,
        this.instances = {},
        this._instances = {},
        this.runInTools = !1,
        this.attributes = {},
        this.initialized = !1,
        this.postInitialized = !1,
        this.areScriptsLoaded = !1
    }
      , W_ = ["enabled", "scripts", "instances", "runInTools"]
      , H_ = "initialize"
      , X_ = "postInitialize"
      , j_ = "update"
      , q_ = "postUpdate"
      , Y_ = "fixedUpdate"
      , K_ = "toolsUpdate"
      , Z_ = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "script",
            i.ComponentType = V_,
            i.DataType = G_,
            i.schema = W_,
            i.preloading = !1,
            i.instancesWithUpdate = [],
            i.instancesWithFixedUpdate = [],
            i.instancesWithPostUpdate = [],
            i.instancesWithToolsUpdate = [],
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i.app.systems.on(H_, i.onInitialize, j(i)),
            i.app.systems.on(X_, i.onPostInitialize, j(i)),
            i.app.systems.on(j_, i.onUpdate, j(i)),
            i.app.systems.on(Y_, i.onFixedUpdate, j(i)),
            i.app.systems.on(q_, i.onPostUpdate, j(i)),
            i.app.systems.on(K_, i.onToolsUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["runInTools", "enabled", "scripts"],
            i.scripts && i.scripts.length && i.scripts.forEach((function(t) {
                if (t.attributes && Array.isArray(t.attributes)) {
                    for (var e = {}, i = 0; i < t.attributes.length; i++)
                        e[t.attributes[i].name] = t.attributes[i];
                    t.attributes = e
                }
            }
            )),
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            for (var i = this.store[t.getGuid()], n = {
                runInTools: i.data.runInTools,
                scripts: [],
                enabled: i.data.enabled
            }, s = i.data.scripts, a = 0, r = s.length; a < r; a++) {
                var o = s[a].attributes;
                o && delete s[a].attributes,
                n.scripts.push(l({}, s[a])),
                o && (n.scripts[a].attributes = this._cloneAttributes(o),
                s[a].attributes = o)
            }
            return this.addComponent(e, n)
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.enabled && this._disableScriptComponent(e),
            this._destroyScriptComponent(e)
        }
        ,
        i.onInitialize = function(t) {
            if (this._registerInstances(t),
            t.enabled) {
                t.script && t.script.enabled && this._initializeScriptComponent(t.script);
                for (var e = t._children, i = 0, n = e.length; i < n; i++)
                    e[i]instanceof nv && this.onInitialize(e[i])
            }
        }
        ,
        i.onPostInitialize = function(t) {
            if (t.enabled) {
                t.script && t.script.enabled && this._postInitializeScriptComponent(t.script);
                for (var e = t._children, i = 0, n = e.length; i < n; i++)
                    e[i]instanceof nv && this.onPostInitialize(e[i])
            }
        }
        ,
        i._callInstancesMethod = function(t, e) {
            var i = t.data.instances;
            for (var n in i)
                if (i.hasOwnProperty(n)) {
                    var s = i[n].instance;
                    s[e] && s[e]()
                }
        }
        ,
        i._initializeScriptComponent = function(t) {
            this._callInstancesMethod(t, H_),
            t.data.initialized = !0,
            t.enabled && t.entity.enabled && this._enableScriptComponent(t)
        }
        ,
        i._enableScriptComponent = function(t) {
            this._callInstancesMethod(t, "onEnable")
        }
        ,
        i._disableScriptComponent = function(t) {
            this._callInstancesMethod(t, "onDisable")
        }
        ,
        i._destroyScriptComponent = function(t) {
            var e = t.data.instances;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i].instance;
                    if (n.destroy && n.destroy(),
                    n.update) {
                        var s = this.instancesWithUpdate.indexOf(n);
                        s >= 0 && this.instancesWithUpdate.splice(s, 1)
                    }
                    if (n.fixedUpdate) {
                        var a = this.instancesWithFixedUpdate.indexOf(n);
                        a >= 0 && this.instancesWithFixedUpdate.splice(a, 1)
                    }
                    if (n.postUpdate) {
                        var r = this.instancesWithPostUpdate.indexOf(n);
                        r >= 0 && this.instancesWithPostUpdate.splice(r, 1)
                    }
                    if (n.toolsUpdate) {
                        var o = this.instancesWithToolsUpdate.indexOf(n);
                        o >= 0 && this.instancesWithToolsUpdate.splice(o, 1)
                    }
                    t.instances[i].instance === t[i] && delete t[i],
                    delete t.instances[i]
                }
        }
        ,
        i._postInitializeScriptComponent = function(t) {
            this._callInstancesMethod(t, X_),
            t.data.postInitialized = !0
        }
        ,
        i._updateInstances = function(t, e, i) {
            for (var n = 0, s = e.length; n < s; n++) {
                var a = e[n];
                a && a.entity && a.entity.enabled && a.entity.script.enabled && a[t](i)
            }
        }
        ,
        i.onUpdate = function(t) {
            this._updateInstances(j_, this.instancesWithUpdate, t)
        }
        ,
        i.onFixedUpdate = function(t) {
            this._updateInstances(Y_, this.instancesWithFixedUpdate, t)
        }
        ,
        i.onPostUpdate = function(t) {
            this._updateInstances(q_, this.instancesWithPostUpdate, t)
        }
        ,
        i.onToolsUpdate = function(t) {
            this._updateInstances(K_, this.instancesWithToolsUpdate, t)
        }
        ,
        i.broadcast = function(t, e) {
            var i = Array.prototype.slice.call(arguments, 2)
              , n = this.store;
            for (var s in n)
                if (n.hasOwnProperty(s)) {
                    var a = n[s].data;
                    if (a.instances[t]) {
                        var r = a.instances[t].instance[e];
                        r && r.apply(a.instances[t].instance, i)
                    }
                }
        }
        ,
        i._preRegisterInstance = function(t, e, i, n) {
            if (t.script) {
                if (t.script.data._instances = t.script.data._instances || {},
                t.script.data._instances[i])
                    throw Error("Script name collision '" + i + "'. Scripts from '" + e + "' and '" + t.script.data._instances[i].url + "' {" + t.getGuid() + "}");
                t.script.data._instances[i] = {
                    url: e,
                    name: i,
                    instance: n
                }
            }
        }
        ,
        i._registerInstances = function(t) {
            if (t.script && t.script.data._instances) {
                for (var e in t.script.instances = t.script.data._instances,
                t.script.instances) {
                    var i = t.script.instances[e]
                      , n = i.instance;
                    if (d.attach(n),
                    n.update && this.instancesWithUpdate.push(n),
                    n.fixedUpdate && this.instancesWithFixedUpdate.push(n),
                    n.postUpdate && this.instancesWithPostUpdate.push(n),
                    n.toolsUpdate && this.instancesWithToolsUpdate.push(n),
                    t.script.scripts && this._createAccessors(t, i),
                    t.script[e])
                        throw Error("Script with name '" + e + "' is already attached to Script Component");
                    t.script[e] = n
                }
                delete t.script.data._instances
            }
            for (var s = t._children, a = 0, r = s.length; a < r; a++)
                s[a]instanceof nv && this._registerInstances(s[a])
        }
        ,
        i._cloneAttributes = function(t) {
            var e = {};
            for (var i in t)
                if (t.hasOwnProperty(i))
                    if ("entity" !== t[i].type)
                        e[i] = l({}, t[i]);
                    else {
                        var n = t[i].value;
                        delete t[i].value,
                        e[i] = l({}, t[i]),
                        e[i].value = n,
                        t[i].value = n
                    }
            return e
        }
        ,
        i._createAccessors = function(t, e) {
            for (var i = t.script.scripts.length, n = e.url, s = 0; s < i; s++) {
                var a = t.script.scripts[s];
                if (a.url === n) {
                    var r = a.attributes;
                    if (a.name && r) {
                        for (var o in r)
                            r.hasOwnProperty(o) && this._createAccessor(r[o], e);
                        t.script.data.attributes[a.name] = this._cloneAttributes(r)
                    }
                    break
                }
            }
        }
        ,
        i._createAccessor = function(t, e) {
            var i = this;
            t = {
                name: t.name,
                value: t.value,
                type: t.type
            },
            this._convertAttributeValue(t),
            Object.defineProperty(e.instance, t.name, {
                get: function() {
                    return t.value
                },
                set: function(n) {
                    var s = t.value;
                    t.value = n,
                    i._convertAttributeValue(t),
                    e.instance.fire("set", t.name, s, t.value)
                },
                configurable: !0
            })
        }
        ,
        i._updateAccessors = function(t, e) {
            for (var i = t.script.scripts.length, n = e.url, s = 0; s < i; s++) {
                var a = t.script
                  , r = a.scripts[s];
                if (r.url === n) {
                    var o = r.name
                      , h = r.attributes;
                    if (o) {
                        if (h)
                            for (var l in h)
                                h.hasOwnProperty(l) && this._createAccessor(h[l], e);
                        var c = a.data.attributes[o];
                        if (c)
                            for (var u in c) {
                                var d = c[u];
                                u in h ? h[u].value !== d.value && e.instance.onAttributeChanged && e.instance.onAttributeChanged(d.name, d.value, h[u].value) : delete e.instance[d.name]
                            }
                        h ? a.data.attributes[o] = this._cloneAttributes(h) : delete a.data.attributes[o]
                    }
                    break
                }
            }
        }
        ,
        i._convertAttributeValue = function(t) {
            if ("rgb" === t.type || "rgba" === t.type)
                Array.isArray(t.value) && (t.value = 3 === t.value.length ? new at(t.value[0],t.value[1],t.value[2]) : new at(t.value[0],t.value[1],t.value[2],t.value[3]));
            else if ("vec2" === t.type)
                Array.isArray(t.value) && (t.value = new ut(t.value[0],t.value[1]));
            else if ("vec3" === t.type || "vector" === t.type)
                Array.isArray(t.value) && (t.value = new lt(t.value[0],t.value[1],t.value[2]));
            else if ("vec4" === t.type)
                Array.isArray(t.value) && (t.value = new dt(t.value[0],t.value[1],t.value[2],t.value[3]));
            else if ("entity" === t.type)
                null !== t.value && "string" == typeof t.value && (t.value = this.app.root.findByGuid(t.value));
            else if ("curve" === t.type || "colorcurve" === t.type) {
                var e = t.value.keys[0]instanceof Array ? ht : ot;
                t.value = new e(t.value.keys),
                t.value.type = t.value.type
            }
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off(H_, this.onInitialize, this),
            this.app.systems.off(X_, this.onPostInitialize, this),
            this.app.systems.off(j_, this.onUpdate, this),
            this.app.systems.off(Y_, this.onFixedUpdate, this),
            this.app.systems.off(q_, this.onPostUpdate, this),
            this.app.systems.off(K_, this.onToolsUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(V_.prototype, W_);
    var $_ = new ut
      , Q_ = new lt
      , J_ = new lt
      , tg = new lt
      , eg = new lt
      , ig = new lt
      , ng = new yt
      , sg = {
        x: "y",
        y: "x"
    }
      , ag = function(t) {
        function e(e, i) {
            var n;
            if (n = t.call(this) || this,
            !(e && e instanceof nm))
                throw new Error("Element was null or not an ElementComponent");
            if (i && "x" !== i && "y" !== i)
                throw new Error("Unrecognized axis: " + i);
            return n._element = e,
            n._app = e.system.app,
            n._axis = i || null,
            n._enabled = !0,
            n._dragScale = new lt,
            n._dragStartMousePosition = new lt,
            n._dragStartHandlePosition = new lt,
            n._deltaMousePosition = new lt,
            n._deltaHandlePosition = new lt,
            n._isDragging = !1,
            n._toggleLifecycleListeners("on"),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._toggleLifecycleListeners = function(t) {
            this._element[t]("mousedown", this._onMouseDownOrTouchStart, this),
            this._element[t]("touchstart", this._onMouseDownOrTouchStart, this)
        }
        ,
        i._toggleDragListeners = function(t) {
            var e = "on" === t
              , i = e ? "addEventListener" : "removeEventListener";
            this._hasDragListeners && e || (this._handleMouseUpOrTouchEnd || (this._handleMouseUpOrTouchEnd = this._onMouseUpOrTouchEnd.bind(this)),
            this._app.mouse && (this._app.mouse[t]("mousemove", this._onMove, this),
            window[i]("mouseup", this._handleMouseUpOrTouchEnd, !1)),
            E.touch && (this._app.touch[t]("touchmove", this._onMove, this),
            window[i]("touchend", this._handleMouseUpOrTouchEnd, !1),
            window[i]("touchcancel", this._handleMouseUpOrTouchEnd, !1)),
            this._hasDragListeners = e)
        }
        ,
        i._onMouseDownOrTouchStart = function(t) {
            if (this._element && !this._isDragging && this.enabled) {
                this._dragCamera = t.camera,
                this._calculateDragScale();
                var e = this._screenToLocal(t);
                e && (this._toggleDragListeners("on"),
                this._isDragging = !0,
                this._dragStartMousePosition.copy(e),
                this._dragStartHandlePosition.copy(this._element.entity.getLocalPosition()),
                this.fire("drag:start"))
            }
        }
        ,
        i._onMouseUpOrTouchEnd = function() {
            this._isDragging && (this._isDragging = !1,
            this._toggleDragListeners("off"),
            this.fire("drag:end"))
        }
        ,
        i._screenToLocal = function(t) {
            this._determineInputPosition(t),
            this._chooseRayOriginAndDirection(),
            eg.copy(this._element.entity.getPosition()),
            ig.copy(this._element.entity.forward).mulScalar(-1);
            var e = ig.dot(tg);
            if (Math.abs(e) > 0) {
                var i = eg.sub(J_).dot(ig) / e
                  , n = J_.add(tg.mulScalar(i));
                return ng.copy(this._element.entity.getRotation()).invert().transformVector(n, n),
                n.mul(this._dragScale),
                n
            }
            return null
        }
        ,
        i._determineInputPosition = function(t) {
            var e = this._app.graphicsDevice.maxPixelRatio;
            void 0 !== t.x && void 0 !== t.y ? ($_.x = t.x * e,
            $_.y = t.y * e) : t.changedTouches ? ($_.x = t.changedTouches[0].x * e,
            $_.y = t.changedTouches[0].y * e) : console.warn("Could not determine position from input event")
        }
        ,
        i._chooseRayOriginAndDirection = function() {
            this._element.screen && this._element.screen.screen.screenSpace ? (J_.set($_.x, -$_.y, 0),
            tg.set(0, 0, -1)) : (Q_.copy(this._dragCamera.screenToWorld($_.x, $_.y, 1)),
            J_.copy(this._dragCamera.entity.getPosition()),
            tg.copy(Q_).sub(J_).normalize())
        }
        ,
        i._calculateDragScale = function() {
            var t = this._element.entity.parent
              , e = this._element.screen && this._element.screen.screen
              , i = e && e.screenSpace
              , n = i ? e.scale : 1
              , s = this._dragScale;
            for (s.set(n, n, n); t && (s.mul(t.getLocalScale()),
            t = t.parent,
            !i || !t.screen); )
                ;
            s.x = 1 / s.x,
            s.y = 1 / s.y,
            s.z = 1 / s.z
        }
        ,
        i._onMove = function(t) {
            if (this._element && this._isDragging && this.enabled && this._element.enabled && this._element.entity.enabled) {
                var e = this._screenToLocal(t);
                if (this._dragStartMousePosition && e) {
                    if (this._deltaMousePosition.copy(e).sub(this._dragStartMousePosition),
                    this._deltaHandlePosition.copy(this._dragStartHandlePosition).add(this._deltaMousePosition),
                    this._axis) {
                        var i = this._element.entity.getLocalPosition()
                          , n = sg[this._axis];
                        this._deltaHandlePosition[n] = i[n]
                    }
                    this._element.entity.setLocalPosition(this._deltaHandlePosition),
                    this.fire("drag:move", this._deltaHandlePosition)
                }
            }
        }
        ,
        i.destroy = function() {
            this._toggleLifecycleListeners("off"),
            this._toggleDragListeners("off")
        }
        ,
        G(e, [{
            key: "enabled",
            get: function() {
                return this._enabled
            },
            set: function(t) {
                this._enabled = t
            }
        }, {
            key: "isDragging",
            get: function() {
                return this._isDragging
            }
        }]),
        e
    }(u)
      , rg = "mouse"
      , og = "keyboard"
      , hg = "gamepad"
      , lg = "mousedown"
      , cg = "mousemove"
      , ug = "mouseup"
      , dg = "mousewheel"
      , fg = new ut
      , pg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._viewportReference = new Lf(j(n),"viewportEntity",{
                "element#gain": n._onViewportElementGain,
                "element#resize": n._onSetContentOrViewportSize
            }),
            n._contentReference = new Lf(j(n),"contentEntity",{
                "element#gain": n._onContentElementGain,
                "element#lose": n._onContentElementLose,
                "element#resize": n._onSetContentOrViewportSize
            }),
            n._scrollbarUpdateFlags = {},
            n._scrollbarReferences = {},
            n._scrollbarReferences[0] = new Lf(j(n),"horizontalScrollbarEntity",{
                "scrollbar#set:value": n._onSetHorizontalScrollbarValue,
                "scrollbar#gain": n._onHorizontalScrollbarGain
            }),
            n._scrollbarReferences[1] = new Lf(j(n),"verticalScrollbarEntity",{
                "scrollbar#set:value": n._onSetVerticalScrollbarValue,
                "scrollbar#gain": n._onVerticalScrollbarGain
            }),
            n._prevContentSizes = {},
            n._prevContentSizes[0] = null,
            n._prevContentSizes[1] = null,
            n._scroll = new ut,
            n._velocity = new lt,
            n._dragStartPosition = new lt,
            n._disabledContentInput = !1,
            n._disabledContentInputEntities = [],
            n._toggleLifecycleListeners("on", e),
            n._toggleElementListeners("on"),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._toggleLifecycleListeners = function(t, e) {
            this[t]("set_horizontal", this._onSetHorizontalScrollingEnabled, this),
            this[t]("set_vertical", this._onSetVerticalScrollingEnabled, this),
            e.app.systems.element[t]("add", this._onElementComponentAdd, this),
            e.app.systems.element[t]("beforeremove", this._onElementComponentRemove, this)
        }
        ,
        i._toggleElementListeners = function(t) {
            if (this.entity.element) {
                if ("on" === t && this._hasElementListeners)
                    return;
                this.entity.element[t]("resize", this._onSetContentOrViewportSize, this),
                this.entity.element[t](dg, this._onMouseWheel, this),
                this._hasElementListeners = "on" === t
            }
        }
        ,
        i._onElementComponentAdd = function(t) {
            this.entity === t && this._toggleElementListeners("on")
        }
        ,
        i._onElementComponentRemove = function(t) {
            this.entity === t && this._toggleElementListeners("off")
        }
        ,
        i._onViewportElementGain = function() {
            this._syncAll()
        }
        ,
        i._onContentElementGain = function() {
            this._destroyDragHelper(),
            this._contentDragHelper = new ag(this._contentReference.entity.element),
            this._contentDragHelper.on("drag:start", this._onContentDragStart, this),
            this._contentDragHelper.on("drag:end", this._onContentDragEnd, this),
            this._contentDragHelper.on("drag:move", this._onContentDragMove, this),
            this._prevContentSizes[0] = null,
            this._prevContentSizes[1] = null,
            this._syncAll()
        }
        ,
        i._onContentElementLose = function() {
            this._destroyDragHelper()
        }
        ,
        i._onContentDragStart = function() {
            this._contentReference.entity && this.enabled && this.entity.enabled && this._dragStartPosition.copy(this._contentReference.entity.getLocalPosition())
        }
        ,
        i._onContentDragEnd = function() {
            this._prevContentDragPosition = null,
            this._enableContentInput()
        }
        ,
        i._onContentDragMove = function(t) {
            if (this._contentReference.entity && this.enabled && this.entity.enabled && (this._wasDragged = !0,
            this._setScrollFromContentPosition(t),
            this._setVelocityFromContentPositionDelta(t),
            !this._disabledContentInput)) {
                var e = t.x - this._dragStartPosition.x
                  , i = t.y - this._dragStartPosition.y;
                (Math.abs(e) > this.dragThreshold || Math.abs(i) > this.dragThreshold) && this._disableContentInput()
            }
        }
        ,
        i._onSetContentOrViewportSize = function() {
            this._syncAll()
        }
        ,
        i._onSetHorizontalScrollbarValue = function(t) {
            !this._scrollbarUpdateFlags[0] && this.enabled && this.entity.enabled && this._onSetScroll(t, null)
        }
        ,
        i._onSetVerticalScrollbarValue = function(t) {
            !this._scrollbarUpdateFlags[1] && this.enabled && this.entity.enabled && this._onSetScroll(null, t)
        }
        ,
        i._onSetHorizontalScrollingEnabled = function() {
            this._syncScrollbarEnabledState(0)
        }
        ,
        i._onSetVerticalScrollingEnabled = function() {
            this._syncScrollbarEnabledState(1)
        }
        ,
        i._onHorizontalScrollbarGain = function() {
            this._syncScrollbarEnabledState(0),
            this._syncScrollbarPosition(0)
        }
        ,
        i._onVerticalScrollbarGain = function() {
            this._syncScrollbarEnabledState(1),
            this._syncScrollbarPosition(1)
        }
        ,
        i._onSetScroll = function(t, e, i) {
            !1 !== i && this._velocity.set(0, 0, 0);
            var n = !1;
            n |= this._updateAxis(t, "x", 0),
            (n |= this._updateAxis(e, "y", 1)) && this.fire("set:scroll", this._scroll)
        }
        ,
        i._updateAxis = function(t, e, i) {
            var n = null !== t && Math.abs(t - this._scroll[e]) > 1e-5;
            return (n || this._isDragging() || 0 === t) && (this._scroll[e] = this._determineNewScrollValue(t, e, i),
            this._syncContentPosition(i),
            this._syncScrollbarPosition(i)),
            n
        }
        ,
        i._determineNewScrollValue = function(t, e, i) {
            if (!this._getScrollingEnabled(i))
                return this._scroll[e];
            switch (this.scrollMode) {
            case 0:
                return it.clamp(t, 0, this._getMaxScrollValue(i));
            case 1:
                return this._setVelocityFromOvershoot(t, e, i),
                t;
            case 2:
                return t;
            default:
                return console.warn("Unhandled scroll mode:" + this.scrollMode),
                t
            }
        }
        ,
        i._syncAll = function() {
            this._syncContentPosition(0),
            this._syncContentPosition(1),
            this._syncScrollbarPosition(0),
            this._syncScrollbarPosition(1),
            this._syncScrollbarEnabledState(0),
            this._syncScrollbarEnabledState(1)
        }
        ,
        i._syncContentPosition = function(t) {
            var e = this._getAxis(t)
              , i = this._getSign(t)
              , n = this._contentReference.entity;
            if (n) {
                var s = this._prevContentSizes[t]
                  , a = this._getContentSize(t);
                if (null !== s && Math.abs(s - a) > 1e-4) {
                    var r = this._getMaxOffset(t, s)
                      , o = this._getMaxOffset(t, a);
                    this._scroll[e] = 0 === o ? 1 : it.clamp(this._scroll[e] * r / o, 0, 1)
                }
                var h = this._scroll[e] * this._getMaxOffset(t)
                  , l = n.getLocalPosition();
                l[e] = h * i,
                n.setLocalPosition(l),
                this._prevContentSizes[t] = a
            }
        }
        ,
        i._syncScrollbarPosition = function(t) {
            var e = this._getAxis(t)
              , i = this._scrollbarReferences[t].entity;
            i && i.scrollbar && (this._scrollbarUpdateFlags[t] = !0,
            i.scrollbar.value = this._scroll[e],
            i.scrollbar.handleSize = this._getScrollbarHandleSize(e, t),
            this._scrollbarUpdateFlags[t] = !1)
        }
        ,
        i._syncScrollbarEnabledState = function(t) {
            var e = this._scrollbarReferences[t].entity;
            if (e) {
                var i = this._getScrollingEnabled(t)
                  , n = this._getScrollbarVisibility(t);
                switch (n) {
                case 0:
                    return void (e.enabled = i);
                case 1:
                    return void (e.enabled = i && this._contentIsLargerThanViewport(t));
                default:
                    console.warn("Unhandled scrollbar visibility:" + n),
                    e.enabled = i
                }
            }
        }
        ,
        i._contentIsLargerThanViewport = function(t) {
            return this._getContentSize(t) > this._getViewportSize(t)
        }
        ,
        i._contentPositionToScrollValue = function(t) {
            var e = this._getMaxOffset(0)
              , i = this._getMaxOffset(1);
            return fg.x = 0 === e ? 0 : t.x / e,
            fg.y = 0 === i ? 0 : t.y / -i,
            fg
        }
        ,
        i._getMaxOffset = function(t, e) {
            e = void 0 === e ? this._getContentSize(t) : e;
            var i = this._getViewportSize(t);
            return e < i ? -this._getViewportSize(t) : i - e
        }
        ,
        i._getMaxScrollValue = function(t) {
            return this._contentIsLargerThanViewport(t) ? 1 : 0
        }
        ,
        i._getScrollbarHandleSize = function(t, e) {
            var i = this._getViewportSize(e)
              , n = this._getContentSize(e);
            if (Math.abs(n) < .001)
                return 1;
            var s = Math.min(i / n, 1)
              , a = this._toOvershoot(this._scroll[t], e);
            return 0 === a ? s : s / (1 + Math.abs(a))
        }
        ,
        i._getViewportSize = function(t) {
            return this._getSize(t, this._viewportReference)
        }
        ,
        i._getContentSize = function(t) {
            return this._getSize(t, this._contentReference)
        }
        ,
        i._getSize = function(t, e) {
            return e.entity && e.entity.element ? e.entity.element[this._getCalculatedDimension(t)] : 0
        }
        ,
        i._getScrollingEnabled = function(t) {
            return 0 === t ? this.horizontal : 1 === t ? this.vertical : void console.warn("Unrecognized orientation: " + t)
        }
        ,
        i._getScrollbarVisibility = function(t) {
            return 0 === t ? this.horizontalScrollbarVisibility : 1 === t ? this.verticalScrollbarVisibility : void console.warn("Unrecognized orientation: " + t)
        }
        ,
        i._getSign = function(t) {
            return 0 === t ? 1 : -1
        }
        ,
        i._getAxis = function(t) {
            return 0 === t ? "x" : "y"
        }
        ,
        i._getCalculatedDimension = function(t) {
            return 0 === t ? "calculatedWidth" : "calculatedHeight"
        }
        ,
        i._destroyDragHelper = function() {
            this._contentDragHelper && this._contentDragHelper.destroy()
        }
        ,
        i.onUpdate = function() {
            this._contentReference.entity && (this._updateVelocity(),
            this._syncScrollbarEnabledState(0),
            this._syncScrollbarEnabledState(1))
        }
        ,
        i._updateVelocity = function() {
            if (!this._isDragging()) {
                if (1 === this.scrollMode && (this._hasOvershoot("x", 0) && this._setVelocityFromOvershoot(this.scroll.x, "x", 0),
                this._hasOvershoot("y", 1) && this._setVelocityFromOvershoot(this.scroll.y, "y", 1)),
                Math.abs(this._velocity.x) > 1e-4 || Math.abs(this._velocity.y) > 1e-4) {
                    var t = this._contentReference.entity.getLocalPosition();
                    t.x += this._velocity.x,
                    t.y += this._velocity.y,
                    this._contentReference.entity.setLocalPosition(t),
                    this._setScrollFromContentPosition(t)
                }
                this._velocity.x *= 1 - this.friction,
                this._velocity.y *= 1 - this.friction
            }
        }
        ,
        i._hasOvershoot = function(t, e) {
            return Math.abs(this._toOvershoot(this.scroll[t], e)) > .001
        }
        ,
        i._toOvershoot = function(t, e) {
            var i = this._getMaxScrollValue(e);
            return t < 0 ? t : t > i ? t - i : 0
        }
        ,
        i._setVelocityFromOvershoot = function(t, e, i) {
            var n = this._toOvershoot(t, i) * this._getMaxOffset(i) * this._getSign(i);
            Math.abs(n) > 0 && (this._velocity[e] = -n / (50 * this.bounceAmount + 1))
        }
        ,
        i._setVelocityFromContentPositionDelta = function(t) {
            this._prevContentDragPosition ? (this._velocity.sub2(t, this._prevContentDragPosition),
            this._prevContentDragPosition.copy(t)) : (this._velocity.set(0, 0, 0),
            this._prevContentDragPosition = t.clone())
        }
        ,
        i._setScrollFromContentPosition = function(t) {
            var e = this._contentPositionToScrollValue(t);
            this._isDragging() && (e = this._applyScrollValueTension(e)),
            this._onSetScroll(e.x, e.y, !1)
        }
        ,
        i._applyScrollValueTension = function(t) {
            var e = this._getMaxScrollValue(0)
              , i = this._toOvershoot(t.x, 0);
            return i > 0 ? t.x = e + 1 * Math.log10(1 + i) : i < 0 && (t.x = -1 * Math.log10(1 - i)),
            e = this._getMaxScrollValue(1),
            (i = this._toOvershoot(t.y, 1)) > 0 ? t.y = e + 1 * Math.log10(1 + i) : i < 0 && (t.y = -1 * Math.log10(1 - i)),
            t
        }
        ,
        i._isDragging = function() {
            return this._contentDragHelper && this._contentDragHelper.isDragging
        }
        ,
        i._setScrollbarComponentsEnabled = function(t) {
            this._scrollbarReferences[0].hasComponent("scrollbar") && (this._scrollbarReferences[0].entity.scrollbar.enabled = t),
            this._scrollbarReferences[1].hasComponent("scrollbar") && (this._scrollbarReferences[1].entity.scrollbar.enabled = t)
        }
        ,
        i._setContentDraggingEnabled = function(t) {
            this._contentDragHelper && (this._contentDragHelper.enabled = t)
        }
        ,
        i._onMouseWheel = function(t) {
            if (this.useMouseWheel) {
                var e = t.event
                  , i = e.deltaX / this._contentReference.entity.element.calculatedWidth * this.mouseWheelSensitivity.x
                  , n = e.deltaY / this._contentReference.entity.element.calculatedHeight * this.mouseWheelSensitivity.y
                  , s = it.clamp(this._scroll.x + i, 0, this._getMaxScrollValue(0))
                  , a = it.clamp(this._scroll.y + n, 0, this._getMaxScrollValue(1));
                this.scroll = new ut(s,a)
            }
        }
        ,
        i._enableContentInput = function() {
            for (; this._disabledContentInputEntities.length; ) {
                var t = this._disabledContentInputEntities.pop();
                t.element && (t.element.useInput = !0)
            }
            this._disabledContentInput = !1
        }
        ,
        i._disableContentInput = function() {
            var t = this
              , e = function e(i) {
                i.element && i.element.useInput && (t._disabledContentInputEntities.push(i),
                i.element.useInput = !1);
                for (var n = i.children, s = 0, a = n.length; s < a; s++)
                    e(n[s])
            }
              , i = this._contentReference.entity;
            if (i)
                for (var n = i.children, s = 0, a = n.length; s < a; s++)
                    e(n[s]);
            this._disabledContentInput = !0
        }
        ,
        i.onEnable = function() {
            this._viewportReference.onParentComponentEnable(),
            this._contentReference.onParentComponentEnable(),
            this._scrollbarReferences[0].onParentComponentEnable(),
            this._scrollbarReferences[1].onParentComponentEnable(),
            this._setScrollbarComponentsEnabled(!0),
            this._setContentDraggingEnabled(!0),
            this._syncAll()
        }
        ,
        i.onDisable = function() {
            this._setScrollbarComponentsEnabled(!1),
            this._setContentDraggingEnabled(!1)
        }
        ,
        i.onRemove = function() {
            this._toggleLifecycleListeners("off", this.system),
            this._toggleElementListeners("off"),
            this._destroyDragHelper()
        }
        ,
        G(e, [{
            key: "scroll",
            get: function() {
                return this._scroll
            },
            set: function(t) {
                this._onSetScroll(t.x, t.y)
            }
        }]),
        e
    }(gd)
      , mg = function() {
        this.enabled = !0
    }
      , _g = [{
        name: "enabled",
        type: "boolean"
    }, {
        name: "horizontal",
        type: "boolean"
    }, {
        name: "vertical",
        type: "boolean"
    }, {
        name: "scrollMode",
        type: "number"
    }, {
        name: "bounceAmount",
        type: "number"
    }, {
        name: "friction",
        type: "number"
    }, {
        name: "dragThreshold",
        type: "number"
    }, {
        name: "useMouseWheel",
        type: "boolean"
    }, {
        name: "mouseWheelSensitivity",
        type: "vec2"
    }, {
        name: "horizontalScrollbarVisibility",
        type: "number"
    }, {
        name: "verticalScrollbarVisibility",
        type: "number"
    }, {
        name: "viewportEntity",
        type: "entity"
    }, {
        name: "contentEntity",
        type: "entity"
    }, {
        name: "horizontalScrollbarEntity",
        type: "entity"
    }, {
        name: "verticalScrollbarEntity",
        type: "entity"
    }]
      , gg = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "scrollview",
            i.ComponentType = pg,
            i.DataType = mg,
            i.schema = _g,
            i.on("beforeremove", i._onRemoveComponent, j(i)),
            i.app.systems.on("update", i.onUpdate, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            void 0 === i.dragThreshold && (i.dragThreshold = 10),
            void 0 === i.useMouseWheel && (i.useMouseWheel = !0),
            void 0 === i.mouseWheelSensitivity && (i.mouseWheelSensitivity = new ut(1,1)),
            t.prototype.initializeComponentData.call(this, e, i, _g)
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e) {
                var n = e[i].entity
                  , s = n.scrollview;
                s.enabled && n.enabled && s.onUpdate()
            }
        }
        ,
        i._onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        e
    }(vd);
    gd._buildAccessors(pg.prototype, _g);
    var vg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._app = e.app,
            n._handleReference = new Lf(j(n),"handleEntity",{
                "element#gain": n._onHandleElementGain,
                "element#lose": n._onHandleElementLose,
                "element#set:anchor": n._onSetHandleAlignment,
                "element#set:margin": n._onSetHandleAlignment,
                "element#set:pivot": n._onSetHandleAlignment
            }),
            n._toggleLifecycleListeners("on"),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._toggleLifecycleListeners = function(t) {
            this[t]("set_value", this._onSetValue, this),
            this[t]("set_handleSize", this._onSetHandleSize, this),
            this[t]("set_orientation", this._onSetOrientation, this)
        }
        ,
        i._onHandleElementGain = function() {
            this._destroyDragHelper(),
            this._handleDragHelper = new ag(this._handleReference.entity.element,this._getAxis()),
            this._handleDragHelper.on("drag:move", this._onHandleDrag, this),
            this._updateHandlePositionAndSize()
        }
        ,
        i._onHandleElementLose = function() {
            this._destroyDragHelper()
        }
        ,
        i._onHandleDrag = function(t) {
            this._handleReference.entity && this.enabled && this.entity.enabled && (this.value = this._handlePositionToScrollValue(t[this._getAxis()]))
        }
        ,
        i._onSetValue = function(t, e, i) {
            Math.abs(i - e) > 1e-5 && (this.data.value = it.clamp(i, 0, 1),
            this._updateHandlePositionAndSize(),
            this.fire("set:value", this.data.value))
        }
        ,
        i._onSetHandleSize = function(t, e, i) {
            Math.abs(i - e) > 1e-5 && (this.data.handleSize = it.clamp(i, 0, 1),
            this._updateHandlePositionAndSize())
        }
        ,
        i._onSetHandleAlignment = function() {
            this._updateHandlePositionAndSize()
        }
        ,
        i._onSetOrientation = function(t, e, i) {
            i !== e && this._handleReference.hasComponent("element") && (this._handleReference.entity.element[this._getOppositeDimension()] = 0)
        }
        ,
        i._updateHandlePositionAndSize = function() {
            var t = this._handleReference.entity
              , e = t && t.element;
            if (t) {
                var i = t.getLocalPosition();
                i[this._getAxis()] = this._getHandlePosition(),
                this._handleReference.entity.setLocalPosition(i)
            }
            e && (e[this._getDimension()] = this._getHandleLength())
        }
        ,
        i._handlePositionToScrollValue = function(t) {
            return t * this._getSign() / this._getUsableTrackLength()
        }
        ,
        i._scrollValueToHandlePosition = function(t) {
            return t * this._getSign() * this._getUsableTrackLength()
        }
        ,
        i._getUsableTrackLength = function() {
            return Math.max(this._getTrackLength() - this._getHandleLength(), .001)
        }
        ,
        i._getTrackLength = function() {
            return this.entity.element ? 0 === this.orientation ? this.entity.element.calculatedWidth : this.entity.element.calculatedHeight : 0
        }
        ,
        i._getHandleLength = function() {
            return this._getTrackLength() * this.handleSize
        }
        ,
        i._getHandlePosition = function() {
            return this._scrollValueToHandlePosition(this.value)
        }
        ,
        i._getSign = function() {
            return 0 === this.orientation ? 1 : -1
        }
        ,
        i._getAxis = function() {
            return 0 === this.orientation ? "x" : "y"
        }
        ,
        i._getDimension = function() {
            return 0 === this.orientation ? "width" : "height"
        }
        ,
        i._getOppositeDimension = function() {
            return 0 === this.orientation ? "height" : "width"
        }
        ,
        i._destroyDragHelper = function() {
            this._handleDragHelper && this._handleDragHelper.destroy()
        }
        ,
        i._setHandleDraggingEnabled = function(t) {
            this._handleDragHelper && (this._handleDragHelper.enabled = t)
        }
        ,
        i.onEnable = function() {
            this._handleReference.onParentComponentEnable(),
            this._setHandleDraggingEnabled(!0)
        }
        ,
        i.onDisable = function() {
            this._setHandleDraggingEnabled(!1)
        }
        ,
        i.onRemove = function() {
            this._destroyDragHelper(),
            this._toggleLifecycleListeners("off")
        }
        ,
        e
    }(gd)
      , yg = function() {
        this.enabled = !0
    }
      , xg = [{
        name: "enabled",
        type: "boolean"
    }, {
        name: "orientation",
        type: "number"
    }, {
        name: "value",
        type: "number"
    }, {
        name: "handleSize",
        type: "number"
    }, {
        name: "handleEntity",
        type: "entity"
    }]
      , bg = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "scrollbar",
            i.ComponentType = vg,
            i.DataType = yg,
            i.schema = xg,
            i.on("beforeremove", i._onRemoveComponent, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            t.prototype.initializeComponentData.call(this, e, i, xg)
        }
        ,
        i._onRemoveComponent = function(t, e) {
            e.onRemove()
        }
        ,
        e
    }(vd);
    gd._buildAccessors(vg.prototype, xg);
    function Sg(t, e) {
        return t % e || 0
    }
    var Tg = function(t) {
        function e(e, i, n) {
            var s;
            return (s = t.call(this) || this)._manager = e,
            s._volume = void 0 !== n.volume ? it.clamp(Number(n.volume) || 0, 0, 1) : 1,
            s._pitch = void 0 !== n.pitch ? Math.max(.01, Number(n.pitch) || 0) : 1,
            s._loop = !(void 0 === n.loop || !n.loop),
            s._sound = i,
            s._state = 2,
            s._suspended = !1,
            s._suspendEndEvent = !1,
            s._suspendInstanceEvents = !1,
            s._playWhenLoaded = !0,
            s._startTime = Math.max(0, Number(n.startTime) || 0),
            s._duration = Math.max(0, Number(n.duration) || 0),
            s._startOffset = null,
            s.source = null,
            s._onPlayCallback = n.onPlay,
            s._onPauseCallback = n.onPause,
            s._onResumeCallback = n.onResume,
            s._onStopCallback = n.onStop,
            s._onEndCallback = n.onEnd,
            gh() ? (s._startedAt = 0,
            s._currentTime = 0,
            s._currentOffset = 0,
            s._inputNode = null,
            s._connectorNode = null,
            s._firstNode = null,
            s._lastNode = null,
            s._initializeNodes(),
            s._endedHandler = s._onEnded.bind(j(s))) : (s._isReady = !1,
            s._loadedMetadataHandler = s._onLoadedMetadata.bind(j(s)),
            s._timeUpdateHandler = s._onTimeUpdate.bind(j(s)),
            s._endedHandler = s._onEnded.bind(j(s)),
            s._createSource()),
            s
        }
        H(e, t);
        var i = e.prototype;
        return i._onPlay = function() {
            this.fire("play"),
            this._onPlayCallback && this._onPlayCallback(this)
        }
        ,
        i._onPause = function() {
            this.fire("pause"),
            this._onPauseCallback && this._onPauseCallback(this)
        }
        ,
        i._onResume = function() {
            this.fire("resume"),
            this._onResumeCallback && this._onResumeCallback(this)
        }
        ,
        i._onStop = function() {
            this.fire("stop"),
            this._onStopCallback && this._onStopCallback(this)
        }
        ,
        i._onEnded = function() {
            this._suspendEndEvent ? this._suspendEndEvent = !1 : (this.fire("end"),
            this._onEndCallback && this._onEndCallback(this),
            this.stop())
        }
        ,
        i._onManagerVolumeChange = function() {
            this.volume = this._volume
        }
        ,
        i._onManagerSuspend = function() {
            0 !== this._state || this._suspended || (this._suspended = !0,
            this.pause())
        }
        ,
        i._onManagerResume = function() {
            this._suspended && (this._suspended = !1,
            this.resume())
        }
        ,
        G(e, [{
            key: "loop",
            get: function() {
                return this._loop
            },
            set: function(t) {
                this._loop = !!t,
                this.source && (this.source.loop = this._loop)
            }
        }, {
            key: "startTime",
            get: function() {
                return this._startTime
            },
            set: function(t) {
                this._startTime = Math.max(0, Number(t) || 0);
                var e = 0 === this._state;
                this.stop(),
                e && this.play()
            }
        }, {
            key: "duration",
            get: function() {
                return this._sound ? this._duration ? Sg(this._duration, this._sound.duration) : this._sound.duration : 0
            },
            set: function(t) {
                this._duration = Math.max(0, Number(t) || 0);
                var e = 0 === this._state;
                this.stop(),
                e && this.play()
            }
        }, {
            key: "isPlaying",
            get: function() {
                return 0 === this._state
            }
        }, {
            key: "isPaused",
            get: function() {
                return 1 === this._state
            }
        }, {
            key: "isStopped",
            get: function() {
                return 2 === this._state
            }
        }, {
            key: "isSuspended",
            get: function() {
                return this._suspended
            }
        }]),
        e
    }(u);
    gh() ? (Object.assign(Tg.prototype, {
        _initializeNodes: function() {
            this.gain = this._manager.context.createGain(),
            this._inputNode = this.gain,
            this._connectorNode = this.gain,
            this._connectorNode.connect(this._manager.context.destination)
        },
        play: function() {
            2 !== this._state && this.stop(),
            this.source || this._createSource();
            var t = Sg(this._startOffset, this.duration);
            return t = Sg(this._startTime + t, this._sound.duration),
            this._startOffset = null,
            this._duration ? this.source.start(0, t, this._duration) : this.source.start(0, t),
            this._startedAt = this._manager.context.currentTime,
            this._currentTime = 0,
            this._currentOffset = t,
            this._state = 0,
            this._playWhenLoaded = !1,
            this.volume = this._volume,
            this.loop = this._loop,
            this.pitch = this._pitch,
            this._manager.on("volumechange", this._onManagerVolumeChange, this),
            this._manager.on("suspend", this._onManagerSuspend, this),
            this._manager.on("resume", this._onManagerResume, this),
            this._manager.on("destroy", this._onManagerDestroy, this),
            this._manager.suspended && this._onManagerSuspend(),
            this._suspendInstanceEvents || this._onPlay(),
            !0
        },
        pause: function() {
            return this._playWhenLoaded = !1,
            !(0 !== this._state || !this.source) && (this._updateCurrentTime(),
            this._state = 1,
            this._suspendEndEvent = !0,
            this.source.stop(0),
            this.source = null,
            this._startOffset = null,
            this._suspendInstanceEvents || this._onPause(),
            !0)
        },
        resume: function() {
            if (1 !== this._state)
                return !1;
            this.source || this._createSource();
            var t = this.currentTime;
            return null !== this._startOffset && (t = Sg(this._startOffset, this.duration),
            t = Sg(this._startTime + t, this._sound.duration),
            this._startOffset = null),
            this._duration ? this.source.start(0, t, this._duration) : this.source.start(0, t),
            this._state = 0,
            this._startedAt = this._manager.context.currentTime,
            this._currentOffset = t,
            this.volume = this._volume,
            this.loop = this._loop,
            this.pitch = this._pitch,
            this._playWhenLoaded = !1,
            this._suspendInstanceEvents || this._onResume(),
            !0
        },
        stop: function() {
            return this._playWhenLoaded = !1,
            !(2 === this._state || !this.source) && (this._manager.off("volumechange", this._onManagerVolumeChange, this),
            this._manager.off("suspend", this._onManagerSuspend, this),
            this._manager.off("resume", this._onManagerResume, this),
            this._manager.off("destroy", this._onManagerDestroy, this),
            this._startedAt = 0,
            this._currentTime = 0,
            this._currentOffset = 0,
            this._startOffset = null,
            this._suspendEndEvent = !0,
            0 === this._state && this.source.stop(0),
            this.source = null,
            this._state = 2,
            this._suspendInstanceEvents || this._onStop(),
            !0)
        },
        setExternalNodes: function(t, e) {
            if (t) {
                e || (e = t);
                var i = this._manager.context.destination;
                this._firstNode !== t && (this._firstNode ? this._connectorNode.disconnect(this._firstNode) : this._connectorNode.disconnect(i),
                this._firstNode = t,
                this._connectorNode.connect(t)),
                this._lastNode !== e && (this._lastNode && this._lastNode.disconnect(i),
                this._lastNode = e,
                this._lastNode.connect(i))
            } else
                console.error("The firstNode must be a valid Audio Node")
        },
        clearExternalNodes: function() {
            var t = this._manager.context.destination;
            this._firstNode && (this._connectorNode.disconnect(this._firstNode),
            this._firstNode = null),
            this._lastNode && (this._lastNode.disconnect(t),
            this._lastNode = null),
            this._connectorNode.connect(t)
        },
        getExternalNodes: function() {
            return [this._firstNode, this._lastNode]
        },
        _createSource: function() {
            if (!this._sound)
                return null;
            var t = this._manager.context;
            return this._sound.buffer && (this.source = t.createBufferSource(),
            this.source.buffer = this._sound.buffer,
            this.source.connect(this._inputNode),
            this.source.onended = this._endedHandler,
            this.source.loopStart = Sg(this._startTime, this.source.buffer.duration),
            this._duration && (this.source.loopEnd = Math.max(this.source.loopStart, Sg(this._startTime + this._duration, this.source.buffer.duration)))),
            this.source
        },
        _updateCurrentTime: function() {
            this._currentTime = Sg((this._manager.context.currentTime - this._startedAt) * this._pitch + this._currentOffset, this.duration)
        },
        _onManagerDestroy: function() {
            this.source && 0 === this._state && (this.source.stop(0),
            this.source = null)
        }
    }),
    Object.defineProperty(Tg.prototype, "volume", {
        get: function() {
            return this._volume
        },
        set: function(t) {
            t = it.clamp(t, 0, 1),
            this._volume = t,
            this.gain && (this.gain.gain.value = t * this._manager.volume)
        }
    }),
    Object.defineProperty(Tg.prototype, "pitch", {
        get: function() {
            return this._pitch
        },
        set: function(t) {
            this._currentOffset = this.currentTime,
            this._startedAt = this._manager.context.currentTime,
            this._pitch = Math.max(Number(t) || 0, .01),
            this.source && (this.source.playbackRate.value = this._pitch)
        }
    }),
    Object.defineProperty(Tg.prototype, "sound", {
        get: function() {
            return this._sound
        },
        set: function(t) {
            this._sound = t,
            2 !== this._state ? this.stop() : this._createSource()
        }
    }),
    Object.defineProperty(Tg.prototype, "currentTime", {
        get: function() {
            return null !== this._startOffset ? this._startOffset : 1 === this._state ? this._currentTime : 2 !== this._state && this.source ? (this._updateCurrentTime(),
            this._currentTime) : 0
        },
        set: function(t) {
            if (!(t < 0))
                if (0 === this._state) {
                    var e = this._suspendInstanceEvents;
                    this._suspendInstanceEvents = !0,
                    this.stop(),
                    this._startOffset = t,
                    this.play(),
                    this._suspendInstanceEvents = e
                } else
                    this._startOffset = t,
                    this._currentTime = t
        }
    })) : (Object.assign(Tg.prototype, {
        play: function() {
            return 2 !== this._state && this.stop(),
            !(!this.source && !this._createSource()) && (this.volume = this._volume,
            this.pitch = this._pitch,
            this.loop = this._loop,
            this.source.play(),
            this._state = 0,
            this._playWhenLoaded = !1,
            this._manager.on("volumechange", this._onManagerVolumeChange, this),
            this._manager.on("suspend", this._onManagerSuspend, this),
            this._manager.on("resume", this._onManagerResume, this),
            this._manager.on("destroy", this._onManagerDestroy, this),
            this._manager.suspended && this._onManagerSuspend(),
            this._suspendInstanceEvents || this._onPlay(),
            !0)
        },
        pause: function() {
            return !(!this.source || 0 !== this._state) && (this._suspendEndEvent = !0,
            this.source.pause(),
            this._playWhenLoaded = !1,
            this._state = 1,
            this._startOffset = null,
            this._suspendInstanceEvents || this._onPause(),
            !0)
        },
        resume: function() {
            return !(!this.source || 1 !== this._state) && (this._state = 0,
            this._playWhenLoaded = !1,
            this.source.paused && (this.source.play(),
            this._suspendInstanceEvents || this._onResume()),
            !0)
        },
        stop: function() {
            return !(!this.source || 2 === this._state) && (this._manager.off("volumechange", this._onManagerVolumeChange, this),
            this._manager.off("suspend", this._onManagerSuspend, this),
            this._manager.off("resume", this._onManagerResume, this),
            this._manager.off("destroy", this._onManagerDestroy, this),
            this._suspendEndEvent = !0,
            this.source.pause(),
            this._playWhenLoaded = !1,
            this._state = 2,
            this._startOffset = null,
            this._suspendInstanceEvents || this._onStop(),
            !0)
        },
        setExternalNodes: function() {},
        clearExternalNodes: function() {},
        getExternalNodes: function() {
            return [null, null]
        },
        _onLoadedMetadata: function() {
            this.source.removeEventListener("loadedmetadata", this._loadedMetadataHandler),
            this._isReady = !0;
            var t = Sg(this._startOffset, this.duration);
            t = Sg(this._startTime + t, this._sound.duration),
            this._startOffset = null,
            this.source.currentTime = t
        },
        _createSource: function() {
            return this._sound && this._sound.audio && (this._isReady = !1,
            this.source = this._sound.audio.cloneNode(!0),
            this.source.addEventListener("loadedmetadata", this._loadedMetadataHandler),
            this.source.addEventListener("timeupdate", this._timeUpdateHandler),
            this.source.onended = this._endedHandler),
            this.source
        },
        _onTimeUpdate: function() {
            this._duration && this.source.currentTime > Sg(this._startTime + this._duration, this.source.duration) && (this.loop ? this.source.currentTime = Sg(this._startTime, this.source.duration) : (this.source.removeEventListener("timeupdate", this._timeUpdateHandler),
            this.source.pause(),
            this._onEnded()))
        },
        _onManagerDestroy: function() {
            this.source && this.source.pause()
        }
    }),
    Object.defineProperty(Tg.prototype, "volume", {
        get: function() {
            return this._volume
        },
        set: function(t) {
            t = it.clamp(t, 0, 1),
            this._volume = t,
            this.source && (this.source.volume = t * this._manager.volume)
        }
    }),
    Object.defineProperty(Tg.prototype, "pitch", {
        get: function() {
            return this._pitch
        },
        set: function(t) {
            this._pitch = Math.max(Number(t) || 0, .01),
            this.source && (this.source.playbackRate = this._pitch)
        }
    }),
    Object.defineProperty(Tg.prototype, "sound", {
        get: function() {
            return this._sound
        },
        set: function(t) {
            this.stop(),
            this._sound = t
        }
    }),
    Object.defineProperty(Tg.prototype, "currentTime", {
        get: function() {
            return null !== this._startOffset ? this._startOffset : 2 !== this._state && this.source ? this.source.currentTime - this._startTime : 0
        },
        set: function(t) {
            t < 0 || (this._startOffset = t,
            this.source && this._isReady && (this.source.currentTime = Sg(this._startTime + Sg(t, this.duration), this._sound.duration),
            this._startOffset = null))
        }
    }));
    var wg = function(t) {
        function e(e, i, n) {
            var s;
            return s = t.call(this, e, i, n) || this,
            n = n || {},
            s._position = new lt,
            n.position && (s.position = n.position),
            s._velocity = new lt,
            n.velocity && (s.velocity = n.velocity),
            s.maxDistance = void 0 !== n.maxDistance ? Number(n.maxDistance) : 1e4,
            s.refDistance = void 0 !== n.refDistance ? Number(n.refDistance) : 1,
            s.rollOffFactor = void 0 !== n.rollOffFactor ? Number(n.rollOffFactor) : 1,
            s.distanceModel = void 0 !== n.distanceModel ? n.distanceModel : yh,
            s
        }
        return H(e, t),
        e
    }(Tg);
    if (gh())
        Object.assign(wg.prototype, {
            _initializeNodes: function() {
                this.gain = this._manager.context.createGain(),
                this.panner = this._manager.context.createPanner(),
                this.panner.connect(this.gain),
                this._inputNode = this.panner,
                this._connectorNode = this.gain,
                this._connectorNode.connect(this._manager.context.destination)
            }
        }),
        Object.defineProperty(wg.prototype, "position", {
            get: function() {
                return this._position
            },
            set: function(t) {
                this._position.copy(t),
                this.panner.setPosition(t.x, t.y, t.z)
            }
        }),
        Object.defineProperty(wg.prototype, "velocity", {
            get: function() {
                return this._velocity
            },
            set: function(t) {
                this._velocity.copy(t),
                this.panner.setVelocity(t.x, t.y, t.z)
            }
        }),
        Object.defineProperty(wg.prototype, "maxDistance", {
            get: function() {
                return this.panner.maxDistance
            },
            set: function(t) {
                this.panner.maxDistance = t
            }
        }),
        Object.defineProperty(wg.prototype, "refDistance", {
            get: function() {
                return this.panner.refDistance
            },
            set: function(t) {
                this.panner.refDistance = t
            }
        }),
        Object.defineProperty(wg.prototype, "rollOffFactor", {
            get: function() {
                return this.panner.rolloffFactor
            },
            set: function(t) {
                this.panner.rolloffFactor = t
            }
        }),
        Object.defineProperty(wg.prototype, "distanceModel", {
            get: function() {
                return this.panner.distanceModel
            },
            set: function(t) {
                this.panner.distanceModel = t
            }
        });
    else {
        var Mg = new lt;
        Object.defineProperty(wg.prototype, "position", {
            get: function() {
                return this._position
            },
            set: function(t) {
                if (this._position.copy(t),
                this.source) {
                    var e = function(t, e, i, n, s, a) {
                        var r = (Mg = Mg.sub2(t, e)).length();
                        if (r < i)
                            return 1;
                        if (r > n)
                            return 0;
                        var o = 0;
                        return a === yh ? o = 1 - s * (r - i) / (n - i) : a === xh ? o = i / (i + s * (r - i)) : a === bh && (o = Math.pow(r / i, -s)),
                        it.clamp(o, 0, 1)
                    }(this._manager.listener.getPosition(), this._position, this.refDistance, this.maxDistance, this.rollOffFactor, this.distanceModel)
                      , i = this.volume;
                    this.source.volume = i * e * this._manager.volume
                }
            }
        }),
        Object.defineProperty(wg.prototype, "velocity", {
            get: function() {
                return this._velocity
            },
            set: function(t) {
                this._velocity.copy(t)
            }
        }),
        Object.defineProperty(wg.prototype, "maxDistance", {
            get: function() {
                return this._maxDistance
            },
            set: function(t) {
                this._maxDistance = t
            }
        }),
        Object.defineProperty(wg.prototype, "refDistance", {
            get: function() {
                return this._refDistance
            },
            set: function(t) {
                this._refDistance = t
            }
        }),
        Object.defineProperty(wg.prototype, "rollOffFactor", {
            get: function() {
                return this._rollOffFactor
            },
            set: function(t) {
                this._rollOffFactor = t
            }
        }),
        Object.defineProperty(wg.prototype, "distanceModel", {
            get: function() {
                return this._distanceModel
            },
            set: function(t) {
                this._distanceModel = t
            }
        })
    }
    var Ag = {
        volume: 0,
        pitch: 0,
        loop: !1,
        startTime: 0,
        duration: 0,
        position: new lt,
        maxDistance: 0,
        refDistance: 0,
        rollOffFactor: 0,
        distanceModel: 0,
        onPlay: null,
        onPause: null,
        onResume: null,
        onStop: null,
        onEnd: null
    }
      , Cg = function(t) {
        function e(e, i, n) {
            var s;
            return void 0 === i && (i = "Untitled"),
            void 0 === n && (n = {}),
            (s = t.call(this) || this)._component = e,
            s._assets = e.system.app.assets,
            s._manager = e.system.manager,
            s.name = i,
            s._volume = void 0 !== n.volume ? it.clamp(Number(n.volume) || 0, 0, 1) : 1,
            s._pitch = void 0 !== n.pitch ? Math.max(.01, Number(n.pitch) || 0) : 1,
            s._loop = !(void 0 === n.loop || !n.loop),
            s._duration = n.duration > 0 ? n.duration : null,
            s._startTime = Math.max(0, Number(n.startTime) || 0),
            s._overlap = !!n.overlap,
            s._autoPlay = !!n.autoPlay,
            s._firstNode = null,
            s._lastNode = null,
            s._asset = n.asset,
            s._asset instanceof Kh && (s._asset = s._asset.id),
            s._onInstancePlayHandler = s._onInstancePlay.bind(j(s)),
            s._onInstancePauseHandler = s._onInstancePause.bind(j(s)),
            s._onInstanceResumeHandler = s._onInstanceResume.bind(j(s)),
            s._onInstanceStopHandler = s._onInstanceStop.bind(j(s)),
            s._onInstanceEndHandler = s._onInstanceEnd.bind(j(s)),
            s.instances = [],
            s
        }
        H(e, t);
        var i = e.prototype;
        return i.play = function() {
            if (this.overlap || this.stop(),
            this.isLoaded || this._hasAsset()) {
                var t = this._createInstance();
                if (this.instances.push(t),
                this.isLoaded)
                    t.play();
                else {
                    var e = function(e) {
                        var i = t._playWhenLoaded;
                        t.sound = e,
                        i && t.play()
                    };
                    this.off("load", e),
                    this.once("load", e),
                    this.load()
                }
                return t
            }
        }
        ,
        i.pause = function() {
            for (var t = !1, e = this.instances, i = 0, n = e.length; i < n; i++)
                e[i].pause() && (t = !0);
            return t
        }
        ,
        i.resume = function() {
            for (var t = !1, e = this.instances, i = 0, n = e.length; i < n; i++)
                e[i].resume() && (t = !0);
            return t
        }
        ,
        i.stop = function() {
            for (var t = !1, e = this.instances, i = e.length; i--; )
                e[i].stop(),
                t = !0;
            return e.length = 0,
            t
        }
        ,
        i.load = function() {
            if (this._hasAsset()) {
                var t = this._assets.get(this._asset);
                if (!t)
                    return this._assets.off("add:" + this._asset, this._onAssetAdd, this),
                    void this._assets.once("add:" + this._asset, this._onAssetAdd, this);
                if (t.off("remove", this._onAssetRemoved, this),
                t.on("remove", this._onAssetRemoved, this),
                !t.resource)
                    return t.off("load", this._onAssetLoad, this),
                    t.once("load", this._onAssetLoad, this),
                    void this._assets.load(t);
                this.fire("load", t.resource)
            }
        }
        ,
        i.setExternalNodes = function(t, e) {
            if (t) {
                if (e || (e = t),
                this._firstNode = t,
                this._lastNode = e,
                !this._overlap)
                    for (var i = this.instances, n = 0, s = i.length; n < s; n++)
                        i[n].setExternalNodes(t, e)
            } else
                console.error("The firstNode must have a valid AudioNode")
        }
        ,
        i.clearExternalNodes = function() {
            if (this._firstNode = null,
            this._lastNode = null,
            !this._overlap)
                for (var t = this.instances, e = 0, i = t.length; e < i; e++)
                    t[e].clearExternalNodes()
        }
        ,
        i.getExternalNodes = function() {
            return [this._firstNode, this._lastNode]
        }
        ,
        i._hasAsset = function() {
            return null != this._asset
        }
        ,
        i._createInstance = function() {
            var t = null
              , e = this._component
              , i = null;
            if (this._hasAsset()) {
                var n = this._assets.get(this._asset);
                n && (i = n.resource)
            }
            var s = Ag;
            return s.volume = this._volume * e.volume,
            s.pitch = this._pitch * e.pitch,
            s.loop = this._loop,
            s.startTime = this._startTime,
            s.duration = this._duration,
            s.onPlay = this._onInstancePlayHandler,
            s.onPause = this._onInstancePauseHandler,
            s.onResume = this._onInstanceResumeHandler,
            s.onStop = this._onInstanceStopHandler,
            s.onEnd = this._onInstanceEndHandler,
            e.positional ? (s.position.copy(e.entity.getPosition()),
            s.maxDistance = e.maxDistance,
            s.refDistance = e.refDistance,
            s.rollOffFactor = e.rollOffFactor,
            s.distanceModel = e.distanceModel,
            t = new wg(this._manager,i,s)) : t = new Tg(this._manager,i,s),
            this._firstNode && t.setExternalNodes(this._firstNode, this._lastNode),
            t
        }
        ,
        i._onInstancePlay = function(t) {
            this.fire("play", t),
            this._component.fire("play", this, t)
        }
        ,
        i._onInstancePause = function(t) {
            this.fire("pause", t),
            this._component.fire("pause", this, t)
        }
        ,
        i._onInstanceResume = function(t) {
            this.fire("resume", t),
            this._component.fire("resume", this, t)
        }
        ,
        i._onInstanceStop = function(t) {
            var e = this.instances.indexOf(t);
            -1 !== e && this.instances.splice(e, 1),
            this.fire("stop", t),
            this._component.fire("stop", this, t)
        }
        ,
        i._onInstanceEnd = function(t) {
            var e = this.instances.indexOf(t);
            -1 !== e && this.instances.splice(e, 1),
            this.fire("end", t),
            this._component.fire("end", this, t)
        }
        ,
        i._onAssetAdd = function(t) {
            this.load()
        }
        ,
        i._onAssetLoad = function(t) {
            this.load()
        }
        ,
        i._onAssetRemoved = function(t) {
            t.off("remove", this._onAssetRemoved, this),
            this._assets.off("add:" + t.id, this._onAssetAdd, this),
            this.stop()
        }
        ,
        i.updatePosition = function(t) {
            for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                e[i].position = t
        }
        ,
        G(e, [{
            key: "volume",
            get: function() {
                return this._volume
            },
            set: function(t) {
                if (this._volume = it.clamp(Number(t) || 0, 0, 1),
                !this._overlap)
                    for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                        e[i].volume = this._volume * this._component.volume
            }
        }, {
            key: "pitch",
            get: function() {
                return this._pitch
            },
            set: function(t) {
                if (this._pitch = Math.max(Number(t) || 0, .01),
                !this._overlap)
                    for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                        e[i].pitch = this.pitch * this._component.pitch
            }
        }, {
            key: "loop",
            get: function() {
                return this._loop
            },
            set: function(t) {
                this._loop = !!t;
                for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                    e[i].loop = this._loop
            }
        }, {
            key: "autoPlay",
            get: function() {
                return this._autoPlay
            },
            set: function(t) {
                this._autoPlay = !!t
            }
        }, {
            key: "overlap",
            get: function() {
                return this._overlap
            },
            set: function(t) {
                this._overlap = !!t
            }
        }, {
            key: "startTime",
            get: function() {
                return this._startTime
            },
            set: function(t) {
                if (this._startTime = Math.max(0, Number(t) || 0),
                !this._overlap)
                    for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                        e[i].startTime = this._startTime
            }
        }, {
            key: "duration",
            get: function() {
                var t = 0;
                if (this._hasAsset()) {
                    var e = this._assets.get(this._asset);
                    t = e.resource ? e.resource.duration : 0
                }
                return null != this._duration ? this._duration % (t || 1) : t
            },
            set: function(t) {
                if (this._duration = Math.max(0, Number(t) || 0) || null,
                !this._overlap)
                    for (var e = this.instances, i = 0, n = e.length; i < n; i++)
                        e[i].duration = this._duration
            }
        }, {
            key: "asset",
            get: function() {
                return this._asset
            },
            set: function(t) {
                var e = this._asset;
                if (e) {
                    this._assets.off("add:" + e, this._onAssetAdd, this);
                    var i = this._assets.get(e);
                    i && i.off("remove", this._onAssetRemoved, this)
                }
                this._asset = t,
                this._asset instanceof Kh && (this._asset = this._asset.id),
                this._hasAsset() && this._component.enabled && this._component.entity.enabled && this.load()
            }
        }, {
            key: "isLoaded",
            get: function() {
                if (this._hasAsset()) {
                    var t = this._assets.get(this._asset);
                    if (t)
                        return !!t.resource
                }
                return !1
            }
        }, {
            key: "isPlaying",
            get: function() {
                for (var t = this.instances, e = 0, i = t.length; e < i; e++)
                    if (t[e].isPlaying)
                        return !0;
                return !1
            }
        }, {
            key: "isPaused",
            get: function() {
                var t = this.instances
                  , e = t.length;
                if (0 === e)
                    return !1;
                for (var i = 0; i < e; i++)
                    if (!t[i].isPaused)
                        return !1;
                return !0
            }
        }, {
            key: "isStopped",
            get: function() {
                for (var t = this.instances, e = 0, i = t.length; e < i; e++)
                    if (!t[e].isStopped)
                        return !1;
                return !0
            }
        }]),
        e
    }(u)
      , Eg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._volume = 1,
            n._pitch = 1,
            n._positional = !0,
            n._refDistance = 1,
            n._maxDistance = 1e4,
            n._rollOffFactor = 1,
            n._distanceModel = yh,
            n._slots = {},
            n._playingBeforeDisable = {},
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.onEnable = function() {
            if (!this.system._inTools) {
                var t = this._slots
                  , e = this._playingBeforeDisable;
                for (var i in t) {
                    var n = t[i];
                    n.autoPlay && n.isStopped ? n.play() : e[i] ? n.resume() : n.isLoaded || n.load()
                }
            }
        }
        ,
        i.onDisable = function() {
            var t = this._slots
              , e = {};
            for (var i in t)
                t[i].overlap || t[i].isPlaying && (t[i].pause(),
                e[i] = !0);
            this._playingBeforeDisable = e
        }
        ,
        i.onRemove = function() {
            this.off()
        }
        ,
        i.addSlot = function(t, e) {
            var i = this._slots;
            if (i[t])
                return null;
            var n = new Cg(this,t,e);
            return i[t] = n,
            n.autoPlay && this.enabled && this.entity.enabled && n.play(),
            n
        }
        ,
        i.removeSlot = function(t) {
            var e = this._slots;
            e[t] && (e[t].stop(),
            delete e[t])
        }
        ,
        i.slot = function(t) {
            return this._slots[t]
        }
        ,
        i.play = function(t) {
            if (!this.enabled || !this.entity.enabled)
                return null;
            var e = this._slots[t];
            return e ? e.play() : null
        }
        ,
        i.pause = function(t) {
            var e = this._slots;
            if (t) {
                var i = e[t];
                if (!i)
                    return;
                i.pause()
            } else
                for (var n in e)
                    e[n].pause()
        }
        ,
        i.resume = function(t) {
            var e = this._slots;
            if (t) {
                var i = e[t];
                if (!i)
                    return;
                i.isPaused && i.resume()
            } else
                for (var n in e)
                    e[n].resume()
        }
        ,
        i.stop = function(t) {
            var e = this._slots;
            if (t) {
                var i = e[t];
                if (!i)
                    return;
                i.stop()
            } else
                for (var n in e)
                    e[n].stop()
        }
        ,
        G(e, [{
            key: "positional",
            get: function() {
                return this._positional
            },
            set: function(t) {
                this._positional = t;
                var e = this._slots;
                for (var i in e) {
                    var n = e[i];
                    if (!n.overlap)
                        for (var s = n.instances, a = s.length - 1; a >= 0; a--) {
                            var r = s[a].isPlaying || s[a].isSuspended
                              , o = s[a].currentTime;
                            r && s[a].stop();
                            var h = n._createInstance();
                            r && (h.play(),
                            h.currentTime = o),
                            s.push(h)
                        }
                }
            }
        }, {
            key: "slots",
            get: function() {
                return this._slots
            },
            set: function(t) {
                var e = this._slots;
                if (e)
                    for (var i in e)
                        e[i].stop();
                var n = {};
                for (var s in t)
                    t[s]instanceof Cg ? n[t[s].name] = t[s] : t[s].name && (n[t[s].name] = new Cg(this,t[s].name,t[s]));
                this._slots = n,
                this.enabled && this.entity.enabled && this.onEnable()
            }
        }]),
        e
    }(gd);
    function Pg(t, e) {
        Object.defineProperty(Eg.prototype, t, {
            get: function() {
                return this[e]
            },
            set: function(i) {
                this[e] = i;
                var n = this._slots;
                for (var s in n) {
                    var a = n[s];
                    if (!a.overlap)
                        for (var r = a.instances, o = 0, h = r.length; o < h; o++)
                            r[o][t] = i
                }
            }
        })
    }
    function Rg(t, e) {
        Object.defineProperty(Eg.prototype, t, {
            get: function() {
                return this[e]
            },
            set: function(i) {
                this[e] = i;
                var n = this._slots;
                for (var s in n) {
                    var a = n[s];
                    if (!a.overlap)
                        for (var r = a.instances, o = 0, h = r.length; o < h; o++)
                            r[o][t] = a[t] * i
                }
            }
        })
    }
    Rg("pitch", "_pitch"),
    Rg("volume", "_volume"),
    Pg("refDistance", "_refDistance"),
    Pg("maxDistance", "_maxDistance"),
    Pg("rollOffFactor", "_rollOffFactor"),
    Pg("distanceModel", "_distanceModel");
    var Ig = function() {
        this.enabled = !0
    }
      , Lg = ["enabled"]
      , Dg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e) || this).id = "sound",
            n.ComponentType = Eg,
            n.DataType = Ig,
            n.schema = Lg,
            n.manager = i,
            n.app.systems.on("update", n.onUpdate, j(n)),
            n.on("beforeremove", n.onBeforeRemove, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(e, i, n) {
            n = ["volume", "pitch", "positional", "refDistance", "maxDistance", "rollOffFactor", "distanceModel", "slots"];
            for (var s = 0; s < n.length; s++)
                i.hasOwnProperty(n[s]) && (e[n[s]] = i[n[s]]);
            t.prototype.initializeComponentData.call(this, e, i, ["enabled"])
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.sound
              , n = i.slots
              , s = {};
            for (var a in n) {
                var r = n[a];
                s[a] = {
                    name: r.name,
                    volume: r.volume,
                    pitch: r.pitch,
                    loop: r.loop,
                    duration: r.duration,
                    startTime: r.startTime,
                    overlap: r.overlap,
                    autoPlay: r.autoPlay,
                    asset: r.asset
                }
            }
            var o = {
                distanceModel: i.distanceModel,
                enabled: i.enabled,
                maxDistance: i.maxDistance,
                pitch: i.pitch,
                positional: i.positional,
                refDistance: i.refDistance,
                rollOffFactor: i.rollOffFactor,
                slots: s,
                volume: i.volume
            };
            return this.addComponent(e, o)
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i].entity;
                    if (n.enabled) {
                        var s = n.sound;
                        if (s.enabled && s.positional) {
                            var a = n.getPosition()
                              , r = s.slots;
                            for (var o in r)
                                r[o].updatePosition(a)
                        }
                    }
                }
        }
        ,
        i.onBeforeRemove = function(t, e) {
            var i = e.slots;
            for (var n in i)
                i[n].overlap || i[n].stop();
            e.onRemove()
        }
        ,
        i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this)
        }
        ,
        G(e, [{
            key: "volume",
            get: function() {
                return this.manager.volume
            },
            set: function(t) {
                this.manager.volume = t
            }
        }, {
            key: "context",
            get: function() {
                return gh() ? this.manager.context : null
            }
        }]),
        e
    }(vd);
    gd._buildAccessors(Eg.prototype, Lg);
    var kg = "simple"
      , Og = "animated"
      , Fg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this) || this)._component = e,
            n._frame = 0,
            n._sprite = null,
            n._spriteAsset = null,
            n.spriteAsset = i.spriteAsset,
            n.name = i.name,
            n.fps = i.fps || 0,
            n.loop = i.loop || !1,
            n._playing = !1,
            n._paused = !1,
            n._time = 0,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i._onSpriteAssetAdded = function(t) {
            this._component.system.app.assets.off("add:" + t.id, this._onSpriteAssetAdded, this),
            this._spriteAsset === t.id && this._bindSpriteAsset(t)
        }
        ,
        i._bindSpriteAsset = function(t) {
            t.on("load", this._onSpriteAssetLoad, this),
            t.on("remove", this._onSpriteAssetRemove, this),
            t.resource ? this._onSpriteAssetLoad(t) : this._component.system.app.assets.load(t)
        }
        ,
        i._unbindSpriteAsset = function(t) {
            t.off("load", this._onSpriteAssetLoad, this),
            t.off("remove", this._onSpriteAssetRemove, this),
            t.resource && t.resource.atlas && this._component.system.app.assets.off("load:" + t.data.textureAtlasAsset, this._onTextureAtlasLoad, this)
        }
        ,
        i._onSpriteAssetLoad = function(t) {
            if (t.resource)
                if (t.resource.atlas)
                    this.sprite = t.resource;
                else {
                    var e = t.data.textureAtlasAsset
                      , i = this._component.system.app.assets;
                    i.off("load:" + e, this._onTextureAtlasLoad, this),
                    i.once("load:" + e, this._onTextureAtlasLoad, this)
                }
            else
                this.sprite = null
        }
        ,
        i._onTextureAtlasLoad = function(t) {
            var e = this._spriteAsset;
            e instanceof Kh ? this._onSpriteAssetLoad(e) : this._onSpriteAssetLoad(this._component.system.app.assets.get(e))
        }
        ,
        i._onSpriteAssetRemove = function(t) {
            this.sprite = null
        }
        ,
        i._onSpriteMeshesChange = function() {
            this._component.currentClip === this && this._component._showFrame(this.frame)
        }
        ,
        i._onSpritePpuChanged = function() {
            this._component.currentClip === this && 0 !== this.sprite.renderMode && this._component._showFrame(this.frame)
        }
        ,
        i._update = function(t) {
            if (0 !== this.fps && this._playing && !this._paused && this._sprite) {
                var e = this.fps < 0 ? -1 : 1
                  , i = this._time + t * this._component.speed * e
                  , n = this.duration
                  , s = i > n || i < 0;
                this._setTime(i);
                var a = this.frame;
                (a = this._sprite ? Math.floor(this._sprite.frameKeys.length * this._time / n) : 0) !== this._frame && this._setFrame(a),
                s && (this.loop ? (this.fire("loop"),
                this._component.fire("loop", this)) : (this._playing = !1,
                this._paused = !1,
                this.fire("end"),
                this._component.fire("end", this)))
            }
        }
        ,
        i._setTime = function(t) {
            this._time = t;
            var e = this.duration;
            this._time < 0 ? this.loop ? this._time = this._time % e + e : this._time = 0 : this._time > e && (this.loop ? this._time %= e : this._time = e)
        }
        ,
        i._setFrame = function(t) {
            this._sprite ? this._frame = it.clamp(t, 0, this._sprite.frameKeys.length - 1) : this._frame = t,
            this._component.currentClip === this && this._component._showFrame(this._frame)
        }
        ,
        i._destroy = function() {
            this._sprite && (this.sprite = null),
            this._spriteAsset && (this.spriteAsset = null)
        }
        ,
        i.play = function() {
            this._playing || (this._playing = !0,
            this._paused = !1,
            this.frame = 0,
            this.fire("play"),
            this._component.fire("play", this))
        }
        ,
        i.pause = function() {
            this._playing && !this._paused && (this._paused = !0,
            this.fire("pause"),
            this._component.fire("pause", this))
        }
        ,
        i.resume = function() {
            this._paused && (this._paused = !1,
            this.fire("resume"),
            this._component.fire("resume", this))
        }
        ,
        i.stop = function() {
            this._playing && (this._playing = !1,
            this._paused = !1,
            this._time = 0,
            this.frame = 0,
            this.fire("stop"),
            this._component.fire("stop", this))
        }
        ,
        G(e, [{
            key: "spriteAsset",
            get: function() {
                return this._spriteAsset
            },
            set: function(t) {
                var e = this._component.system.app.assets
                  , i = t;
                if (t instanceof Kh && (i = t.id),
                this._spriteAsset !== i) {
                    if (this._spriteAsset) {
                        var n = e.get(this._spriteAsset);
                        n && this._unbindSpriteAsset(n)
                    }
                    if (this._spriteAsset = i,
                    this._spriteAsset) {
                        var s = e.get(this._spriteAsset);
                        s ? this._bindSpriteAsset(s) : (this.sprite = null,
                        e.on("add:" + this._spriteAsset, this._onSpriteAssetAdded, this))
                    } else
                        this.sprite = null
                }
            }
        }, {
            key: "sprite",
            get: function() {
                return this._sprite
            },
            set: function(t) {
                var e;
                (this._sprite && (this._sprite.off("set:meshes", this._onSpriteMeshesChange, this),
                this._sprite.off("set:pixelsPerUnit", this._onSpritePpuChanged, this),
                this._sprite.off("set:atlas", this._onSpriteMeshesChange, this),
                this._sprite.atlas && this._sprite.atlas.off("set:texture", this._onSpriteMeshesChange, this)),
                this._sprite = t,
                this._sprite && (this._sprite.on("set:meshes", this._onSpriteMeshesChange, this),
                this._sprite.on("set:pixelsPerUnit", this._onSpritePpuChanged, this),
                this._sprite.on("set:atlas", this._onSpriteMeshesChange, this),
                this._sprite.atlas && this._sprite.atlas.on("set:texture", this._onSpriteMeshesChange, this)),
                this._component.currentClip === this) && (t && t.atlas ? (t.atlas.texture && ((e = this._component._meshInstance) && (e.setParameter("texture_emissiveMap", t.atlas.texture),
                e.setParameter("texture_opacityMap", t.atlas.texture)),
                this._component.enabled && this._component.entity.enabled && this._component._showModel()),
                this.time && this.fps ? this.time = this.time : this.frame = this.frame) : ((e = this._component._meshInstance) && (e.deleteParameter("texture_emissiveMap"),
                e.deleteParameter("texture_opacityMap")),
                this._component._hideModel()))
            }
        }, {
            key: "frame",
            get: function() {
                return this._frame
            },
            set: function(t) {
                this._setFrame(t);
                var e = this.fps || Number.MIN_VALUE;
                this._setTime(this._frame / e)
            }
        }, {
            key: "isPlaying",
            get: function() {
                return this._playing
            }
        }, {
            key: "isPaused",
            get: function() {
                return this._paused
            }
        }, {
            key: "duration",
            get: function() {
                if (this._sprite) {
                    var t = this.fps || Number.MIN_VALUE;
                    return this._sprite.frameKeys.length / Math.abs(t)
                }
                return 0
            }
        }, {
            key: "time",
            get: function() {
                return this._time
            },
            set: function(t) {
                this._setTime(t),
                this._sprite ? this.frame = Math.min(this._sprite.frameKeys.length - 1, Math.floor(this._time * Math.abs(this.fps))) : this.frame = 0
            }
        }]),
        e
    }(u)
      , Bg = "texture_emissiveMap"
      , Ng = "texture_opacityMap"
      , Ug = "material_emissive"
      , zg = "material_opacity"
      , Vg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._type = kg,
            n._material = e.defaultMaterial,
            n._color = new at(1,1,1,1),
            n._colorUniform = new Float32Array(3),
            n._speed = 1,
            n._flipX = !1,
            n._flipY = !1,
            n._width = 1,
            n._height = 1,
            n._drawOrder = 0,
            n._layers = [0],
            n._outerScale = new ut(1,1),
            n._outerScaleUniform = new Float32Array(2),
            n._innerOffset = new dt,
            n._innerOffsetUniform = new Float32Array(4),
            n._atlasRect = new dt,
            n._atlasRectUniform = new Float32Array(4),
            n._batchGroupId = -1,
            n._batchGroup = null,
            n._node = new ji,
            n._model = new mh,
            n._model.graph = n._node,
            n._meshInstance = null,
            i.addChild(n._model.graph),
            n._model._entity = i,
            n._updateAabbFunc = n._updateAabb.bind(j(n)),
            n._addedModel = !1,
            n._autoPlayClip = null,
            n._clips = {},
            n._defaultClip = new Fg(j(n),{
                name: n.entity.name,
                fps: 0,
                loop: !1,
                spriteAsset: null
            }),
            n._currentClip = n._defaultClip,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.onEnable = function() {
            var t = this.system.app
              , e = t.scene;
            e.on("set:layers", this._onLayersChanged, this),
            e.layers && (e.layers.on("add", this._onLayerAdded, this),
            e.layers.on("remove", this._onLayerRemoved, this)),
            this._showModel(),
            this._autoPlayClip && this._tryAutoPlay(),
            this._batchGroupId >= 0 && t.batcher.insert(da.SPRITE, this._batchGroupId, this.entity)
        }
        ,
        i.onDisable = function() {
            var t = this.system.app
              , e = t.scene;
            e.off("set:layers", this._onLayersChanged, this),
            e.layers && (e.layers.off("add", this._onLayerAdded, this),
            e.layers.off("remove", this._onLayerRemoved, this)),
            this.stop(),
            this._hideModel(),
            this._batchGroupId >= 0 && t.batcher.remove(da.SPRITE, this._batchGroupId, this.entity)
        }
        ,
        i.onDestroy = function() {
            for (var t in this._currentClip = null,
            this._defaultClip && (this._defaultClip._destroy(),
            this._defaultClip = null),
            this._clips)
                this._clips[t]._destroy();
            this._clips = null,
            this._hideModel(),
            this._model = null,
            this._node && (this._node.parent && this._node.parent.removeChild(this._node),
            this._node = null),
            this._meshInstance && (this._meshInstance.material = null,
            this._meshInstance.mesh = null,
            this._meshInstance = null)
        }
        ,
        i._showModel = function() {
            if (!this._addedModel && this._meshInstance) {
                for (var t = [this._meshInstance], e = 0, i = this._layers.length; e < i; e++) {
                    var n = this.system.app.scene.layers.getLayerById(this._layers[e]);
                    n && n.addMeshInstances(t)
                }
                this._addedModel = !0
            }
        }
        ,
        i._hideModel = function() {
            if (this._addedModel && this._meshInstance) {
                for (var t = [this._meshInstance], e = 0, i = this._layers.length; e < i; e++) {
                    var n = this.system.app.scene.layers.getLayerById(this._layers[e]);
                    n && n.removeMeshInstances(t)
                }
                this._addedModel = !1
            }
        }
        ,
        i._showFrame = function(t) {
            if (this.sprite) {
                var e = this.sprite.meshes[t];
                if (e) {
                    var i;
                    if (i = 1 === this.sprite.renderMode ? this.system.default9SlicedMaterialSlicedMode : 2 === this.sprite.renderMode ? this.system.default9SlicedMaterialTiledMode : this.system.defaultMaterial,
                    this._meshInstance || (this._meshInstance = new wa(e,this._material,this._node),
                    this._meshInstance.castShadow = !1,
                    this._meshInstance.receiveShadow = !1,
                    this._meshInstance.drawOrder = this._drawOrder,
                    this._model.meshInstances.push(this._meshInstance),
                    this._colorUniform[0] = this._color.r,
                    this._colorUniform[1] = this._color.g,
                    this._colorUniform[2] = this._color.b,
                    this._meshInstance.setParameter(Ug, this._colorUniform),
                    this._meshInstance.setParameter(zg, this._color.a),
                    this.enabled && this.entity.enabled && this._showModel()),
                    this._meshInstance.material !== i && (this._meshInstance.material = i),
                    this._meshInstance.mesh !== e && (this._meshInstance.mesh = e,
                    this._meshInstance.visible = !0,
                    this._meshInstance._aabbVer = -1),
                    this.sprite.atlas && this.sprite.atlas.texture ? (this._meshInstance.setParameter(Bg, this.sprite.atlas.texture),
                    this._meshInstance.setParameter(Ng, this.sprite.atlas.texture)) : (this._meshInstance.deleteParameter(Bg),
                    this._meshInstance.deleteParameter(Ng)),
                    !this.sprite.atlas || 1 !== this.sprite.renderMode && 2 !== this.sprite.renderMode)
                        this._meshInstance._updateAabbFunc = null;
                    else {
                        this._meshInstance._updateAabbFunc = this._updateAabbFunc;
                        var n = this.sprite.atlas.frames[this.sprite.frameKeys[t]];
                        if (n) {
                            var s = 2 / n.rect.z
                              , a = 2 / n.rect.w;
                            this._innerOffset.set(n.border.x * s, n.border.y * a, n.border.z * s, n.border.w * a);
                            var r = this.sprite.atlas.texture;
                            this._atlasRect.set(n.rect.x / r.width, n.rect.y / r.height, n.rect.z / r.width, n.rect.w / r.height)
                        } else
                            this._innerOffset.set(0, 0, 0, 0);
                        this._innerOffsetUniform[0] = this._innerOffset.x,
                        this._innerOffsetUniform[1] = this._innerOffset.y,
                        this._innerOffsetUniform[2] = this._innerOffset.z,
                        this._innerOffsetUniform[3] = this._innerOffset.w,
                        this._meshInstance.setParameter("innerOffset", this._innerOffsetUniform),
                        this._atlasRectUniform[0] = this._atlasRect.x,
                        this._atlasRectUniform[1] = this._atlasRect.y,
                        this._atlasRectUniform[2] = this._atlasRect.z,
                        this._atlasRectUniform[3] = this._atlasRect.w,
                        this._meshInstance.setParameter("atlasRect", this._atlasRectUniform)
                    }
                    this._updateTransform()
                } else
                    this._meshInstance && (this._meshInstance.mesh = null,
                    this._meshInstance.visible = !1)
            }
        }
        ,
        i._updateTransform = function() {
            var t = this.flipX ? -1 : 1
              , e = this.flipY ? -1 : 1
              , i = 0
              , n = 0;
            if (this.sprite && (1 === this.sprite.renderMode || 2 === this.sprite.renderMode)) {
                var s = 1
                  , a = 1;
                if (this.sprite.atlas) {
                    var r = this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];
                    r && (s = r.rect.z,
                    a = r.rect.w,
                    i = (.5 - r.pivot.x) * this._width,
                    n = (.5 - r.pivot.y) * this._height)
                }
                var o = s / this.sprite.pixelsPerUnit
                  , h = a / this.sprite.pixelsPerUnit;
                this._outerScale.set(Math.max(this._width, this._innerOffset.x * o), Math.max(this._height, this._innerOffset.y * h)),
                t *= o,
                e *= h,
                this._outerScale.x /= o,
                this._outerScale.y /= h,
                t *= it.clamp(this._width / (this._innerOffset.x * o), 1e-4, 1),
                e *= it.clamp(this._height / (this._innerOffset.y * h), 1e-4, 1),
                this._meshInstance && (this._outerScaleUniform[0] = this._outerScale.x,
                this._outerScaleUniform[1] = this._outerScale.y,
                this._meshInstance.setParameter("outerScale", this._outerScaleUniform))
            }
            this._node.setLocalScale(t, e, 1),
            this._node.setLocalPosition(i, n, 0)
        }
        ,
        i._updateAabb = function(t) {
            return t.center.set(0, 0, 0),
            t.halfExtents.set(.5 * this._outerScale.x, .5 * this._outerScale.y, .001),
            t.setFromTransformedAabb(t, this._node.getWorldTransform()),
            t
        }
        ,
        i._tryAutoPlay = function() {
            if (this._autoPlayClip && this.type === Og) {
                var t = this._clips[this._autoPlayClip];
                !t || t.isPlaying || this._currentClip && this._currentClip.isPlaying || this.enabled && this.entity.enabled && this.play(t.name)
            }
        }
        ,
        i._onLayersChanged = function(t, e) {
            t.off("add", this.onLayerAdded, this),
            t.off("remove", this.onLayerRemoved, this),
            e.on("add", this.onLayerAdded, this),
            e.on("remove", this.onLayerRemoved, this),
            this.enabled && this.entity.enabled && this._showModel()
        }
        ,
        i._onLayerAdded = function(t) {
            this.layers.indexOf(t.id) < 0 || this._addedModel && this.enabled && this.entity.enabled && this._meshInstance && t.addMeshInstances([this._meshInstance])
        }
        ,
        i._onLayerRemoved = function(t) {
            this._meshInstance && (this.layers.indexOf(t.id) < 0 || t.removeMeshInstances([this._meshInstance]))
        }
        ,
        i.removeModelFromLayers = function() {
            for (var t = 0; t < this.layers.length; t++) {
                var e = this.system.app.scene.layers.getLayerById(this.layers[t]);
                e && e.removeMeshInstances([this._meshInstance])
            }
        }
        ,
        i.addClip = function(t) {
            var e = new Fg(this,{
                name: t.name,
                fps: t.fps,
                loop: t.loop,
                spriteAsset: t.spriteAsset
            });
            return this._clips[t.name] = e,
            e.name && e.name === this._autoPlayClip && this._tryAutoPlay(),
            e
        }
        ,
        i.removeClip = function(t) {
            delete this._clips[t]
        }
        ,
        i.clip = function(t) {
            return this._clips[t]
        }
        ,
        i.play = function(t) {
            var e = this._clips[t]
              , i = this._currentClip;
            return i && i !== e && (i._playing = !1),
            this._currentClip = e,
            this._currentClip && (this._currentClip = e,
            this._currentClip.play()),
            e
        }
        ,
        i.pause = function() {
            this._currentClip !== this._defaultClip && this._currentClip.isPlaying && this._currentClip.pause()
        }
        ,
        i.resume = function() {
            this._currentClip !== this._defaultClip && this._currentClip.isPaused && this._currentClip.resume()
        }
        ,
        i.stop = function() {
            this._currentClip !== this._defaultClip && this._currentClip.stop()
        }
        ,
        G(e, [{
            key: "type",
            get: function() {
                return this._type
            },
            set: function(t) {
                this._type !== t && (this._type = t,
                this._type === kg ? (this.stop(),
                this._currentClip = this._defaultClip,
                this.enabled && this.entity.enabled && (this._currentClip.frame = this.frame,
                this._currentClip.sprite ? this._showModel() : this._hideModel())) : this._type === Og && (this.stop(),
                this._autoPlayClip && this._tryAutoPlay(),
                this._currentClip && this._currentClip.isPlaying && this.enabled && this.entity.enabled ? this._showModel() : this._hideModel()))
            }
        }, {
            key: "frame",
            get: function() {
                return this._currentClip.frame
            },
            set: function(t) {
                this._currentClip.frame = t
            }
        }, {
            key: "spriteAsset",
            get: function() {
                return this._defaultClip._spriteAsset
            },
            set: function(t) {
                this._defaultClip.spriteAsset = t
            }
        }, {
            key: "sprite",
            get: function() {
                return this._currentClip.sprite
            },
            set: function(t) {
                this._currentClip.sprite = t
            }
        }, {
            key: "material",
            get: function() {
                return this._material
            },
            set: function(t) {
                this._material = t,
                this._meshInstance && (this._meshInstance.material = t)
            }
        }, {
            key: "color",
            get: function() {
                return this._color
            },
            set: function(t) {
                this._color.r = t.r,
                this._color.g = t.g,
                this._color.b = t.b,
                this._meshInstance && (this._colorUniform[0] = this._color.r,
                this._colorUniform[1] = this._color.g,
                this._colorUniform[2] = this._color.b,
                this._meshInstance.setParameter(Ug, this._colorUniform))
            }
        }, {
            key: "opacity",
            get: function() {
                return this._color.a
            },
            set: function(t) {
                this._color.a = t,
                this._meshInstance && this._meshInstance.setParameter(zg, t)
            }
        }, {
            key: "clips",
            get: function() {
                return this._clips
            },
            set: function(t) {
                if (t) {
                    for (var e in this._clips) {
                        var i = !1;
                        for (var n in t)
                            if (t[n].name === e) {
                                i = !0,
                                this._clips[e].fps = t[n].fps,
                                this._clips[e].loop = t[n].loop,
                                t[n].hasOwnProperty("sprite") ? this._clips[e].sprite = t[n].sprite : t[n].hasOwnProperty("spriteAsset") && (this._clips[e].spriteAsset = t[n].spriteAsset);
                                break
                            }
                        i || this.removeClip(e)
                    }
                    for (var s in t)
                        this._clips[t[s].name] || this.addClip(t[s]);
                    this._autoPlayClip && this._tryAutoPlay(),
                    this._currentClip && this._currentClip.sprite || this._hideModel()
                } else
                    for (var a in this._clips)
                        this.removeClip(a)
            }
        }, {
            key: "currentClip",
            get: function() {
                return this._currentClip
            }
        }, {
            key: "speed",
            get: function() {
                return this._speed
            },
            set: function(t) {
                this._speed = t
            }
        }, {
            key: "flipX",
            get: function() {
                return this._flipX
            },
            set: function(t) {
                this._flipX !== t && (this._flipX = t,
                this._updateTransform())
            }
        }, {
            key: "flipY",
            get: function() {
                return this._flipY
            },
            set: function(t) {
                this._flipY !== t && (this._flipY = t,
                this._updateTransform())
            }
        }, {
            key: "width",
            get: function() {
                return this._width
            },
            set: function(t) {
                t !== this._width && (this._width = t,
                this._outerScale.x = this._width,
                !this.sprite || 2 !== this.sprite.renderMode && 1 !== this.sprite.renderMode || this._updateTransform())
            }
        }, {
            key: "height",
            get: function() {
                return this._height
            },
            set: function(t) {
                t !== this._height && (this._height = t,
                this._outerScale.y = this.height,
                !this.sprite || 2 !== this.sprite.renderMode && 1 !== this.sprite.renderMode || this._updateTransform())
            }
        }, {
            key: "batchGroupId",
            get: function() {
                return this._batchGroupId
            },
            set: function(t) {
                if (this._batchGroupId !== t) {
                    var e = this._batchGroupId;
                    this._batchGroupId = t,
                    this.entity.enabled && e >= 0 && this.system.app.batcher.remove(da.SPRITE, e, this.entity),
                    this.entity.enabled && t >= 0 ? this.system.app.batcher.insert(da.SPRITE, t, this.entity) : e >= 0 && this._currentClip && this._currentClip.sprite && this.enabled && this.entity.enabled && this._showModel()
                }
            }
        }, {
            key: "autoPlayClip",
            get: function() {
                return this._autoPlayClip
            },
            set: function(t) {
                this._autoPlayClip = t instanceof Fg ? t.name : t,
                this._tryAutoPlay()
            }
        }, {
            key: "drawOrder",
            get: function() {
                return this._drawOrder
            },
            set: function(t) {
                this._drawOrder = t,
                this._meshInstance && (this._meshInstance.drawOrder = t)
            }
        }, {
            key: "layers",
            get: function() {
                return this._layers
            },
            set: function(t) {
                this._addedModel && this._hideModel(),
                this._layers = t,
                this._meshInstance && this.enabled && this.entity.enabled && this._showModel()
            }
        }, {
            key: "aabb",
            get: function() {
                return this._meshInstance ? this._meshInstance.aabb : null
            }
        }]),
        e
    }(gd)
      , Gg = function() {
        this.enabled = !0
    }
      , Wg = ["enabled"]
      , Hg = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "sprite",
            i.ComponentType = Vg,
            i.DataType = Gg,
            i.schema = Wg,
            i._defaultTexture = null,
            i._defaultMaterial = null,
            i._default9SlicedMaterialSlicedMode = null,
            i._default9SlicedMaterialTiledMode = null,
            i.app.systems.on("update", i.onUpdate, j(i)),
            i.on("beforeremove", i.onBeforeRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            t.prototype.destroy.call(this),
            this.app.systems.off("update", this.onUpdate, this),
            this._defaultTexture && (this._defaultTexture.destroy(),
            this._defaultTexture = null)
        }
        ,
        i.initializeComponentData = function(e, i, n) {
            if (void 0 !== i.enabled && (e.enabled = i.enabled),
            e.type = i.type,
            i.layers && Array.isArray(i.layers) && (e.layers = i.layers.slice(0)),
            void 0 !== i.drawOrder && (e.drawOrder = i.drawOrder),
            void 0 !== i.color && (i.color instanceof at ? e.color.set(i.color.r, i.color.g, i.color.b, void 0 !== i.opacity ? i.opacity : 1) : e.color.set(i.color[0], i.color[1], i.color[2], void 0 !== i.opacity ? i.opacity : 1),
            e.color = e.color),
            void 0 !== i.opacity && (e.opacity = i.opacity),
            void 0 !== i.flipX && (e.flipX = i.flipX),
            void 0 !== i.flipY && (e.flipY = i.flipY),
            void 0 !== i.width && (e.width = i.width),
            void 0 !== i.height && (e.height = i.height),
            void 0 !== i.spriteAsset && (e.spriteAsset = i.spriteAsset),
            i.sprite && (e.sprite = i.sprite),
            void 0 !== i.frame && (e.frame = i.frame),
            i.clips)
                for (var s in i.clips)
                    e.addClip(i.clips[s]);
            void 0 !== i.speed && (e.speed = i.speed),
            i.autoPlayClip && (e.autoPlayClip = i.autoPlayClip),
            e.batchGroupId = void 0 === i.batchGroupId || null === i.batchGroupId ? -1 : i.batchGroupId,
            t.prototype.initializeComponentData.call(this, e, i, n)
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = t.sprite;
            return this.addComponent(e, {
                enabled: i.enabled,
                type: i.type,
                spriteAsset: i.spriteAsset,
                sprite: i.sprite,
                frame: i.frame,
                color: i.color.clone(),
                opacity: i.opacity,
                flipX: i.flipX,
                flipY: i.flipY,
                speed: i.speed,
                clips: i.clips,
                autoPlayClip: i.autoPlayClip,
                batchGroupId: i.batchGroupId,
                drawOrder: i.drawOrder,
                layers: i.layers.slice(0)
            })
        }
        ,
        i.onUpdate = function(t) {
            var e = this.store;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var n = e[i];
                    if (n.data.enabled && n.entity.enabled) {
                        var s = n.entity.sprite;
                        s._currentClip && s._currentClip._update(t)
                    }
                }
        }
        ,
        i.onBeforeRemove = function(t, e) {
            e.onDestroy()
        }
        ,
        G(e, [{
            key: "defaultMaterial",
            get: function() {
                if (!this._defaultMaterial) {
                    var t = new Mi(this.app.graphicsDevice,{
                        width: 1,
                        height: 1,
                        format: 7
                    })
                      , e = new Uint8Array(t.lock());
                    e[0] = e[1] = e[2] = e[3] = 255,
                    t.name = "sprite",
                    t.unlock();
                    var i = new qn;
                    i.diffuse.set(0, 0, 0),
                    i.emissive.set(.5, .5, .5),
                    i.emissiveMap = t,
                    i.emissiveMapTint = !0,
                    i.opacityMap = t,
                    i.opacityMapChannel = "a",
                    i.opacityTint = !0,
                    i.opacity = 0,
                    i.useLighting = !1,
                    i.useGammaTonemap = !1,
                    i.useFog = !1,
                    i.useSkybox = !1,
                    i.blendType = 4,
                    i.depthWrite = !1,
                    i.pixelSnap = !1,
                    i.cull = 0,
                    i.update(),
                    this._defaultTexture = t,
                    this._defaultMaterial = i
                }
                return this._defaultMaterial
            },
            set: function(t) {
                this._defaultMaterial = t
            }
        }, {
            key: "default9SlicedMaterialSlicedMode",
            get: function() {
                if (!this._default9SlicedMaterialSlicedMode) {
                    var t = this.defaultMaterial.clone();
                    t.nineSlicedMode = 1,
                    t.update(),
                    this._default9SlicedMaterialSlicedMode = t
                }
                return this._default9SlicedMaterialSlicedMode
            },
            set: function(t) {
                this._default9SlicedMaterialSlicedMode = t
            }
        }, {
            key: "default9SlicedMaterialTiledMode",
            get: function() {
                if (!this._default9SlicedMaterialTiledMode) {
                    var t = this.defaultMaterial.clone();
                    t.nineSlicedMode = 2,
                    t.update(),
                    this._default9SlicedMaterialTiledMode = t
                }
                return this._default9SlicedMaterialTiledMode
            },
            set: function(t) {
                this._default9SlicedMaterialTiledMode = t
            }
        }]),
        e
    }(vd);
    gd._buildAccessors(Vg.prototype, Wg);
    var Xg = function(t) {
        function e(e, i) {
            var n;
            return (n = t.call(this, e, i) || this)._oldState = !0,
            n._size = new lt,
            n.on("set_enabled", n._onSetEnabled, j(n)),
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.onEnable = function() {
            this._checkState()
        }
        ,
        i.onDisable = function() {
            this._checkState()
        }
        ,
        i._onSetEnabled = function(t, e, i) {
            this._checkState()
        }
        ,
        i._checkState = function() {
            var t = this.enabled && this.entity.enabled;
            t !== this._oldState && (this._oldState = t,
            this.fire("enable"),
            this.fire("state", this.enabled))
        }
        ,
        i._onBeforeRemove = function() {
            this.fire("remove")
        }
        ,
        G(e, [{
            key: "size",
            get: function() {
                return this._size
            },
            set: function(t) {
                t instanceof lt ? this._size.copy(t) : t instanceof Array && t.length >= 3 && this.size.set(t[0], t[1], t[2])
            }
        }]),
        e
    }(gd)
      , jg = function() {
        this.enabled = !0
    }
      , qg = ["enabled"]
      , Yg = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this, e) || this).id = "zone",
            i.ComponentType = Xg,
            i.DataType = jg,
            i.schema = qg,
            i.on("beforeremove", i._onBeforeRemove, j(i)),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initializeComponentData = function(t, e, i) {
            t.enabled = !e.hasOwnProperty("enabled") || !!e.enabled,
            e.size && (e.size instanceof lt ? t.size.copy(e.size) : e.size instanceof Array && e.size.length >= 3 && t.size.set(e.size[0], e.size[1], e.size[2]))
        }
        ,
        i.cloneComponent = function(t, e) {
            var i = {
                size: t.zone.size
            };
            return this.addComponent(e, i)
        }
        ,
        i._onBeforeRemove = function(t, e) {
            e._onBeforeRemove()
        }
        ,
        e
    }(vd);
    gd._buildAccessors(Xg.prototype, qg);
    var Kg = function() {
        function t(t) {
            this.frame = {
                fps: 0,
                ms: 0,
                dt: 0,
                updateStart: 0,
                updateTime: 0,
                renderStart: 0,
                renderTime: 0,
                physicsStart: 0,
                physicsTime: 0,
                cullTime: 0,
                sortTime: 0,
                skinTime: 0,
                morphTime: 0,
                instancingTime: 0,
                triangles: 0,
                otherPrimitives: 0,
                shaders: 0,
                materials: 0,
                cameras: 0,
                shadowMapUpdates: 0,
                shadowMapTime: 0,
                depthMapTime: 0,
                forwardTime: 0,
                lightClustersTime: 0,
                lightClusters: 0,
                _timeToCountFrames: 0,
                _fpsAccum: 0
            },
            this.drawCalls = {
                forward: 0,
                depth: 0,
                shadow: 0,
                immediate: 0,
                misc: 0,
                total: 0,
                skinned: 0,
                instanced: 0,
                removedByInstancing: 0
            },
            this.misc = {
                renderTargetCreationTime: 0
            },
            this.particles = {
                updatesPerFrame: 0,
                _updatesPerFrame: 0,
                frameTime: 0,
                _frameTime: 0
            },
            this.shaders = t._shaderStats,
            this.vram = t._vram,
            Object.defineProperty(this.vram, "totalUsed", {
                get: function() {
                    return this.tex + this.vb + this.ib
                }
            }),
            Object.defineProperty(this.vram, "geom", {
                get: function() {
                    return this.vb + this.ib
                }
            })
        }
        return G(t, [{
            key: "scene",
            get: function() {
                return _n().scene._stats
            }
        }, {
            key: "lightmapper",
            get: function() {
                return _n().lightmapper.stats
            }
        }, {
            key: "batcher",
            get: function() {
                return _n().batcher._stats
            }
        }]),
        t
    }()
      , Zg = function() {
        function t(t, e) {
            this.name = t,
            this.url = e,
            this.data = null,
            this._loading = !1,
            this._onLoadedCallbacks = []
        }
        return G(t, [{
            key: "loaded",
            get: function() {
                return !!this.data
            }
        }, {
            key: "loading",
            get: function() {
                return this._loading
            }
        }]),
        t
    }()
      , $g = function() {
        function t(t) {
            this._app = t,
            this._list = [],
            this._index = {},
            this._urlIndex = {}
        }
        var e = t.prototype;
        return e.destroy = function() {
            this._app = null
        }
        ,
        e.list = function() {
            return this._list
        }
        ,
        e.add = function(t, e) {
            if (this._index.hasOwnProperty(t))
                return !1;
            var i = new Zg(t,e)
              , n = this._list.push(i);
            return this._index[i.name] = n - 1,
            this._urlIndex[i.url] = n - 1,
            !0
        }
        ,
        e.find = function(t) {
            return this._index.hasOwnProperty(t) ? this._list[this._index[t]] : null
        }
        ,
        e.findByUrl = function(t) {
            return this._urlIndex.hasOwnProperty(t) ? this._list[this._urlIndex[t]] : null
        }
        ,
        e.remove = function(t) {
            if (this._index.hasOwnProperty(t)) {
                var e = this._index[t]
                  , i = this._list[e];
                delete this._urlIndex[i.url],
                delete this._index[t],
                this._list.splice(e, 1);
                for (var n = 0; n < this._list.length; n++)
                    i = this._list[n],
                    this._index[i.name] = n,
                    this._urlIndex[i.url] = n
            }
        }
        ,
        e._loadSceneData = function(t, e, i) {
            var n = t;
            if (t instanceof Zg ? n = t.url : (t = this.findByUrl(n)) || (t = new Zg("Untitled",n)),
            t.url)
                if (t.loaded)
                    i(null, t);
                else {
                    var s = this._app.loader.getHandler("hierarchy");
                    this._app.assets && this._app.assets.prefix && !Hh.test(n) && (n = p.join(this._app.assets.prefix, n)),
                    t._onLoadedCallbacks.push(i),
                    t._loading || s.load(n, (function(i, n) {
                        t.data = n,
                        t._loading = !1;
                        for (var s = 0; s < t._onLoadedCallbacks.length; s++)
                            t._onLoadedCallbacks[s](i, t);
                        e || (t.data = null),
                        t._onLoadedCallbacks.length = 0
                    }
                    )),
                    t._loading = !0
                }
            else
                i("URL or SceneRegistryItem is null when loading a scene")
        }
        ,
        e.loadSceneData = function(t, e) {
            this._loadSceneData(t, !0, e)
        }
        ,
        e.unloadSceneData = function(t) {
            "string" == typeof t && (t = this.findByUrl(t)),
            t && (t.data = null)
        }
        ,
        e.loadSceneHierarchy = function(t, e) {
            var i = this
              , n = this._app.loader.getHandler("hierarchy");
            this._loadSceneData(t, !1, (function(t, s) {
                if (t)
                    e && e(t);
                else {
                    var a = s.url
                      , r = s.data;
                    i._app._preloadScripts(r, (function() {
                        i._app.systems.script.preloading = !0;
                        var s = n.open(a, r);
                        i._app.systems.script.preloading = !1,
                        i._app.loader.clearCache(a, "hierarchy"),
                        i._app.root.addChild(s),
                        i._app.systems.fire("initialize", s),
                        i._app.systems.fire("postInitialize", s),
                        i._app.systems.fire("postPostInitialize", s),
                        e && e(t, s)
                    }
                    ))
                }
            }
            ))
        }
        ,
        e.loadSceneSettings = function(t, e) {
            var i = this;
            this._loadSceneData(t, !1, (function(t, n) {
                t ? e && e(t) : (i._app.applySceneSettings(n.data.settings),
                e && e(null))
            }
            ))
        }
        ,
        e.loadScene = function(t, e) {
            var i = this
              , n = this._app.loader.getHandler("scene");
            this._app.assets && this._app.assets.prefix && !Hh.test(t) && (t = p.join(this._app.assets.prefix, t)),
            n.load(t, (function(s, a) {
                if (s)
                    e && e(s);
                else {
                    i._app._preloadScripts(a, (function() {
                        i._app.systems.script.preloading = !0;
                        var s = n.open(t, a)
                          , r = i.findByUrl(t);
                        r && !r.loaded && (r.data = a),
                        i._app.systems.script.preloading = !1,
                        i._app.loader.clearCache(t, "scene"),
                        i._app.loader.patch({
                            resource: s,
                            type: "scene"
                        }, i._app.assets),
                        i._app.root.addChild(s.root),
                        i._app.systems.rigidbody && "undefined" != typeof Ammo && i._app.systems.rigidbody.gravity.set(s._gravity.x, s._gravity.y, s._gravity.z),
                        e && e(null, s)
                    }
                    ))
                }
            }
            ))
        }
        ,
        t
    }()
      , Qg = function() {
        function t(t) {
            this.application = t,
            this.device = t.graphicsDevice,
            this.clearOptions = null,
            this.layer = null,
            this.init()
        }
        var e = t.prototype;
        return e.allocateTexture = function(t, e, i) {
            var n = new Mi(t,{
                format: i,
                width: t.width,
                height: t.height,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            return n.name = e,
            t.scope.resolve("uDepthMap").setValue(n),
            n
        }
        ,
        e.allocateRenderTarget = function(t, e, i, n, s) {
            var a = this.allocateTexture(e, i, n);
            return t ? (t.destroyFrameBuffers(),
            s ? t._depthBuffer = a : t._colorBuffer = a) : t = new ms({
                colorBuffer: s ? null : a,
                depthBuffer: s ? a : null,
                depth: !s,
                stencil: e.supportsStencil,
                autoResolve: !1
            }),
            t
        }
        ,
        e.releaseRenderTarget = function(t) {
            t && (t.destroyTextureBuffers(),
            t.destroy())
        }
        ,
        e.initWebGl2 = function() {
            var t = this.application
              , e = this;
            this.clearOptions = {
                flags: 0
            },
            this.layer = new Qr({
                enabled: !1,
                name: "Depth",
                id: 1,
                onEnable: function() {
                    e.releaseRenderTarget(this.renderTarget),
                    this.renderTarget = e.allocateRenderTarget(this.renderTarget, t.graphicsDevice, "rt-depth2", te, !0)
                },
                onDisable: function() {
                    e.releaseRenderTarget(this.renderTarget),
                    this.renderTarget = null
                },
                onPreRenderOpaque: function(i) {
                    var n = t.graphicsDevice.gl;
                    this.srcFbo = n.getParameter(n.FRAMEBUFFER_BINDING),
                    this.renderTarget.width === t.graphicsDevice.width && this.renderTarget.height === t.graphicsDevice.height || this.onEnable(),
                    this.oldClear = this.cameras[i].camera._clearOptions,
                    this.cameras[i].camera._clearOptions = e.clearOptions
                },
                onPostRenderOpaque: function(e) {
                    if (this.renderTarget) {
                        this.cameras[e].camera._clearOptions = this.oldClear,
                        t.graphicsDevice.setRenderTarget(this.renderTarget),
                        t.graphicsDevice.updateBegin();
                        var i = t.graphicsDevice.gl;
                        i.bindFramebuffer(i.READ_FRAMEBUFFER, this.srcFbo),
                        i.bindFramebuffer(i.DRAW_FRAMEBUFFER, this.renderTarget._glFrameBuffer),
                        i.blitFramebuffer(0, 0, this.renderTarget.width, this.renderTarget.height, 0, 0, this.renderTarget.width, this.renderTarget.height, i.DEPTH_BUFFER_BIT, i.NEAREST)
                    }
                }
            })
        }
        ,
        e.initWebGl1 = function() {
            var t = this.application
              , e = this;
            this.clearOptions = {
                color: [254 / 255, 254 / 255, 254 / 255, 254 / 255],
                depth: 1,
                flags: 3
            },
            this.layer = new Qr({
                enabled: !1,
                name: "Depth",
                id: 1,
                shaderPass: 2,
                onEnable: function() {
                    e.releaseRenderTarget(this.renderTarget),
                    this.renderTarget = e.allocateRenderTarget(this.renderTarget, t.graphicsDevice, "rt-depth1", 7, !1)
                },
                onDisable: function() {
                    e.releaseRenderTarget(this.renderTarget),
                    this.renderTarget = null
                },
                onPostCull: function(e) {
                    for (var i = this.instances.visibleOpaque[e], n = i.list, s = t.scene.layers, a = s.subLayerEnabled, r = s.subLayerList, o = t.scene.layers.getLayerById(0).renderTarget, h = this.cameras[e], l = 0, c = s.layerList, u = 0; u < c.length; u++) {
                        var d = c[u];
                        if (d === this)
                            break;
                        if (d.renderTarget === o && d.enabled && a[u]) {
                            var f = d.cameras.indexOf(h);
                            if (!(f < 0)) {
                                var p = r[u] ? d.instances.visibleTransparent[f] : d.instances.visibleOpaque[f]
                                  , m = p.length;
                                p = p.list;
                                for (var _ = 0; _ < m; _++) {
                                    var g = p[_];
                                    g.material && g.material.depthWrite && !g._noDepthDrawGl1 && (n[l] = g,
                                    l++)
                                }
                            }
                        }
                    }
                    i.length = l
                },
                onPreRenderOpaque: function(i) {
                    this.renderTarget.width === t.graphicsDevice.width && this.renderTarget.height === t.graphicsDevice.height || this.onEnable(),
                    this.oldClear = this.cameras[i].camera._clearOptions,
                    this.cameras[i].camera._clearOptions = e.clearOptions
                },
                onDrawCall: function() {
                    t.graphicsDevice.setColorWrite(!0, !0, !0, !0)
                },
                onPostRenderOpaque: function(t) {
                    this.renderTarget && (this.cameras[t].camera._clearOptions = this.oldClear)
                }
            })
        }
        ,
        e.init = function() {
            this.device.webgl2 ? this.initWebGl2() : this.initWebGl1()
        }
        ,
        e.patch = function(t) {
            t.onEnable = this.layer.onEnable,
            t.onDisable = this.layer.onDisable,
            t.onPreRenderOpaque = this.layer.onPreRenderOpaque,
            t.onPostRenderOpaque = this.layer.onPostRenderOpaque,
            t.shaderPass = this.layer.shaderPass,
            t.onPostCull = this.layer.onPostCull,
            t.onDrawCall = this.layer.onDrawCall
        }
        ,
        t
    }()
      , Jg = function() {
        function t(t) {
            this.length = t,
            this.count = 0
        }
        var e = t.prototype;
        return e.inc = function() {
            this.count++
        }
        ,
        e.done = function() {
            return this.count === this.length
        }
        ,
        t
    }();
    t.app = null;
    var tv = function(e) {
        function i(n, s) {
            var a;
            void 0 === s && (s = {}),
            a = e.call(this) || this,
            i._applications[n.id] = j(a),
            gn(j(a)),
            t.app = j(a),
            a._destroyRequested = !1,
            a._inFrameUpdate = !1,
            a._time = 0,
            a.timeScale = 1,
            a.maxDeltaTime = .1,
            a.frame = 0,
            a.autoRender = !0,
            a.renderNextFrame = !1,
            a.useLegacyScriptAttributeCloning = Rc.legacy,
            a._librariesLoaded = !1,
            a._fillMode = Cu,
            a._resolutionMode = Pu,
            a._allowResize = !0,
            a.context = j(a),
            s.graphicsDeviceOptions || (s.graphicsDeviceOptions = {}),
            E.browser && navigator.xr && (s.graphicsDeviceOptions.xrCompatible = !0),
            s.graphicsDeviceOptions.alpha = s.graphicsDeviceOptions.alpha || !1,
            a.graphicsDevice = new fs(n,s.graphicsDeviceOptions),
            a.stats = new Kg(a.graphicsDevice),
            a._soundManager = new Mh(s),
            a.loader = new Ac(j(a)),
            sn.init(a.graphicsDevice),
            a._entityIndex = {},
            a.scene = new _h,
            a.root = new nv(j(a)),
            a.root._enabledInHierarchy = !0,
            a._enableList = [],
            a._enableList.size = 0,
            a.assets = new xu(a.loader),
            s.assetPrefix && (a.assets.prefix = s.assetPrefix),
            a.bundles = new bu(a.assets),
            a.enableBundles = "undefined" != typeof TextDecoder,
            a.scriptsOrder = s.scriptsOrder || [],
            a.scripts = new Su(j(a)),
            a.i18n = new wu(j(a)),
            a.scenes = new $g(j(a));
            var r = j(a);
            a.defaultLayerWorld = new Qr({
                name: "World",
                id: 0
            }),
            a.sceneDepth = new Qg(j(a)),
            a.defaultLayerDepth = a.sceneDepth.layer,
            a.defaultLayerSkybox = new Qr({
                enabled: !0,
                name: "Skybox",
                id: 2,
                opaqueSortMode: 0
            }),
            a.defaultLayerUi = new Qr({
                enabled: !0,
                name: "UI",
                id: 4,
                transparentSortMode: 1,
                passThrough: !1
            }),
            a.defaultLayerImmediate = new Qr({
                enabled: !0,
                name: "Immediate",
                id: 3,
                opaqueSortMode: 0,
                passThrough: !0
            });
            var o = new xn(a.graphicsDevice,"default");
            return o.pushOpaque(a.defaultLayerWorld),
            o.pushOpaque(a.defaultLayerDepth),
            o.pushOpaque(a.defaultLayerSkybox),
            o.pushTransparent(a.defaultLayerWorld),
            o.pushOpaque(a.defaultLayerImmediate),
            o.pushTransparent(a.defaultLayerImmediate),
            o.pushTransparent(a.defaultLayerUi),
            a.scene.layers = o,
            a._immediateLayer = a.defaultLayerImmediate,
            a.scene.on("set:layers", (function(t, e) {
                for (var i, n = e.layerList, s = 0; s < n.length; s++)
                    switch ((i = n[s]).id) {
                    case 1:
                        r.sceneDepth.patch(i);
                        break;
                    case 4:
                        i.passThrough = r.defaultLayerUi.passThrough;
                        break;
                    case 3:
                        i.passThrough = r.defaultLayerImmediate.passThrough
                    }
            }
            )),
            xo.createPlaceholder(a.graphicsDevice),
            a.renderer = new Xr(a.graphicsDevice),
            a.renderer.scene = a.scene,
            a.lightmapper = new cv(a.graphicsDevice,a.root,a.scene,a.renderer,a.assets),
            a.once("prerender", a._firstBake, j(a)),
            a.batcher = new ka(a.graphicsDevice,a.root,a.scene),
            a.once("prerender", a._firstBatch, j(a)),
            a.keyboard = s.keyboard || null,
            a.mouse = s.mouse || null,
            a.touch = s.touch || null,
            a.gamepads = s.gamepads || null,
            a.elementInput = s.elementInput || null,
            a.elementInput && (a.elementInput.app = j(a)),
            a.vr = null,
            a.xr = new _d(j(a)),
            a.elementInput && a.elementInput.attachSelectEvents(),
            a._inTools = !1,
            a._skyboxAsset = null,
            a._scriptPrefix = s.scriptPrefix || "",
            a.enableBundles && a.loader.addHandler("bundle", new Gl(a.assets)),
            a.loader.addHandler("animation", new Pl),
            a.loader.addHandler("animclip", new Rl),
            a.loader.addHandler("animstategraph", new Ll),
            a.loader.addHandler("model", new bc(a.graphicsDevice)),
            a.loader.addHandler("render", new Mc(a.assets)),
            a.loader.addHandler("material", new dc(j(a))),
            a.loader.addHandler("texture", new vu(a.graphicsDevice,a.assets,a.loader)),
            a.loader.addHandler("text", new Vc),
            a.loader.addHandler("json", new oc),
            a.loader.addHandler("audio", new Fl(a._soundManager)),
            a.loader.addHandler("script", new Ic(j(a))),
            a.loader.addHandler("scene", new Cc(j(a))),
            a.loader.addHandler("cubemap", new jl(a.graphicsDevice,a.assets,a.loader)),
            a.loader.addHandler("html", new rc),
            a.loader.addHandler("css", new Xl),
            a.loader.addHandler("shader", new Lc),
            a.loader.addHandler("hierarchy", new ac(j(a))),
            a.loader.addHandler("folder", new ql),
            a.loader.addHandler("font", new Ql(a.loader)),
            a.loader.addHandler("binary", new Bl),
            a.loader.addHandler("textureatlas", new jc(a.loader)),
            a.loader.addHandler("sprite", new Nc(a.assets,a.graphicsDevice)),
            a.loader.addHandler("template", new zc(j(a))),
            a.loader.addHandler("container", new Hl(a.graphicsDevice,a.assets)),
            a.systems = new Cp,
            a.systems.add(new M_(j(a))),
            a.systems.add(new Ap(j(a))),
            a.systems.add(new _m(j(a))),
            a.systems.add(new nf(j(a))),
            a.systems.add(new Tf(j(a))),
            a.systems.add(new Km(j(a))),
            a.systems.add(new t_(j(a))),
            a.systems.add(new ep(j(a))),
            a.systems.add(new Xm(j(a))),
            Rc.legacy ? a.systems.add(new Z_(j(a))) : a.systems.add(new z_(j(a))),
            a.systems.add(new If(j(a),a._soundManager)),
            a.systems.add(new Dg(j(a),a._soundManager)),
            a.systems.add(new Cf(j(a),a._soundManager)),
            a.systems.add(new l_(j(a))),
            a.systems.add(new L_(j(a))),
            a.systems.add(new om(j(a))),
            a.systems.add(new Yf(j(a))),
            a.systems.add(new gg(j(a))),
            a.systems.add(new bg(j(a))),
            a.systems.add(new Hg(j(a))),
            a.systems.add(new Nm(j(a))),
            a.systems.add(new bm(j(a))),
            a.systems.add(new Yg(j(a))),
            a._visibilityChangeHandler = a.onVisibilityChange.bind(j(a)),
            "undefined" != typeof document && (void 0 !== document.hidden ? (a._hiddenAttr = "hidden",
            document.addEventListener("visibilitychange", a._visibilityChangeHandler, !1)) : void 0 !== document.mozHidden ? (a._hiddenAttr = "mozHidden",
            document.addEventListener("mozvisibilitychange", a._visibilityChangeHandler, !1)) : void 0 !== document.msHidden ? (a._hiddenAttr = "msHidden",
            document.addEventListener("msvisibilitychange", a._visibilityChangeHandler, !1)) : void 0 !== document.webkitHidden && (a._hiddenAttr = "webkitHidden",
            document.addEventListener("webkitvisibilitychange", a._visibilityChangeHandler, !1))),
            a._immediate = new yo(a.graphicsDevice,j(a)),
            a.tick = iv(j(a)),
            a
        }
        H(i, e),
        i.getApplication = function(t) {
            return t ? i._applications[t] : _n()
        }
        ;
        var n = i.prototype;
        return n.configure = function(t, e) {
            var i = this;
            st.get(t, (function(t, n) {
                if (t)
                    e(t);
                else {
                    var s = n.application_properties
                      , a = n.scenes
                      , r = n.assets;
                    i._parseApplicationProperties(s, (function(t) {
                        i._parseScenes(a),
                        i._parseAssets(r),
                        e(t || null)
                    }
                    ))
                }
            }
            ))
        }
        ,
        n.preload = function(t) {
            var e = this;
            this.fire("preload:start");
            var i = this.assets.list({
                preload: !0
            })
              , n = new Jg(i.length)
              , s = !1
              , a = function() {
                e.graphicsDevice && !s && n.done() && (s = !0,
                e.fire("preload:end"),
                t())
            }
              , r = i.length;
            if (n.length)
                for (var o = function(t) {
                    n.inc(),
                    e.fire("preload:progress", n.count / r),
                    n.done() && a()
                }, h = function(t, i) {
                    n.inc(),
                    e.fire("preload:progress", n.count / r),
                    n.done() && a()
                }, l = 0; l < i.length; l++)
                    i[l].loaded ? (n.inc(),
                    this.fire("preload:progress", n.count / r),
                    n.done() && a()) : (i[l].once("load", o),
                    i[l].once("error", h),
                    this.assets.load(i[l]));
            else
                a()
        }
        ,
        n._preloadScripts = function(t, e) {
            var i = this;
            if (Rc.legacy) {
                this.systems.script.preloading = !0;
                var n = this._getScriptReferences(t)
                  , s = n.length
                  , a = new Jg(s)
                  , r = /^http(s)?:\/\//;
                if (s)
                    for (var o = function(t, n) {
                        t && console.error(t),
                        a.inc(),
                        a.done() && (i.systems.script.preloading = !1,
                        e())
                    }, h = 0; h < s; h++) {
                        var l = n[h];
                        !r.test(l.toLowerCase()) && this._scriptPrefix && (l = p.join(self._scriptPrefix, n[h])),
                        this.loader.load(l, "script", o)
                    }
                else
                    this.systems.script.preloading = !1,
                    e()
            } else
                e()
        }
        ,
        n._handleAreaLightDataProperty = function(t) {
            var e = this.assets.get(t);
            e ? this.setAreaLightLuts(e) : this.assets.once("add:" + t, this.setAreaLightLuts, this)
        }
        ,
        n._parseApplicationProperties = function(t, e) {
            if ("number" == typeof t.maxAssetRetries && t.maxAssetRetries > 0 && this.loader.enableRetry(t.maxAssetRetries),
            t.useDevicePixelRatio || (t.useDevicePixelRatio = t.use_device_pixel_ratio),
            t.resolutionMode || (t.resolutionMode = t.resolution_mode),
            t.fillMode || (t.fillMode = t.fill_mode),
            this._width = t.width,
            this._height = t.height,
            t.useDevicePixelRatio && (this.graphicsDevice.maxPixelRatio = window.devicePixelRatio),
            this.setCanvasResolution(t.resolutionMode, this._width, this._height),
            this.setCanvasFillMode(t.fillMode, this._width, this._height),
            t.layers && t.layerOrder) {
                var i = new xn(this.graphicsDevice,"application")
                  , n = {};
                for (var s in t.layers) {
                    var a = t.layers[s];
                    a.id = parseInt(s, 10),
                    a.enabled = 1 !== a.id,
                    n[s] = new Qr(a)
                }
                for (var r = 0, o = t.layerOrder.length; r < o; r++) {
                    var h = t.layerOrder[r]
                      , l = n[h.layer];
                    l && (h.transparent ? i.pushTransparent(l) : i.pushOpaque(l),
                    i.subLayerEnabled[r] = h.enabled)
                }
                this.scene.layers = i
            }
            if (t.batchGroups)
                for (var c = 0, u = t.batchGroups.length; c < u; c++) {
                    var d = t.batchGroups[c];
                    this.batcher.addGroup(d.name, d.dynamic, d.maxAabbSize, d.id, d.layers)
                }
            t.i18nAssets && (this.i18n.assets = t.i18nAssets),
            t.areaLightDataAsset && this._handleAreaLightDataProperty(t.areaLightDataAsset),
            this._loadLibraries(t.libraries, e)
        }
        ,
        n._loadLibraries = function(t, e) {
            var i = this
              , n = t.length
              , s = n
              , a = /^http(s)?:\/\//;
            if (n)
                for (var r = function(t, n) {
                    s--,
                    t ? e(t) : 0 === s && (i.onLibrariesLoaded(),
                    e(null))
                }, o = 0; o < n; ++o) {
                    var h = t[o];
                    !a.test(h.toLowerCase()) && this._scriptPrefix && (h = p.join(this._scriptPrefix, h)),
                    this.loader.load(h, "script", r)
                }
            else
                this.onLibrariesLoaded(),
                e(null)
        }
        ,
        n._parseScenes = function(t) {
            if (t)
                for (var e = 0; e < t.length; e++)
                    this.scenes.add(t[e].name, t[e].url)
        }
        ,
        n._parseAssets = function(t) {
            var e = []
              , i = {}
              , n = {};
            if (Rc.legacy) {
                if (this.enableBundles)
                    for (var s in t)
                        "bundle" === t[s].type && (n[s] = !0,
                        e.push(t[s]));
                for (var a in t)
                    n[a] || e.push(t[a])
            } else {
                for (var r = 0; r < this.scriptsOrder.length; r++) {
                    var o = this.scriptsOrder[r];
                    t[o] && (i[o] = !0,
                    e.push(t[o]))
                }
                if (this.enableBundles)
                    for (var h in t)
                        "bundle" === t[h].type && (n[h] = !0,
                        e.push(t[h]));
                for (var l in t)
                    i[l] || n[l] || e.push(t[l])
            }
            for (var c = 0; c < e.length; c++) {
                var u = e[c]
                  , d = new Kh(u.name,u.type,u.file,u.data);
                if (d.id = parseInt(u.id, 10),
                d.preload = !!u.preload && u.preload,
                d.loaded = "script" === u.type && u.data && u.data.loadingType > 0,
                d.tags.add(u.tags),
                u.i18n)
                    for (var f in u.i18n)
                        d.addLocalizedAssetId(f, u.i18n[f]);
                this.assets.add(d)
            }
        }
        ,
        n._getScriptReferences = function(t) {
            var e = [];
            t.settings.priority_scripts && (e = t.settings.priority_scripts);
            for (var i = [], n = {}, s = 0; s < e.length; s++)
                i.push(e[s]),
                n[e[s]] = !0;
            var a = t.entities;
            for (var r in a)
                if (a[r].components.script)
                    for (var o = a[r].components.script.scripts, h = 0; h < o.length; h++)
                        n[o[h].url] || (i.push(o[h].url),
                        n[o[h].url] = !0);
            return i
        }
        ,
        n.start = function() {
            this.frame = 0,
            this.fire("start", {
                timestamp: Q(),
                target: this
            }),
            this._librariesLoaded || this.onLibrariesLoaded(),
            this.systems.fire("initialize", this.root),
            this.fire("initialize"),
            this.systems.fire("postInitialize", this.root),
            this.systems.fire("postPostInitialize", this.root),
            this.fire("postinitialize"),
            this.tick()
        }
        ,
        n.inputUpdate = function(t) {
            this.controller && this.controller.update(t),
            this.mouse && this.mouse.update(t),
            this.keyboard && this.keyboard.update(t),
            this.gamepads && this.gamepads.update(t)
        }
        ,
        n.update = function(t) {
            this.frame++,
            this.graphicsDevice.updateClientRect(),
            this.vr && this.vr.poll(),
            Rc.legacy && this.systems.fire("fixedUpdate", 1 / 60),
            this.systems.fire(this._inTools ? "toolsUpdate" : "update", t),
            this.systems.fire("animationUpdate", t),
            this.systems.fire("postUpdate", t),
            this.fire("update", t),
            this.inputUpdate(t)
        }
        ,
        n.render = function() {
            this.fire("prerender"),
            this.root.syncHierarchy(),
            this.batcher.updateAll(),
            this.renderer.renderComposition(this.scene.layers),
            this.fire("postrender")
        }
        ,
        n._fillFrameStatsBasic = function(t, e, i) {
            var n = this.stats.frame;
            n.dt = e,
            n.ms = i,
            t > n._timeToCountFrames ? (n.fps = n._fpsAccum,
            n._fpsAccum = 0,
            n._timeToCountFrames = t + 1e3) : n._fpsAccum++,
            this.stats.drawCalls.total = this.graphicsDevice._drawCallsPerFrame,
            this.graphicsDevice._drawCallsPerFrame = 0
        }
        ,
        n._fillFrameStats = function() {
            var t = this.stats.frame;
            t.cameras = this.renderer._camerasRendered,
            t.materials = this.renderer._materialSwitches,
            t.shaders = this.graphicsDevice._shaderSwitchesPerFrame,
            t.shadowMapUpdates = this.renderer._shadowMapUpdates,
            t.shadowMapTime = this.renderer._shadowMapTime,
            t.depthMapTime = this.renderer._depthMapTime,
            t.forwardTime = this.renderer._forwardTime;
            var e = this.graphicsDevice._primsPerFrame;
            t.triangles = e[4] / 3 + Math.max(e[5] - 2, 0) + Math.max(e[6] - 2, 0),
            t.cullTime = this.renderer._cullTime,
            t.sortTime = this.renderer._sortTime,
            t.skinTime = this.renderer._skinTime,
            t.morphTime = this.renderer._morphTime,
            t.instancingTime = this.renderer._instancingTime,
            t.lightClusters = this.renderer._lightClusters,
            t.lightClustersTime = this.renderer._lightClustersTime,
            t.otherPrimitives = 0;
            for (var i = 0; i < e.length; i++)
                i < 4 && (t.otherPrimitives += e[i]),
                e[i] = 0;
            this.renderer._camerasRendered = 0,
            this.renderer._materialSwitches = 0,
            this.renderer._shadowMapUpdates = 0,
            this.graphicsDevice._shaderSwitchesPerFrame = 0,
            this.renderer._cullTime = 0,
            this.renderer._layerCompositionUpdateTime = 0,
            this.renderer._lightClustersTime = 0,
            this.renderer._sortTime = 0,
            this.renderer._skinTime = 0,
            this.renderer._morphTime = 0,
            this.renderer._instancingTime = 0,
            this.renderer._shadowMapTime = 0,
            this.renderer._depthMapTime = 0,
            this.renderer._forwardTime = 0,
            (t = this.stats.drawCalls).forward = this.renderer._forwardDrawCalls,
            t.culled = this.renderer._numDrawCallsCulled,
            t.depth = 0,
            t.shadow = this.renderer._shadowDrawCalls,
            t.skinned = this.renderer._skinDrawCalls,
            t.immediate = 0,
            t.instanced = 0,
            t.removedByInstancing = 0,
            t.misc = t.total - (t.forward + t.shadow),
            this.renderer._depthDrawCalls = 0,
            this.renderer._shadowDrawCalls = 0,
            this.renderer._forwardDrawCalls = 0,
            this.renderer._numDrawCallsCulled = 0,
            this.renderer._skinDrawCalls = 0,
            this.renderer._immediateRendered = 0,
            this.renderer._instancedDrawCalls = 0,
            this.renderer._removedByInstancing = 0,
            this.stats.misc.renderTargetCreationTime = this.graphicsDevice.renderTargetCreationTime,
            (t = this.stats.particles).updatesPerFrame = t._updatesPerFrame,
            t.frameTime = t._frameTime,
            t._updatesPerFrame = 0,
            t._frameTime = 0
        }
        ,
        n.setCanvasFillMode = function(t, e, i) {
            this._fillMode = t,
            this.resizeCanvas(e, i)
        }
        ,
        n.setCanvasResolution = function(t, e, i) {
            this._resolutionMode = t,
            t === Eu && void 0 === e && (e = this.graphicsDevice.canvas.clientWidth,
            i = this.graphicsDevice.canvas.clientHeight),
            this.graphicsDevice.resizeCanvas(e, i)
        }
        ,
        n.isHidden = function() {
            return document[this._hiddenAttr]
        }
        ,
        n.onVisibilityChange = function() {
            this.isHidden() ? this._soundManager.suspend() : this._soundManager.resume()
        }
        ,
        n.resizeCanvas = function(t, e) {
            if (this._allowResize && (!this.xr || !this.xr.session)) {
                var i = window.innerWidth
                  , n = window.innerHeight;
                if (this._fillMode === Cu) {
                    var s = this.graphicsDevice.canvas.width / this.graphicsDevice.canvas.height;
                    s > i / n ? e = (t = i) / s : t = (e = n) * s
                } else
                    this._fillMode === Au && (t = i,
                    e = n);
                return this.graphicsDevice.canvas.style.width = t + "px",
                this.graphicsDevice.canvas.style.height = e + "px",
                this.updateCanvasSize(),
                {
                    width: t,
                    height: e
                }
            }
        }
        ,
        n.updateCanvasSize = function() {
            if (this._allowResize && !this.xr.active && this._resolutionMode === Eu) {
                var t = this.graphicsDevice.canvas;
                this.graphicsDevice.resizeCanvas(t.clientWidth, t.clientHeight)
            }
        }
        ,
        n.onLibrariesLoaded = function() {
            this._librariesLoaded = !0,
            this.systems.rigidbody.onLibraryLoaded()
        }
        ,
        n.applySceneSettings = function(t) {
            var e;
            if (this.systems.rigidbody && "undefined" != typeof Ammo) {
                var i = t.physics.gravity;
                this.systems.rigidbody.gravity.set(i[0], i[1], i[2])
            }
            this.scene.applySettings(t),
            t.render.hasOwnProperty("skybox") && (t.render.skybox ? (e = this.assets.get(t.render.skybox)) ? this.setSkybox(e) : this.assets.once("add:" + t.render.skybox, this.setSkybox, this) : this.setSkybox(null))
        }
        ,
        n.setAreaLightLuts = function(t) {
            if (t) {
                var e = this.graphicsDevice;
                t.ready((function(t) {
                    xo.set(e, t.resource)
                }
                )),
                this.assets.load(t)
            }
        }
        ,
        n.setSkybox = function(t) {
            var e = this;
            if (t !== this._skyboxAsset) {
                var i = function() {
                    e.setSkybox(null)
                }
                  , n = function() {
                    e.scene.setSkybox(e._skyboxAsset ? e._skyboxAsset.resources : null)
                };
                this._skyboxAsset && (this.assets.off("load:" + this._skyboxAsset.id, n, this),
                this.assets.off("remove:" + this._skyboxAsset.id, i, this),
                this._skyboxAsset.off("change", n, this)),
                this._skyboxAsset = t,
                this._skyboxAsset && (this.assets.on("load:" + this._skyboxAsset.id, n, this),
                this.assets.once("remove:" + this._skyboxAsset.id, i, this),
                this._skyboxAsset.on("change", n, this),
                0 !== this.scene.skyboxMip || this._skyboxAsset.loadFaces || (this._skyboxAsset.loadFaces = !0),
                this.assets.load(this._skyboxAsset)),
                n()
            }
        }
        ,
        n.enableVr = function() {
            this.vr || (this.vr = new Iu(this))
        }
        ,
        n.disableVr = function() {
            this.vr && (this.vr.destroy(),
            this.vr = null)
        }
        ,
        n._firstBake = function() {
            this.lightmapper.bake(null, this.scene.lightmapMode)
        }
        ,
        n._firstBatch = function() {
            this.batcher.generate()
        }
        ,
        n._processTimestamp = function(t) {
            return t
        }
        ,
        n._getDefaultDrawLayer = function() {
            return this.scene.layers.getLayerById(3)
        }
        ,
        n.drawLine = function(t, e, i, n, s) {
            void 0 === i && (i = at.WHITE),
            void 0 === n && (n = !0),
            void 0 === s && (s = this._getDefaultDrawLayer()),
            this._immediate.getBatch(s, n).addLines([t, e], [i, i])
        }
        ,
        n.drawLines = function(t, e, i, n) {
            void 0 === i && (i = !0),
            void 0 === n && (n = this._getDefaultDrawLayer()),
            this._immediate.getBatch(n, i).addLines(t, e)
        }
        ,
        n.drawLineArrays = function(t, e, i, n) {
            void 0 === i && (i = !0),
            void 0 === n && (n = this._getDefaultDrawLayer()),
            this._immediate.getBatch(n, i).addLinesArrays(t, e)
        }
        ,
        n.drawWireSphere = function(t, e, i, n, s, a) {
            void 0 === i && (i = at.WHITE),
            void 0 === n && (n = 20),
            void 0 === s && (s = !0),
            void 0 === a && (a = this._getDefaultDrawLayer()),
            this._immediate.drawWireSphere(t, e, i, n, s, a)
        }
        ,
        n.drawWireAlignedBox = function(t, e, i, n, s) {
            void 0 === i && (i = at.WHITE),
            void 0 === n && (n = !0),
            void 0 === s && (s = this._getDefaultDrawLayer()),
            this._immediate.drawWireAlignedBox(t, e, i, n, s)
        }
        ,
        n.drawMeshInstance = function(t, e) {
            void 0 === e && (e = this._getDefaultDrawLayer()),
            this._immediate.drawMesh(null, null, null, t, e)
        }
        ,
        n.drawMesh = function(t, e, i, n) {
            void 0 === n && (n = this._getDefaultDrawLayer()),
            this._immediate.drawMesh(e, i, t, null, n)
        }
        ,
        n.drawQuad = function(t, e, i) {
            void 0 === i && (i = this._getDefaultDrawLayer()),
            this._immediate.drawMesh(e, t, this._immediate.getQuadMesh(), null, i)
        }
        ,
        n.drawTexture = function(t, e, i, n, s, a, r) {
            void 0 === r && (r = this._getDefaultDrawLayer());
            var o = new vt;
            o.setTRS(new lt(t,e,0), yt.IDENTITY, new lt(i,n,0)),
            a || ((a = new Fn).setParameter("colorMap", s),
            a.shader = this._immediate.getTextureShader(),
            a.update()),
            this.drawQuad(o, a, r)
        }
        ,
        n.drawDepthTexture = function(t, e, i, n, s) {
            void 0 === s && (s = this._getDefaultDrawLayer());
            var a = new Fn;
            a.shader = this._immediate.getDepthTextureShader(),
            a.update(),
            this.drawTexture(t, e, i, n, null, a, s)
        }
        ,
        n.destroy = function() {
            if (this._inFrameUpdate)
                this._destroyRequested = !0;
            else {
                var t = this.graphicsDevice.canvas.id;
                this.off("librariesloaded"),
                "undefined" != typeof document && (document.removeEventListener("visibilitychange", this._visibilityChangeHandler, !1),
                document.removeEventListener("mozvisibilitychange", this._visibilityChangeHandler, !1),
                document.removeEventListener("msvisibilitychange", this._visibilityChangeHandler, !1),
                document.removeEventListener("webkitvisibilitychange", this._visibilityChangeHandler, !1)),
                this._visibilityChangeHandler = null,
                this.root.destroy(),
                this.root = null,
                this.mouse && (this.mouse.off(),
                this.mouse.detach(),
                this.mouse = null),
                this.keyboard && (this.keyboard.off(),
                this.keyboard.detach(),
                this.keyboard = null),
                this.touch && (this.touch.off(),
                this.touch.detach(),
                this.touch = null),
                this.elementInput && (this.elementInput.detach(),
                this.elementInput = null),
                this.controller && (this.controller = null),
                this.systems.destroy(),
                this.scene.layers && this.scene.layers.destroy();
                for (var e = this.assets.list(), n = 0; n < e.length; n++)
                    e[n].unload(),
                    e[n].off();
                for (var s in this.assets.off(),
                this.bundles.destroy(),
                this.bundles = null,
                this.i18n.destroy(),
                this.i18n = null,
                this.loader.getHandler("script")._cache) {
                    var a = this.loader.getHandler("script")._cache[s]
                      , r = a.parentNode;
                    r && r.removeChild(a)
                }
                this.loader.getHandler("script")._cache = {},
                this.loader.destroy(),
                this.loader = null,
                this.scene.destroy(),
                this.scene = null,
                this.systems = null,
                this.context = null,
                this.scripts.destroy(),
                this.scripts = null,
                this.scenes.destroy(),
                this.scenes = null,
                this.lightmapper.destroy(),
                this.lightmapper = null,
                this.batcher.destroy(),
                this.batcher = null,
                this._entityIndex = {},
                this.defaultLayerDepth.onPreRenderOpaque = null,
                this.defaultLayerDepth.onPostRenderOpaque = null,
                this.defaultLayerDepth.onDisable = null,
                this.defaultLayerDepth.onEnable = null,
                this.defaultLayerDepth = null,
                this.defaultLayerWorld = null,
                Je && (Je.destroy(),
                Je = null),
                this.vr && (this.vr.destroy(),
                this.vr = null),
                this.xr.end(),
                dh.staticDestroy(),
                this.renderer.destroy(),
                this.renderer = null,
                kn.remove(this.graphicsDevice),
                this.graphicsDevice.destroy(),
                this.graphicsDevice = null,
                this.tick = null,
                this.off(),
                this._soundManager && (this._soundManager.destroy(),
                this._soundManager = null),
                Rc.app = null,
                i._applications[t] = null,
                _n() === this && gn(null)
            }
        }
        ,
        n.getEntityFromIndex = function(t) {
            return this._entityIndex[t]
        }
        ,
        G(i, [{
            key: "fillMode",
            get: function() {
                return this._fillMode
            }
        }, {
            key: "resolutionMode",
            get: function() {
                return this._resolutionMode
            }
        }]),
        i
    }(u);
    tv._applications = {};
    var ev = {}
      , iv = function(e) {
        var i, n = e;
        return function(e, s) {
            if (n.graphicsDevice) {
                gn(n),
                i && (window.cancelAnimationFrame(i),
                i = null),
                t.app = n;
                var a = n._processTimestamp(e) || Q()
                  , r = a - (n._time || a)
                  , o = r / 1e3;
                o = it.clamp(o, 0, n.maxDeltaTime),
                o *= n.timeScale,
                n._time = a,
                i = n.vr && n.vr.display ? n.vr.display.requestAnimationFrame(n.tick) : n.xr.session ? n.xr.session.requestAnimationFrame(n.tick) : E.browser ? window.requestAnimationFrame(n.tick) : null,
                n.graphicsDevice.contextLost || (n._fillFrameStatsBasic(a, o, r),
                n._inFrameUpdate = !0,
                n.fire("frameupdate", r),
                s ? (n.xr.update(s),
                n.graphicsDevice.defaultFramebuffer = s.session.renderState.baseLayer.framebuffer) : n.graphicsDevice.defaultFramebuffer = null,
                n.update(o),
                n.fire("framerender"),
                (n.autoRender || n.renderNextFrame) && (n.updateCanvasSize(),
                n.render(),
                n.renderNextFrame = !1),
                ev.timestamp = Q(),
                ev.target = n,
                n.fire("frameend", ev),
                n.fire("frameEnd", ev),
                n.vr && n.vr.display && n.vr.display.presenting && n.vr.display.submitFrame(),
                n._inFrameUpdate = !1,
                n._destroyRequested && n.destroy())
            }
        }
    }
      , nv = function(t) {
        function e(e, i) {
            var n;
            if (n = t.call(this, e) || this,
            e instanceof tv && (i = e),
            n._batchHandle = null,
            n.c = {},
            n._app = i,
            !i && (n._app = tv.getApplication(),
            !n._app))
                throw new Error("Couldn't find current application");
            return n._guid = null,
            n._destroying = !1,
            n._template = !1,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.addComponent = function(t, e) {
            var i = this._app.systems[t];
            return i ? this.c[t] ? null : i.addComponent(this, e) : null
        }
        ,
        i.removeComponent = function(t) {
            var e = this._app.systems[t];
            e && this.c[t] && e.removeComponent(this)
        }
        ,
        i.findComponent = function(t) {
            var e = this.findOne((function(e) {
                return e.c && e.c[t]
            }
            ));
            return e && e.c[t]
        }
        ,
        i.findComponents = function(t) {
            return this.find((function(e) {
                return e.c && e.c[t]
            }
            )).map((function(e) {
                return e.c[t]
            }
            ))
        }
        ,
        i.getGuid = function() {
            return this._guid || this.setGuid(f.create()),
            this._guid
        }
        ,
        i.setGuid = function(t) {
            var e = this._app._entityIndex;
            this._guid && delete e[this._guid],
            this._guid = t,
            e[this._guid] = this
        }
        ,
        i._notifyHierarchyStateChanged = function(t, e) {
            var i = !1;
            t === this && 0 === this._app._enableList.length && (i = !0),
            t._beingEnabled = !0,
            t._onHierarchyStateChanged(e),
            t._onHierarchyStatePostChanged && this._app._enableList.push(t);
            for (var n = t._children, s = 0, a = n.length; s < a; s++)
                n[s]._enabled && this._notifyHierarchyStateChanged(n[s], e);
            if (t._beingEnabled = !1,
            i) {
                for (var r = 0; r < this._app._enableList.length; r++)
                    this._app._enableList[r]._onHierarchyStatePostChanged();
                this._app._enableList.length = 0
            }
        }
        ,
        i._onHierarchyStateChanged = function(e) {
            t.prototype._onHierarchyStateChanged.call(this, e);
            var i = this.c;
            for (var n in i)
                if (i.hasOwnProperty(n)) {
                    var s = i[n];
                    s.enabled && (e ? s.onEnable() : s.onDisable())
                }
        }
        ,
        i._onHierarchyStatePostChanged = function() {
            var t = this.c;
            for (var e in t)
                t.hasOwnProperty(e) && t[e].onPostStateChange()
        }
        ,
        i.findByGuid = function(t) {
            if (this._guid === t)
                return this;
            var e = this._app._entityIndex[t];
            return e && (e === this || e.isDescendantOf(this)) ? e : null
        }
        ,
        i.destroy = function() {
            for (var t in this._destroying = !0,
            this.c)
                this.c[t].enabled = !1;
            for (var i in this.c)
                this.c[i].system.removeComponent(this);
            this._parent && this._parent.removeChild(this);
            for (var n = this._children, s = n.shift(); s; )
                s instanceof e && s.destroy(),
                s._parent = null,
                s = n.shift();
            this.fire("destroy", this),
            this.off(),
            this._guid && delete this._app._entityIndex[this._guid],
            this._destroying = !1
        }
        ,
        i.clone = function() {
            var t = {}
              , e = this._cloneRecursively(t);
            return t[this.getGuid()] = e,
            sv(this, this, e, t),
            e
        }
        ,
        i._cloneRecursively = function(i) {
            var n = new e(this._app);
            for (var s in t.prototype._cloneInternal.call(this, n),
            this.c) {
                this.c[s].system.cloneComponent(this, n)
            }
            for (var a = 0; a < this._children.length; a++) {
                var r = this._children[a];
                if (r instanceof e) {
                    var o = r._cloneRecursively(i);
                    n.addChild(o),
                    i[r.getGuid()] = o
                }
            }
            return n
        }
        ,
        e
    }(ji);
    function sv(t, e, i, n) {
        if (e instanceof nv) {
            var s = e.c;
            for (var a in s)
                for (var r = s[a], o = r.system.getPropertiesOfType("entity"), h = 0, l = o.length; h < l; h++) {
                    var c = o[h].name
                      , u = r[c];
                    if (!!t.findByGuid(u)) {
                        var d = n[u].getGuid();
                        d ? i.c[a][c] = d : console.warn("Could not find corresponding entity id when resolving duplicated entity references")
                    }
                }
            s.script && !i._app.useLegacyScriptAttributeCloning && i.script.resolveDuplicatedEntityReferenceProperties(s.script, n),
            s.render && i.render.resolveDuplicatedEntityReferenceProperties(s.render, n),
            s.anim && i.anim.resolveDuplicatedEntityReferenceProperties(s.anim, n);
            for (var f = e.children.filter((function(t) {
                return t instanceof nv
            }
            )), p = i.children.filter((function(t) {
                return t instanceof nv
            }
            )), m = 0, _ = f.length; m < _; m++)
                sv(t, f[m], p[m], n)
        }
    }
    var av = new lt
      , rv = function(t) {
        function e(e) {
            var i = new nv("AmbientLight");
            return i.addComponent("light", {
                type: "directional",
                affectDynamic: !0,
                affectLightmapped: !1,
                bake: !0,
                bakeNumSamples: e.ambientBakeNumSamples,
                castShadows: !0,
                normalOffsetBias: .05,
                shadowBias: .2,
                shadowDistance: 1,
                shadowResolution: 2048,
                shadowType: 0,
                color: at.WHITE,
                intensity: 1
            }),
            t.call(this, e, i.light.light) || this
        }
        return H(e, t),
        e.prototype.prepareVirtualLight = function(t, e) {
            lo(av, t, e, 0, this.scene.ambientBakeSpherePart),
            this.light._node.lookAt(av.mulScalar(-1)),
            this.light._node.rotateLocal(90, 0, 0);
            var i = this.scene.gammaCorrection ? 2.2 : 1
              , n = 2 * Math.PI * this.scene.ambientBakeSpherePart
              , s = Math.pow(n, i);
            this.light.intensity = Math.pow(s / e, 1 / i)
        }
        ,
        G(e, [{
            key: "numVirtualLights",
            get: function() {
                return this.light.bakeNumSamples
            }
        }]),
        e
    }(uo)
      , ov = function() {
        function t(t, e) {
            void 0 === e && (e = null),
            this.node = t,
            this.component = t.render || t.model,
            e = e || this.component.meshInstances,
            this.store(),
            this.meshInstances = e,
            this.bounds = null,
            this.renderTargets = []
        }
        var e = t.prototype;
        return e.store = function() {
            this.castShadows = this.component.castShadows
        }
        ,
        e.restore = function() {
            this.component.castShadows = this.castShadows
        }
        ,
        t
    }()
      , hv = function() {
        function t(t) {
            this.device = t,
            this.shaderDilate = mi(t, ni.fullscreenQuadVS, ni.dilatePS, "lmDilate"),
            this.constantTexSource = t.scope.resolve("source"),
            this.constantPixelOffset = t.scope.resolve("pixelOffset"),
            this.pixelOffset = new Float32Array(2),
            this.shaderDenoise = null,
            this.sigmas = null,
            this.constantSigmas = null,
            this.kernel = null
        }
        var e = t.prototype;
        return e.setSourceTexture = function(t) {
            this.constantTexSource.setValue(t)
        }
        ,
        e.prepare = function(t, e) {
            this.pixelOffset[0] = 1 / t,
            this.pixelOffset[1] = 1 / e,
            this.constantPixelOffset.setValue(this.pixelOffset)
        }
        ,
        e.prepareDenoise = function(t, e) {
            this.shaderDenoise || (this.shaderDenoise = mi(this.device, ni.fullscreenQuadVS, ni.bilateralDeNoisePS, "lmBilateralDeNoise"),
            this.sigmas = new Float32Array(2),
            this.constantSigmas = this.device.scope.resolve("sigmas"),
            this.constantKernel = this.device.scope.resolve("kernel[0]"),
            this.bZnorm = this.device.scope.resolve("bZnorm")),
            this.sigmas[0] = t,
            this.sigmas[1] = e,
            this.constantSigmas.setValue(this.sigmas),
            this.evaluateDenoiseUniforms(t, e)
        }
        ,
        e.evaluateDenoiseUniforms = function(t, e) {
            function i(t, e) {
                return .39894 * Math.exp(-.5 * t * t / (e * e)) / e
            }
            this.kernel = this.kernel || new Float32Array(15);
            for (var n = this.kernel, s = Math.floor(7), a = 0; a <= s; ++a) {
                var r = i(a, t);
                n[s + a] = r,
                n[s - a] = r
            }
            this.constantKernel.setValue(this.kernel);
            var o = 1 / i(0, e);
            this.bZnorm.setValue(o)
        }
        ,
        t
    }()
      , lv = new lt
      , cv = function() {
        function t(t, e, i, n, s) {
            this.device = t,
            this.root = e,
            this.scene = i,
            this.renderer = n,
            this.assets = s,
            this.shadowMapCache = n._shadowRenderer.shadowMapCache,
            this._tempSet = new Set,
            this._initCalled = !1,
            this.passMaterials = [],
            this.ambientAOMaterial = null,
            this.fog = "",
            this.ambientLight = new at,
            this.renderTargets = new Map,
            this.stats = {
                renderPasses: 0,
                lightmapCount: 0,
                totalRenderTime: 0,
                forwardTime: 0,
                fboTime: 0,
                shadowMapTime: 0,
                compileTime: 0,
                shadersLinked: 0
            }
        }
        var e = t.prototype;
        return e.destroy = function() {
            ga.decRef(this.blackTex),
            this.blackTex = null,
            ga.destroy(),
            this.device = null,
            this.root = null,
            this.scene = null,
            this.renderer = null,
            this.assets = null
        }
        ,
        e.initBake = function(t) {
            if (!this._initCalled) {
                this._initCalled = !0,
                this.lightmapFilters = new hv(t),
                this.constantBakeDir = t.scope.resolve("bakeDir"),
                this.materials = [],
                this.blackTex = new Mi(this.device,{
                    width: 4,
                    height: 4,
                    format: 7,
                    type: Be
                }),
                this.blackTex.name = "lightmapBlack",
                ga.incRef(this.blackTex);
                var e = new Ri;
                e.clearColor.set(0, 0, 0, 0),
                e.clearColorBuffer = !0,
                e.clearDepthBuffer = !1,
                e.clearStencilBuffer = !1,
                e.frustumCulling = !1,
                e.projection = 1,
                e.aspectRatio = 1,
                e.node = new ji,
                this.camera = e
            }
        }
        ,
        e.finishBake = function(t) {
            function e(t) {
                ga.decRef(t.colorBuffer),
                t.destroy()
            }
            this.materials = [],
            this.renderTargets.forEach((function(t) {
                e(t)
            }
            )),
            this.renderTargets.clear(),
            t.forEach((function(t) {
                t.renderTargets.forEach((function(t) {
                    e(t)
                }
                )),
                t.renderTargets.length = 0
            }
            )),
            this.ambientAOMaterial = null
        }
        ,
        e.createMaterialForPass = function(t, e, i, n) {
            var s = new qn;
            if (s.name = "lmMaterial-pass:" + i + "-ambient:" + n,
            s.chunks.transformVS = "#define UV1LAYOUT\n" + ni.transformVS,
            0 === i) {
                var a = ni.bakeLmEndPS;
                n ? a = "\n                    dDiffuseLight = ((dDiffuseLight - 0.5) * max(" + e.ambientBakeOcclusionContrast.toFixed(1) + " + 1.0, 0.0)) + 0.5;\n                    dDiffuseLight += vec3(" + e.ambientBakeOcclusionBrightness.toFixed(1) + ");\n                    dDiffuseLight = saturate(dDiffuseLight);\n                    dDiffuseLight *= dAmbientLight;\n                " + a : (s.ambient = new at(0,0,0),
                s.ambientTint = !0),
                s.chunks.endPS = a,
                s.lightMap = this.blackTex
            } else
                s.chunks.basePS = ni.basePS + "\nuniform sampler2D texture_dirLightMap;\nuniform float bakeDir;\n",
                s.chunks.endPS = ni.bakeDirLmEndPS;
            return s.chunks.outputAlphaPS = "\n",
            s.chunks.outputAlphaOpaquePS = "\n",
            s.chunks.outputAlphaPremulPS = "\n",
            s.cull = 0,
            s.forceUv1 = !0,
            s.update(),
            s.updateShader(t, e),
            s
        }
        ,
        e.createMaterials = function(t, e, i) {
            for (var n = 0; n < i; n++)
                this.passMaterials[n] || (this.passMaterials[n] = this.createMaterialForPass(t, e, n, !1));
            this.ambientAOMaterial || (this.ambientAOMaterial = this.createMaterialForPass(t, e, 0, !0),
            this.ambientAOMaterial.onUpdateShader = function(t) {
                return t.lightMapWithoutAmbient = !0,
                t.separateAmbient = !0,
                t
            }
            )
        }
        ,
        e.createTexture = function(t, e, i) {
            var n = new Mi(this.device,{
                width: t,
                height: t,
                format: 7,
                mipmaps: !1,
                type: e,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            return n.name = i,
            n
        }
        ,
        e.collectModels = function(t, e, i) {
            var n, s, a;
            if (t.enabled) {
                var r;
                if (null != (n = t.model) && n.model && null != (s = t.model) && s.enabled && (i && i.push(new ov(t)),
                t.model.lightmapped && e && (r = t.model.model.meshInstances)),
                null != (a = t.render) && a.enabled && (i && i.push(new ov(t)),
                t.render.lightmapped && e && (r = t.render.meshInstances)),
                r) {
                    for (var o = !0, h = 0; h < r.length; h++)
                        if (!r[h].mesh.vertexBuffer.format.hasUv1) {
                            o = !1;
                            break
                        }
                    if (o) {
                        for (var l = [], c = 0; c < r.length; c++) {
                            var u = r[c].mesh;
                            this._tempSet.has(u) ? e.push(new ov(t,[r[c]])) : l.push(r[c]),
                            this._tempSet.add(u)
                        }
                        this._tempSet.clear(),
                        l.length > 0 && e.push(new ov(t,l))
                    }
                }
                for (var d = 0; d < t._children.length; d++)
                    this.collectModels(t._children[d], e, i)
            }
        }
        ,
        e.prepareShadowCasters = function(t) {
            for (var e = [], i = 0; i < t.length; i++) {
                var n = t[i].component;
                if (n.castShadows = n.castShadowsLightmap,
                n.castShadowsLightmap)
                    for (var s = t[i].meshInstances, a = 0; a < s.length; a++)
                        s[a].visibleThisFrame = !0,
                        e.push(s[a])
            }
            return e
        }
        ,
        e.updateTransforms = function(t) {
            for (var e = 0; e < t.length; e++)
                for (var i = t[e].meshInstances, n = 0; n < i.length; n++)
                    i[n].node.getWorldTransform()
        }
        ,
        e.calculateLightmapSize = function(t) {
            var e, i, n, s = this.scene.lightmapSizeMultiplier || 16, a = lv;
            t.model ? (n = t.model.lightmapSizeMultiplier,
            t.model.asset ? (e = this.assets.get(t.model.asset).data).area && (i = e.area) : t.model._area && (e = t.model)._area && (i = e._area)) : t.render && (n = t.render.lightmapSizeMultiplier,
            "asset" !== t.render.type && t.render._area && (e = t.render)._area && (i = e._area));
            var r = {
                x: 1,
                y: 1,
                z: 1,
                uv: 1
            };
            i && (r.x = i.x,
            r.y = i.y,
            r.z = i.z,
            r.uv = i.uv);
            var o = n || 1;
            r.x *= o,
            r.y *= o,
            r.z *= o;
            var h = t.render || t.model
              , l = this.computeNodeBounds(h.meshInstances);
            a.copy(l.halfExtents);
            var c = r.x * a.y * a.z + r.y * a.x * a.z + r.z * a.x * a.y;
            return c /= r.uv,
            c = Math.sqrt(c),
            Math.min(it.nextPowerOfTwo(c * s), this.scene.lightmapMaxResolution || 2048)
        }
        ,
        e.setLightmaping = function(t, e, i, n) {
            for (var s = 0; s < t.length; s++)
                for (var a = t[s], r = a.meshInstances, o = 0; o < r.length; o++) {
                    var h = r[o];
                    if (h.setLightmapped(e),
                    e) {
                        n && (h._shaderDefs |= n),
                        h.mask = 2;
                        for (var l = 0; l < i; l++) {
                            var c = a.renderTargets[l].colorBuffer;
                            c.minFilter = 1,
                            c.magFilter = 1,
                            h.setRealtimeLightmap(wa.lightmapParamNames[l], c)
                        }
                    }
                }
        }
        ,
        e.bake = function(t, e) {
            void 0 === e && (e = 1);
            var i = this.device
              , n = Q();
            this.scene._updateSkybox(i),
            this.stats.renderPasses = 0,
            this.stats.shadowMapTime = 0,
            this.stats.forwardTime = 0;
            var s = i._shaderStats.linked
              , a = i._renderTargetCreationTime
              , r = i._shaderStats.compileTime
              , o = []
              , h = [];
            if (t) {
                for (var l = 0; l < t.length; l++)
                    this.collectModels(t[l], o, null);
                this.collectModels(this.root, null, h)
            } else
                this.collectModels(this.root, o, h);
            if (o.length > 0) {
                var c = 1 === e ? 2 : 1;
                this.setLightmaping(o, !1, c),
                this.initBake(i),
                this.bakeInternal(c, o, h);
                var u = 64;
                1 === e && (u |= It),
                this.scene.ambientBake && (u |= Ft),
                this.setLightmaping(o, !0, c, u),
                this.finishBake(o)
            }
            var d = Q();
            this.stats.totalRenderTime = d - n,
            this.stats.shadersLinked = i._shaderStats.linked - s,
            this.stats.compileTime = i._shaderStats.compileTime - r,
            this.stats.fboTime = i._renderTargetCreationTime - a,
            this.stats.lightmapCount = o.length
        }
        ,
        e.allocateTextures = function(t, e) {
            for (var i = 0; i < t.length; i++) {
                for (var n = t[i], s = this.calculateLightmapSize(n.node), a = 0; a < e; a++) {
                    var r = this.createTexture(s, Fe, "lightmapper_lightmap_" + i);
                    ga.incRef(r),
                    n.renderTargets[a] = new ms({
                        colorBuffer: r,
                        depth: !1
                    })
                }
                if (!this.renderTargets.has(s)) {
                    var o = this.createTexture(s, Fe, "lightmapper_temp_lightmap_" + s);
                    ga.incRef(o),
                    this.renderTargets.set(s, new ms({
                        colorBuffer: o,
                        depth: !1
                    }))
                }
            }
        }
        ,
        e.prepareLightsToBake = function(t, e, i) {
            if (this.scene.ambientBake) {
                var n = new rv(this.scene);
                i.push(n)
            }
            for (var s = t._lights, a = 0; a < s.length; a++) {
                var r = s[a]
                  , o = new po(this.scene,r);
                e.push(o),
                r.enabled && 0 != (4 & r.mask) && (r.isStatic = !1,
                r.mask = 4294967295,
                r.shadowUpdateMode = 0 === r.type ? 2 : 1,
                i.push(o))
            }
            i.sort()
        }
        ,
        e.restoreLights = function(t) {
            for (var e = 0; e < t.length; e++)
                t[e].restore()
        }
        ,
        e.setupScene = function() {
            this.revertStatic = !1,
            this.scene._needsStaticPrepare && (this.scene._needsStaticPrepare = !1,
            this.revertStatic = !0),
            this.fog = this.scene.fog,
            this.ambientLight.copy(this.scene.ambientLight),
            this.scene.fog = Pt,
            this.scene.ambientBake || this.scene.ambientLight.set(0, 0, 0),
            this.renderer.setSceneConstants()
        }
        ,
        e.restoreScene = function() {
            this.scene.fog = this.fog,
            this.scene.ambientLight.copy(this.ambientLight),
            this.revertStatic && (this.scene._needsStaticPrepare = !0)
        }
        ,
        e.computeNodeBounds = function(t) {
            var e = new Mt;
            if (t.length > 0) {
                e.copy(t[0].aabb);
                for (var i = 1; i < t.length; i++)
                    e.add(t[i].aabb)
            }
            return e
        }
        ,
        e.computeNodesBounds = function(t) {
            for (var e = 0; e < t.length; e++) {
                var i = t[e].meshInstances;
                t[e].bounds = this.computeNodeBounds(i)
            }
        }
        ,
        e.computeBounds = function(t) {
            for (var e = new Mt, i = 0; i < t.length; i++) {
                e.copy(t[0].aabb);
                for (var n = 1; n < t.length; n++)
                    e.add(t[n].aabb)
            }
            return e
        }
        ,
        e.backupMaterials = function(t) {
            for (var e = 0; e < t.length; e++)
                this.materials[e] = t[e].material
        }
        ,
        e.restoreMaterials = function(t) {
            for (var e = 0; e < t.length; e++)
                t[e].material = this.materials[e]
        }
        ,
        e.lightCameraPrepare = function(t, e) {
            var i, n = e.light;
            2 === n.type && ((i = n.getRenderData(null, 0).shadowCamera)._node.setPosition(n._node.getPosition()),
            i._node.setRotation(n._node.getRotation()),
            i._node.rotateLocal(-90, 0, 0),
            i.projection = 0,
            i.nearClip = n.attenuationEnd / 1e3,
            i.farClip = n.attenuationEnd,
            i.aspectRatio = 1,
            i.fov = 2 * n._outerConeAngle,
            this.renderer.updateCameraFrustum(i));
            return i
        }
        ,
        e.lightCameraPrepareAndCull = function(t, e, i, n) {
            var s = t.light
              , a = !0;
            if (0 === s.type) {
                lv.copy(n.center),
                lv.y += n.halfExtents.y,
                this.camera.node.setPosition(lv),
                this.camera.node.setEulerAngles(-90, 0, 0),
                this.camera.nearClip = 0,
                this.camera.farClip = 2 * n.halfExtents.y;
                var r = Math.max(n.halfExtents.x, n.halfExtents.z);
                this.camera.orthoHeight = r
            } else
                t.lightBounds.intersects(e.bounds) || (a = !1);
            if (2 === s.type) {
                for (var o = !1, h = e.meshInstances, l = 0; l < h.length; l++)
                    if (h[l]._isVisible(i)) {
                        o = !0;
                        break
                    }
                o || (a = !1)
            }
            return a
        }
        ,
        e.setupLightArray = function(t, e) {
            t[0].length = 0,
            t[1].length = 0,
            t[2].length = 0,
            t[e.type][0] = e
        }
        ,
        e.renderShadowMap = function(t, e, i, n) {
            var s = n.light;
            return !t && s.castShadows && (s.shadowMap || (s.shadowMap = this.shadowMapCache.get(this.device, s)),
            0 === s.type ? this.renderer._shadowRenderer.cullDirectional(s, e, this.camera) : this.renderer._shadowRenderer.cullLocal(s, e),
            this.renderer.renderShadows(i[s.type], this.camera)),
            !0
        }
        ,
        e.postprocessTextures = function(t, e, i) {
            var n = this.lightmapFilters.shaderDilate
              , s = this.scene.lightmapFilterEnabled;
            s && this.lightmapFilters.prepareDenoise(this.scene.lightmapFilterRange, this.scene.lightmapFilterSmoothness);
            for (var a = 0; a < e.length; a++)
                for (var r = e[a], o = 0; o < i; o++) {
                    var h = r.renderTargets[o]
                      , l = h.colorBuffer
                      , c = this.renderTargets.get(l.width)
                      , u = c.colorBuffer;
                    this.lightmapFilters.prepare(l.width, l.height);
                    for (var d = 0; d < 1; d++) {
                        this.lightmapFilters.setSourceTexture(l),
                        ei(t, c, s && 0 === o && 0 === d ? this.lightmapFilters.shaderDenoise : n),
                        this.lightmapFilters.setSourceTexture(u),
                        ei(t, h, n)
                    }
                }
        }
        ,
        e.bakeInternal = function(t, e, i) {
            var n = this.scene
              , s = this.device;
            this.createMaterials(s, n, t),
            this.setupScene(),
            n.layers._update(),
            this.computeNodesBounds(e),
            this.allocateTextures(e, t);
            var a = []
              , r = [];
            this.prepareLightsToBake(n.layers, a, r),
            this.updateTransforms(i);
            var o = this.prepareShadowCasters(i);
            this.renderer.updateCpuSkinMatrices(o),
            this.renderer.gpuUpdate(o);
            var h, l, c, u, d = this.computeBounds(o);
            for (h = 0; h < e.length; h++) {
                for (c = e[h].meshInstances,
                l = 0; l < c.length; l++)
                    (u = c[l]).setLightmapped(!1),
                    u.mask = 4,
                    u.setRealtimeLightmap(wa.lightmapParamNames[0], u.material.lightMap ? u.material.lightMap : this.blackTex),
                    u.setRealtimeLightmap(wa.lightmapParamNames[1], this.blackTex)
            }
            for (l = 0; l < r.length; l++)
                r[l].light.enabled = !1;
            var f, p, m = [[], [], []], _ = !1;
            for (h = 0; h < r.length; h++) {
                var g = r[h]
                  , v = g instanceof rv
                  , y = g.numVirtualLights;
                t > 1 && y > 1 && (y = 1);
                for (var x = 0; x < y; x++) {
                    y > 1 && g.prepareVirtualLight(x, y),
                    g.startBake();
                    var b = !1
                      , S = this.lightCameraPrepare(s, g);
                    for (p = 0; p < e.length; p++) {
                        var T = e[p];
                        if (c = T.meshInstances,
                        this.lightCameraPrepareAndCull(g, T, S, d)) {
                            for (this.setupLightArray(m, g.light),
                            b = this.renderShadowMap(b, o, m, g),
                            this.backupMaterials(c),
                            f = 0; f < t && !(f > 0 && x > 0) && !(v && f > 0); f++) {
                                var w = T.renderTargets[f]
                                  , M = T.renderTargets[f].colorBuffer.width
                                  , A = this.renderTargets.get(M)
                                  , C = A.colorBuffer;
                                0 === f ? _ = n.updateShaders : _ && (n.updateShaders = !0);
                                var E = this.passMaterials[f];
                                for (v && x + 1 === y && 0 === f && (E = this.ambientAOMaterial),
                                l = 0; l < c.length; l++)
                                    c[l].material = E;
                                for (this.renderer.updateShaders(c),
                                this.renderer.setCamera(this.camera, A, !0),
                                1 === f && this.constantBakeDir.setValue(g.light.bakeDir ? 1 : 0),
                                this.renderer._forwardTime = 0,
                                this.renderer._shadowMapTime = 0,
                                this.renderer.renderForward(this.camera, c, c.length, m, 1),
                                T.renderTargets[f] = A,
                                this.renderTargets.set(M, w),
                                l = 0; l < c.length; l++)
                                    (u = c[l]).setRealtimeLightmap(wa.lightmapParamNames[f], C),
                                    u._shaderDefs |= 64
                            }
                            this.restoreMaterials(c)
                        }
                    }
                    g.endBake(this.shadowMapCache)
                }
            }
            for (this.postprocessTextures(s, e, t),
            p = 0; p < i.length; p++)
                i[p].restore();
            this.restoreLights(a),
            this.restoreScene(),
            this.shadowMapCache.clear()
        }
        ,
        t
    }()
      , uv = new Set
      , dv = {
        depth: 1,
        flags: 2
    }
      , fv = function() {
        function t(t, e, i) {
            t instanceof fs && (t = _n()),
            this.app = t,
            this.device = t.graphicsDevice,
            this.pickColor = new Float32Array(4),
            this.pickColor[3] = 1,
            this.mapping = [],
            this.cameraEntity = null,
            this.layer = null,
            this.layerComp = null,
            this.initLayerComposition(),
            this._renderTarget = null;
            var n = this.device;
            this.clearDepthCommand = new Ta(0,0,(function() {
                n.clear(dv)
            }
            )),
            this.width = 0,
            this.height = 0,
            this.resize(e, i)
        }
        var e = t.prototype;
        return e.getSelection = function(t, e, i, n) {
            var s = this.device;
            if ("object" == typeof t) {
                var a = t;
                t = a.x,
                e = a.y,
                i = a.width,
                n = a.height
            } else
                e = this.renderTarget.height - (e + (n || 1));
            t = Math.floor(t),
            e = Math.floor(e),
            i = Math.floor(Math.max(i || 1, 1)),
            n = Math.floor(Math.max(n || 1, 1));
            var r = s.renderTarget;
            s.setRenderTarget(this.renderTarget),
            s.updateBegin();
            var o = new Uint8Array(4 * i * n);
            s.readPixels(t, e, i, n, o),
            s.updateEnd(),
            s.setRenderTarget(r);
            for (var h = this.mapping, l = 0; l < i * n; l++) {
                var c = o[4 * l + 0] << 16 | o[4 * l + 1] << 8 | o[4 * l + 2];
                16777215 !== c && uv.add(h[c])
            }
            var u = [];
            return uv.forEach((function(t) {
                return u.push(t)
            }
            )),
            uv.clear(),
            u
        }
        ,
        e.allocateRenderTarget = function() {
            var t = new Mi(this.device,{
                format: 7,
                width: this.width,
                height: this.height,
                mipmaps: !1,
                minFilter: 0,
                magFilter: 0,
                addressU: 1,
                addressV: 1
            });
            t.name = "pick",
            this.renderTarget = new ms({
                colorBuffer: t,
                depth: !0
            })
        }
        ,
        e.releaseRenderTarget = function() {
            this.cameraEntity.camera.renderTarget = null,
            this._renderTarget && (this._renderTarget._colorBuffer.destroy(),
            this._renderTarget.destroy(),
            this._renderTarget = null)
        }
        ,
        e.initLayerComposition = function() {
            var t = this.device
              , e = this
              , i = t.scope.resolve("uColor");
            this.cameraEntity = new nv,
            this.cameraEntity.addComponent("camera"),
            this.layer = new Qr({
                name: "Picker",
                shaderPass: Bt,
                opaqueSortMode: 0,
                onDrawCall: function(n, s) {
                    e.pickColor[0] = (s >> 16 & 255) / 255,
                    e.pickColor[1] = (s >> 8 & 255) / 255,
                    e.pickColor[2] = (255 & s) / 255,
                    i.setValue(e.pickColor),
                    t.setBlending(!1),
                    e.mapping[s] = n
                }
            }),
            this.layer.addCamera(this.cameraEntity.camera),
            this.layerComp = new xn("picker"),
            this.layerComp.pushOpaque(this.layer)
        }
        ,
        e.prepare = function(t, e, i) {
            t instanceof Ri && (t = t.node.camera),
            i instanceof Qr && (i = [i]),
            this.layer.clearMeshInstances();
            for (var n = this.layer.opaqueMeshInstances, s = e.layers.layerList, a = e.layers.subLayerEnabled, r = e.layers.subLayerList, o = 0; o < s.length; o++) {
                var h = s[o];
                if (!(i && i.indexOf(h) < 0))
                    if (h.enabled && a[o])
                        if (h.cameras.indexOf(t) >= 0) {
                            h._clearDepthBuffer && n.push(this.clearDepthCommand);
                            for (var l = r[o] ? h.instances.transparentMeshInstances : h.instances.opaqueMeshInstances, c = 0; c < l.length; c++) {
                                var u = l[c];
                                u.pick && n.push(u)
                            }
                        }
            }
            this.renderTarget && this.width === this.renderTarget.width && this.height === this.renderTarget.height || (this.releaseRenderTarget(),
            this.allocateRenderTarget()),
            this.updateCamera(t),
            this.mapping.length = 0,
            this.app.renderer.renderComposition(this.layerComp)
        }
        ,
        e.updateCamera = function(t) {
            this.cameraEntity.copy(t.entity),
            this.cameraEntity.name = "PickerCamera";
            var e = this.cameraEntity.camera;
            e.copy(t),
            e.clearColorBuffer = !0,
            e.clearDepthBuffer = !0,
            e.clearStencilBuffer = !0,
            e.clearColor = at.WHITE,
            e.renderTarget = this.renderTarget,
            this.layer.clearCameras(),
            this.layer.addCamera(e),
            e.layers = [this.layer.id]
        }
        ,
        e.resize = function(t, e) {
            this.width = Math.floor(t),
            this.height = Math.floor(e)
        }
        ,
        t
    }()
      , pv = 4096
      , mv = function(t) {
        function e(e, i) {
            var n;
            void 0 === i && (i = {}),
            (n = t.call(this) || this).type = "bitmap",
            n.app = e,
            n.intensity = 0,
            n.fontWeight = i.fontWeight || "normal",
            n.fontSize = parseInt(i.fontSize, 10),
            n.glyphSize = n.fontSize,
            n.fontName = i.fontName || "Arial",
            n.color = i.color || new at(1,1,1),
            n.padding = i.padding || 0;
            var s = i.width > pv ? pv : i.width || 512
              , a = i.height > pv ? pv : i.height || 512
              , r = document.createElement("canvas");
            r.height = a,
            r.width = s;
            var o = new Mi(n.app.graphicsDevice,{
                format: 7,
                mipmaps: !0
            });
            return o.name = "font",
            o.setSource(r),
            o.minFilter = 5,
            o.magFilter = 1,
            o.addressU = 1,
            o.addressV = 1,
            n.textures = [o],
            n.chars = "",
            n.data = {},
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.createTextures = function(t) {
            var e = this._normalizeCharsSet(t);
            if (e.length === this.chars.length) {
                for (var i = 0; i < e.length; i++)
                    if (e[i] !== this.chars[i])
                        return void this._renderAtlas(e)
            } else
                this._renderAtlas(e)
        }
        ,
        i.updateTextures = function(t) {
            for (var e = this._normalizeCharsSet(t), i = [], n = 0; n < e.length; n++) {
                var s = e[n];
                this.data.chars[s] || i.push(s)
            }
            i.length > 0 && this._renderAtlas(this.chars.concat(i))
        }
        ,
        i.destroy = function() {
            for (var t = 0; t < this.textures.length; t++)
                this.textures[t].destroy();
            this.chars = null,
            this.color = null,
            this.data = null,
            this.fontName = null,
            this.fontSize = null,
            this.glyphSize = null,
            this.intensity = null,
            this.textures = null,
            this.type = null,
            this.fontWeight = null
        }
        ,
        i._getAndClearContext = function(t, e) {
            var i = t.width
              , n = t.height
              , s = t.getContext("2d", {
                alpha: !0
            });
            return s.clearRect(0, 0, i, n),
            s.fillStyle = e,
            s.fillRect(0, 0, i, n),
            s
        }
        ,
        i._colorToRgbString = function(t, e) {
            var i = Math.round(255 * t.r)
              , n = Math.round(255 * t.g)
              , s = Math.round(255 * t.b);
            return e ? "rgba(" + i + ", " + n + ", " + s + ", " + t.a + ")" : "rgb(" + i + ", " + n + ", " + s + ")"
        }
        ,
        i.renderCharacter = function(t, e, i, n, s) {
            t.fillStyle = s,
            t.fillText(e, i, n)
        }
        ,
        i._renderAtlas = function(t) {
            this.chars = t;
            var e = 1
              , i = this.textures[e - 1].getSource()
              , n = i.width
              , s = i.height
              , a = this._colorToRgbString(this.color, !1)
              , r = this.color.a;
            this.color.a = 1 / 255;
            var o = this._colorToRgbString(this.color, !0);
            this.color.a = r;
            var h = "center"
              , l = "alphabetic"
              , c = this._getAndClearContext(i, o);
            c.font = this.fontWeight + " " + this.fontSize.toString() + "px " + this.fontName,
            c.textAlign = h,
            c.textBaseline = l,
            this.data = this._createJson(this.chars, this.fontName, n, s);
            for (var u = U.getSymbols(this.chars.join("")), d = this.textures.length, f = 0, p = 0, m = {}, _ = 0; _ < u.length; _++) {
                var g = u[_];
                m[g] = this._getTextMetrics(g),
                f = Math.max(f, m[g].height),
                p = Math.max(p, m[g].descent)
            }
            this.glyphSize = Math.max(this.glyphSize, f);
            for (var v = this.glyphSize + 2 * this.padding, y = this.glyphSize + 2 * this.padding, x = this.glyphSize / 2 + this.padding, b = y - p - this.padding, S = 0, T = 0, w = 0; w < u.length; w++) {
                var M = u[w]
                  , A = U.getCodePoint(u[w])
                  , C = this.fontSize;
                c.font = this.fontWeight + " " + C.toString() + "px " + this.fontName,
                c.textAlign = h,
                c.textBaseline = l;
                var E = c.measureText(M).width;
                E > C && (C = this.fontSize * this.fontSize / E,
                c.font = this.fontWeight + " " + C.toString() + "px " + this.fontName,
                E = this.fontSize),
                this.renderCharacter(c, M, S + x, T + b, a);
                var P = this.padding + (this.glyphSize - E) / 2
                  , R = -this.padding + m[M].descent - p
                  , I = E;
                if (this._addChar(this.data, M, A, S, T, v, y, P, R, I, e - 1, n, s),
                (S += v) + v > n && (S = 0,
                (T += y) + y > s))
                    if (this.textures[e - 1].upload(),
                    T = 0,
                    ++e > d) {
                        (i = document.createElement("canvas")).height = s,
                        i.width = n,
                        c = this._getAndClearContext(i, o);
                        var L = new Mi(this.app.graphicsDevice,{
                            format: 7,
                            mipmaps: !0
                        });
                        L.name = "font-atlas",
                        L.setSource(i),
                        L.minFilter = 5,
                        L.magFilter = 1,
                        L.addressU = 1,
                        L.addressV = 1,
                        this.textures.push(L)
                    } else
                        i = this.textures[e - 1].getSource(),
                        c = this._getAndClearContext(i, o)
            }
            if (this.textures[e - 1].upload(),
            e < d) {
                for (var D = e; D < d; D++)
                    this.textures[D].destroy();
                this.textures.splice(e)
            }
            this.fire("render")
        }
        ,
        i._createJson = function(t, e, i, n) {
            return {
                version: 3,
                intensity: this.intensity,
                info: {
                    face: e,
                    width: i,
                    height: n,
                    maps: [{
                        width: i,
                        height: n
                    }]
                },
                chars: {}
            }
        }
        ,
        i._addChar = function(t, e, i, n, s, a, r, o, h, l, c, u, d) {
            t.info.maps.length < c + 1 && t.info.maps.push({
                width: u,
                height: d
            });
            var f = this.fontSize / 32;
            t.chars[e] = {
                id: i,
                letter: e,
                x: n,
                y: s,
                width: a,
                height: r,
                xadvance: l / f,
                xoffset: o / f,
                yoffset: (h + this.padding) / f,
                scale: f,
                range: 1,
                map: c,
                bounds: [0, 0, a / f, r / f]
            }
        }
        ,
        i._normalizeCharsSet = function(t) {
            var e = this.app.systems.element.getUnicodeConverter();
            e && (t = e(t));
            for (var i = {}, n = U.getSymbols(t), s = 0; s < n.length; s++) {
                var a = n[s];
                i[a] || (i[a] = a)
            }
            return Object.keys(i).sort()
        }
        ,
        i._getTextMetrics = function(t) {
            var e = document.createElement("span");
            e.id = "content-span",
            e.innerHTML = t;
            var i = document.createElement("div");
            i.id = "content-block",
            i.style.display = "inline-block",
            i.style.width = "1px",
            i.style.height = "0px";
            var n = document.createElement("div");
            n.appendChild(e),
            n.appendChild(i),
            n.style.font = this.fontSize + "px " + this.fontName,
            document.body.appendChild(n);
            var s = -1
              , a = -1
              , r = -1;
            try {
                i.style["vertical-align"] = "baseline",
                s = i.offsetTop - e.offsetTop,
                i.style["vertical-align"] = "bottom",
                a = (r = i.offsetTop - e.offsetTop) - s
            } finally {
                document.body.removeChild(n)
            }
            return {
                ascent: s,
                descent: a,
                height: r
            }
        }
        ,
        e
    }(u)
      , _v = function() {
        function t() {}
        var e = t.prototype;
        return e.load = function(t, e, i) {
            throw new Error("not implemented")
        }
        ,
        e.open = function(t, e, i) {
            throw new Error("not implemented")
        }
        ,
        e.patch = function(t, e) {}
        ,
        t
    }()
      , gv = function() {
        function t(t) {
            this._app = t,
            this.maxRetries = 0
        }
        var e = t.prototype;
        return e.load = function(t, e) {
            sc(t, this.maxRetries, e)
        }
        ,
        e.open = function(t, e) {
            return e.settings
        }
        ,
        t
    }()
      , vv = new RegExp("^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^\\(\\s\\/]*)\\s*")
      , yv = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).initScriptType(e),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.initScriptType = function(t) {
            var e = this.constructor;
            this.app = t.app,
            this.entity = t.entity,
            this._enabled = "boolean" != typeof t.enabled || t.enabled,
            this._enabledOld = this.enabled,
            this.__destroyed = !1,
            this.__attributes = {},
            this.__attributesRaw = t.attributes || {},
            this.__scriptType = e,
            this.__executionOrder = -1
        }
        ,
        e.__getScriptName = function(t) {
            if ("function" == typeof t) {
                if ("name"in Function.prototype)
                    return t.name;
                if (t === Function || t === Function.prototype.constructor)
                    return "Function";
                var e = ("" + t).match(vv);
                return e ? e[1] : void 0
            }
        }
        ,
        i.__initializeAttributes = function(t) {
            if (t || this.__attributesRaw) {
                for (var e in this.__scriptType.attributes.index)
                    this.__attributesRaw && this.__attributesRaw.hasOwnProperty(e) ? this[e] = this.__attributesRaw[e] : this.__attributes.hasOwnProperty(e) || (this.__scriptType.attributes.index[e].hasOwnProperty("default") ? this[e] = this.__scriptType.attributes.index[e].default : this[e] = null);
                this.__attributesRaw = null
            }
        }
        ,
        e.extend = function(t) {
            for (var e in t)
                t.hasOwnProperty(e) && (this.prototype[e] = t[e])
        }
        ,
        G(e, [{
            key: "enabled",
            get: function() {
                return this._enabled && !this._destroyed && this.entity.script.enabled && this.entity.enabled
            },
            set: function(t) {
                this._enabled = !!t,
                this.enabled !== this._enabledOld && (this._enabledOld = this.enabled,
                this.fire(this.enabled ? "enable" : "disable"),
                this.fire("state", this.enabled),
                !this._initialized && this.enabled && (this._initialized = !0,
                this.__initializeAttributes(!0),
                this.initialize && this.entity.script._scriptMethod(this, B_.scriptMethods.initialize)),
                this._initialized && !this._postInitialized && this.enabled && !this.entity.script._beingEnabled && (this._postInitialized = !0,
                this.postInitialize && this.entity.script._scriptMethod(this, B_.scriptMethods.postInitialize)))
            }
        }], [{
            key: "scriptName",
            get: function() {
                return this.__name
            }
        }, {
            key: "attributes",
            get: function() {
                return this.hasOwnProperty("__attributes") || (this.__attributes = new F_(this)),
                this.__attributes
            }
        }]),
        e
    }(u);
    yv.__name = null;
    var xv = new Set(["system", "entity", "create", "destroy", "swap", "move", "scripts", "_scripts", "_scriptsIndex", "_scriptsData", "enabled", "_oldState", "onEnable", "onDisable", "onPostStateChange", "_onSetEnabled", "_checkState", "_onBeforeRemove", "_onInitializeAttributes", "_onInitialize", "_onPostInitialize", "_onUpdate", "_onPostUpdate", "_callbacks", "has", "get", "on", "off", "fire", "once", "hasEvent"]);
    function bv(t, e) {
        if (Rc.legacy)
            return null;
        if (xv.has(t))
            throw new Error("script name: '" + t + "' is reserved, please change script name");
        var i = function(t) {
            u.prototype.initEventHandler.call(this),
            yv.prototype.initScriptType.call(this, t)
        };
        return (i.prototype = Object.create(yv.prototype)).constructor = i,
        i.extend = yv.extend,
        i.attributes = new F_(i),
        Tv(i, t, e),
        i
    }
    var Sv = {};
    function Tv(t, e, i) {
        if (!t.legacy) {
            if ("function" != typeof t)
                throw new Error("script class: '" + t + "' must be a constructor function (i.e. class).");
            if (!(t.prototype instanceof yv))
                throw new Error("script class: '" + yv.__getScriptName(t) + "' does not extend pc.ScriptType.");
            if (e = e || t.__name || yv.__getScriptName(t),
            xv.has(e))
                throw new Error("script name: '" + e + "' is reserved, please change script name");
            t.__name = e,
            (i ? i.scripts : tv.getApplication().scripts).add(t),
            Ic._push(t)
        }
    }
    F_.reservedNames.forEach((function(t, e, i) {
        Sv[t] = 1
    }
    )),
    bv.reservedAttributes = Sv;
    var wv = function(t, e) {
        e ? (this.key = e.keyCode,
        this.element = e.target,
        this.event = e) : (this.key = null,
        this.element = null,
        this.event = null)
    }
      , Mv = new wv;
    function Av(t) {
        return Mv.key = t.keyCode,
        Mv.element = t.target,
        Mv.event = t,
        Mv
    }
    function Cv(t) {
        return "string" == typeof t ? t.toUpperCase().charCodeAt(0) : t
    }
    var Ev = {
        9: "Tab",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        27: "Escape",
        37: "Left",
        38: "Up",
        39: "Right",
        40: "Down",
        46: "Delete",
        91: "Win"
    }
      , Pv = function(t) {
        function e(e, i) {
            var n;
            return void 0 === i && (i = {}),
            (n = t.call(this) || this)._element = null,
            n._keyDownHandler = n._handleKeyDown.bind(j(n)),
            n._keyUpHandler = n._handleKeyUp.bind(j(n)),
            n._keyPressHandler = n._handleKeyPress.bind(j(n)),
            n._visibilityChangeHandler = n._handleVisibilityChange.bind(j(n)),
            n._windowBlurHandler = n._handleWindowBlur.bind(j(n)),
            n._keymap = {},
            n._lastmap = {},
            e && n.attach(e),
            n.preventDefault = i.preventDefault || !1,
            n.stopPropagation = i.stopPropagation || !1,
            n
        }
        H(e, t);
        var i = e.prototype;
        return i.attach = function(t) {
            this._element && this.detach(),
            this._element = t,
            this._element.addEventListener("keydown", this._keyDownHandler, !1),
            this._element.addEventListener("keypress", this._keyPressHandler, !1),
            this._element.addEventListener("keyup", this._keyUpHandler, !1),
            document.addEventListener("visibilitychange", this._visibilityChangeHandler, !1),
            window.addEventListener("blur", this._windowBlurHandler, !1)
        }
        ,
        i.detach = function() {
            this._element.removeEventListener("keydown", this._keyDownHandler),
            this._element.removeEventListener("keypress", this._keyPressHandler),
            this._element.removeEventListener("keyup", this._keyUpHandler),
            this._element = null,
            document.removeEventListener("visibilitychange", this._visibilityChangeHandler, !1),
            window.removeEventListener("blur", this._windowBlurHandler, !1)
        }
        ,
        i.toKeyIdentifier = function(t) {
            t = Cv(t);
            var e = Ev[t.toString()];
            if (e)
                return e;
            for (var i = t.toString(16).toUpperCase(), n = i.length, s = 0; s < 4 - n; s++)
                i = "0" + i;
            return "U+" + i
        }
        ,
        i._handleKeyDown = function(t) {
            var e = t.keyCode || t.charCode;
            if (void 0 !== e) {
                var i = this.toKeyIdentifier(e);
                this._keymap[i] = !0,
                this.fire("keydown", Av(t)),
                this.preventDefault && t.preventDefault(),
                this.stopPropagation && t.stopPropagation()
            }
        }
        ,
        i._handleKeyUp = function(t) {
            var e = t.keyCode || t.charCode;
            if (void 0 !== e) {
                var i = this.toKeyIdentifier(e);
                delete this._keymap[i],
                this.fire("keyup", Av(t)),
                this.preventDefault && t.preventDefault(),
                this.stopPropagation && t.stopPropagation()
            }
        }
        ,
        i._handleKeyPress = function(t) {
            this.fire("keypress", Av(t)),
            this.preventDefault && t.preventDefault(),
            this.stopPropagation && t.stopPropagation()
        }
        ,
        i._handleVisibilityChange = function() {
            "hidden" === document.visibilityState && this._handleWindowBlur()
        }
        ,
        i._handleWindowBlur = function() {
            this._keymap = {},
            this._lastmap = {}
        }
        ,
        i.update = function() {
            for (var t in this._lastmap)
                delete this._lastmap[t];
            for (var e in this._keymap)
                this._keymap.hasOwnProperty(e) && (this._lastmap[e] = this._keymap[e])
        }
        ,
        i.isPressed = function(t) {
            var e = Cv(t)
              , i = this.toKeyIdentifier(e);
            return !!this._keymap[i]
        }
        ,
        i.wasPressed = function(t) {
            var e = Cv(t)
              , i = this.toKeyIdentifier(e);
            return !!this._keymap[i] && !this._lastmap[i]
        }
        ,
        i.wasReleased = function(t) {
            var e = Cv(t)
              , i = this.toKeyIdentifier(e);
            return !this._keymap[i] && !!this._lastmap[i]
        }
        ,
        e
    }(u);
    function Rv() {
        return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement)
    }
    var Iv, Lv, Dv = function t(e, i) {
        var n = {
            x: 0,
            y: 0
        };
        if (i) {
            if (i instanceof t)
                throw Error("Expected MouseEvent");
            n = e._getTargetCoords(i)
        } else
            i = {};
        if (n)
            this.x = n.x,
            this.y = n.y;
        else {
            if (!Rv())
                return;
            this.x = 0,
            this.y = 0
        }
        this.wheelDelta = 0,
        "wheel" === i.type && (i.deltaY > 0 ? this.wheelDelta = 1 : i.deltaY < 0 && (this.wheelDelta = -1)),
        Rv() ? (this.dx = i.movementX || i.webkitMovementX || i.mozMovementX || 0,
        this.dy = i.movementY || i.webkitMovementY || i.mozMovementY || 0) : (this.dx = this.x - e._lastX,
        this.dy = this.y - e._lastY),
        "mousedown" === i.type || "mouseup" === i.type ? this.button = i.button : this.button = -1,
        this.buttons = e._buttons.slice(0),
        this.element = i.target,
        this.ctrlKey = i.ctrlKey || !1,
        this.altKey = i.altKey || !1,
        this.shiftKey = i.shiftKey || !1,
        this.metaKey = i.metaKey || !1,
        this.event = i
    }, kv = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._lastX = 0,
            i._lastY = 0,
            i._buttons = [!1, !1, !1],
            i._lastbuttons = [!1, !1, !1],
            i._upHandler = i._handleUp.bind(j(i)),
            i._downHandler = i._handleDown.bind(j(i)),
            i._moveHandler = i._handleMove.bind(j(i)),
            i._wheelHandler = i._handleWheel.bind(j(i)),
            i._contextMenuHandler = function(t) {
                t.preventDefault()
            }
            ,
            i._target = null,
            i._attached = !1,
            i.attach(e),
            i
        }
        H(e, t),
        e.isPointerLocked = function() {
            return Rv()
        }
        ;
        var i = e.prototype;
        return i.attach = function(t) {
            if (this._target = t,
            !this._attached) {
                this._attached = !0;
                var e = !!E.passiveEvents && {
                    passive: !1
                };
                window.addEventListener("mouseup", this._upHandler, e),
                window.addEventListener("mousedown", this._downHandler, e),
                window.addEventListener("mousemove", this._moveHandler, e),
                window.addEventListener("wheel", this._wheelHandler, e)
            }
        }
        ,
        i.detach = function() {
            if (this._attached) {
                this._attached = !1,
                this._target = null;
                var t = !!E.passiveEvents && {
                    passive: !1
                };
                window.removeEventListener("mouseup", this._upHandler, t),
                window.removeEventListener("mousedown", this._downHandler, t),
                window.removeEventListener("mousemove", this._moveHandler, t),
                window.removeEventListener("wheel", this._wheelHandler, t)
            }
        }
        ,
        i.disableContextMenu = function() {
            this._target && this._target.addEventListener("contextmenu", this._contextMenuHandler)
        }
        ,
        i.enableContextMenu = function() {
            this._target && this._target.removeEventListener("contextmenu", this._contextMenuHandler)
        }
        ,
        i.enablePointerLock = function(t, e) {
            if (document.body.requestPointerLock) {
                t && document.addEventListener("pointerlockchange", (function e() {
                    t(),
                    document.removeEventListener("pointerlockchange", e)
                }
                ), !1),
                e && document.addEventListener("pointerlockerror", (function t() {
                    e(),
                    document.removeEventListener("pointerlockerror", t)
                }
                ), !1),
                document.body.requestPointerLock()
            } else
                e && e()
        }
        ,
        i.disablePointerLock = function(t) {
            if (document.exitPointerLock) {
                t && document.addEventListener("pointerlockchange", (function e() {
                    t(),
                    document.removeEventListener("pointerlockchange", e)
                }
                ), !1),
                document.exitPointerLock()
            }
        }
        ,
        i.update = function() {
            this._lastbuttons[0] = this._buttons[0],
            this._lastbuttons[1] = this._buttons[1],
            this._lastbuttons[2] = this._buttons[2]
        }
        ,
        i.isPressed = function(t) {
            return this._buttons[t]
        }
        ,
        i.wasPressed = function(t) {
            return this._buttons[t] && !this._lastbuttons[t]
        }
        ,
        i.wasReleased = function(t) {
            return !this._buttons[t] && this._lastbuttons[t]
        }
        ,
        i._handleUp = function(t) {
            this._buttons[t.button] = !1;
            var e = new Dv(this,t);
            e.event && this.fire(ug, e)
        }
        ,
        i._handleDown = function(t) {
            this._buttons[t.button] = !0;
            var e = new Dv(this,t);
            e.event && this.fire(lg, e)
        }
        ,
        i._handleMove = function(t) {
            var e = new Dv(this,t);
            e.event && (this.fire(cg, e),
            this._lastX = e.x,
            this._lastY = e.y)
        }
        ,
        i._handleWheel = function(t) {
            var e = new Dv(this,t);
            e.event && this.fire(dg, e)
        }
        ,
        i._getTargetCoords = function(t) {
            var e = this._target.getBoundingClientRect()
              , i = Math.floor(e.left)
              , n = Math.floor(e.top);
            return t.clientX < i || t.clientX >= i + this._target.clientWidth || t.clientY < n || t.clientY >= n + this._target.clientHeight ? null : {
                x: t.clientX - i,
                y: t.clientY - n
            }
        }
        ,
        e
    }(u), Ov = function() {
        function t(t, e) {
            void 0 === e && (e = {}),
            this._keyboard = e.keyboard || null,
            this._mouse = e.mouse || null,
            this._gamepads = e.gamepads || null,
            this._element = null,
            this._actions = {},
            this._axes = {},
            this._axesValues = {},
            t && this.attach(t)
        }
        var e = t.prototype;
        return e.attach = function(t) {
            this._element = t,
            this._keyboard && this._keyboard.attach(t),
            this._mouse && this._mouse.attach(t)
        }
        ,
        e.detach = function() {
            this._keyboard && this._keyboard.detach(),
            this._mouse && this._mouse.detach(),
            this._element = null
        }
        ,
        e.disableContextMenu = function() {
            this._mouse || this._enableMouse(),
            this._mouse.disableContextMenu()
        }
        ,
        e.enableContextMenu = function() {
            this._mouse || this._enableMouse(),
            this._mouse.enableContextMenu()
        }
        ,
        e.update = function(t) {
            for (var e in this._keyboard && this._keyboard.update(t),
            this._mouse && this._mouse.update(t),
            this._gamepads && this._gamepads.update(t),
            this._axesValues = {},
            this._axes)
                this._axesValues[e] = []
        }
        ,
        e.registerKeys = function(t, e) {
            if (this._keyboard || this._enableKeyboard(),
            this._actions[t])
                throw new Error("Action: " + t + " already registered");
            if (void 0 === e)
                throw new Error("Invalid button");
            e.length || (e = [e]),
            this._actions[t] ? this._actions[t].push({
                type: og,
                keys: e
            }) : this._actions[t] = [{
                type: og,
                keys: e
            }]
        }
        ,
        e.registerMouse = function(t, e) {
            if (this._mouse || this._enableMouse(),
            void 0 === e)
                throw new Error("Invalid button");
            this._actions[t] ? this._actions[t].push({
                type: rg,
                button: e
            }) : this._actions[t] = [{
                type: rg,
                button: -e
            }]
        }
        ,
        e.registerPadButton = function(t, e, i) {
            if (void 0 === i)
                throw new Error("Invalid button");
            this._actions[t] ? this._actions[t].push({
                type: hg,
                button: i,
                pad: e
            }) : this._actions[t] = [{
                type: hg,
                button: i,
                pad: e
            }]
        }
        ,
        e.registerAxis = function(t) {
            var e = t.name;
            this._axes[e] || (this._axes[e] = []);
            var i = this._axes[e].push(e);
            (t = t || {}).pad = t.pad || 0;
            var n = function(n, s, a, r) {
                switch (s) {
                case "mousex":
                    n._mouse.on(cg, (function(t) {
                        n._axesValues[e][i] = t.dx / 10
                    }
                    ));
                    break;
                case "mousey":
                    n._mouse.on(cg, (function(t) {
                        n._axesValues[e][i] = t.dy / 10
                    }
                    ));
                    break;
                case "key":
                    n._axes[e].push((function() {
                        return n._keyboard.isPressed(r) ? a : 0
                    }
                    ));
                    break;
                case "padrx":
                    n._axes[e].push((function() {
                        return n._gamepads.getAxis(t.pad, 2)
                    }
                    ));
                    break;
                case "padry":
                    n._axes[e].push((function() {
                        return n._gamepads.getAxis(t.pad, 3)
                    }
                    ));
                    break;
                case "padlx":
                    n._axes[e].push((function() {
                        return n._gamepads.getAxis(t.pad, 0)
                    }
                    ));
                    break;
                case "padly":
                    n._axes[e].push((function() {
                        return n._gamepads.getAxis(t.pad, 1)
                    }
                    ));
                    break;
                default:
                    throw new Error("Unknown axis")
                }
            };
            n(this, t.positive, 1, t.positiveKey),
            (t.negativeKey || t.negative !== t.positive) && n(this, t.negative, -1, t.negativeKey)
        }
        ,
        e.isPressed = function(t) {
            if (!this._actions[t])
                return !1;
            for (var e = this._actions[t].length, i = 0; i < e; ++i) {
                var n = this._actions[t][i];
                switch (n.type) {
                case og:
                    if (this._keyboard)
                        for (var s = n.keys.length, a = 0; a < s; a++)
                            if (this._keyboard.isPressed(n.keys[a]))
                                return !0;
                    break;
                case rg:
                    if (this._mouse && this._mouse.isPressed(n.button))
                        return !0;
                    break;
                case hg:
                    if (this._gamepads && this._gamepads.isPressed(n.pad, n.button))
                        return !0
                }
            }
            return !1
        }
        ,
        e.wasPressed = function(t) {
            if (!this._actions[t])
                return !1;
            for (var e = this._actions[t].length, i = 0; i < e; ++i) {
                var n = this._actions[t][i];
                switch (n.type) {
                case og:
                    if (this._keyboard)
                        for (var s = n.keys.length, a = 0; a < s; a++)
                            if (this._keyboard.wasPressed(n.keys[a]))
                                return !0;
                    break;
                case rg:
                    if (this._mouse && this._mouse.wasPressed(n.button))
                        return !0;
                    break;
                case hg:
                    if (this._gamepads && this._gamepads.wasPressed(n.pad, n.button))
                        return !0
                }
            }
            return !1
        }
        ,
        e.getAxis = function(t) {
            var e = 0;
            if (this._axes[t])
                for (var i = this._axes[t].length, n = 0; n < i; n++)
                    if ("function" === h(this._axes[t][n])) {
                        var s = this._axes[t][n]();
                        Math.abs(s) > Math.abs(e) && (e = s)
                    } else
                        this._axesValues[t] && Math.abs(this._axesValues[t][n]) > Math.abs(e) && (e = this._axesValues[t][n]);
            return e
        }
        ,
        e._enableMouse = function() {
            if (this._mouse = new kv,
            !this._element)
                throw new Error("Controller must be attached to an Element");
            this._mouse.attach(this._element)
        }
        ,
        e._enableKeyboard = function() {
            if (this._keyboard = new Pv,
            !this._element)
                throw new Error("Controller must be attached to an Element");
            this._keyboard.attach(this._element)
        }
        ,
        t
    }(), Fv = new lt, Bv = new lt, Nv = new zt, Uv = new zt, zv = new zt;
    Nv.end = new lt,
    Uv.end = new lt,
    zv.end = new lt;
    var Vv = new lt
      , Gv = new lt
      , Wv = new lt
      , Hv = new lt
      , Xv = new lt
      , jv = new lt
      , qv = new lt
      , Yv = new lt
      , Kv = new lt
      , Zv = new lt
      , $v = new lt
      , Qv = new lt
      , Jv = new lt
      , ty = new lt
      , ey = new lt
      , iy = new lt
      , ny = new lt
      , sy = new lt
      , ay = new lt
      , ry = new lt
      , oy = new dt;
    function hy(t, e, i) {
        return $v.cross(t, e).dot(i)
    }
    var ly = function() {
        function t(t, e, i) {
            this.event = t,
            this.element = e,
            this.camera = i,
            this._stopPropagation = !1
        }
        return t.prototype.stopPropagation = function() {
            this._stopPropagation = !0,
            this.event && (this.event.stopImmediatePropagation(),
            this.event.stopPropagation())
        }
        ,
        t
    }()
      , cy = function(t) {
        function e(e, i, n, s, a, r, o) {
            var h;
            return (h = t.call(this, e, i, n) || this).x = s,
            h.y = a,
            h.ctrlKey = e.ctrlKey || !1,
            h.altKey = e.altKey || !1,
            h.shiftKey = e.shiftKey || !1,
            h.metaKey = e.metaKey || !1,
            h.button = e.button,
            kv.isPointerLocked() ? (h.dx = e.movementX || e.webkitMovementX || e.mozMovementX || 0,
            h.dy = e.movementY || e.webkitMovementY || e.mozMovementY || 0) : (h.dx = s - r,
            h.dy = a - o),
            h.wheelDelta = 0,
            "wheel" === e.type && (e.deltaY > 0 ? h.wheelDelta = 1 : e.deltaY < 0 && (h.wheelDelta = -1)),
            h
        }
        return H(e, t),
        e
    }(ly)
      , uy = function(t) {
        function e(e, i, n, s, a, r) {
            var o;
            return (o = t.call(this, e, i, n) || this).touches = e.touches,
            o.changedTouches = e.changedTouches,
            o.x = s,
            o.y = a,
            o.touch = r,
            o
        }
        return H(e, t),
        e
    }(ly)
      , dy = function(t) {
        function e(e, i, n, s) {
            var a;
            return (a = t.call(this, e, i, n) || this).inputSource = s,
            a
        }
        return H(e, t),
        e
    }(ly)
      , fy = function() {
        function t(t, e) {
            this._app = null,
            this._attached = !1,
            this._target = null,
            this._enabled = !0,
            this._lastX = 0,
            this._lastY = 0,
            this._upHandler = this._handleUp.bind(this),
            this._downHandler = this._handleDown.bind(this),
            this._moveHandler = this._handleMove.bind(this),
            this._wheelHandler = this._handleWheel.bind(this),
            this._touchstartHandler = this._handleTouchStart.bind(this),
            this._touchendHandler = this._handleTouchEnd.bind(this),
            this._touchcancelHandler = this._touchendHandler,
            this._touchmoveHandler = this._handleTouchMove.bind(this),
            this._sortHandler = this._sortElements.bind(this),
            this._elements = [],
            this._hoveredElement = null,
            this._pressedElement = null,
            this._touchedElements = {},
            this._touchesForWhichTouchLeaveHasFired = {},
            this._selectedElements = {},
            this._selectedPressedElements = {},
            this._useMouse = !e || !1 !== e.useMouse,
            this._useTouch = !e || !1 !== e.useTouch,
            this._useXr = !e || !1 !== e.useXr,
            this._selectEventsAttached = !1,
            E.touch && (this._clickedEntities = {}),
            this.attach(t)
        }
        var e = t.prototype;
        return e.attach = function(t) {
            this._attached && (this._attached = !1,
            this.detach()),
            this._target = t,
            this._attached = !0;
            var e = !!E.passiveEvents && {
                passive: !0
            };
            this._useMouse && (window.addEventListener("mouseup", this._upHandler, e),
            window.addEventListener("mousedown", this._downHandler, e),
            window.addEventListener("mousemove", this._moveHandler, e),
            window.addEventListener("wheel", this._wheelHandler, e)),
            this._useTouch && E.touch && (this._target.addEventListener("touchstart", this._touchstartHandler, e),
            this._target.addEventListener("touchend", this._touchendHandler, !1),
            this._target.addEventListener("touchmove", this._touchmoveHandler, !1),
            this._target.addEventListener("touchcancel", this._touchcancelHandler, !1)),
            this.attachSelectEvents()
        }
        ,
        e.attachSelectEvents = function() {
            !this._selectEventsAttached && this._useXr && this.app && this.app.xr && this.app.xr.supported && (this._clickedEntities || (this._clickedEntities = {}),
            this._selectEventsAttached = !0,
            this.app.xr.on("start", this._onXrStart, this))
        }
        ,
        e.detach = function() {
            if (this._attached) {
                this._attached = !1;
                var t = !!E.passiveEvents && {
                    passive: !0
                };
                this._useMouse && (window.removeEventListener("mouseup", this._upHandler, t),
                window.removeEventListener("mousedown", this._downHandler, t),
                window.removeEventListener("mousemove", this._moveHandler, t),
                window.removeEventListener("wheel", this._wheelHandler, t)),
                this._useTouch && (this._target.removeEventListener("touchstart", this._touchstartHandler, t),
                this._target.removeEventListener("touchend", this._touchendHandler, !1),
                this._target.removeEventListener("touchmove", this._touchmoveHandler, !1),
                this._target.removeEventListener("touchcancel", this._touchcancelHandler, !1)),
                this._selectEventsAttached && (this._selectEventsAttached = !1,
                this.app.xr.off("start", this._onXrStart, this),
                this.app.xr.off("end", this._onXrEnd, this),
                this.app.xr.off("update", this._onXrUpdate, this),
                this.app.xr.input.off("selectstart", this._onSelectStart, this),
                this.app.xr.input.off("selectend", this._onSelectEnd, this),
                this.app.xr.input.off("remove", this._onXrInputRemove, this)),
                this._target = null
            }
        }
        ,
        e.addElement = function(t) {
            -1 === this._elements.indexOf(t) && this._elements.push(t)
        }
        ,
        e.removeElement = function(t) {
            var e = this._elements.indexOf(t);
            -1 !== e && this._elements.splice(e, 1)
        }
        ,
        e._handleUp = function(t) {
            this._enabled && (kv.isPointerLocked() || (this._calcMouseCoords(t),
            null !== Iv && this._onElementMouseEvent("mouseup", t)))
        }
        ,
        e._handleDown = function(t) {
            this._enabled && (kv.isPointerLocked() || (this._calcMouseCoords(t),
            null !== Iv && this._onElementMouseEvent("mousedown", t)))
        }
        ,
        e._handleMove = function(t) {
            this._enabled && (this._calcMouseCoords(t),
            null !== Iv && (this._onElementMouseEvent("mousemove", t),
            this._lastX = Iv,
            this._lastY = Lv))
        }
        ,
        e._handleWheel = function(t) {
            this._enabled && (this._calcMouseCoords(t),
            null !== Iv && this._onElementMouseEvent("mousewheel", t))
        }
        ,
        e._determineTouchedElements = function(t) {
            for (var e = {}, i = this.app.systems.camera.cameras, n = i.length - 1; n >= 0; n--) {
                for (var s = i[n], a = 0, r = t.changedTouches.length, o = 0; o < r; o++)
                    if (e[t.changedTouches[o].identifier])
                        a++;
                    else {
                        var h = this._calcTouchCoords(t.changedTouches[o])
                          , l = this._getTargetElement(s, h.x, h.y);
                        l && (a++,
                        e[t.changedTouches[o].identifier] = {
                            element: l,
                            camera: s,
                            x: h.x,
                            y: h.y
                        })
                    }
                if (a === r)
                    break
            }
            return e
        }
        ,
        e._handleTouchStart = function(t) {
            if (this._enabled) {
                for (var e = this._determineTouchedElements(t), i = 0, n = t.changedTouches.length; i < n; i++) {
                    var s = t.changedTouches[i]
                      , a = e[s.identifier]
                      , r = this._touchedElements[s.identifier];
                    !a || r && a.element === r.element || (this._fireEvent(t.type, new uy(t,a.element,a.camera,a.x,a.y,s)),
                    this._touchesForWhichTouchLeaveHasFired[s.identifier] = !1)
                }
                for (var o in e)
                    this._touchedElements[o] = e[o]
            }
        }
        ,
        e._handleTouchEnd = function(t) {
            if (this._enabled) {
                var e = this.app.systems.camera.cameras;
                for (var i in this._clickedEntities)
                    delete this._clickedEntities[i];
                for (var n = 0, s = t.changedTouches.length; n < s; n++) {
                    var a = t.changedTouches[n]
                      , r = this._touchedElements[a.identifier];
                    if (r) {
                        var o = r.element
                          , h = r.camera
                          , l = r.x
                          , c = r.y;
                        if (delete this._touchedElements[a.identifier],
                        delete this._touchesForWhichTouchLeaveHasFired[a.identifier],
                        this._fireEvent(t.type, new uy(t,o,h,l,c,a)),
                        0 === t.touches.length)
                            for (var u = this._calcTouchCoords(a), d = e.length - 1; d >= 0; d--) {
                                this._getTargetElement(e[d], u.x, u.y) === o && (this._clickedEntities[o.entity.getGuid()] || (this._fireEvent("click", new uy(t,o,h,l,c,a)),
                                this._clickedEntities[o.entity.getGuid()] = !0))
                            }
                    }
                }
            }
        }
        ,
        e._handleTouchMove = function(t) {
            if (t.preventDefault(),
            this._enabled)
                for (var e = this._determineTouchedElements(t), i = 0, n = t.changedTouches.length; i < n; i++) {
                    var s = t.changedTouches[i]
                      , a = e[s.identifier]
                      , r = this._touchedElements[s.identifier];
                    if (r) {
                        var o = this._calcTouchCoords(s);
                        a && a.element === r.element || this._touchesForWhichTouchLeaveHasFired[s.identifier] || (this._fireEvent("touchleave", new uy(t,r.element,r.camera,o.x,o.y,s)),
                        this._touchesForWhichTouchLeaveHasFired[s.identifier] = !0),
                        this._fireEvent("touchmove", new uy(t,r.element,r.camera,o.x,o.y,s))
                    }
                }
        }
        ,
        e._onElementMouseEvent = function(t, e) {
            var i, n = this._hoveredElement;
            this._hoveredElement = null;
            for (var s, a = this.app.systems.camera.cameras, r = a.length - 1; r >= 0 && (s = a[r],
            !(i = this._getTargetElement(s, Iv, Lv))); r--)
                ;
            i && (this._fireEvent(t, new cy(e,i,s,Iv,Lv,this._lastX,this._lastY)),
            this._hoveredElement = i,
            "mousedown" === t && (this._pressedElement = i)),
            n !== this._hoveredElement && (n && this._fireEvent("mouseleave", new cy(e,n,s,Iv,Lv,this._lastX,this._lastY)),
            this._hoveredElement && this._fireEvent("mouseenter", new cy(e,this._hoveredElement,s,Iv,Lv,this._lastX,this._lastY))),
            "mouseup" === t && this._pressedElement && (this._pressedElement === this._hoveredElement ? (this._pressedElement = null,
            this._clickedEntities && this._clickedEntities[this._hoveredElement.entity.getGuid()] || this._fireEvent("click", new cy(e,this._hoveredElement,s,Iv,Lv,this._lastX,this._lastY))) : this._pressedElement = null)
        }
        ,
        e._onXrStart = function() {
            this.app.xr.on("end", this._onXrEnd, this),
            this.app.xr.on("update", this._onXrUpdate, this),
            this.app.xr.input.on("selectstart", this._onSelectStart, this),
            this.app.xr.input.on("selectend", this._onSelectEnd, this),
            this.app.xr.input.on("remove", this._onXrInputRemove, this)
        }
        ,
        e._onXrEnd = function() {
            this.app.xr.off("update", this._onXrUpdate, this),
            this.app.xr.input.off("selectstart", this._onSelectStart, this),
            this.app.xr.input.off("selectend", this._onSelectEnd, this),
            this.app.xr.input.off("remove", this._onXrInputRemove, this)
        }
        ,
        e._onXrUpdate = function() {
            if (this._enabled)
                for (var t = this.app.xr.input.inputSources, e = 0; e < t.length; e++)
                    this._onElementSelectEvent("selectmove", t[e], null)
        }
        ,
        e._onXrInputRemove = function(t) {
            var e = this._selectedElements[t.id];
            e && (t._elementEntity = null,
            this._fireEvent("selectleave", new dy(null,e,null,t))),
            delete this._selectedElements[t.id],
            delete this._selectedPressedElements[t.id]
        }
        ,
        e._onSelectStart = function(t, e) {
            this._enabled && this._onElementSelectEvent("selectstart", t, e)
        }
        ,
        e._onSelectEnd = function(t, e) {
            this._enabled && this._onElementSelectEvent("selectend", t, e)
        }
        ,
        e._onElementSelectEvent = function(t, e, i) {
            var n, s, a, r = this._selectedElements[e.id], o = this.app.systems.camera.cameras;
            if (e.elementInput) {
                zv.set(e.getOrigin(), e.getDirection());
                for (var h = o.length - 1; h >= 0 && (a = o[h],
                !(n = this._getTargetElementByRay(zv, a))); h--)
                    ;
            }
            e._elementEntity = n || null,
            n ? (this._selectedElements[e.id] = n,
            s = n) : delete this._selectedElements[e.id],
            r !== s && (r && this._fireEvent("selectleave", new dy(i,r,a,e)),
            s && this._fireEvent("selectenter", new dy(i,s,a,e))),
            "selectstart" === t && (this._selectedPressedElements[e.id] = s,
            s && this._fireEvent("selectstart", new dy(i,s,a,e)));
            var l = this._selectedPressedElements[e.id];
            !e.elementInput && l && (delete this._selectedPressedElements[e.id],
            r && this._fireEvent("selectend", new dy(i,r,a,e))),
            "selectend" === t && e.elementInput && (delete this._selectedPressedElements[e.id],
            r && this._fireEvent("selectend", new dy(i,r,a,e)),
            l && l === r && this._fireEvent("click", new dy(i,l,a,e)))
        }
        ,
        e._fireEvent = function(t, e) {
            for (var i = e.element; i.fire(t, e),
            !e._stopPropagation && i.entity.parent && (i = i.entity.parent.element); )
                ;
        }
        ,
        e._calcMouseCoords = function(t) {
            var e = this._target.getBoundingClientRect()
              , i = Math.floor(e.left)
              , n = Math.floor(e.top);
            t.clientX < i || t.clientX >= i + this._target.clientWidth || t.clientY < n || t.clientY >= n + this._target.clientHeight ? (Iv = null,
            Lv = null) : (Iv = t.clientX - i,
            Lv = t.clientY - n)
        }
        ,
        e._calcTouchCoords = function(t) {
            for (var e = 0, i = 0, n = t.target; !(n instanceof HTMLElement); )
                n = n.parentNode;
            var s = n;
            do {
                e += s.offsetLeft - s.scrollLeft,
                i += s.offsetTop - s.scrollTop,
                s = s.offsetParent
            } while (s);
            return {
                x: t.pageX - e,
                y: t.pageY - i
            }
        }
        ,
        e._sortElements = function(t, e) {
            var i = this.app.scene.layers.sortTransparentLayers(t.layers, e.layers);
            return 0 !== i ? i : t.screen && !e.screen ? -1 : !t.screen && e.screen ? 1 : t.screen || e.screen ? t.screen.screen.screenSpace && !e.screen.screen.screenSpace ? -1 : e.screen.screen.screenSpace && !t.screen.screen.screenSpace ? 1 : e.drawOrder - t.drawOrder : 0
        }
        ,
        e._getTargetElement = function(t, e, i) {
            var n, s, a = null, r = 1 / 0;
            this._elements.sort(this._sortHandler);
            for (var o = 0, h = this._elements.length; o < h; o++) {
                var l = this._elements[o];
                if (l.screen && l.screen.screen.screenSpace) {
                    if (void 0 === n && (n = this._calculateRayScreen(e, i, t, Nv) ? Nv : null),
                    !n)
                        continue;
                    if (this._checkElement(n, l, !0) >= 0) {
                        a = l;
                        break
                    }
                } else {
                    if (void 0 === s && (s = this._calculateRay3d(e, i, t, Uv) ? Uv : null),
                    !s)
                        continue;
                    var c = this._checkElement(s, l, !1);
                    if (c >= 0 && (c < r && (a = l,
                    r = c),
                    l.screen)) {
                        a = l;
                        break
                    }
                }
            }
            return a
        }
        ,
        e._getTargetElementByRay = function(t, e) {
            var i = null;
            Nv.origin.copy(t.origin),
            Nv.direction.copy(t.direction),
            Nv.end.copy(Nv.direction).mulScalar(2 * e.farClip).add(Nv.origin),
            this._elements.sort(this._sortHandler);
            for (var n = 0, s = this._elements.length; n < s; n++) {
                var a = this._elements[n];
                if ((!a.screen || !a.screen.screen.screenSpace) && this._checkElement(Nv, a, !1) >= 0) {
                    i = a;
                    break
                }
            }
            return i
        }
        ,
        e._buildHitCorners = function(t, e, i, n, s) {
            var a = e;
            if (t.entity && t.entity.button) {
                var r = t.entity.button.hitPadding || oy;
                Jv.copy(t.entity.up),
                ty.copy(Jv).mulScalar(-1),
                iy.copy(t.entity.right),
                ey.copy(iy).mulScalar(-1),
                Jv.mulScalar(r.w * n),
                ty.mulScalar(r.y * n),
                iy.mulScalar(r.z * i),
                ey.mulScalar(r.x * i),
                ny.copy(a[0]).add(ty).add(ey),
                sy.copy(a[1]).add(ty).add(iy),
                ay.copy(a[2]).add(Jv).add(iy),
                ry.copy(a[3]).add(Jv).add(ey),
                a = [ny, sy, ay, ry]
            }
            if (i < 0) {
                var o = a[2].x
                  , h = a[0].x;
                a[0].x = o,
                a[1].x = h,
                a[2].x = h,
                a[3].x = o
            }
            if (n < 0) {
                var l = a[2].y
                  , c = a[0].y;
                a[0].y = l,
                a[1].y = l,
                a[2].y = c,
                a[3].y = c
            }
            if (s < 0) {
                var u = a[2].x
                  , d = a[2].y
                  , f = a[2].z;
                a[2].x = a[0].x,
                a[2].y = a[0].y,
                a[2].z = a[0].z,
                a[0].x = u,
                a[0].y = d,
                a[0].z = f
            }
            return a
        }
        ,
        e._calculateScaleToScreen = function(t) {
            var e = t.entity
              , i = t.screen.screen.scale;
            for (Qv.set(i, i, i); e && !e.screen; )
                Qv.mul(e.getLocalScale()),
                e = e.parent;
            return Qv
        }
        ,
        e._calculateScaleToWorld = function(t) {
            var e = t.entity;
            for (Qv.set(1, 1, 1); e; )
                Qv.mul(e.getLocalScale()),
                e = e.parent;
            return Qv
        }
        ,
        e._calculateRayScreen = function(t, e, i, n) {
            var s = this.app.graphicsDevice.width
              , a = this.app.graphicsDevice.height
              , r = i.rect.z * s
              , o = i.rect.w * a
              , h = i.rect.x * s
              , l = h + r
              , c = (1 - i.rect.y) * a
              , u = c - o
              , d = t * s / this._target.clientWidth
              , f = e * a / this._target.clientHeight;
            return d >= h && d <= l && f <= c && f >= u && (d = s * (d - h) / r,
            f = a - (f = a * (f - u) / o),
            n.origin.set(d, f, 1),
            n.direction.set(0, 0, -1),
            n.end.copy(n.direction).mulScalar(2).add(n.origin),
            !0)
        }
        ,
        e._calculateRay3d = function(t, e, i, n) {
            var s = this._target.clientWidth
              , a = this._target.clientHeight
              , r = i.rect.z * s
              , o = i.rect.w * a
              , h = i.rect.x * s
              , l = h + r
              , c = (1 - i.rect.y) * a
              , u = c - o
              , d = t
              , f = e;
            return t >= h && t <= l && e <= c && f >= u && (d = s * (d - h) / r,
            f = a * (f - u) / o,
            i.screenToWorld(d, f, i.nearClip, Fv),
            i.screenToWorld(d, f, i.farClip, Bv),
            n.origin.copy(Fv),
            n.direction.set(0, 0, -1),
            n.end.copy(Bv),
            !0)
        }
        ,
        e._checkElement = function(t, e, i) {
            if (e.maskedBy && this._checkElement(t, e.maskedBy.element, i) < 0)
                return -1;
            var n;
            n = i ? this._calculateScaleToScreen(e) : this._calculateScaleToWorld(e);
            var s = this._buildHitCorners(e, i ? e.screenCorners : e.worldCorners, n.x, n.y, n.z);
            return function(t, e, i) {
                Vv.sub2(e, t),
                Gv.sub2(i[0], t),
                Wv.sub2(i[1], t),
                Hv.sub2(i[2], t),
                jv.cross(Hv, Vv);
                var n, s, a = Gv.dot(jv);
                if (a >= 0) {
                    if ((n = -Wv.dot(jv)) < 0)
                        return -1;
                    if ((s = hy(Vv, Wv, Gv)) < 0)
                        return -1;
                    var r = 1 / (n + a + s);
                    qv.copy(i[0]).mulScalar(n * r),
                    Yv.copy(i[1]).mulScalar(a * r),
                    Kv.copy(i[2]).mulScalar(s * r),
                    Zv.copy(qv).add(Yv).add(Kv)
                } else {
                    if (Xv.sub2(i[3], t),
                    (n = Xv.dot(jv)) < 0)
                        return -1;
                    if ((s = hy(Vv, Gv, Xv)) < 0)
                        return -1;
                    var o = 1 / (n + (a = -a) + s);
                    qv.copy(i[0]).mulScalar(n * o),
                    Yv.copy(i[3]).mulScalar(a * o),
                    Kv.copy(i[2]).mulScalar(s * o),
                    Zv.copy(qv).add(Yv).add(Kv)
                }
                return Vv.sub2(i[0], i[2]).lengthSq() < 1e-8 || Vv.sub2(i[1], i[3]).lengthSq() < 1e-8 ? -1 : Zv.sub(t).lengthSq()
            }(t.origin, t.end, s)
        }
        ,
        G(t, [{
            key: "enabled",
            get: function() {
                return this._enabled
            },
            set: function(t) {
                this._enabled = t
            }
        }, {
            key: "app",
            get: function() {
                return this._app || _n()
            },
            set: function(t) {
                this._app = t
            }
        }]),
        t
    }()
      , py = {
        DEFAULT: {
            buttons: ["PAD_FACE_1", "PAD_FACE_2", "PAD_FACE_3", "PAD_FACE_4", "PAD_L_SHOULDER_1", "PAD_R_SHOULDER_1", "PAD_L_SHOULDER_2", "PAD_R_SHOULDER_2", "PAD_SELECT", "PAD_START", "PAD_L_STICK_BUTTON", "PAD_R_STICK_BUTTON", "PAD_UP", "PAD_DOWN", "PAD_LEFT", "PAD_RIGHT", "PAD_VENDOR"],
            axes: ["PAD_L_STICK_X", "PAD_L_STICK_Y", "PAD_R_STICK_X", "PAD_R_STICK_Y"]
        },
        PS3: {
            buttons: ["PAD_FACE_1", "PAD_FACE_2", "PAD_FACE_4", "PAD_FACE_3", "PAD_L_SHOULDER_1", "PAD_R_SHOULDER_1", "PAD_L_SHOULDER_2", "PAD_R_SHOULDER_2", "PAD_SELECT", "PAD_START", "PAD_L_STICK_BUTTON", "PAD_R_STICK_BUTTON", "PAD_UP", "PAD_DOWN", "PAD_LEFT", "PAD_RIGHT", "PAD_VENDOR"],
            axes: ["PAD_L_STICK_X", "PAD_L_STICK_Y", "PAD_R_STICK_X", "PAD_R_STICK_Y"]
        }
    }
      , my = {
        "Product: 0268": "PS3"
    }
      , _y = function() {
        function t() {
            this.gamepadsSupported = !!navigator.getGamepads || !!navigator.webkitGetGamepads,
            this.current = [],
            this.previous = [],
            this.deadZone = .25
        }
        var e = t.prototype;
        return e.update = function() {
            for (var t = 0, e = this.current.length; t < e; t++)
                for (var i = this.current[t].pad.buttons, n = i.length, s = 0; s < n; s++)
                    void 0 === this.previous[t] && (this.previous[t] = []),
                    this.previous[t][s] = i[s].pressed;
            this.poll(this.current)
        }
        ,
        e.poll = function(t) {
            if (void 0 === t && (t = []),
            t.length > 0 && (t.length = 0),
            this.gamepadsSupported)
                for (var e = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads(), i = 0, n = e.length; i < n; i++)
                    e[i] && t.push({
                        map: this.getMap(e[i]),
                        pad: e[i]
                    });
            return t
        }
        ,
        e.getMap = function(t) {
            for (var e in my)
                if (t.id.indexOf(e) >= 0)
                    return py[my[e]];
            return py.DEFAULT
        }
        ,
        e.isPressed = function(t, e) {
            if (!this.current[t])
                return !1;
            var i = this.current[t].map.buttons[e];
            return this.current[t].pad.buttons[pc[i]].pressed
        }
        ,
        e.wasPressed = function(t, e) {
            if (!this.current[t])
                return !1;
            var i = this.current[t].map.buttons[e]
              , n = pc[i];
            return this.current[t].pad.buttons[n].pressed && !(this.previous[t] && this.previous[t][n])
        }
        ,
        e.wasReleased = function(t, e) {
            if (!this.current[t])
                return !1;
            var i = this.current[t].map.buttons[e]
              , n = pc[i];
            return !this.current[t].pad.buttons[n].pressed && this.previous[t] && this.previous[t][n]
        }
        ,
        e.getAxis = function(t, e) {
            if (!this.current[t])
                return 0;
            var i = this.current[t].map.axes[e]
              , n = this.current[t].pad.axes[pc[i]];
            return Math.abs(n) < this.deadZone && (n = 0),
            n
        }
        ,
        t
    }();
    function gy(t) {
        for (var e = 0, i = 0, n = t.target; !(n instanceof HTMLElement); )
            n = n.parentNode;
        var s = n;
        do {
            e += s.offsetLeft - s.scrollLeft,
            i += s.offsetTop - s.scrollTop,
            s = s.offsetParent
        } while (s);
        return {
            x: t.pageX - e,
            y: t.pageY - i
        }
    }
    var vy = function(t) {
        var e = gy(t);
        this.id = t.identifier,
        this.x = e.x,
        this.y = e.y,
        this.target = t.target,
        this.touch = t
    }
      , yy = function() {
        function t(t, e) {
            if (this.element = e.target,
            this.event = e,
            this.touches = [],
            this.changedTouches = [],
            e) {
                for (var i = 0, n = e.touches.length; i < n; i++)
                    this.touches.push(new vy(e.touches[i]));
                for (var s = 0, a = e.changedTouches.length; s < a; s++)
                    this.changedTouches.push(new vy(e.changedTouches[s]))
            }
        }
        return t.prototype.getTouchById = function(t, e) {
            for (var i = 0, n = e.length; i < n; i++)
                if (e[i].id === t)
                    return e[i];
            return null
        }
        ,
        t
    }()
      , xy = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this)._element = null,
            i._startHandler = i._handleTouchStart.bind(j(i)),
            i._endHandler = i._handleTouchEnd.bind(j(i)),
            i._moveHandler = i._handleTouchMove.bind(j(i)),
            i._cancelHandler = i._handleTouchCancel.bind(j(i)),
            i.attach(e),
            i
        }
        H(e, t);
        var i = e.prototype;
        return i.attach = function(t) {
            this._element && this.detach(),
            this._element = t,
            this._element.addEventListener("touchstart", this._startHandler, !1),
            this._element.addEventListener("touchend", this._endHandler, !1),
            this._element.addEventListener("touchmove", this._moveHandler, !1),
            this._element.addEventListener("touchcancel", this._cancelHandler, !1)
        }
        ,
        i.detach = function() {
            this._element && (this._element.removeEventListener("touchstart", this._startHandler, !1),
            this._element.removeEventListener("touchend", this._endHandler, !1),
            this._element.removeEventListener("touchmove", this._moveHandler, !1),
            this._element.removeEventListener("touchcancel", this._cancelHandler, !1)),
            this._element = null
        }
        ,
        i._handleTouchStart = function(t) {
            this.fire("touchstart", new yy(this,t))
        }
        ,
        i._handleTouchEnd = function(t) {
            this.fire("touchend", new yy(this,t))
        }
        ,
        i._handleTouchMove = function(t) {
            t.preventDefault(),
            this.fire("touchmove", new yy(this,t))
        }
        ,
        i._handleTouchCancel = function(t) {
            this.fire("touchcancel", new yy(this,t))
        }
        ,
        e
    }(u)
      , by = {
        write: function(t) {
            console.log(t)
        },
        open: function() {
            by.write("Powered by PlayCanvas 1.50.2 db39f193d")
        },
        info: function(t) {
            console.info("INFO:    " + t)
        },
        debug: function(t) {
            console.debug("DEBUG:   " + t)
        },
        error: function(t) {
            console.error("ERROR:   " + t)
        },
        warning: function(t) {
            console.warn("WARNING: " + t)
        },
        alert: function(t) {
            function e(e) {
                return t.apply(this, arguments)
            }
            return e.toString = function() {
                return t.toString()
            }
            ,
            e
        }((function(t) {
            by.write("ALERT:   " + t),
            alert(t)
        }
        )),
        assert: function(t, e) {
            !1 === t && by.write("ASSERT:  " + e)
        }
    };
    U.endsWith = function(t, e) {
        return t.endsWith(e)
    }
    ,
    U.startsWith = function(t, e) {
        return t.startsWith(e)
    }
    ;
    var Sy = {
        now: Q,
        Timer: J
    };
    Object.defineProperty(at.prototype, "data", {
        get: function() {
            return this._data || (this._data = new Float32Array(4)),
            this._data[0] = this.r,
            this._data[1] = this.g,
            this._data[2] = this.b,
            this._data[3] = this.a,
            this._data
        }
    }),
    Object.defineProperty(at.prototype, "data3", {
        get: function() {
            return this._data3 || (this._data3 = new Float32Array(3)),
            this._data3[0] = this.r,
            this._data3[1] = this.g,
            this._data3[2] = this.b,
            this._data3
        }
    }),
    it.INV_LOG2 = Math.LOG2E,
    it.intToBytes = it.intToBytes32,
    it.bytesToInt = it.bytesToInt32,
    Object.defineProperty(ut.prototype, "data", {
        get: function() {
            return this._data || (this._data = new Float32Array(2)),
            this._data[0] = this.x,
            this._data[1] = this.y,
            this._data
        }
    }),
    ut.prototype.scale = ut.prototype.mulScalar,
    Object.defineProperty(lt.prototype, "data", {
        get: function() {
            return this._data || (this._data = new Float32Array(3)),
            this._data[0] = this.x,
            this._data[1] = this.y,
            this._data[2] = this.z,
            this._data
        }
    }),
    lt.prototype.scale = lt.prototype.mulScalar,
    Object.defineProperty(dt.prototype, "data", {
        get: function() {
            return this._data || (this._data = new Float32Array(4)),
            this._data[0] = this.x,
            this._data[1] = this.y,
            this._data[2] = this.z,
            this._data[3] = this.w,
            this._data
        }
    }),
    dt.prototype.scale = dt.prototype.mulScalar;
    var Ty = {
        Aabb: Mt,
        Sphere: Et,
        Plane: qt
    };
    Et.prototype.intersectRay = Et.prototype.intersectsRay,
    Ut.prototype.update = function(t, e) {
        var i = new vt;
        i.mul2(t, e),
        this.setFromMat4(i)
    }
    ;
    function wy(t) {
        this.name = "UnsupportedBrowserError",
        this.message = t || ""
    }
    function My(t) {
        this.name = "ContextCreationError",
        this.message = t || ""
    }
    wy.prototype = Error.prototype,
    My.prototype = Error.prototype;
    var Ay = {
        ADDRESS_CLAMP_TO_EDGE: 1,
        ADDRESS_MIRRORED_REPEAT: 2,
        ADDRESS_REPEAT: 0,
        BLENDMODE_ZERO: 0,
        BLENDMODE_ONE: 1,
        BLENDMODE_SRC_COLOR: 2,
        BLENDMODE_ONE_MINUS_SRC_COLOR: 3,
        BLENDMODE_DST_COLOR: 4,
        BLENDMODE_ONE_MINUS_DST_COLOR: 5,
        BLENDMODE_SRC_ALPHA: 6,
        BLENDMODE_SRC_ALPHA_SATURATE: 7,
        BLENDMODE_ONE_MINUS_SRC_ALPHA: 8,
        BLENDMODE_DST_ALPHA: 9,
        BLENDMODE_ONE_MINUS_DST_ALPHA: 10,
        BUFFER_STATIC: 0,
        BUFFER_DYNAMIC: 1,
        BUFFER_STREAM: 2,
        CULLFACE_NONE: 0,
        CULLFACE_BACK: 1,
        CULLFACE_FRONT: 2,
        CULLFACE_FRONTANDBACK: 3,
        ELEMENTTYPE_INT8: 0,
        ELEMENTTYPE_UINT8: 1,
        ELEMENTTYPE_INT16: 2,
        ELEMENTTYPE_UINT16: 3,
        ELEMENTTYPE_INT32: 4,
        ELEMENTTYPE_UINT32: 5,
        ELEMENTTYPE_FLOAT32: 6,
        FILTER_NEAREST: 0,
        FILTER_LINEAR: 1,
        FILTER_NEAREST_MIPMAP_NEAREST: 2,
        FILTER_NEAREST_MIPMAP_LINEAR: 3,
        FILTER_LINEAR_MIPMAP_NEAREST: 4,
        FILTER_LINEAR_MIPMAP_LINEAR: 5,
        INDEXFORMAT_UINT8: 0,
        INDEXFORMAT_UINT16: 1,
        INDEXFORMAT_UINT32: 2,
        PIXELFORMAT_R5_G6_B5: 3,
        PIXELFORMAT_R8_G8_B8: 6,
        PIXELFORMAT_R8_G8_B8_A8: 7,
        PRIMITIVE_POINTS: 0,
        PRIMITIVE_LINES: 1,
        PRIMITIVE_LINELOOP: 2,
        PRIMITIVE_LINESTRIP: 3,
        PRIMITIVE_TRIANGLES: 4,
        PRIMITIVE_TRISTRIP: 5,
        PRIMITIVE_TRIFAN: 6,
        SEMANTIC_POSITION: se,
        SEMANTIC_NORMAL: ae,
        SEMANTIC_COLOR: le,
        SEMANTIC_TEXCOORD: ce,
        SEMANTIC_TEXCOORD0: ue,
        SEMANTIC_TEXCOORD1: de,
        SEMANTIC_ATTR0: xe,
        SEMANTIC_ATTR1: be,
        SEMANTIC_ATTR2: Se,
        SEMANTIC_ATTR3: Te,
        TEXTURELOCK_READ: 1,
        TEXTURELOCK_WRITE: 2,
        drawQuadWithShader: ei,
        programlib: In,
        shaderChunks: ni,
        ContextCreationError: My,
        Device: fs,
        IndexBuffer: ws,
        ProgramLibrary: is,
        RenderTarget: ms,
        ScopeId: rs,
        Shader: ii,
        ShaderInput: hs,
        Texture: Mi,
        UnsupportedBrowserError: wy,
        VertexBuffer: Ze,
        VertexFormat: Qe,
        VertexIterator: Ns
    }
      , Cy = {
        createFullscreenQuad: Vs,
        drawFullscreenQuad: Gs,
        PostEffect: zs,
        PostEffectQueue: Zf
    };
    Object.defineProperty(ni, "transformSkinnedVS", {
        get: function() {
            return "#define SKIN\n" + ni.transformVS
        }
    }),
    Object.defineProperties(Mi.prototype, {
        rgbm: {
            get: function() {
                return this.type === Be
            },
            set: function(t) {
                this.type = t ? Be : Fe
            }
        },
        swizzleGGGR: {
            get: function() {
                return this.type === Ue
            },
            set: function(t) {
                this.type = t ? Ue : Fe
            }
        }
    });
    var Ey = qn
      , Py = {
        partitionSkin: gc,
        procedural: {
            calculateTangents: Js,
            createMesh: ta,
            createTorus: ea,
            createCylinder: na,
            createCapsule: sa,
            createCone: aa,
            createSphere: ra,
            createPlane: oa,
            createBox: ha
        },
        BasicMaterial: ca,
        Command: Ta,
        DepthMaterial: Oa,
        ForwardRenderer: Xr,
        GraphNode: ji,
        Material: Fn,
        Mesh: Ys,
        MeshInstance: wa,
        Model: mh,
        ParticleEmitter: dh,
        PhongMaterial: qn,
        Picker: fv,
        Projection: {
            ORTHOGRAPHIC: 1,
            PERSPECTIVE: 0
        },
        Scene: _h,
        Skin: Rh,
        SkinInstance: pa
    };
    Object.defineProperty(_h.prototype, "defaultMaterial", {
        get: function() {
            return kn.get(_n().graphicsDevice)
        }
    }),
    Object.defineProperty(ua.prototype, "model", {
        get: function() {
            return null
        }
    }),
    fh.prototype.getTarget = function(t) {
        return this.targets[t]
    }
    ,
    ji.prototype._dirtify = function(t) {
        t ? this._dirtifyLocal() : this._dirtifyWorld()
    }
    ,
    ji.prototype.addLabel = function(t) {
        this._labels[t] = !0
    }
    ,
    ji.prototype.getLabels = function() {
        return Object.keys(this._labels)
    }
    ,
    ji.prototype.hasLabel = function(t) {
        return !!this._labels[t]
    }
    ,
    ji.prototype.removeLabel = function(t) {
        delete this._labels[t]
    }
    ,
    ji.prototype.findByLabel = function(t, e) {
        void 0 === e && (e = []),
        this.hasLabel(t) && e.push(this);
        for (var i = 0; i < this._children.length; ++i)
            e = this._children[i].findByLabel(t, e);
        return e
    }
    ,
    ji.prototype.getChildren = function() {
        return this.children
    }
    ,
    ji.prototype.getName = function() {
        return this.name
    }
    ,
    ji.prototype.getPath = function() {
        return this.path
    }
    ,
    ji.prototype.getRoot = function() {
        return this.root
    }
    ,
    ji.prototype.getParent = function() {
        return this.parent
    }
    ,
    ji.prototype.setName = function(t) {
        this.name = t
    }
    ,
    Fn.prototype.getName = function() {
        return this.name
    }
    ,
    Fn.prototype.setName = function(t) {
        this.name = t
    }
    ,
    Fn.prototype.getShader = function() {
        return this.shader
    }
    ,
    Fn.prototype.setShader = function(t) {
        this.shader = t
    }
    ;
    var Ry = {
        Animation: Eh,
        Key: Ah,
        Node: Ch,
        Skeleton: Qd
    };
    Eh.prototype.getDuration = function() {
        return this.duration
    }
    ,
    Eh.prototype.getName = function() {
        return this.name
    }
    ,
    Eh.prototype.getNodes = function() {
        return this.nodes
    }
    ,
    Eh.prototype.setDuration = function(t) {
        this.duration = t
    }
    ,
    Eh.prototype.setName = function(t) {
        this.name = t
    }
    ,
    Qd.prototype.getAnimation = function() {
        return this.animation
    }
    ,
    Qd.prototype.getCurrentTime = function() {
        return this.currentTime
    }
    ,
    Qd.prototype.getLooping = function() {
        return this.looping
    }
    ,
    Qd.prototype.getNumNodes = function() {
        return this.numNodes
    }
    ,
    Qd.prototype.setAnimation = function(t) {
        this.animation = t
    }
    ,
    Qd.prototype.setCurrentTime = function(t) {
        this.currentTime = t
    }
    ,
    Qd.prototype.setLooping = function(t) {
        this.looping = t
    }
    ;
    var Iy = {
        AudioManager: Mh,
        Channel: vh,
        Channel3d: Sh,
        Listener: wh,
        Sound: Dl
    };
    Mh.prototype.getListener = function() {
        return this.listener
    }
    ,
    Mh.prototype.getVolume = function() {
        return this.volume
    }
    ,
    Mh.prototype.setVolume = function(t) {
        this.volume = t
    }
    ;
    xu.prototype.getAssetById = function(t) {
        return this.get(t)
    }
    ,
    Object.defineProperty(id.prototype, "ray", {
        get: function() {
            return this._rayLocal
        }
    }),
    Object.defineProperty(id.prototype, "position", {
        get: function() {
            return this._localPosition
        }
    }),
    Object.defineProperty(id.prototype, "rotation", {
        get: function() {
            return this._localRotation
        }
    });
    var Ly = {
        getTouchTargetCoords: gy,
        Controller: Ov,
        GamePads: _y,
        Keyboard: Pv,
        KeyboardEvent: wv,
        Mouse: kv,
        MouseEvent: Dv,
        Touch: vy,
        TouchDevice: xy,
        TouchEvent: yy
    };
    Object.defineProperty(fy.prototype, "wheel", {
        get: function() {
            return -2 * this.wheelDelta
        }
    }),
    Object.defineProperty(Dv.prototype, "wheel", {
        get: function() {
            return -2 * this.wheelDelta
        }
    });
    var Dy = {
        Application: tv,
        Component: gd,
        ComponentSystem: vd,
        Entity: nv,
        FillMode: {
            NONE: Mu,
            FILL_WINDOW: Au,
            KEEP_ASPECT: Cu
        },
        ResolutionMode: {
            AUTO: Eu,
            FIXED: Pu
        }
    };
    tv.prototype.isFullscreen = function() {
        return !!document.fullscreenElement
    }
    ,
    tv.prototype.enableFullscreen = function(t, e, i) {
        t = t || this.graphicsDevice.canvas;
        e && document.addEventListener("fullscreenchange", (function t() {
            e(),
            document.removeEventListener("fullscreenchange", t)
        }
        ), !1),
        i && document.addEventListener("fullscreenerror", (function t() {
            i(),
            document.removeEventListener("fullscreenerror", t)
        }
        ), !1),
        t.requestFullscreen ? t.requestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : i()
    }
    ,
    tv.prototype.disableFullscreen = function(t) {
        t && document.addEventListener("fullscreenchange", (function e() {
            t(),
            document.removeEventListener("fullscreenchange", e)
        }
        ), !1),
        document.exitFullscreen()
    }
    ,
    tv.prototype.getSceneUrl = function(t) {
        var e = this.scenes.find(t);
        return e ? e.url : null
    }
    ,
    tv.prototype.loadScene = function(t, e) {
        this.scenes.loadScene(t, e)
    }
    ,
    tv.prototype.loadSceneHierarchy = function(t, e) {
        this.scenes.loadSceneHierarchy(t, e)
    }
    ,
    tv.prototype.loadSceneSettings = function(t, e) {
        this.scenes.loadSceneSettings(t, e)
    }
    ,
    tv.prototype.renderMeshInstance = function(t, e) {
        var i = null != e && e.layer ? e.layer : this._getDefaultDrawLayer();
        this._immediate.drawMesh(null, null, null, t, i)
    }
    ,
    tv.prototype.renderMesh = function(t, e, i, n) {
        var s = null != n && n.layer ? n.layer : this._getDefaultDrawLayer();
        this._immediate.drawMesh(e, i, t, null, s)
    }
    ,
    tv.prototype._addLines = function(t, e, i) {
        var n = i && i.layer ? i.layer : this.scene.layers.getLayerById(3)
          , s = !i || void 0 === i.depthTest || i.depthTest;
        this._immediate.getBatch(n, s).addLines(t, e)
    }
    ,
    tv.prototype.renderLine = function(t, e, i) {
        var n, s = i, a = arguments[3], r = arguments[4];
        a instanceof at ? (s = a,
        n = "number" == typeof r ? 1 === r ? {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !1
        } : {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !0
        } : r) : "number" == typeof a ? (s = i,
        n = 1 === a ? {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !1
        } : {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !0
        }) : a && (n = a),
        this._addLines([t, e], [i, s], n)
    }
    ,
    tv.prototype.renderLines = function(t, e, i) {
        i ? "number" == typeof i && (i = 1 === i ? {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !1
        } : {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !0
        }) : i = {
            layer: this.scene.layers.getLayerById(3),
            depthTest: !0
        },
        !e.length || t.length === e.length ? t.length % 2 == 0 ? this._addLines(t, e, i) : console.error("renderLines: array length is not divisible by 2") : console.error("renderLines: position/color arrays have different lengths")
    }
    ,
    Object.defineProperty(Qf.prototype, "node", {
        get: function() {
            return this.entity
        }
    }),
    Object.defineProperty(Vm.prototype, "enable", {
        get: function() {
            return this.enabled
        },
        set: function(t) {
            this.enabled = t
        }
    }),
    jm.prototype.setVisible = function(t) {
        this.enabled = t
    }
    ,
    Object.defineProperty(jm.prototype, "aabb", {
        get: function() {
            return null
        },
        set: function(t) {}
    }),
    Object.defineProperty(Zm.prototype, "aabb", {
        get: function() {
            return null
        },
        set: function(t) {}
    }),
    Object.defineProperty(v_.prototype, "bodyType", {
        get: function() {
            return this.type
        },
        set: function(t) {
            this.type = t
        }
    }),
    v_.prototype.syncBodyToEntity = function() {
        this._updateDynamic()
    }
    ,
    M_.prototype.setGravity = function() {
        1 === arguments.length ? this.gravity.copy(arguments[0]) : this.gravity.set(arguments[0], arguments[1], arguments[2])
    }
    ;
    var ky = function(t) {
        function e(e, i) {
            var n;
            if ((n = t.call(this) || this)._assets = [],
            n._registry = i,
            n._loaded = !1,
            n._count = 0,
            n._total = 0,
            n._failed = [],
            n._waitingAssets = [],
            e.length && e[0]instanceof Kh)
                n._assets = e;
            else
                for (var s = 0; s < e.length; s++) {
                    var a = i.get(e[s]);
                    a ? n._assets.push(a) : (n._waitForAsset(e[s]),
                    n._total++)
                }
            return n
        }
        H(e, t);
        var i = e.prototype;
        return i.destroy = function() {
            var t = this;
            this._registry.off("load", this._onLoad),
            this._registry.off("error", this._onError),
            this._waitingAssets.forEach((function(e) {
                t._registry.off("add:" + e, t._onAddAsset)
            }
            )),
            this.off("progress"),
            this.off("load")
        }
        ,
        i.load = function(t, e) {
            this._count = 0,
            this._failed = [],
            this._callback = t,
            this._scope = e,
            this._registry.on("load", this._onLoad, this),
            this._registry.on("error", this._onError, this);
            for (var i = 0, n = this._assets.length; i < n; i++) {
                var s = this._assets[i];
                s.loading || s.loaded || (this._registry.load(s),
                this._total++)
            }
        }
        ,
        i.ready = function(t, e) {
            e = e || this,
            this._loaded ? t.call(e, this._assets) : this.once("load", (function(i) {
                t.call(e, i)
            }
            ))
        }
        ,
        i._loadingComplete = function() {
            this._loaded = !0,
            this._registry.off("load", this._onLoad, this),
            this._registry.off("error", this._onError, this),
            this._failed && this._failed.length ? (this._callback && this._callback.call(this._scope, "Failed to load some assets", this._failed),
            this.fire("error", this._failed)) : (this._callback && this._callback.call(this._scope),
            this.fire("load", this._assets))
        }
        ,
        i._onLoad = function(t) {
            var e = this;
            this._assets.indexOf(t) >= 0 && (this._count++,
            this.fire("progress", t)),
            this._count === this._total && setTimeout((function() {
                e._loadingComplete(e._failed)
            }
            ), 0)
        }
        ,
        i._onError = function(t, e) {
            var i = this;
            this._assets.indexOf(e) >= 0 && (this._count++,
            this._failed.push(e)),
            this._count === this._total && setTimeout((function() {
                i._loadingComplete(i._failed)
            }
            ), 0)
        }
        ,
        i._onAddAsset = function(t) {
            var e = this._waitingAssets.indexOf(t);
            e >= 0 && this._waitingAssets.splice(e, 1),
            this._assets.push(t);
            for (var i = 0, n = this._assets.length; i < n; i++)
                (t = this._assets[i]).loading || t.loaded || this._registry.load(t)
        }
        ,
        i._waitForAsset = function(t) {
            this._waitingAssets.push(t),
            this._registry.once("add:" + t, this._onAddAsset, this)
        }
        ,
        e
    }(u);
    t.ABSOLUTE_URL = Hh,
    t.ACTION_GAMEPAD = hg,
    t.ACTION_KEYBOARD = og,
    t.ACTION_MOUSE = rg,
    t.ADDRESS_CLAMP_TO_EDGE = 1,
    t.ADDRESS_MIRRORED_REPEAT = 2,
    t.ADDRESS_REPEAT = 0,
    t.ANIM_BLEND_1D = "1D",
    t.ANIM_BLEND_2D_CARTESIAN = Ud,
    t.ANIM_BLEND_2D_DIRECTIONAL = Nd,
    t.ANIM_BLEND_DIRECT = zd,
    t.ANIM_CONTROL_STATES = Hd,
    t.ANIM_EQUAL_TO = Ld,
    t.ANIM_GREATER_THAN = Ed,
    t.ANIM_GREATER_THAN_EQUAL_TO = Rd,
    t.ANIM_INTERRUPTION_NEXT = Md,
    t.ANIM_INTERRUPTION_NEXT_PREV = Cd,
    t.ANIM_INTERRUPTION_NONE = Td,
    t.ANIM_INTERRUPTION_PREV = wd,
    t.ANIM_INTERRUPTION_PREV_NEXT = Ad,
    t.ANIM_LAYER_ADDITIVE = "ADDITIVE",
    t.ANIM_LAYER_OVERWRITE = Xd,
    t.ANIM_LESS_THAN = Pd,
    t.ANIM_LESS_THAN_EQUAL_TO = Id,
    t.ANIM_NOT_EQUAL_TO = Dd,
    t.ANIM_PARAMETER_BOOLEAN = Fd,
    t.ANIM_PARAMETER_FLOAT = Od,
    t.ANIM_PARAMETER_INTEGER = kd,
    t.ANIM_PARAMETER_TRIGGER = Bd,
    t.ANIM_STATE_ANY = Wd,
    t.ANIM_STATE_END = Gd,
    t.ANIM_STATE_START = Vd,
    t.ASPECT_AUTO = 0,
    t.ASPECT_MANUAL = 1,
    t.ASSET_ANIMATION = "animation",
    t.ASSET_AUDIO = "audio",
    t.ASSET_CONTAINER = "container",
    t.ASSET_CSS = "css",
    t.ASSET_CUBEMAP = "cubemap",
    t.ASSET_HTML = "html",
    t.ASSET_IMAGE = "image",
    t.ASSET_JSON = "json",
    t.ASSET_MATERIAL = "material",
    t.ASSET_MODEL = "model",
    t.ASSET_SCRIPT = "script",
    t.ASSET_SHADER = "shader",
    t.ASSET_TEXT = "text",
    t.ASSET_TEXTURE = "texture",
    t.AXIS_KEY = "key",
    t.AXIS_MOUSE_X = "mousex",
    t.AXIS_MOUSE_Y = "mousey",
    t.AXIS_PAD_L_X = "padlx",
    t.AXIS_PAD_L_Y = "padly",
    t.AXIS_PAD_R_X = "padrx",
    t.AXIS_PAD_R_Y = "padry",
    t.AnimBinder = Yd,
    t.AnimClip = Sd,
    t.AnimClipHandler = Rl,
    t.AnimComponent = xf,
    t.AnimComponentLayer = yf,
    t.AnimComponentSystem = Tf,
    t.AnimController = df,
    t.AnimCurve = Lh,
    t.AnimData = Dh,
    t.AnimEvaluator = qd,
    t.AnimEvents = kh,
    t.AnimSnapshot = bd,
    t.AnimStateGraph = Il,
    t.AnimStateGraphHandler = Ll,
    t.AnimTarget = Kd,
    t.AnimTrack = Oh,
    t.Animation = Eh,
    t.AnimationComponent = Jd,
    t.AnimationComponentSystem = nf,
    t.AnimationHandler = Pl,
    t.Application = tv,
    t.Asset = Kh,
    t.AssetListLoader = ky,
    t.AssetReference = hc,
    t.AssetRegistry = xu,
    t.AudioHandler = Fl,
    t.AudioListenerComponent = wf,
    t.AudioListenerComponentSystem = Cf,
    t.AudioSourceComponent = Ef,
    t.AudioSourceComponentSystem = If,
    t.BAKE_COLOR = 0,
    t.BAKE_COLORDIR = 1,
    t.BLENDEQUATION_ADD = 0,
    t.BLENDEQUATION_MAX = 4,
    t.BLENDEQUATION_MIN = 3,
    t.BLENDEQUATION_REVERSE_SUBTRACT = 2,
    t.BLENDEQUATION_SUBTRACT = 1,
    t.BLENDMODE_DST_ALPHA = 9,
    t.BLENDMODE_DST_COLOR = 4,
    t.BLENDMODE_ONE = 1,
    t.BLENDMODE_ONE_MINUS_DST_ALPHA = 10,
    t.BLENDMODE_ONE_MINUS_DST_COLOR = 5,
    t.BLENDMODE_ONE_MINUS_SRC_ALPHA = 8,
    t.BLENDMODE_ONE_MINUS_SRC_COLOR = 3,
    t.BLENDMODE_SRC_ALPHA = 6,
    t.BLENDMODE_SRC_ALPHA_SATURATE = 7,
    t.BLENDMODE_SRC_COLOR = 2,
    t.BLENDMODE_ZERO = 0,
    t.BLEND_ADDITIVE = 1,
    t.BLEND_ADDITIVEALPHA = 6,
    t.BLEND_MAX = 10,
    t.BLEND_MIN = 9,
    t.BLEND_MULTIPLICATIVE = 5,
    t.BLEND_MULTIPLICATIVE2X = 7,
    t.BLEND_NONE = 3,
    t.BLEND_NORMAL = 2,
    t.BLEND_PREMULTIPLIED = 4,
    t.BLEND_SCREEN = 8,
    t.BLEND_SUBTRACTIVE = 0,
    t.BLUR_BOX = 0,
    t.BLUR_GAUSSIAN = 1,
    t.BODYFLAG_KINEMATIC_OBJECT = 2,
    t.BODYFLAG_NORESPONSE_OBJECT = 4,
    t.BODYFLAG_STATIC_OBJECT = 1,
    t.BODYGROUP_DEFAULT = 1,
    t.BODYGROUP_DYNAMIC = 1,
    t.BODYGROUP_ENGINE_1 = 8,
    t.BODYGROUP_ENGINE_2 = 32,
    t.BODYGROUP_ENGINE_3 = 64,
    t.BODYGROUP_KINEMATIC = 4,
    t.BODYGROUP_NONE = 0,
    t.BODYGROUP_STATIC = 2,
    t.BODYGROUP_TRIGGER = 16,
    t.BODYGROUP_USER_1 = 128,
    t.BODYGROUP_USER_2 = 256,
    t.BODYGROUP_USER_3 = 512,
    t.BODYGROUP_USER_4 = 1024,
    t.BODYGROUP_USER_5 = 2048,
    t.BODYGROUP_USER_6 = 4096,
    t.BODYGROUP_USER_7 = 8192,
    t.BODYGROUP_USER_8 = 16384,
    t.BODYMASK_ALL = cp,
    t.BODYMASK_NONE = 0,
    t.BODYMASK_NOT_STATIC = up,
    t.BODYMASK_NOT_STATIC_KINEMATIC = 65529,
    t.BODYMASK_STATIC = 2,
    t.BODYSTATE_ACTIVE_TAG = 1,
    t.BODYSTATE_DISABLE_DEACTIVATION = 4,
    t.BODYSTATE_DISABLE_SIMULATION = 5,
    t.BODYSTATE_ISLAND_SLEEPING = 2,
    t.BODYSTATE_WANTS_DEACTIVATION = 3,
    t.BODYTYPE_DYNAMIC = hp,
    t.BODYTYPE_KINEMATIC = lp,
    t.BODYTYPE_STATIC = op,
    t.BUFFER_DYNAMIC = 1,
    t.BUFFER_GPUDYNAMIC = 3,
    t.BUFFER_STATIC = 0,
    t.BUFFER_STREAM = 2,
    t.BUTTON_TRANSITION_MODE_SPRITE_CHANGE = 1,
    t.BUTTON_TRANSITION_MODE_TINT = 0,
    t.BasicMaterial = ca,
    t.Batch = ua,
    t.BatchGroup = da,
    t.BatchManager = ka,
    t.BinaryHandler = Bl,
    t.BoundingBox = Mt,
    t.BoundingSphere = Et,
    t.Bundle = Nl,
    t.BundleHandler = Gl,
    t.BundleRegistry = bu,
    t.ButtonComponent = Wf,
    t.ButtonComponentSystem = Yf,
    t.CLEARFLAG_COLOR = 1,
    t.CLEARFLAG_DEPTH = 2,
    t.CLEARFLAG_STENCIL = 4,
    t.COMPUPDATED_BLEND = 8,
    t.COMPUPDATED_CAMERAS = 4,
    t.COMPUPDATED_INSTANCES = 1,
    t.COMPUPDATED_LIGHTS = 2,
    t.CUBEFACE_NEGX = 1,
    t.CUBEFACE_NEGY = 3,
    t.CUBEFACE_NEGZ = 5,
    t.CUBEFACE_POSX = 0,
    t.CUBEFACE_POSY = 2,
    t.CUBEFACE_POSZ = 4,
    t.CUBEPROJ_BOX = 1,
    t.CUBEPROJ_NONE = 0,
    t.CULLFACE_BACK = 1,
    t.CULLFACE_FRONT = 2,
    t.CULLFACE_FRONTANDBACK = 3,
    t.CULLFACE_NONE = 0,
    t.CURVE_CARDINAL = 3,
    t.CURVE_CATMULL = 2,
    t.CURVE_LINEAR = 0,
    t.CURVE_SMOOTHSTEP = 1,
    t.CURVE_SPLINE = 4,
    t.CURVE_STEP = 5,
    t.Camera = Ri,
    t.CameraComponent = Qf,
    t.CameraComponentSystem = ep,
    t.CanvasFont = mv,
    t.CollisionComponent = ap,
    t.CollisionComponentSystem = Ap,
    t.Color = at,
    t.Command = Ta,
    t.Component = gd,
    t.ComponentSystem = vd,
    t.ComponentSystemRegistry = Cp,
    t.ContactPoint = S_,
    t.ContactResult = T_,
    t.ContainerHandler = Hl,
    t.ContainerResource = Wl,
    t.ContextCreationError = My,
    t.Controller = Ov,
    t.CssHandler = Xl,
    t.CubemapHandler = jl,
    t.Curve = ot,
    t.CurveSet = ht,
    t.DETAILMODE_ADD = "add",
    t.DETAILMODE_MAX = "max",
    t.DETAILMODE_MIN = "min",
    t.DETAILMODE_MUL = "mul",
    t.DETAILMODE_OVERLAY = "overlay",
    t.DETAILMODE_SCREEN = "screen",
    t.DISTANCE_EXPONENTIAL = bh,
    t.DISTANCE_INVERSE = xh,
    t.DISTANCE_LINEAR = yh,
    t.DefaultAnimBinder = Zd,
    t.DepthMaterial = Oa,
    t.ELEMENTTYPE_FLOAT32 = 6,
    t.ELEMENTTYPE_GROUP = Df,
    t.ELEMENTTYPE_IMAGE = kf,
    t.ELEMENTTYPE_INT16 = 2,
    t.ELEMENTTYPE_INT32 = 4,
    t.ELEMENTTYPE_INT8 = 0,
    t.ELEMENTTYPE_TEXT = Of,
    t.ELEMENTTYPE_UINT16 = 3,
    t.ELEMENTTYPE_UINT32 = 5,
    t.ELEMENTTYPE_UINT8 = 1,
    t.EMITTERSHAPE_BOX = 0,
    t.EMITTERSHAPE_SPHERE = 1,
    t.EVENT_KEYDOWN = "keydown",
    t.EVENT_KEYUP = "keyup",
    t.EVENT_MOUSEDOWN = lg,
    t.EVENT_MOUSEMOVE = cg,
    t.EVENT_MOUSEUP = ug,
    t.EVENT_MOUSEWHEEL = dg,
    t.EVENT_SELECT = "select",
    t.EVENT_SELECTEND = "selectend",
    t.EVENT_SELECTSTART = "selectstart",
    t.EVENT_TOUCHCANCEL = "touchcancel",
    t.EVENT_TOUCHEND = "touchend",
    t.EVENT_TOUCHMOVE = "touchmove",
    t.EVENT_TOUCHSTART = "touchstart",
    t.ElementComponent = nm,
    t.ElementComponentSystem = om,
    t.ElementDragHelper = ag,
    t.ElementInput = fy,
    t.ElementInputEvent = ly,
    t.ElementMouseEvent = cy,
    t.ElementSelectEvent = dy,
    t.ElementTouchEvent = uy,
    t.Entity = nv,
    t.EntityReference = Lf,
    t.EventHandler = u,
    t.FILLMODE_FILL_WINDOW = Au,
    t.FILLMODE_KEEP_ASPECT = Cu,
    t.FILLMODE_NONE = Mu,
    t.FILTER_LINEAR = 1,
    t.FILTER_LINEAR_MIPMAP_LINEAR = 5,
    t.FILTER_LINEAR_MIPMAP_NEAREST = 4,
    t.FILTER_NEAREST = 0,
    t.FILTER_NEAREST_MIPMAP_LINEAR = 3,
    t.FILTER_NEAREST_MIPMAP_NEAREST = 2,
    t.FITTING_BOTH = 3,
    t.FITTING_NONE = 0,
    t.FITTING_SHRINK = 2,
    t.FITTING_STRETCH = 1,
    t.FOG_EXP = "exp",
    t.FOG_EXP2 = "exp2",
    t.FOG_LINEAR = Rt,
    t.FOG_NONE = Pt,
    t.FONT_BITMAP = Kl,
    t.FONT_MSDF = Yl,
    t.FRESNEL_NONE = 0,
    t.FRESNEL_SCHLICK = 2,
    t.FUNC_ALWAYS = 7,
    t.FUNC_EQUAL = 2,
    t.FUNC_GREATER = 4,
    t.FUNC_GREATEREQUAL = 6,
    t.FUNC_LESS = 1,
    t.FUNC_LESSEQUAL = 3,
    t.FUNC_NEVER = 0,
    t.FUNC_NOTEQUAL = 5,
    t.FolderHandler = ql,
    t.Font = Zl,
    t.FontHandler = Ql,
    t.ForwardRenderer = Xr,
    t.Frustum = Ut,
    t.GAMMA_NONE = 0,
    t.GAMMA_SRGB = 1,
    t.GAMMA_SRGBFAST = 2,
    t.GAMMA_SRGBHDR = 3,
    t.GamePads = _y,
    t.GraphNode = ji,
    t.GraphicsDevice = fs,
    t.HierarchyHandler = ac,
    t.HtmlHandler = rc,
    t.Http = nt,
    t.I18n = wu,
    t.INDEXFORMAT_UINT16 = 1,
    t.INDEXFORMAT_UINT32 = 2,
    t.INDEXFORMAT_UINT8 = 0,
    t.INTERPOLATION_CUBIC = 2,
    t.INTERPOLATION_LINEAR = 1,
    t.INTERPOLATION_STEP = 0,
    t.ImageElement = Rp,
    t.IndexBuffer = ws,
    t.IndexedList = z,
    t.JointComponent = dm,
    t.JointComponentSystem = _m,
    t.JsonHandler = oc,
    t.JsonStandardMaterialParser = cc,
    t.KEY_0 = 48,
    t.KEY_1 = 49,
    t.KEY_2 = 50,
    t.KEY_3 = 51,
    t.KEY_4 = 52,
    t.KEY_5 = 53,
    t.KEY_6 = 54,
    t.KEY_7 = 55,
    t.KEY_8 = 56,
    t.KEY_9 = 57,
    t.KEY_A = 65,
    t.KEY_ADD = 107,
    t.KEY_ALT = 18,
    t.KEY_B = 66,
    t.KEY_BACKSPACE = 8,
    t.KEY_BACK_SLASH = 220,
    t.KEY_C = 67,
    t.KEY_CAPS_LOCK = 20,
    t.KEY_CLOSE_BRACKET = 221,
    t.KEY_COMMA = 188,
    t.KEY_CONTEXT_MENU = 93,
    t.KEY_CONTROL = 17,
    t.KEY_D = 68,
    t.KEY_DECIMAL = 110,
    t.KEY_DELETE = 46,
    t.KEY_DIVIDE = 111,
    t.KEY_DOWN = 40,
    t.KEY_E = 69,
    t.KEY_END = 35,
    t.KEY_ENTER = 13,
    t.KEY_EQUAL = 61,
    t.KEY_ESCAPE = 27,
    t.KEY_F = 70,
    t.KEY_F1 = 112,
    t.KEY_F10 = 121,
    t.KEY_F11 = 122,
    t.KEY_F12 = 123,
    t.KEY_F2 = 113,
    t.KEY_F3 = 114,
    t.KEY_F4 = 115,
    t.KEY_F5 = 116,
    t.KEY_F6 = 117,
    t.KEY_F7 = 118,
    t.KEY_F8 = 119,
    t.KEY_F9 = 120,
    t.KEY_G = 71,
    t.KEY_H = 72,
    t.KEY_HOME = 36,
    t.KEY_I = 73,
    t.KEY_INSERT = 45,
    t.KEY_J = 74,
    t.KEY_K = 75,
    t.KEY_L = 76,
    t.KEY_LEFT = 37,
    t.KEY_M = 77,
    t.KEY_META = 224,
    t.KEY_MULTIPLY = 106,
    t.KEY_N = 78,
    t.KEY_NUMPAD_0 = 96,
    t.KEY_NUMPAD_1 = 97,
    t.KEY_NUMPAD_2 = 98,
    t.KEY_NUMPAD_3 = 99,
    t.KEY_NUMPAD_4 = 100,
    t.KEY_NUMPAD_5 = 101,
    t.KEY_NUMPAD_6 = 102,
    t.KEY_NUMPAD_7 = 103,
    t.KEY_NUMPAD_8 = 104,
    t.KEY_NUMPAD_9 = 105,
    t.KEY_O = 79,
    t.KEY_OPEN_BRACKET = 219,
    t.KEY_P = 80,
    t.KEY_PAGE_DOWN = 34,
    t.KEY_PAGE_UP = 33,
    t.KEY_PAUSE = 19,
    t.KEY_PERIOD = 190,
    t.KEY_PRINT_SCREEN = 44,
    t.KEY_Q = 81,
    t.KEY_R = 82,
    t.KEY_RETURN = 13,
    t.KEY_RIGHT = 39,
    t.KEY_S = 83,
    t.KEY_SEMICOLON = 59,
    t.KEY_SEPARATOR = 108,
    t.KEY_SHIFT = 16,
    t.KEY_SLASH = 191,
    t.KEY_SPACE = 32,
    t.KEY_SUBTRACT = 109,
    t.KEY_T = 84,
    t.KEY_TAB = 9,
    t.KEY_U = 85,
    t.KEY_UP = 38,
    t.KEY_V = 86,
    t.KEY_W = 87,
    t.KEY_WINDOWS = 91,
    t.KEY_X = 88,
    t.KEY_Y = 89,
    t.KEY_Z = 90,
    t.Key = Ah,
    t.Keyboard = Pv,
    t.KeyboardEvent = wv,
    t.LAYERID_DEPTH = 1,
    t.LAYERID_IMMEDIATE = 3,
    t.LAYERID_SKYBOX = 2,
    t.LAYERID_UI = 4,
    t.LAYERID_WORLD = 0,
    t.LAYER_FX = 2,
    t.LAYER_GIZMO = 1,
    t.LAYER_HUD = 0,
    t.LAYER_WORLD = 15,
    t.LIGHTFALLOFF_INVERSESQUARED = 1,
    t.LIGHTFALLOFF_LINEAR = 0,
    t.LIGHTSHAPE_DISK = 2,
    t.LIGHTSHAPE_PUNCTUAL = 0,
    t.LIGHTSHAPE_RECT = 1,
    t.LIGHTSHAPE_SPHERE = 3,
    t.LIGHTTYPE_DIRECTIONAL = 0,
    t.LIGHTTYPE_OMNI = 1,
    t.LIGHTTYPE_POINT = 1,
    t.LIGHTTYPE_SPOT = 2,
    t.LINEBATCH_GIZMO = 2,
    t.LINEBATCH_OVERLAY = 1,
    t.LINEBATCH_WORLD = 0,
    t.Layer = Qr,
    t.LayerComposition = xn,
    t.LayoutCalculator = Im,
    t.LayoutChildComponent = gm,
    t.LayoutChildComponentSystem = bm,
    t.LayoutGroupComponent = km,
    t.LayoutGroupComponentSystem = Nm,
    t.Light = ro,
    t.LightComponent = Vm,
    t.LightComponentSystem = Xm,
    t.Lightmapper = cv,
    t.LocalizedAsset = Ip,
    t.MASK_BAKED = 2,
    t.MASK_DYNAMIC = 1,
    t.MASK_LIGHTMAP = 4,
    t.MOTION_FREE = hm,
    t.MOTION_LIMITED = lm,
    t.MOTION_LOCKED = cm,
    t.MOUSEBUTTON_LEFT = 0,
    t.MOUSEBUTTON_MIDDLE = 1,
    t.MOUSEBUTTON_NONE = -1,
    t.MOUSEBUTTON_RIGHT = 2,
    t.Mat3 = ct,
    t.Mat4 = vt,
    t.Material = Fn,
    t.MaterialHandler = dc,
    t.Mesh = Ys,
    t.MeshInstance = wa,
    t.Model = mh,
    t.ModelComponent = jm,
    t.ModelComponentSystem = Km,
    t.ModelHandler = bc,
    t.Morph = fh,
    t.MorphInstance = ph,
    t.MorphTarget = Ph,
    t.Mouse = kv,
    t.MouseEvent = Dv,
    t.Node = Ch,
    t.ORIENTATION_HORIZONTAL = 0,
    t.ORIENTATION_VERTICAL = 1,
    t.OrientedBox = Xt,
    t.PAD_1 = 0,
    t.PAD_2 = 1,
    t.PAD_3 = 2,
    t.PAD_4 = 3,
    t.PAD_DOWN = 13,
    t.PAD_FACE_1 = 0,
    t.PAD_FACE_2 = 1,
    t.PAD_FACE_3 = 2,
    t.PAD_FACE_4 = 3,
    t.PAD_LEFT = 14,
    t.PAD_L_SHOULDER_1 = 4,
    t.PAD_L_SHOULDER_2 = 6,
    t.PAD_L_STICK_BUTTON = 10,
    t.PAD_L_STICK_X = 0,
    t.PAD_L_STICK_Y = 1,
    t.PAD_RIGHT = 15,
    t.PAD_R_SHOULDER_1 = 5,
    t.PAD_R_SHOULDER_2 = 7,
    t.PAD_R_STICK_BUTTON = 11,
    t.PAD_R_STICK_X = 2,
    t.PAD_R_STICK_Y = 3,
    t.PAD_SELECT = 8,
    t.PAD_START = 9,
    t.PAD_UP = 12,
    t.PAD_VENDOR = 16,
    t.PARTICLEMODE_CPU = 1,
    t.PARTICLEMODE_GPU = 0,
    t.PARTICLEORIENTATION_EMITTER = 2,
    t.PARTICLEORIENTATION_SCREEN = 0,
    t.PARTICLEORIENTATION_WORLD = 1,
    t.PARTICLESORT_DISTANCE = 1,
    t.PARTICLESORT_NEWER_FIRST = 2,
    t.PARTICLESORT_NONE = 0,
    t.PARTICLESORT_OLDER_FIRST = 3,
    t.PIXELFORMAT_111110F = 18,
    t.PIXELFORMAT_A8 = 0,
    t.PIXELFORMAT_ASTC_4x4 = 28,
    t.PIXELFORMAT_ATC_RGB = 29,
    t.PIXELFORMAT_ATC_RGBA = 30,
    t.PIXELFORMAT_DEPTH = Jt,
    t.PIXELFORMAT_DEPTHSTENCIL = te,
    t.PIXELFORMAT_DXT1 = 8,
    t.PIXELFORMAT_DXT3 = 9,
    t.PIXELFORMAT_DXT5 = Yt,
    t.PIXELFORMAT_ETC1 = ee,
    t.PIXELFORMAT_ETC2_RGB = 22,
    t.PIXELFORMAT_ETC2_RGBA = 23,
    t.PIXELFORMAT_L8 = 1,
    t.PIXELFORMAT_L8_A8 = 2,
    t.PIXELFORMAT_PVRTC_2BPP_RGBA_1 = ne,
    t.PIXELFORMAT_PVRTC_2BPP_RGB_1 = ie,
    t.PIXELFORMAT_PVRTC_4BPP_RGBA_1 = 27,
    t.PIXELFORMAT_PVRTC_4BPP_RGB_1 = 26,
    t.PIXELFORMAT_R32F = 15,
    t.PIXELFORMAT_R4_G4_B4_A4 = 5,
    t.PIXELFORMAT_R5_G5_B5_A1 = 4,
    t.PIXELFORMAT_R5_G6_B5 = 3,
    t.PIXELFORMAT_R8_G8_B8 = 6,
    t.PIXELFORMAT_R8_G8_B8_A8 = 7,
    t.PIXELFORMAT_RGB16F = Kt,
    t.PIXELFORMAT_RGB32F = $t,
    t.PIXELFORMAT_RGBA16F = Zt,
    t.PIXELFORMAT_RGBA32F = Qt,
    t.PIXELFORMAT_SRGB = 19,
    t.PIXELFORMAT_SRGBA = 20,
    t.PRIMITIVE_LINELOOP = 2,
    t.PRIMITIVE_LINES = 1,
    t.PRIMITIVE_LINESTRIP = 3,
    t.PRIMITIVE_POINTS = 0,
    t.PRIMITIVE_TRIANGLES = 4,
    t.PRIMITIVE_TRIFAN = 6,
    t.PRIMITIVE_TRISTRIP = 5,
    t.PROJECTION_ORTHOGRAPHIC = 1,
    t.PROJECTION_PERSPECTIVE = 0,
    t.ParticleEmitter = dh,
    t.ParticleSystemComponent = r_,
    t.ParticleSystemComponentSystem = l_,
    t.PhongMaterial = Ey,
    t.Picker = fv,
    t.Plane = qt,
    t.PostEffect = zs,
    t.PostEffectQueue = Zf,
    t.Prefilter = Ts,
    t.ProgramLibrary = is,
    t.Quat = yt,
    t.RENDERSTYLE_POINTS = 2,
    t.RENDERSTYLE_SOLID = 0,
    t.RENDERSTYLE_WIREFRAME = 1,
    t.RESOLUTION_AUTO = Eu,
    t.RESOLUTION_FIXED = Pu,
    t.RIGIDBODY_ACTIVE_TAG = 1,
    t.RIGIDBODY_CF_KINEMATIC_OBJECT = 2,
    t.RIGIDBODY_CF_NORESPONSE_OBJECT = 4,
    t.RIGIDBODY_CF_STATIC_OBJECT = 1,
    t.RIGIDBODY_DISABLE_DEACTIVATION = 4,
    t.RIGIDBODY_DISABLE_SIMULATION = 5,
    t.RIGIDBODY_ISLAND_SLEEPING = 2,
    t.RIGIDBODY_TYPE_DYNAMIC = "dynamic",
    t.RIGIDBODY_TYPE_KINEMATIC = "kinematic",
    t.RIGIDBODY_TYPE_STATIC = "static",
    t.RIGIDBODY_WANTS_DEACTIVATION = 3,
    t.Ray = zt,
    t.RaycastResult = x_,
    t.ReadStream = K,
    t.RenderComponent = Zm,
    t.RenderComponentSystem = t_,
    t.RenderHandler = Mc,
    t.RenderTarget = ms,
    t.ResourceHandler = _v,
    t.ResourceLoader = Ac,
    t.RigidBodyComponent = v_,
    t.RigidBodyComponentSystem = M_,
    t.SCALEMODE_BLEND = C_,
    t.SCALEMODE_NONE = A_,
    t.SCROLLBAR_VISIBILITY_SHOW_ALWAYS = 0,
    t.SCROLLBAR_VISIBILITY_SHOW_WHEN_REQUIRED = 1,
    t.SCROLL_MODE_BOUNCE = 1,
    t.SCROLL_MODE_CLAMP = 0,
    t.SCROLL_MODE_INFINITE = 2,
    t.SEMANTIC_ATTR = ye,
    t.SEMANTIC_ATTR0 = xe,
    t.SEMANTIC_ATTR1 = be,
    t.SEMANTIC_ATTR10 = Re,
    t.SEMANTIC_ATTR11 = Ie,
    t.SEMANTIC_ATTR12 = Le,
    t.SEMANTIC_ATTR13 = De,
    t.SEMANTIC_ATTR14 = ke,
    t.SEMANTIC_ATTR15 = Oe,
    t.SEMANTIC_ATTR2 = Se,
    t.SEMANTIC_ATTR3 = Te,
    t.SEMANTIC_ATTR4 = we,
    t.SEMANTIC_ATTR5 = Me,
    t.SEMANTIC_ATTR6 = Ae,
    t.SEMANTIC_ATTR7 = Ce,
    t.SEMANTIC_ATTR8 = Ee,
    t.SEMANTIC_ATTR9 = Pe,
    t.SEMANTIC_BLENDINDICES = he,
    t.SEMANTIC_BLENDWEIGHT = oe,
    t.SEMANTIC_COLOR = le,
    t.SEMANTIC_NORMAL = ae,
    t.SEMANTIC_POSITION = se,
    t.SEMANTIC_TANGENT = re,
    t.SEMANTIC_TEXCOORD = ce,
    t.SEMANTIC_TEXCOORD0 = ue,
    t.SEMANTIC_TEXCOORD1 = de,
    t.SEMANTIC_TEXCOORD2 = fe,
    t.SEMANTIC_TEXCOORD3 = pe,
    t.SEMANTIC_TEXCOORD4 = me,
    t.SEMANTIC_TEXCOORD5 = _e,
    t.SEMANTIC_TEXCOORD6 = ge,
    t.SEMANTIC_TEXCOORD7 = ve,
    t.SHADERDEF_DIRLM = It,
    t.SHADERDEF_INSTANCING = 32,
    t.SHADERDEF_LM = 64,
    t.SHADERDEF_LMAMBIENT = Ft,
    t.SHADERDEF_MORPH_NORMAL = kt,
    t.SHADERDEF_MORPH_POSITION = Dt,
    t.SHADERDEF_MORPH_TEXTURE_BASED = Ot,
    t.SHADERDEF_NOSHADOW = 1,
    t.SHADERDEF_SCREENSPACE = Lt,
    t.SHADERDEF_SKIN = 2,
    t.SHADERDEF_TANGENTS = 512,
    t.SHADERDEF_UV0 = 4,
    t.SHADERDEF_UV1 = 8,
    t.SHADERDEF_VCOLOR = 16,
    t.SHADERTAG_MATERIAL = 1,
    t.SHADER_DEPTH = 2,
    t.SHADER_FORWARD = 0,
    t.SHADER_FORWARDHDR = 1,
    t.SHADER_PICK = Bt,
    t.SHADER_SHADOW = 3,
    t.SHADOWUPDATE_NONE = 0,
    t.SHADOWUPDATE_REALTIME = 2,
    t.SHADOWUPDATE_THISFRAME = 1,
    t.SHADOW_COUNT = 5,
    t.SHADOW_DEPTH = 0,
    t.SHADOW_PCF3 = 0,
    t.SHADOW_PCF5 = 4,
    t.SHADOW_VSM16 = 2,
    t.SHADOW_VSM32 = 3,
    t.SHADOW_VSM8 = 1,
    t.SORTKEY_DEPTH = 1,
    t.SORTKEY_FORWARD = 0,
    t.SORTMODE_BACK2FRONT = 3,
    t.SORTMODE_CUSTOM = 5,
    t.SORTMODE_FRONT2BACK = 4,
    t.SORTMODE_MANUAL = 1,
    t.SORTMODE_MATERIALMESH = 2,
    t.SORTMODE_NONE = 0,
    t.SPECOCC_AO = 1,
    t.SPECOCC_GLOSSDEPENDENT = 2,
    t.SPECOCC_NONE = 0,
    t.SPECULAR_BLINN = 1,
    t.SPECULAR_PHONG = 0,
    t.SPRITETYPE_ANIMATED = Og,
    t.SPRITETYPE_SIMPLE = kg,
    t.SPRITE_RENDERMODE_SIMPLE = 0,
    t.SPRITE_RENDERMODE_SLICED = 1,
    t.SPRITE_RENDERMODE_TILED = 2,
    t.STENCILOP_DECREMENT = 5,
    t.STENCILOP_DECREMENTWRAP = 6,
    t.STENCILOP_INCREMENT = 3,
    t.STENCILOP_INCREMENTWRAP = 4,
    t.STENCILOP_INVERT = 7,
    t.STENCILOP_KEEP = 0,
    t.STENCILOP_REPLACE = 2,
    t.STENCILOP_ZERO = 1,
    t.Scene = _h,
    t.SceneHandler = Cc,
    t.SceneRegistry = $g,
    t.SceneRegistryItem = Zg,
    t.SceneSettingsHandler = gv,
    t.ScopeId = rs,
    t.ScopeSpace = os,
    t.ScreenComponent = P_,
    t.ScreenComponentSystem = L_,
    t.ScriptAttributes = F_,
    t.ScriptComponent = B_,
    t.ScriptComponentSystem = z_,
    t.ScriptHandler = Ic,
    t.ScriptLegacyComponent = V_,
    t.ScriptLegacyComponentSystem = Z_,
    t.ScriptRegistry = Su,
    t.ScriptType = yv,
    t.ScrollViewComponent = pg,
    t.ScrollViewComponentSystem = gg,
    t.ScrollbarComponent = vg,
    t.ScrollbarComponentSystem = bg,
    t.Shader = ii,
    t.ShaderHandler = Lc,
    t.SingleContactResult = b_,
    t.Skeleton = Qd,
    t.Skin = Rh,
    t.SkinBatchInstance = ma,
    t.SkinInstance = pa,
    t.SortedLoopArray = Z,
    t.Sound = Dl,
    t.SoundComponent = Eg,
    t.SoundComponentSystem = Dg,
    t.SoundInstance = Tg,
    t.SoundInstance3d = wg,
    t.SoundManager = Mh,
    t.SoundSlot = Cg,
    t.Sprite = Oc,
    t.SpriteAnimationClip = Fg,
    t.SpriteComponent = Vg,
    t.SpriteComponentSystem = Hg,
    t.SpriteHandler = Nc,
    t.StandardMaterial = qn,
    t.StencilParameters = Ep,
    t.TEXHINT_ASSET = 2,
    t.TEXHINT_LIGHTMAP = 3,
    t.TEXHINT_NONE = 0,
    t.TEXHINT_SHADOWMAP = 1,
    t.TEXTURELOCK_READ = 1,
    t.TEXTURELOCK_WRITE = 2,
    t.TEXTUREPROJECTION_CUBE = Ve,
    t.TEXTUREPROJECTION_EQUIRECT = Ge,
    t.TEXTUREPROJECTION_NONE = ze,
    t.TEXTUREPROJECTION_OCTAHEDRAL = We,
    t.TEXTURETYPE_DEFAULT = Fe,
    t.TEXTURETYPE_RGBE = Ne,
    t.TEXTURETYPE_RGBM = Be,
    t.TEXTURETYPE_SWIZZLEGGGR = Ue,
    t.TONEMAP_ACES = 3,
    t.TONEMAP_ACES2 = 4,
    t.TONEMAP_FILMIC = 1,
    t.TONEMAP_HEJL = 2,
    t.TONEMAP_LINEAR = 0,
    t.TYPE_FLOAT32 = 6,
    t.TYPE_INT16 = 2,
    t.TYPE_INT32 = 4,
    t.TYPE_INT8 = 0,
    t.TYPE_UINT16 = 3,
    t.TYPE_UINT32 = 5,
    t.TYPE_UINT8 = 1,
    t.Tags = $,
    t.Template = Uc,
    t.TemplateHandler = zc,
    t.TextElement = Yp,
    t.TextHandler = Vc,
    t.Texture = Mi,
    t.TextureAtlas = Gc,
    t.TextureAtlasHandler = jc,
    t.TextureHandler = vu,
    t.TextureParser = gu,
    t.Timer = J,
    t.Touch = vy,
    t.TouchDevice = xy,
    t.TouchEvent = yy,
    t.TransformFeedback = Ws,
    t.UNIFORMTYPE_BOOL = 0,
    t.UNIFORMTYPE_BVEC2 = 9,
    t.UNIFORMTYPE_BVEC3 = 10,
    t.UNIFORMTYPE_BVEC4 = 11,
    t.UNIFORMTYPE_FLOAT = 2,
    t.UNIFORMTYPE_FLOATARRAY = 17,
    t.UNIFORMTYPE_INT = 1,
    t.UNIFORMTYPE_IVEC2 = 6,
    t.UNIFORMTYPE_IVEC3 = 7,
    t.UNIFORMTYPE_IVEC4 = 8,
    t.UNIFORMTYPE_MAT2 = 12,
    t.UNIFORMTYPE_MAT3 = 13,
    t.UNIFORMTYPE_MAT4 = 14,
    t.UNIFORMTYPE_TEXTURE2D = 15,
    t.UNIFORMTYPE_TEXTURE2D_SHADOW = 18,
    t.UNIFORMTYPE_TEXTURE3D = 20,
    t.UNIFORMTYPE_TEXTURECUBE = 16,
    t.UNIFORMTYPE_TEXTURECUBE_SHADOW = 19,
    t.UNIFORMTYPE_VEC2 = 3,
    t.UNIFORMTYPE_VEC2ARRAY = 21,
    t.UNIFORMTYPE_VEC3 = 4,
    t.UNIFORMTYPE_VEC3ARRAY = 22,
    t.UNIFORMTYPE_VEC4 = 5,
    t.UNIFORMTYPE_VEC4ARRAY = 23,
    t.URI = et,
    t.UnsupportedBrowserError = wy,
    t.VIEW_CENTER = 0,
    t.VIEW_LEFT = 1;
    t.VIEW_RIGHT = 2,
    t.Vec2 = ut,
    t.Vec3 = lt,
    t.Vec4 = dt,
    t.VertexBuffer = Ze,
    t.VertexFormat = Qe,
    t.VertexIterator = Ns,
    t.VrDisplay = Ru,
    t.VrManager = Iu,
    t.WorldClusters = pn,
    t.XRDEPTHSENSINGFORMAT_F32 = "float32",
    t.XRDEPTHSENSINGFORMAT_L8A8 = Uu,
    t.XRDEPTHSENSINGUSAGE_CPU = Bu,
    t.XRDEPTHSENSINGUSAGE_GPU = Nu,
    t.XRHAND_LEFT = Fu,
    t.XRHAND_NONE = "none",
    t.XRHAND_RIGHT = "right",
    t.XRSPACE_BOUNDEDFLOOR = "bounded-floor",
    t.XRSPACE_LOCAL = "local",
    t.XRSPACE_LOCALFLOOR = "local-floor",
    t.XRSPACE_UNBOUNDED = "unbounded",
    t.XRSPACE_VIEWER = Ou,
    t.XRTARGETRAY_GAZE = "gaze",
    t.XRTARGETRAY_POINTER = "tracked-pointer",
    t.XRTARGETRAY_SCREEN = "screen",
    t.XRTRACKABLE_MESH = "mesh",
    t.XRTRACKABLE_PLANE = "plane",
    t.XRTRACKABLE_POINT = "point",
    t.XRTYPE_AR = ku,
    t.XRTYPE_INLINE = Lu,
    t.XRTYPE_VR = Du,
    t.XrDepthSensing = dd,
    t.XrDomOverlay = ud,
    t.XrHitTest = Wu,
    t.XrHitTestSource = Gu,
    t.XrImageTracking = cd,
    t.XrInput = nd,
    t.XrInputSource = id,
    t.XrLightEstimation = hd,
    t.XrManager = _d,
    t.XrPlane = pd,
    t.XrPlaneDetection = md,
    t.XrTrackedImage = ld,
    t.ZoneComponent = Xg,
    t.ZoneComponentSystem = Yg,
    t.anim = Ry,
    t.apps = {},
    t.asset = {
        ASSET_ANIMATION: "animation",
        ASSET_AUDIO: "audio",
        ASSET_IMAGE: "image",
        ASSET_JSON: "json",
        ASSET_MODEL: "model",
        ASSET_MATERIAL: "material",
        ASSET_TEXT: "text",
        ASSET_TEXTURE: "texture",
        ASSET_CUBEMAP: "cubemap",
        ASSET_SCRIPT: "script"
    },
    t.audio = Iy,
    t.basisInitialize = iu,
    t.basisSetDownloadConfig = function(t, e, i) {
        iu({
            glueUrl: t,
            wasmUrl: e,
            fallbackUrl: i,
            lazyInit: !0
        })
    }
    ,
    t.basisTranscode = su,
    t.calculateNormals = Qs,
    t.calculateTangents = Js,
    t.common = {},
    t.config = {},
    t.createBox = ha,
    t.createCapsule = sa,
    t.createCone = aa,
    t.createCylinder = na,
    t.createMesh = ta,
    t.createPlane = oa,
    t.createScript = bv,
    t.createSphere = ra,
    t.createStyle = function(t) {
        var e = document.createElement("style");
        return e.type = "text/css",
        e.styleSheet ? e.styleSheet.cssText = t : e.appendChild(document.createTextNode(t)),
        e
    }
    ,
    t.createTorus = ea,
    t.createURI = function(t) {
        var e = "";
        if ((t.authority || t.scheme) && (t.host || t.hostpath))
            throw new Error("Can't have 'scheme' or 'authority' and 'host' or 'hostpath' option");
        if (t.host && t.hostpath)
            throw new Error("Can't have 'host' and 'hostpath' option");
        if (t.path && t.hostpath)
            throw new Error("Can't have 'path' and 'hostpath' option");
        return t.scheme && (e += t.scheme + ":"),
        t.authority && (e += "//" + t.authority),
        t.host && (e += t.host),
        t.path && (e += t.path),
        t.hostpath && (e += t.hostpath),
        t.query && (e += "?" + t.query),
        t.fragment && (e += "#" + t.fragment),
        e
    }
    ,
    t.data = {},
    t.drawFullscreenQuad = Gs,
    t.drawQuadWithShader = ei,
    t.drawTexture = function(t, e, i, n, s, a, r) {
        void 0 === r && (r = !1),
        n = n || t.getCopyShader(),
        t.constantTexSource.setValue(e),
        ei(t, i, n, s, a, r)
    }
    ,
    t.events = d,
    t.extend = l,
    t.fw = Dy,
    t.getTouchTargetCoords = gy,
    t.gfx = Ay,
    t.guid = f,
    t.http = st,
    t.inherits = function(t, e) {
        var i = function() {}
          , n = function(i, n, s, a, r, o, h, l) {
            e.call(this, i, n, s, a, r, o, h, l),
            t.call(this, i, n, s, a, r, o, h, l)
        };
        return n._super = e.prototype,
        i.prototype = e.prototype,
        n.prototype = new i,
        n
    }
    ,
    t.input = Ly,
    t.isDefined = c,
    t.log = by,
    t.makeArray = function(t) {
        return Array.prototype.slice.call(t)
    }
    ,
    t.math = it,
    t.now = Q,
    t.path = p,
    t.platform = E,
    t.posteffect = Cy,
    t.prefilterCubemap = function(t) {
        var e = t.device
          , i = t.sourceCubemap
          , n = t.method
          , s = t.samples
          , a = t.cpuSync;
        if (!a || i._levels[0]) {
            var r, o = i.type, h = o === Be, l = mi(e, ni.fullscreenQuadVS, ni.rgbmPS + ni.prefilterCubemapPS.replace(/\$METHOD/g, 0 === n ? "cos" : "phong").replace(/\$NUMSAMPLES/g, s).replace(/\$textureCube/g, h ? "textureCubeRGBM" : "textureCube"), "prefilter" + n + s + h), c = mi(e, ni.fullscreenQuadVS, ni.outputCubemapPS, "outputCubemap"), u = e.scope.resolve("source"), d = e.scope.resolve("params"), f = new Float32Array(4), p = i.width, m = i.format, _ = [[], t.filteredFixed, t.filteredRgbm, t.filteredFixedRgbm], g = 0 === n ? [.9, .85, .7, .4, .25, .15, .1] : [512, 128, 32, 8, 2, 1, 1], v = [64, 32, 16, 8, 4, 2, 1], y = 6 === m, x = !1;
            if (a && (x = i._levels[0][0]instanceof HTMLImageElement),
            (y || x) && a) {
                (r = new Mi(e,{
                    cubemap: !0,
                    type: o,
                    format: m = 7,
                    width: p,
                    height: p,
                    mipmaps: !1
                })).name = "prefiltered-cube";
                for (var b = 0; b < 6; b++) {
                    var S = new ms({
                        colorBuffer: r,
                        face: b,
                        depth: !1
                    });
                    f[0] = b,
                    f[1] = 0,
                    u.setValue(i),
                    d.setValue(f),
                    ei(e, S, c),
                    _s(e, S, b)
                }
                i = r
            }
            if (p > 128)
                for (var T = Math.round(Math.log2(128)), w = Math.round(Math.log2(p)) - T, M = 0; M < w; M++) {
                    p = .5 * i.width;
                    var A = 0 === n ? 1 : Math.pow(2, Math.round(Math.log2(g[0]) + 2 * (w - M)));
                    (r = new Mi(e,{
                        cubemap: !0,
                        type: o,
                        format: m,
                        width: p,
                        height: p,
                        mipmaps: !1
                    })).name = "prefiltered-cube";
                    for (var C = 0; C < 6; C++) {
                        var E = new ms({
                            colorBuffer: r,
                            face: C,
                            depth: !1
                        });
                        f[0] = C,
                        f[1] = A,
                        f[2] = p,
                        f[3] = h ? 3 : 0,
                        u.setValue(i),
                        d.setValue(f),
                        ei(e, E, c),
                        M === w - 1 && a && _s(e, E, C)
                    }
                    i = r
                }
            t.sourceCubemap = i;
            var P = null;
            if (!h && t.filteredFixedRgbm) {
                (r = new Mi(e,{
                    cubemap: !0,
                    type: Be,
                    format: 7,
                    width: p,
                    height: p,
                    mipmaps: !1
                })).name = "prefiltered-cube";
                for (var R = 0; R < 6; R++) {
                    var I = new ms({
                        colorBuffer: r,
                        face: R,
                        depth: !1
                    });
                    f[0] = R,
                    f[3] = 2,
                    u.setValue(i),
                    d.setValue(f),
                    ei(e, I, c),
                    _s(e, I, R)
                }
                P = r
            }
            var L = 0 === n ? 1 : 2048
              , D = 0 === n ? 0 : -1;
            _[D] = [];
            for (var k = 0; k < 7; k++)
                for (var O = D; O < _.length; O++)
                    null != _[O] && (_[O][k] = new Mi(e,{
                        cubemap: !0,
                        type: O < 2 ? o : Be,
                        format: O < 2 ? m : 7,
                        fixCubemapSeams: 1 === O || 3 === O,
                        width: v[k],
                        height: v[k],
                        mipmaps: !1
                    }),
                    _[O][k].name = "prefiltered-cube");
            for (var F = D; F < _.length; F++)
                if (null != _[F]) {
                    if (F > 1 && h) {
                        _[F] = _[F - 2];
                        continue
                    }
                    for (var B = 0; B < 7; B++)
                        for (var N = 0; N < 6; N++) {
                            var U = new ms({
                                colorBuffer: _[F][B],
                                face: N,
                                depth: !1
                            });
                            f[0] = N,
                            f[1] = F < 0 ? L : g[B],
                            f[2] = v[B],
                            f[3] = h ? 3 : F,
                            u.setValue(0 === B ? i : 0 === n ? _[0][B - 1] : _[-1][B - 1]),
                            d.setValue(f),
                            ei(e, U, l),
                            a && _s(e, U, N)
                        }
                }
            if (t.filtered = _[0],
            a && t.singleFilteredFixed) {
                var z = [i].concat(t.filteredFixed)
                  , V = new Mi(e,{
                    cubemap: !0,
                    type: o,
                    fixCubemapSeams: !0,
                    format: m,
                    width: 128,
                    height: 128,
                    addressU: 1,
                    addressV: 1
                });
                V.name = "prefiltered-cube";
                for (var G = 0; G < z.length; G++)
                    V._levels[G] = z[G]._levels[0];
                V.upload(),
                t.singleFilteredFixed = V
            }
            if (a && t.singleFilteredFixedRgbm && t.filteredFixedRgbm) {
                var W = [P].concat(t.filteredFixedRgbm)
                  , H = new Mi(e,{
                    cubemap: !0,
                    type: Be,
                    fixCubemapSeams: !0,
                    format: 7,
                    width: 128,
                    height: 128,
                    addressU: 1,
                    addressV: 1
                });
                H.name = "prefiltered-cube";
                for (var X = 0; X < W.length; X++)
                    H._levels[X] = W[X]._levels[0];
                H.upload(),
                t.singleFilteredFixedRgbm = H
            }
        }
    }
    ,
    t.programlib = In,
    t.registerScript = Tv,
    t.reprojectTexture = Ss,
    t.revision = o,
    t.scene = Py,
    t.script = Rc,
    t.semanticToLocation = Ye,
    t.shFromCubemap = ys,
    t.shaderChunks = ni,
    t.shape = Ty,
    t.string = U,
    t.time = Sy,
    t.type = h,
    t.typedArrayIndexFormats = qe,
    t.typedArrayIndexFormatsByteSize = [1, 2, 4],
    t.typedArrayToType = je,
    t.typedArrayTypes = He,
    t.typedArrayTypesByteSize = Xe,
    t.version = r,
    Object.defineProperty(t, "__esModule", {
        value: !0
    })
}
));
